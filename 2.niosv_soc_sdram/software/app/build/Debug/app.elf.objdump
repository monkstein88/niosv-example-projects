
app.elf:     file format elf32-littleriscv
app.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000036c

Program Header:
0x70000003 off    0x00009f7a vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000025 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00007410 memsz 0x00007410 flags r-x
    LOAD off    0x00008430 vaddr 0x00007430 paddr 0x00008f68 align 2**12
         filesz 0x00001b38 memsz 0x00001b38 flags rw-
    LOAD off    0x00000aa0 vaddr 0x0000aaa0 paddr 0x0000aaa0 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000002e8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007068  00000308  00000308  00001308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c0  00007370  00007370  00008370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b38  00007430  00008f68  00008430  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000118  0000aaa0  0000aaa0  0000aaa0  2**3
                  ALLOC
  6 .EXT_SDRAM_PROGMEM 00000000  0000abb8  0000abb8  00009f68  2**0
                  CONTENTS
  7 .comment      00000012  00000000  00000000  00009f68  2**0
                  CONTENTS, READONLY
  8 .riscv.attributes 00000025  00000000  00000000  00009f7a  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000628  00000000  00000000  00009fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00008665  00000000  00000000  0000a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035db  00000000  00000000  00012c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00003f13  00000000  00000000  00016208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000ee8  00000000  00000000  0001a11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00001675  00000000  00000000  0001b004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000014da  00000000  00000000  0001c679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000020  00000000  00000000  0001db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000070  00000000  00000000  0001db78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000308 l    d  .text	00000000 .text
00007370 l    d  .rodata	00000000 .rodata
00007430 l    d  .rwdata	00000000 .rwdata
0000aaa0 l    d  .bss	00000000 .bss
0000abb8 l    d  .EXT_SDRAM_PROGMEM	00000000 .EXT_SDRAM_PROGMEM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.S.obj
00000414 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 machine_trap.S.obj
00000020 l       .exceptions	00000000 save_registers
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000418 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00007430 l     O .rwdata	00001060 JTAG_UART_DBG
00008490 l     O .rwdata	000000c4 UART_SERIAL_COM
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000008d0 l     F .text	00000238 altera_avalon_jtag_uart_irq
00000b08 l     F .text	000000bc altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00001368 l     F .text	000000a8 altera_avalon_uart_irq
00001410 l     F .text	000000e8 altera_avalon_uart_rxirq
000014f8 l     F .text	00000158 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000016a8 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000018e0 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001cf0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001d58 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000020f8 l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 intel_niosv_irq.c
00000000 l    df *ABS*	00000000 mtimer.c
00000000 l    df *ABS*	00000000 lib_a-atexit.o
00000000 l    df *ABS*	00000000 lib_a-exit.o
00000000 l    df *ABS*	00000000 lib_a-fflush.o
00000000 l    df *ABS*	00000000 lib_a-findfp.o
00002c14 l     F .text	00000040 __fp_lock
00002c54 l     F .text	00000040 __fp_unlock
00000000 l    df *ABS*	00000000 lib_a-freer.o
00000000 l    df *ABS*	00000000 lib_a-fwalk.o
00000000 l    df *ABS*	00000000 lib_a-impure.o
00008700 l     O .rwdata	00000428 impure_data
00000000 l    df *ABS*	00000000 lib_a-lock.o
00000000 l    df *ABS*	00000000 lib_a-mallocr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 lib_a-mlock.o
00000000 l    df *ABS*	00000000 lib_a-puts.o
00000000 l    df *ABS*	00000000 lib_a-reent.o
00000000 l    df *ABS*	00000000 lib_a-sbrkr.o
00000000 l    df *ABS*	00000000 lib_a-stdio.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-sysclose.o
00000000 l    df *ABS*	00000000 lib_a-sysopen.o
00000000 l    df *ABS*	00000000 lib_a-writer.o
00000000 l    df *ABS*	00000000 lib_a-__atexit.o
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
000048cc l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 lib_a-closer.o
00000000 l    df *ABS*	00000000 lib_a-fclose.o
00000000 l    df *ABS*	00000000 lib_a-fini.o
00000000 l    df *ABS*	00000000 lib_a-fvwrite.o
00000000 l    df *ABS*	00000000 lib_a-lseekr.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memmove-stub.o
00000000 l    df *ABS*	00000000 lib_a-openr.o
00000000 l    df *ABS*	00000000 lib_a-readr.o
00000000 l    df *ABS*	00000000 lib_a-reallocr.o
00000000 l    df *ABS*	00000000 lib_a-wsetup.o
00000000 l    df *ABS*	00000000 lib_a-makebuf.o
00000000 l    df *ABS*	00000000 lib_a-fstatr.o
00000000 l    df *ABS*	00000000 lib_a-isattyr.o
00000000 l    df *ABS*	00000000 muldi3.o
00000000 l    df *ABS*	00000000 div.o
00000000 l    df *ABS*	00000000 alt_close.c
00005d58 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00005ec4 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00005fd0 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00006118 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
00006244 l     F .text	0000004c alt_get_errno
00006290 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
000064e4 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00008f64 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00006730 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 lib_a-stack_protector.o
00000000 l    df *ABS*	00000000 lib_a-sysfstat.o
00000000 l    df *ABS*	00000000 lib_a-syswrite.o
00000000 l    df *ABS*	00000000 lib_a-signal.o
00000000 l    df *ABS*	00000000 lib_a-signalr.o
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
00007228 l     F .text	0000004c alt_get_errno
0000aaa8 g     O .bss	00000004 alt_instruction_exception_handler
00006c3c g     F .text	0000000c .hidden __stack_chk_fail_local
00005c28 g     F .text	00000058 _isatty_r
000004e8 g     F .text	00000088 alt_main
000041f0 g     F .text	00000094 cleanup_glue
00007208 g     F .text	00000020 _getpid
000040b8 g     F .text	0000012c _puts_r
0000ab10 g     O .bss	00000080 alt_irq
00004fbc g     F .text	00000064 _lseek_r
00008f68 g       *ABS*	00000000 __flash_rwdata_start
0000abb8 g       *ABS*	00000000 __alt_heap_start
000071a4 g     F .text	00000060 _kill_r
00009730 g       *ABS*	00000000 __global_pointer$
0000aaf0 g     O .bss	00000001 __lock___atexit_recursive_mutex
00006ce4 g     F .text	00000090 _signal_r
000044e4 g     F .text	00000078 __sseek
00002d20 g     F .text	000001b0 __sinit
00002c94 g     F .text	00000078 __sfmoreglue
00007430 g       *ABS*	00000000 __tls_base
000040ac g     F .text	0000000c __malloc_unlock
0000aad8 g     O .bss	00000001 __lock___arc4random_mutex
000050e4 g     F .text	0000011c memmove
00002d0c g     F .text	00000014 _cleanup
0000ab0c g     O .bss	00000004 __stack_chk_guard
00008f60 g     O .rwdata	00000004 __atexit_recursive_mutex
00003658 g     F .text	00000004 __retarget_lock_close
00000000 g     F .entry	00000004 __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005bc8 g     F .text	00000060 _fstat_r
0000ab08 g     O .bss	00000004 errno
00004454 g     F .text	00000008 __seofread
0000aab0 g     O .bss	00000004 alt_argv
00000570 g     F .text	00000034 usleep
0000857c g     O .rwdata	00000180 alt_fd_list
00006880 g     F .text	00000120 alt_find_dev
00003e20 g     F .text	000001a4 memcpy
00002c08 g     F .text	0000000c _cleanup_r
000026e4 g     F .text	000000ac alt_niosv_timer_sc_isr
000021d4 g     F .text	00000078 alt_io_redirect
000041e4 g     F .text	0000000c puts
00007370 g       *ABS*	00000000 __fini_array_end
00005cac g     F .text	00000048 .hidden __hidden___udivsi3
00000d30 g     F .text	0000022c altera_avalon_jtag_uart_read
00005cac g     F .text	00000048 .hidden __udivsi3
00006d74 g     F .text	000000c4 _raise_r
00005f10 g     F .text	000000c0 _fstat
000001b4 g     F .exceptions	00000154 handle_trap
0000ab04 g     O .bss	00000004 __malloc_top_pad
00007204 g     F .text	00000004 _getpid_r
0000aab8 g     O .bss	00000004 __dso_handle
00004b1c g     F .text	000004a0 __sfvwrite_r
00006e38 g     F .text	000000e0 __sigtramp_r
000043a0 g     F .text	00000058 _sbrk_r
00005264 g     F .text	00000064 _read_r
00008f44 g     O .rwdata	00000004 alt_max_fd
0000493c g     F .text	00000178 _fclose_r
00002b40 g     F .text	000000c8 fflush
0000ab00 g     O .bss	00000004 __malloc_max_sbrked_mem
00006c48 g     F .text	0000001c __stack_chk_init
0000aae4 g     O .bss	00000001 __lock___env_recursive_mutex
0000601c g     F .text	000000fc _isatty
0000aaf8 g     O .bss	00000001 __lock___sinit_recursive_mutex
0000742c g     O .rodata	00000004 _global_impure_ptr
000052c8 g     F .text	00000558 _realloc_r
0000abb8 g       *ABS*	00000000 __bss_end
00001f7c g     F .text	0000017c alt_iic_isr_register
00002358 g     F .text	00000160 alt_tick
0000637c g     F .text	00000168 _open
00006638 g     F .text	000000f8 _sbrk
00006ba4 g     F .text	00000098 __stack_chk_fail
000012b4 g     F .text	000000b4 altera_avalon_uart_init
00007430 g       *ABS*	00000000 __tbss_start
00002790 g     F .text	0000003c alt_niosv_mtimecmp_interrupt_init
0000305c g     F .text	0000002c __fp_lock_all
000022c0 g     F .text	00000098 alt_alarm_stop
000000c0 g     F .exceptions	000000f4 alt_irq_handler
00008554 g     O .rwdata	00000028 alt_dev_null
00004ac0 g     F .text	0000005c __libc_fini_array
00002598 g     F .text	00000084 alt_niosv_mtime_get
00004284 g     F .text	0000011c _reclaim_reent
00001cd4 g     F .text	0000001c alt_dcache_flush_all
0000aae8 g     O .bss	00000001 __lock___malloc_recursive_mutex
00008f68 g       *ABS*	00000000 __ram_rwdata_end
00008f3c g     O .rwdata	00000008 alt_dev_list
00006c74 g     F .text	00000014 write
00002574 g     F .text	00000024 alt_timestamp_freq
00007430 g       *ABS*	00000000 __ram_rodata_end
00006c64 g     F .text	00000010 fstat
00005cf4 g     F .text	00000010 .hidden __umodsi3
0000abb8 g       *ABS*	00000000 end
00001d1c g     F .text	0000003c alt_dev_reg
0000367c g     F .text	00000004 __retarget_lock_release_recursive
0000192c g     F .text	000001b4 altera_avalon_uart_write
00003670 g     F .text	00000008 __retarget_lock_try_acquire_recursive
00000810 g     F .text	000000c0 altera_avalon_jtag_uart_init
02000000 g       *ABS*	00000000 __alt_stack_pointer
000011fc g     F .text	00000064 altera_avalon_uart_write_fd
00001260 g     F .text	00000054 altera_avalon_uart_close_fd
00000f5c g     F .text	0000023c altera_avalon_jtag_uart_write
0000302c g     F .text	0000000c __sfp_lock_acquire
00005020 g     F .text	000000c4 memchr
000031f0 g     F .text	00000308 _free_r
00004790 g     F .text	0000013c __call_exitprocs
00008f58 g     O .rwdata	00000004 __malloc_sbrk_base
0000036c g     F .text	000000ac _start
0000aac0 g     O .bss	00000004 _alt_tick_rate
00003668 g     F .text	00000008 __retarget_lock_try_acquire
00006164 g     F .text	000000e0 _lseek
0000aac8 g     O .bss	00000008 _alt_nticks
00006fd8 g     F .text	00000094 signal
00002678 g     F .text	0000006c alt_niosv_mtimecmp_get
000005dc g     F .text	000000c0 alt_sys_init
00005200 g     F .text	00000064 _open_r
00007430 g       *ABS*	00000000 __tdata_source
000046a8 g     F .text	000000e8 __register_exitproc
00000000 g       *ABS*	00000000 __alt_mem_EXT_SDRAM_PROGMEM
00000bc4 g     F .text	0000006c altera_avalon_jtag_uart_close
00005c80 g     F .text	00000024 .hidden __mulsi3
00007430 g       *ABS*	00000000 __ram_rwdata_start
00007370 g       *ABS*	00000000 __ram_rodata_start
0000ab90 g     O .bss	00000028 __malloc_current_mallinfo
0000aad0 g     O .bss	00000008 alt_niosv_timestamp_offset
0000aaa4 g     O .bss	00000004 alt_niosv_timer_interrupt_handler
0000069c g     F .text	00000064 altera_avalon_jtag_uart_read_fd
00006adc g     F .text	000000c8 alt_get_fd
00001c4c g     F .text	00000088 alt_busy_sleep
000048e4 g     F .text	00000058 _close_r
00000764 g     F .text	00000054 altera_avalon_jtag_uart_close_fd
0000abb8 g       *ABS*	00000000 __alt_stack_base
000007b8 g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
0000365c g     F .text	00000004 __retarget_lock_close_recursive
00005820 g     F .text	00000140 __swsetup_r
00002ed0 g     F .text	0000015c __sfp
00008b28 g     O .rwdata	00000408 __malloc_av_
00003050 g     F .text	0000000c __sinit_lock_release
000043f8 g     F .text	0000005c __sread
000069a0 g     F .text	0000013c alt_find_file
00001da4 g     F .text	000000a8 alt_dev_llist_insert
000040a0 g     F .text	0000000c __malloc_lock
00007370 g       *ABS*	00000000 __fini_array_start
00002a60 g     F .text	000000e0 _fflush_r
00003664 g     F .text	00000004 __retarget_lock_acquire_recursive
0000aaa0 g       *ABS*	00000000 __bss_start
00007430 g       *ABS*	00000000 __tdata_start
00007430 g       *ABS*	00000000 __tdata_end
00003fc4 g     F .text	000000dc memset
00000308 g     F .text	00000064 main
0000aab4 g     O .bss	00000004 alt_envp
0000aafc g     O .bss	00000004 __malloc_max_total_mem
00000700 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
00003654 g     F .text	00000004 __retarget_lock_init_recursive
0000455c g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00004ab4 g     F .text	0000000c fclose
000024dc g     F .text	00000040 alt_timestamp_start
00007370 g       *ABS*	00000000 __init_array_end
00003680 g     F .text	000007a0 _malloc_r
00008f48 g     O .rwdata	00000004 alt_errno
0000706c g     F .text	0000005c _init_signal
000034f8 g     F .text	000000a4 _fwalk
0000abb8 g       *ABS*	00000000 __alt_stack_limit
00005ca4 g     F .text	00000084 .hidden __divsi3
000030b4 g     F .text	0000013c _malloc_trim_r
00007370 g       *ABS*	00000000 __flash_rodata_start
00003650 g     F .text	00000004 __retarget_lock_init
000005a4 g     F .text	00000038 alt_irq_init
0000224c g     F .text	00000074 alt_release_fd
000027cc g     F .text	00000014 atexit
00004644 g     F .text	00000064 _write_r
00008f54 g     O .rwdata	00000004 _impure_ptr
0000aaac g     O .bss	00000004 alt_argc
00002814 g     F .text	0000024c __sflush_r
00001eac g     F .text	00000060 _do_dtors
00003088 g     F .text	0000002c __fp_unlock_all
00008f34 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000251c g     F .text	00000058 alt_timestamp
00005af0 g     F .text	000000d8 __swhatbuf_r
00001f28 g     F .text	00000054 alt_ic_isr_register
00008f30 g     O .rwdata	00000004 alt_stack_limit_value
00000020 g       .exceptions	00000000 trap_vector
0000677c g     F .text	00000104 _write
00008f68 g       *ABS*	00000000 _edata
00001198 g     F .text	00000064 altera_avalon_uart_read_fd
0000abb8 g       *ABS*	00000000 _end
00000308 g       *ABS*	00000000 __ram_exceptions_end
0000aaec g     O .bss	00000001 __lock___at_quick_exit_mutex
00000c30 g     F .text	00000100 altera_avalon_jtag_uart_ioctl
000024b8 g     F .text	00000024 intel_niosv_irq_init
0000445c g     F .text	00000088 __swrite
00008f5c g     O .rwdata	00000004 __malloc_trim_threshold
000027e0 g     F .text	00000034 exit
0000359c g     F .text	000000b4 _fwalk_reent
00005d28 g     F .text	00000030 .hidden __modsi3
00007274 g     F .text	000000f4 _kill
02000000 g       *ABS*	00000000 __alt_data_end
00007430 g       *ABS*	00000000 __tbss_end
00003038 g     F .text	0000000c __sfp_lock_release
00006530 g     F .text	00000108 _read
00007368 g       *ABS*	00000000 __init_array_start
00003660 g     F .text	00000004 __retarget_lock_acquire
00003678 g     F .text	00000004 __retarget_lock_release
00001650 g     F .text	00000058 altera_avalon_uart_close
00005e84 g     F .text	00000040 _exit
00001ae0 g     F .text	0000016c alt_alarm_start
0000aadc g     O .bss	00000001 __lock___dd_hash_mutex
00005960 g     F .text	00000190 __smakebuf_r
0000aae0 g     O .bss	00000001 __lock___tz_mutex
00004564 g     F .text	0000008c strlen
00006c88 g     F .text	0000005c _init_signal_r
000045fc g     F .text	00000048 open
00001f0c g     F .text	0000001c alt_icache_flush_all
0000261c g     F .text	0000005c alt_niosv_mtimecmp_set
000016f4 g     F .text	000001ec altera_avalon_uart_read
00008f4c g     O .rwdata	00000008 alt_alarm_list
00001e4c g     F .text	00000060 _do_ctors
000070c8 g     F .text	000000dc __sigtramp
000045f0 g     F .text	0000000c close
0000047c g     F .text	0000006c alt_load
0000aaa0 g     O .bss	00000004 alt_niosv_software_interrupt_handler
0000aaf4 g     O .bss	00000001 __lock___sfp_recursive_mutex
00006f18 g     F .text	000000c0 raise
00005da4 g     F .text	000000e0 _close
00003044 g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */

    /* Jump to the _start entry point in the .text section. */
    tail _start
   0:	36c0006f          	j	36c <_start>
	...

Disassembly of section .exceptions:

00000020 <trap_vector>:
    /* Save caller-saved registers on the stack */

#if __riscv_flen == 32 // rv32if
    addi sp, sp, -36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
    addi sp, sp, -16 * 4
  20:	fc010113          	addi	sp,sp,-64
#else // rv32e (16-bit)
    addi sp, sp, -10 * 4
#endif

    /* rv32e (16-bit), rv32i and rv32if */
    sw ra,  0 * 4(sp)
  24:	00112023          	sw	ra,0(sp)
    sw t0,  1 * 4(sp)
  28:	00512223          	sw	t0,4(sp)
    sw t1,  2 * 4(sp)
  2c:	00612423          	sw	t1,8(sp)
    sw t2,  3 * 4(sp)
  30:	00712623          	sw	t2,12(sp)
    sw a0,  4 * 4(sp)
  34:	00a12823          	sw	a0,16(sp)
    sw a1,  5 * 4(sp)
  38:	00b12a23          	sw	a1,20(sp)
    sw a2,  6 * 4(sp)
  3c:	00c12c23          	sw	a2,24(sp)
    sw a3,  7 * 4(sp)
  40:	00d12e23          	sw	a3,28(sp)
    sw a4,  8 * 4(sp)
  44:	02e12023          	sw	a4,32(sp)
    sw a5,  9 * 4(sp)
  48:	02f12223          	sw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32 
    sw a6, 10 * 4(sp)
  4c:	03012423          	sw	a6,40(sp)
    sw a7, 11 * 4(sp)
  50:	03112623          	sw	a7,44(sp)
    sw t3, 12 * 4(sp)
  54:	03c12823          	sw	t3,48(sp)
    sw t4, 13 * 4(sp)
  58:	03d12a23          	sw	t4,52(sp)
    sw t5, 14 * 4(sp)
  5c:	03e12c23          	sw	t5,56(sp)
    sw t6, 15 * 4(sp)
  60:	03f12e23          	sw	t6,60(sp)
    fsw fa6, 34 * 4(sp)
    fsw fa7, 35 * 4(sp)
#endif
    
    /* Call handle_trap to dispatch the correct handler, if available */
    csrr a0, mcause
  64:	34202573          	csrr	a0,mcause
    csrr a1, mepc
  68:	341025f3          	csrr	a1,mepc
    csrr a2, mtval
  6c:	34302673          	csrr	a2,mtval
    jal handle_trap
  70:	144000ef          	jal	ra,1b4 <handle_trap>
    csrw mepc, a0
  74:	34151073          	csrw	mepc,a0

    /* Restore caller-saved registers */

    /* rv32e (16-bit), rv32i and rv32if */
    lw ra,  0 * 4(sp)
  78:	00012083          	lw	ra,0(sp)
    lw t0,  1 * 4(sp)
  7c:	00412283          	lw	t0,4(sp)
    lw t1,  2 * 4(sp)
  80:	00812303          	lw	t1,8(sp)
    lw t2,  3 * 4(sp)
  84:	00c12383          	lw	t2,12(sp)
    lw a0,  4 * 4(sp)
  88:	01012503          	lw	a0,16(sp)
    lw a1,  5 * 4(sp)
  8c:	01412583          	lw	a1,20(sp)
    lw a2,  6 * 4(sp)
  90:	01812603          	lw	a2,24(sp)
    lw a3,  7 * 4(sp)
  94:	01c12683          	lw	a3,28(sp)
    lw a4,  8 * 4(sp)
  98:	02012703          	lw	a4,32(sp)
    lw a5,  9 * 4(sp)
  9c:	02412783          	lw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32	
    lw a6, 10 * 4(sp)
  a0:	02812803          	lw	a6,40(sp)
    lw a7, 11 * 4(sp)
  a4:	02c12883          	lw	a7,44(sp)
    lw t3, 12 * 4(sp)
  a8:	03012e03          	lw	t3,48(sp)
    lw t4, 13 * 4(sp)
  ac:	03412e83          	lw	t4,52(sp)
    lw t5, 14 * 4(sp)
  b0:	03812f03          	lw	t5,56(sp)
    lw t6, 15 * 4(sp)
  b4:	03c12f83          	lw	t6,60(sp)
#endif

#if __riscv_flen == 32 // rv32if
    addi sp, sp, 36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
	addi sp, sp, 16 * 4
  b8:	04010113          	addi	sp,sp,64
    lw s0, 0(sp)
    lw s1, 4(sp)
    addi sp, sp, 8
#endif

    mret
  bc:	30200073          	mret

000000c0 <alt_irq_handler>:
 * This means that if there is never a call to alt_irq_register() then
 * this function will not get linked in to the executable. This is acceptable
 * since if no handler is ever registered, then an interrupt can never occur.
 */
void alt_irq_handler (void)
{
  c0:	fd010113          	addi	sp,sp,-48
  c4:	02112623          	sw	ra,44(sp)
  c8:	02812423          	sw	s0,40(sp)
  cc:	03010413          	addi	s0,sp,48
    alt_u32 i;

    /*
     * Notify the operating system that we are at interrupt level.
     */  
    ALT_OS_INT_ENTER();
  d0:	00000013          	nop
{
#if ALT_HAS_IRQ_SUPPORT
    alt_u32 active;
    alt_u32 enabled;

    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
  d4:	344027f3          	csrr	a5,mip
  d8:	fef42023          	sw	a5,-32(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
  dc:	304027f3          	csrr	a5,mie
  e0:	fef42223          	sw	a5,-28(s0)

    // Since this is used by alt_irq_handler, we want to only process the upper 16-bits
    // --> the interrupt lines connected via Platform Designer...
    return (active & enabled) >> 16;
  e4:	fe042703          	lw	a4,-32(s0)
  e8:	fe442783          	lw	a5,-28(s0)
  ec:	00f777b3          	and	a5,a4,a5
  f0:	0107d793          	srli	a5,a5,0x10
     * reduced by finding out which interrupts are pending as late as possible.
     * Consider the case where the high priority interupt is asserted during
     * the interrupt entry sequence for a lower priority interrupt to see why
     * this is the case.
     */
    active = alt_irq_pending();
  f4:	fcf42a23          	sw	a5,-44(s0)

    do
    {
        i = 0;
  f8:	fc042e23          	sw	zero,-36(s0)
        mask = 1;
  fc:	00100793          	li	a5,1
 100:	fcf42c23          	sw	a5,-40(s0)
         * called to clear the interrupt condition.
         */

        do
        {
            if (active & mask)
 104:	fd442703          	lw	a4,-44(s0)
 108:	fd842783          	lw	a5,-40(s0)
 10c:	00f777b3          	and	a5,a4,a5
 110:	06078263          	beqz	a5,174 <alt_irq_handler+0xb4>
            {
                alt_irq[i].handler(alt_irq[i].context); 
 114:	0000b7b7          	lui	a5,0xb
 118:	b1078713          	addi	a4,a5,-1264 # ab10 <alt_irq>
 11c:	fdc42783          	lw	a5,-36(s0)
 120:	00379793          	slli	a5,a5,0x3
 124:	00f707b3          	add	a5,a4,a5
 128:	0007a703          	lw	a4,0(a5)
 12c:	0000b7b7          	lui	a5,0xb
 130:	b1078693          	addi	a3,a5,-1264 # ab10 <alt_irq>
 134:	fdc42783          	lw	a5,-36(s0)
 138:	00379793          	slli	a5,a5,0x3
 13c:	00f687b3          	add	a5,a3,a5
 140:	0047a783          	lw	a5,4(a5)
 144:	00078513          	mv	a0,a5
 148:	000700e7          	jalr	a4
                break;
 14c:	00000013          	nop
    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
 150:	344027f3          	csrr	a5,mip
 154:	fef42423          	sw	a5,-24(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
 158:	304027f3          	csrr	a5,mie
 15c:	fef42623          	sw	a5,-20(s0)
    return (active & enabled) >> 16;
 160:	fe842703          	lw	a4,-24(s0)
 164:	fec42783          	lw	a5,-20(s0)
 168:	00f777b3          	and	a5,a4,a5
 16c:	0107d793          	srli	a5,a5,0x10
 170:	0200006f          	j	190 <alt_irq_handler+0xd0>
            }
            
            mask <<= 1;
 174:	fd842783          	lw	a5,-40(s0)
 178:	00179793          	slli	a5,a5,0x1
 17c:	fcf42c23          	sw	a5,-40(s0)
            i++;
 180:	fdc42783          	lw	a5,-36(s0)
 184:	00178793          	addi	a5,a5,1
 188:	fcf42e23          	sw	a5,-36(s0)
            if (active & mask)
 18c:	f79ff06f          	j	104 <alt_irq_handler+0x44>
            
        } while (1);

        active = alt_irq_pending();
 190:	fcf42a23          	sw	a5,-44(s0)
    
    } while (active);
 194:	fd442783          	lw	a5,-44(s0)
 198:	f60790e3          	bnez	a5,f8 <alt_irq_handler+0x38>

    /*
     * Notify the operating system that interrupt processing is complete.
     */ 

    ALT_OS_INT_EXIT();
 19c:	00000013          	nop
}
 1a0:	00000013          	nop
 1a4:	02c12083          	lw	ra,44(sp)
 1a8:	02812403          	lw	s0,40(sp)
 1ac:	03010113          	addi	sp,sp,48
 1b0:	00008067          	ret

000001b4 <handle_trap>:
{
 1b4:	fd010113          	addi	sp,sp,-48
 1b8:	02112623          	sw	ra,44(sp)
 1bc:	02812423          	sw	s0,40(sp)
 1c0:	03010413          	addi	s0,sp,48
 1c4:	fca42e23          	sw	a0,-36(s0)
 1c8:	fcb42c23          	sw	a1,-40(s0)
 1cc:	fcc42a23          	sw	a2,-44(s0)
    is_irq = (cause & NIOSV_MCAUSE_INTERRUPT_MASK);
 1d0:	fdc42703          	lw	a4,-36(s0)
 1d4:	800007b7          	lui	a5,0x80000
 1d8:	00f777b3          	and	a5,a4,a5
 1dc:	fef42223          	sw	a5,-28(s0)
    exception_code = (cause & ~NIOSV_MCAUSE_INTERRUPT_MASK);
 1e0:	fdc42703          	lw	a4,-36(s0)
 1e4:	800007b7          	lui	a5,0x80000
 1e8:	fff7c793          	not	a5,a5
 1ec:	00f777b3          	and	a5,a4,a5
 1f0:	fef42423          	sw	a5,-24(s0)
    if (is_irq) {
 1f4:	fe442783          	lw	a5,-28(s0)
 1f8:	08078863          	beqz	a5,288 <handle_trap+0xd4>
        switch (exception_code) {
 1fc:	fe842703          	lw	a4,-24(s0)
 200:	00300793          	li	a5,3
 204:	04f70063          	beq	a4,a5,244 <handle_trap+0x90>
 208:	fe842703          	lw	a4,-24(s0)
 20c:	00700793          	li	a5,7
 210:	06f71263          	bne	a4,a5,274 <handle_trap+0xc0>
                if (alt_niosv_timer_interrupt_handler) {
 214:	0000b7b7          	lui	a5,0xb
 218:	aa47a783          	lw	a5,-1372(a5) # aaa4 <alt_niosv_timer_interrupt_handler>
 21c:	0c078063          	beqz	a5,2dc <handle_trap+0x128>
                    ALT_OS_INT_ENTER();
 220:	00000013          	nop
                    alt_niosv_timer_interrupt_handler(cause, epc, tval);
 224:	0000b7b7          	lui	a5,0xb
 228:	aa47a783          	lw	a5,-1372(a5) # aaa4 <alt_niosv_timer_interrupt_handler>
 22c:	fd442603          	lw	a2,-44(s0)
 230:	fd842583          	lw	a1,-40(s0)
 234:	fdc42503          	lw	a0,-36(s0)
 238:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 23c:	00000013          	nop
                break;
 240:	09c0006f          	j	2dc <handle_trap+0x128>
                if (alt_niosv_software_interrupt_handler) {
 244:	0000b7b7          	lui	a5,0xb
 248:	aa07a783          	lw	a5,-1376(a5) # aaa0 <alt_niosv_software_interrupt_handler>
 24c:	08078c63          	beqz	a5,2e4 <handle_trap+0x130>
                    ALT_OS_INT_ENTER();
 250:	00000013          	nop
                    alt_niosv_software_interrupt_handler(cause, epc, tval);
 254:	0000b7b7          	lui	a5,0xb
 258:	aa07a783          	lw	a5,-1376(a5) # aaa0 <alt_niosv_software_interrupt_handler>
 25c:	fd442603          	lw	a2,-44(s0)
 260:	fd842583          	lw	a1,-40(s0)
 264:	fdc42503          	lw	a0,-36(s0)
 268:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 26c:	00000013          	nop
                break;
 270:	0740006f          	j	2e4 <handle_trap+0x130>
                if (exception_code >= 16) {
 274:	fe842703          	lw	a4,-24(s0)
 278:	00f00793          	li	a5,15
 27c:	06e7f863          	bgeu	a5,a4,2ec <handle_trap+0x138>
                    alt_irq_handler();
 280:	e41ff0ef          	jal	ra,c0 <alt_irq_handler>
                break;
 284:	0680006f          	j	2ec <handle_trap+0x138>
        if (alt_instruction_exception_handler) {
 288:	0000b7b7          	lui	a5,0xb
 28c:	aa87a783          	lw	a5,-1368(a5) # aaa8 <alt_instruction_exception_handler>
 290:	04078263          	beqz	a5,2d4 <handle_trap+0x120>
            alt_exception_result handler_rc = alt_instruction_exception_handler(exception_code, epc, tval);
 294:	0000b7b7          	lui	a5,0xb
 298:	aa87a783          	lw	a5,-1368(a5) # aaa8 <alt_instruction_exception_handler>
 29c:	fe842703          	lw	a4,-24(s0)
 2a0:	fd442603          	lw	a2,-44(s0)
 2a4:	fd842583          	lw	a1,-40(s0)
 2a8:	00070513          	mv	a0,a4
 2ac:	000780e7          	jalr	a5
 2b0:	fea42623          	sw	a0,-20(s0)
            epc = (handler_rc == NIOSV_EXCEPTION_RETURN_REISSUE_INST) ? epc : (epc + 4);
 2b4:	fec42783          	lw	a5,-20(s0)
 2b8:	00078863          	beqz	a5,2c8 <handle_trap+0x114>
 2bc:	fd842783          	lw	a5,-40(s0)
 2c0:	00478793          	addi	a5,a5,4
 2c4:	0080006f          	j	2cc <handle_trap+0x118>
 2c8:	fd842783          	lw	a5,-40(s0)
 2cc:	fcf42c23          	sw	a5,-40(s0)
 2d0:	0200006f          	j	2f0 <handle_trap+0x13c>
            NIOSV_EBREAK();
 2d4:	00100073          	ebreak
 2d8:	0180006f          	j	2f0 <handle_trap+0x13c>
                break;
 2dc:	00000013          	nop
 2e0:	0100006f          	j	2f0 <handle_trap+0x13c>
                break;
 2e4:	00000013          	nop
 2e8:	0080006f          	j	2f0 <handle_trap+0x13c>
                break;
 2ec:	00000013          	nop
    return epc;
 2f0:	fd842783          	lw	a5,-40(s0)
}
 2f4:	00078513          	mv	a0,a5
 2f8:	02c12083          	lw	ra,44(sp)
 2fc:	02812403          	lw	s0,40(sp)
 300:	03010113          	addi	sp,sp,48
 304:	00008067          	ret

Disassembly of section .text:

00000308 <main>:
#include <altera_avalon_pio_regs.h>



int main(void)
{
     308:	fe010113          	addi	sp,sp,-32
     30c:	00112e23          	sw	ra,28(sp)
     310:	00812c23          	sw	s0,24(sp)
     314:	02010413          	addi	s0,sp,32

    printf("\nHello from NIOS-V running from external SDRAM on DE0-NANO!\n");
     318:	000077b7          	lui	a5,0x7
     31c:	37078513          	addi	a0,a5,880 # 7370 <__fini_array_end>
     320:	6c5030ef          	jal	ra,41e4 <puts>
    fflush(stdout);
     324:	8241a783          	lw	a5,-2012(gp) # 8f54 <_impure_ptr>
     328:	0087a783          	lw	a5,8(a5)
     32c:	00078513          	mv	a0,a5
     330:	011020ef          	jal	ra,2b40 <fflush>
	uint8_t count = 0;
     334:	fe0405a3          	sb	zero,-21(s0)
    while(1)
    {
    	IOWR_ALTERA_AVALON_PIO_DATA(GPO2_LEDG_BASE, count++);
     338:	feb44783          	lbu	a5,-21(s0)
     33c:	00178713          	addi	a4,a5,1
     340:	fee405a3          	sb	a4,-21(s0)
     344:	fef42623          	sw	a5,-20(s0)
     348:	020107b7          	lui	a5,0x2010
     34c:	04078793          	addi	a5,a5,64 # 2010040 <__alt_data_end+0x10040>
     350:	fec42703          	lw	a4,-20(s0)
     354:	00e7a023          	sw	a4,0(a5)
        usleep(100000);
     358:	000187b7          	lui	a5,0x18
     35c:	6a078513          	addi	a0,a5,1696 # 186a0 <__alt_heap_start+0xdae8>
     360:	210000ef          	jal	ra,570 <usleep>
    	IOWR_ALTERA_AVALON_PIO_DATA(GPO2_LEDG_BASE, count++);
     364:	00000013          	nop
     368:	fd1ff06f          	j	338 <main+0x30>

0000036c <_start>:
    .type _start, @function
_start:
#if ALT_CPU_HAS_CSR_SUPPORT
    /* assume that we are in machine mode on startup */
    /* setup trap to catch anything that goes wrong early in the boot process */
    la t0, trap_vector
     36c:	00000297          	auipc	t0,0x0
     370:	cb428293          	addi	t0,t0,-844 # 20 <__flash_exceptions_start>
    csrw mtvec, t0
     374:	30529073          	csrw	mtvec,t0

    /* disable all interrupt */
    li t0, 0x88
     378:	08800293          	li	t0,136
    csrc mstatus, t0
     37c:	3002b073          	csrc	mstatus,t0
    csrw mie, zero
     380:	30401073          	csrw	mie,zero
    csrw mip, zero
     384:	34401073          	csrw	mip,zero
#endif /* Initialize Data Cache */
#endif /* ALT_SIM_OPTIMIZE */

    .option push
    .option norelax
    la gp, __global_pointer$
     388:	00009197          	auipc	gp,0x9
     38c:	3a818193          	addi	gp,gp,936 # 9730 <__global_pointer$>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    la sp, __alt_stack_pointer
     390:	02000117          	auipc	sp,0x2000
     394:	c7010113          	addi	sp,sp,-912 # 2000000 <__alt_data_end>
    /* Log that the BSS is about to be cleared. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_bss)
#endif /* ALT_LOG_ENABLE */

    la t1, __bss_start
     398:	0000a317          	auipc	t1,0xa
     39c:	70830313          	addi	t1,t1,1800 # aaa0 <alt_niosv_software_interrupt_handler>
    la t2, __bss_end
     3a0:	0000b397          	auipc	t2,0xb
     3a4:	81838393          	addi	t2,t2,-2024 # abb8 <__alt_heap_start>
0:
    sw zero, (t1)
     3a8:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     3ac:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     3b0:	fe736ce3          	bltu	t1,t2,3a8 <_start+0x3c>
/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD
    call alt_load
     3b4:	0c8000ef          	jal	ra,47c <alt_load>
 */
#ifndef ALT_SIM_OPTIMIZE
.globl __tbss_start
.globl __tbss_end

    la t1, __tbss_start
     3b8:	00007317          	auipc	t1,0x7
     3bc:	07830313          	addi	t1,t1,120 # 7430 <JTAG_UART_DBG>
    la t2, __tbss_end
     3c0:	00007397          	auipc	t2,0x7
     3c4:	07038393          	addi	t2,t2,112 # 7430 <JTAG_UART_DBG>
    
    // Check if we need to skip this (if .tbss is empty)
    bgeu t1, t2, 1f
     3c8:	00737863          	bgeu	t1,t2,3d8 <_start+0x6c>
0:
    sw zero, (t1)
     3cc:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     3d0:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     3d4:	fe736ce3          	bltu	t1,t2,3cc <_start+0x60>
// Copy tdata to tdata golden source location
.globl __tdata_start
.globl __tdata_end
.globl __tdata_source

    la t0, __tdata_start
     3d8:	00007297          	auipc	t0,0x7
     3dc:	05828293          	addi	t0,t0,88 # 7430 <JTAG_UART_DBG>
    la t1, __tdata_end
     3e0:	00007317          	auipc	t1,0x7
     3e4:	05030313          	addi	t1,t1,80 # 7430 <JTAG_UART_DBG>
    la t2, __tdata_source
     3e8:	00007397          	auipc	t2,0x7
     3ec:	04838393          	addi	t2,t2,72 # 7430 <JTAG_UART_DBG>

    // Check if we need to skip this (if .tdata is empty)
    bgeu t0, t1, 1f
     3f0:	0062fc63          	bgeu	t0,t1,408 <_start+0x9c>
0:
    lw s1, (t0)
     3f4:	0002a483          	lw	s1,0(t0)
    sw s1, (t2)
     3f8:	0093a023          	sw	s1,0(t2)
    addi t0, t0, 4
     3fc:	00428293          	addi	t0,t0,4
    addi t2, t2, 4
     400:	00438393          	addi	t2,t2,4
    bltu t0, t1, 0b
     404:	fe62e8e3          	bltu	t0,t1,3f4 <_start+0x88>
1:

// Assign thread pointer register (tp) to main thread tls base
.globl __tls_base
    la tp, __tls_base
     408:	00007217          	auipc	tp,0x7
     40c:	02820213          	addi	tp,tp,40 # 7430 <JTAG_UART_DBG>
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_alt_main)
#endif /* ALT_LOG_ENABLE */

    /* Call the C entry point. It should never return. */
    call alt_main
     410:	0d8000ef          	jal	ra,4e8 <alt_main>

00000414 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    j alt_after_alt_main
     414:	0000006f          	j	414 <alt_after_alt_main>

00000418 <alt_load_section>:
     418:	fe010113          	addi	sp,sp,-32
     41c:	00812e23          	sw	s0,28(sp)
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     420:	02010413          	addi	s0,sp,32
     424:	fea42623          	sw	a0,-20(s0)
     428:	feb42423          	sw	a1,-24(s0)
     42c:	fec42223          	sw	a2,-28(s0)
  if (to != from)
     430:	fe842703          	lw	a4,-24(s0)
     434:	fec42783          	lw	a5,-20(s0)
     438:	02f70a63          	beq	a4,a5,46c <alt_load_section+0x54>
  {
    while( to != end )
     43c:	0240006f          	j	460 <alt_load_section+0x48>
    {
      *to++ = *from++;
     440:	fec42703          	lw	a4,-20(s0)
     444:	00470793          	addi	a5,a4,4
     448:	fef42623          	sw	a5,-20(s0)
     44c:	fe842783          	lw	a5,-24(s0)
     450:	00478693          	addi	a3,a5,4
     454:	fed42423          	sw	a3,-24(s0)
     458:	00072703          	lw	a4,0(a4)
     45c:	00e7a023          	sw	a4,0(a5)
    while( to != end )
     460:	fe842703          	lw	a4,-24(s0)
     464:	fe442783          	lw	a5,-28(s0)
     468:	fcf71ce3          	bne	a4,a5,440 <alt_load_section+0x28>
    }
  }
}
     46c:	00000013          	nop
     470:	01c12403          	lw	s0,28(sp)
     474:	02010113          	addi	sp,sp,32
     478:	00008067          	ret

0000047c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     47c:	ff010113          	addi	sp,sp,-16
     480:	00112623          	sw	ra,12(sp)
     484:	00812423          	sw	s0,8(sp)
     488:	01010413          	addi	s0,sp,16
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     48c:	83818613          	addi	a2,gp,-1992 # 8f68 <__flash_rwdata_start>
     490:	000077b7          	lui	a5,0x7
     494:	43078593          	addi	a1,a5,1072 # 7430 <JTAG_UART_DBG>
     498:	83818513          	addi	a0,gp,-1992 # 8f68 <__flash_rwdata_start>
     49c:	f7dff0ef          	jal	ra,418 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     4a0:	30800613          	li	a2,776
     4a4:	02000593          	li	a1,32
     4a8:	02000513          	li	a0,32
     4ac:	f6dff0ef          	jal	ra,418 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     4b0:	000077b7          	lui	a5,0x7
     4b4:	43078613          	addi	a2,a5,1072 # 7430 <JTAG_UART_DBG>
     4b8:	000077b7          	lui	a5,0x7
     4bc:	37078593          	addi	a1,a5,880 # 7370 <__fini_array_end>
     4c0:	000077b7          	lui	a5,0x7
     4c4:	37078513          	addi	a0,a5,880 # 7370 <__fini_array_end>
     4c8:	f51ff0ef          	jal	ra,418 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     4cc:	009010ef          	jal	ra,1cd4 <alt_dcache_flush_all>
  alt_icache_flush_all();
     4d0:	23d010ef          	jal	ra,1f0c <alt_icache_flush_all>
}
     4d4:	00000013          	nop
     4d8:	00c12083          	lw	ra,12(sp)
     4dc:	00812403          	lw	s0,8(sp)
     4e0:	01010113          	addi	sp,sp,16
     4e4:	00008067          	ret

000004e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     4e8:	fe010113          	addi	sp,sp,-32
     4ec:	00112e23          	sw	ra,28(sp)
     4f0:	00812c23          	sw	s0,24(sp)
     4f4:	02010413          	addi	s0,sp,32
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     4f8:	00000513          	li	a0,0
     4fc:	0a8000ef          	jal	ra,5a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     500:	00000013          	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     504:	0d8000ef          	jal	ra,5dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     508:	000077b7          	lui	a5,0x7
     50c:	3ac78613          	addi	a2,a5,940 # 73ac <__fini_array_end+0x3c>
     510:	000077b7          	lui	a5,0x7
     514:	3ac78593          	addi	a1,a5,940 # 73ac <__fini_array_end+0x3c>
     518:	000077b7          	lui	a5,0x7
     51c:	3ac78513          	addi	a0,a5,940 # 73ac <__fini_array_end+0x3c>
     520:	4b5010ef          	jal	ra,21d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     524:	129010ef          	jal	ra,1e4c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     528:	000027b7          	lui	a5,0x2
     52c:	eac78513          	addi	a0,a5,-340 # 1eac <_do_dtors>
     530:	29c020ef          	jal	ra,27cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     534:	0000b7b7          	lui	a5,0xb
     538:	aac7a703          	lw	a4,-1364(a5) # aaac <alt_argc>
     53c:	0000b7b7          	lui	a5,0xb
     540:	ab07a683          	lw	a3,-1360(a5) # aab0 <alt_argv>
     544:	0000b7b7          	lui	a5,0xb
     548:	ab47a783          	lw	a5,-1356(a5) # aab4 <alt_envp>
     54c:	00078613          	mv	a2,a5
     550:	00068593          	mv	a1,a3
     554:	00070513          	mv	a0,a4
     558:	db1ff0ef          	jal	ra,308 <main>
     55c:	fea42623          	sw	a0,-20(s0)
  close(STDOUT_FILENO);
     560:	00100513          	li	a0,1
     564:	08c040ef          	jal	ra,45f0 <close>
  exit (result);
     568:	fec42503          	lw	a0,-20(s0)
     56c:	274020ef          	jal	ra,27e0 <exit>

00000570 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     570:	fe010113          	addi	sp,sp,-32
     574:	00112e23          	sw	ra,28(sp)
     578:	00812c23          	sw	s0,24(sp)
     57c:	02010413          	addi	s0,sp,32
     580:	fea42623          	sw	a0,-20(s0)
  return alt_busy_sleep(us);
     584:	fec42503          	lw	a0,-20(s0)
     588:	6c4010ef          	jal	ra,1c4c <alt_busy_sleep>
     58c:	00050793          	mv	a5,a0
}
     590:	00078513          	mv	a0,a5
     594:	01c12083          	lw	ra,28(sp)
     598:	01812403          	lw	s0,24(sp)
     59c:	02010113          	addi	sp,sp,32
     5a0:	00008067          	ret

000005a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     5a4:	fe010113          	addi	sp,sp,-32
     5a8:	00112e23          	sw	ra,28(sp)
     5ac:	00812c23          	sw	s0,24(sp)
     5b0:	02010413          	addi	s0,sp,32
     5b4:	fea42623          	sw	a0,-20(s0)
    INTEL_NIOSV_M_IRQ_INIT ( NIOSV_M_CPU, NIOSV_M_CPU);
     5b8:	701010ef          	jal	ra,24b8 <intel_niosv_irq_init>
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, NIOSV_MSTATUS_MIE_MASK);
     5bc:	00800793          	li	a5,8
     5c0:	3007a073          	csrs	mstatus,a5
}
     5c4:	00000013          	nop
    alt_irq_cpu_enable_interrupts();
}
     5c8:	00000013          	nop
     5cc:	01c12083          	lw	ra,28(sp)
     5d0:	01812403          	lw	s0,24(sp)
     5d4:	02010113          	addi	sp,sp,32
     5d8:	00008067          	ret

000005dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     5dc:	fe010113          	addi	sp,sp,-32
     5e0:	00112e23          	sw	ra,28(sp)
     5e4:	00812c23          	sw	s0,24(sp)
     5e8:	02010413          	addi	s0,sp,32
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_DBG, JTAG_UART_DBG);
     5ec:	00000613          	li	a2,0
     5f0:	00000593          	li	a1,0
     5f4:	000077b7          	lui	a5,0x7
     5f8:	45878513          	addi	a0,a5,1112 # 7458 <JTAG_UART_DBG+0x28>
     5fc:	214000ef          	jal	ra,810 <altera_avalon_jtag_uart_init>
     600:	000077b7          	lui	a5,0x7
     604:	43078513          	addi	a0,a5,1072 # 7430 <JTAG_UART_DBG>
     608:	714010ef          	jal	ra,1d1c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SOC_SYSID, SOC_SYSID);
     60c:	00000013          	nop
    ALTERA_AVALON_UART_INIT ( UART_SERIAL_COM, UART_SERIAL_COM);
     610:	00100613          	li	a2,1
     614:	00000593          	li	a1,0
     618:	000087b7          	lui	a5,0x8
     61c:	4b878513          	addi	a0,a5,1208 # 84b8 <UART_SERIAL_COM+0x28>
     620:	495000ef          	jal	ra,12b4 <altera_avalon_uart_init>
     624:	000087b7          	lui	a5,0x8
     628:	49078513          	addi	a0,a5,1168 # 8490 <UART_SERIAL_COM>
     62c:	6f0010ef          	jal	ra,1d1c <alt_dev_reg>
     630:	3e800793          	li	a5,1000
     634:	fef42623          	sw	a5,-20(s0)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
     638:	0000b7b7          	lui	a5,0xb
     63c:	ac07a783          	lw	a5,-1344(a5) # aac0 <_alt_tick_rate>
     640:	00079a63          	bnez	a5,654 <alt_sys_init+0x78>
  {
    _alt_tick_rate = nticks;
     644:	0000b7b7          	lui	a5,0xb
     648:	fec42703          	lw	a4,-20(s0)
     64c:	ace7a023          	sw	a4,-1344(a5) # aac0 <_alt_tick_rate>
    return 0;
     650:	0080006f          	j	658 <alt_sys_init+0x7c>
  }
  else
  {
    return -1;
     654:	00000013          	nop
     658:	000027b7          	lui	a5,0x2
     65c:	6e478793          	addi	a5,a5,1764 # 26e4 <alt_niosv_timer_sc_isr>
     660:	fef42423          	sw	a5,-24(s0)
alt_u64 alt_niosv_mtimecmp_get();
void alt_niosv_mtimecmp_interrupt_init();
extern alt_niosv_timer_isr_t alt_niosv_timer_interrupt_handler;

static ALT_INLINE void ALT_ALWAYS_INLINE alt_niosv_register_mtimecmp_interrupt_handle(alt_niosv_timer_isr_t handle) {
    alt_niosv_timer_interrupt_handler = handle;
     664:	0000b7b7          	lui	a5,0xb
     668:	fe842703          	lw	a4,-24(s0)
     66c:	aae7a223          	sw	a4,-1372(a5) # aaa4 <alt_niosv_timer_interrupt_handler>
}
     670:	00000013          	nop
    INTEL_NIOSV_M_INIT ( NIOSV_M_CPU, NIOSV_M_CPU);
     674:	11c020ef          	jal	ra,2790 <alt_niosv_mtimecmp_interrupt_init>
     678:	00000613          	li	a2,0
     67c:	00000593          	li	a1,0
     680:	00000513          	li	a0,0
     684:	060020ef          	jal	ra,26e4 <alt_niosv_timer_sc_isr>
}
     688:	00000013          	nop
     68c:	01c12083          	lw	ra,28(sp)
     690:	01812403          	lw	s0,24(sp)
     694:	02010113          	addi	sp,sp,32
     698:	00008067          	ret

0000069c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     69c:	fd010113          	addi	sp,sp,-48
     6a0:	02112623          	sw	ra,44(sp)
     6a4:	02812423          	sw	s0,40(sp)
     6a8:	03010413          	addi	s0,sp,48
     6ac:	fca42e23          	sw	a0,-36(s0)
     6b0:	fcb42c23          	sw	a1,-40(s0)
     6b4:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     6b8:	fdc42783          	lw	a5,-36(s0)
     6bc:	0007a783          	lw	a5,0(a5)
     6c0:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     6c4:	fec42783          	lw	a5,-20(s0)
     6c8:	02878713          	addi	a4,a5,40
     6cc:	fdc42783          	lw	a5,-36(s0)
     6d0:	0087a783          	lw	a5,8(a5)
     6d4:	00078693          	mv	a3,a5
     6d8:	fd442603          	lw	a2,-44(s0)
     6dc:	fd842583          	lw	a1,-40(s0)
     6e0:	00070513          	mv	a0,a4
     6e4:	64c000ef          	jal	ra,d30 <altera_avalon_jtag_uart_read>
     6e8:	00050793          	mv	a5,a0
      fd->fd_flags);
}
     6ec:	00078513          	mv	a0,a5
     6f0:	02c12083          	lw	ra,44(sp)
     6f4:	02812403          	lw	s0,40(sp)
     6f8:	03010113          	addi	sp,sp,48
     6fc:	00008067          	ret

00000700 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     700:	fd010113          	addi	sp,sp,-48
     704:	02112623          	sw	ra,44(sp)
     708:	02812423          	sw	s0,40(sp)
     70c:	03010413          	addi	s0,sp,48
     710:	fca42e23          	sw	a0,-36(s0)
     714:	fcb42c23          	sw	a1,-40(s0)
     718:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     71c:	fdc42783          	lw	a5,-36(s0)
     720:	0007a783          	lw	a5,0(a5)
     724:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     728:	fec42783          	lw	a5,-20(s0)
     72c:	02878713          	addi	a4,a5,40
     730:	fdc42783          	lw	a5,-36(s0)
     734:	0087a783          	lw	a5,8(a5)
     738:	00078693          	mv	a3,a5
     73c:	fd442603          	lw	a2,-44(s0)
     740:	fd842583          	lw	a1,-40(s0)
     744:	00070513          	mv	a0,a4
     748:	015000ef          	jal	ra,f5c <altera_avalon_jtag_uart_write>
     74c:	00050793          	mv	a5,a0
      fd->fd_flags);
}
     750:	00078513          	mv	a0,a5
     754:	02c12083          	lw	ra,44(sp)
     758:	02812403          	lw	s0,40(sp)
     75c:	03010113          	addi	sp,sp,48
     760:	00008067          	ret

00000764 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     764:	fd010113          	addi	sp,sp,-48
     768:	02112623          	sw	ra,44(sp)
     76c:	02812423          	sw	s0,40(sp)
     770:	03010413          	addi	s0,sp,48
     774:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     778:	fdc42783          	lw	a5,-36(s0)
     77c:	0007a783          	lw	a5,0(a5)
     780:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     784:	fec42783          	lw	a5,-20(s0)
     788:	02878713          	addi	a4,a5,40
     78c:	fdc42783          	lw	a5,-36(s0)
     790:	0087a783          	lw	a5,8(a5)
     794:	00078593          	mv	a1,a5
     798:	00070513          	mv	a0,a4
     79c:	428000ef          	jal	ra,bc4 <altera_avalon_jtag_uart_close>
     7a0:	00050793          	mv	a5,a0
}
     7a4:	00078513          	mv	a0,a5
     7a8:	02c12083          	lw	ra,44(sp)
     7ac:	02812403          	lw	s0,40(sp)
     7b0:	03010113          	addi	sp,sp,48
     7b4:	00008067          	ret

000007b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     7b8:	fd010113          	addi	sp,sp,-48
     7bc:	02112623          	sw	ra,44(sp)
     7c0:	02812423          	sw	s0,40(sp)
     7c4:	03010413          	addi	s0,sp,48
     7c8:	fca42e23          	sw	a0,-36(s0)
     7cc:	fcb42c23          	sw	a1,-40(s0)
     7d0:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     7d4:	fdc42783          	lw	a5,-36(s0)
     7d8:	0007a783          	lw	a5,0(a5)
     7dc:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     7e0:	fec42783          	lw	a5,-20(s0)
     7e4:	02878793          	addi	a5,a5,40
     7e8:	fd442603          	lw	a2,-44(s0)
     7ec:	fd842583          	lw	a1,-40(s0)
     7f0:	00078513          	mv	a0,a5
     7f4:	43c000ef          	jal	ra,c30 <altera_avalon_jtag_uart_ioctl>
     7f8:	00050793          	mv	a5,a0
}
     7fc:	00078513          	mv	a0,a5
     800:	02c12083          	lw	ra,44(sp)
     804:	02812403          	lw	s0,40(sp)
     808:	03010113          	addi	sp,sp,48
     80c:	00008067          	ret

00000810 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     810:	fd010113          	addi	sp,sp,-48
     814:	02112623          	sw	ra,44(sp)
     818:	02812423          	sw	s0,40(sp)
     81c:	03010413          	addi	s0,sp,48
     820:	fca42e23          	sw	a0,-36(s0)
     824:	fcb42c23          	sw	a1,-40(s0)
     828:	fcc42a23          	sw	a2,-44(s0)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     82c:	fdc42783          	lw	a5,-36(s0)
     830:	00100713          	li	a4,1
     834:	02e7a023          	sw	a4,32(a5)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     838:	fdc42783          	lw	a5,-36(s0)
     83c:	0207a783          	lw	a5,32(a5)
     840:	fef42623          	sw	a5,-20(s0)
     844:	fdc42783          	lw	a5,-36(s0)
     848:	0007a783          	lw	a5,0(a5)
     84c:	00478793          	addi	a5,a5,4
     850:	00078713          	mv	a4,a5
     854:	fec42783          	lw	a5,-20(s0)
     858:	00f72023          	sw	a5,0(a4)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     85c:	fd842503          	lw	a0,-40(s0)
     860:	fd442583          	lw	a1,-44(s0)
     864:	00000713          	li	a4,0
     868:	fdc42683          	lw	a3,-36(s0)
     86c:	000017b7          	lui	a5,0x1
     870:	8d078613          	addi	a2,a5,-1840 # 8d0 <altera_avalon_jtag_uart_irq>
     874:	6b4010ef          	jal	ra,1f28 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     878:	fdc42783          	lw	a5,-36(s0)
     87c:	0207a223          	sw	zero,36(a5)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     880:	fdc42783          	lw	a5,-36(s0)
     884:	00878713          	addi	a4,a5,8
  return _alt_tick_rate;
     888:	0000b7b7          	lui	a5,0xb
     88c:	ac07a583          	lw	a1,-1344(a5) # aac0 <_alt_tick_rate>
     890:	fdc42683          	lw	a3,-36(s0)
     894:	000017b7          	lui	a5,0x1
     898:	b0878613          	addi	a2,a5,-1272 # b08 <altera_avalon_jtag_uart_timeout>
     89c:	00070513          	mv	a0,a4
     8a0:	240010ef          	jal	ra,1ae0 <alt_alarm_start>
     8a4:	00050793          	mv	a5,a0
     8a8:	0007da63          	bgez	a5,8bc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     8ac:	fdc42783          	lw	a5,-36(s0)
     8b0:	80000737          	lui	a4,0x80000
     8b4:	fff74713          	not	a4,a4
     8b8:	00e7a223          	sw	a4,4(a5)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     8bc:	00000013          	nop
     8c0:	02c12083          	lw	ra,44(sp)
     8c4:	02812403          	lw	s0,40(sp)
     8c8:	03010113          	addi	sp,sp,48
     8cc:	00008067          	ret

000008d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     8d0:	fa010113          	addi	sp,sp,-96
     8d4:	04812e23          	sw	s0,92(sp)
     8d8:	06010413          	addi	s0,sp,96
     8dc:	faa42623          	sw	a0,-84(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     8e0:	fac42783          	lw	a5,-84(s0)
     8e4:	fcf42223          	sw	a5,-60(s0)
  unsigned int base = sp->base;
     8e8:	fc442783          	lw	a5,-60(s0)
     8ec:	0007a783          	lw	a5,0(a5)
     8f0:	fcf42423          	sw	a5,-56(s0)
  unsigned int postflag=0;
     8f4:	fa042c23          	sw	zero,-72(s0)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     8f8:	fc842783          	lw	a5,-56(s0)
     8fc:	00478793          	addi	a5,a5,4
     900:	0007a783          	lw	a5,0(a5)
     904:	fcf42623          	sw	a5,-52(s0)
     908:	fcc42783          	lw	a5,-52(s0)
     90c:	fcf42823          	sw	a5,-48(s0)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     910:	fd042783          	lw	a5,-48(s0)
     914:	3007f793          	andi	a5,a5,768
     918:	1c078e63          	beqz	a5,af4 <altera_avalon_jtag_uart_irq+0x224>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     91c:	fd042783          	lw	a5,-48(s0)
     920:	1007f793          	andi	a5,a5,256
     924:	0e078663          	beqz	a5,a10 <altera_avalon_jtag_uart_irq+0x140>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     928:	000107b7          	lui	a5,0x10
     92c:	faf42e23          	sw	a5,-68(s0)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     930:	fc442783          	lw	a5,-60(s0)
     934:	0287a783          	lw	a5,40(a5) # 10028 <__alt_heap_start+0x5470>
     938:	00178793          	addi	a5,a5,1
     93c:	7ff7f793          	andi	a5,a5,2047
     940:	fcf42a23          	sw	a5,-44(s0)
        if (next == sp->rx_out)
     944:	fc442783          	lw	a5,-60(s0)
     948:	02c7a783          	lw	a5,44(a5)
     94c:	fd442703          	lw	a4,-44(s0)
     950:	06f70263          	beq	a4,a5,9b4 <altera_avalon_jtag_uart_irq+0xe4>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     954:	fc842783          	lw	a5,-56(s0)
     958:	0007a783          	lw	a5,0(a5)
     95c:	fcf42c23          	sw	a5,-40(s0)
     960:	fd842783          	lw	a5,-40(s0)
     964:	faf42e23          	sw	a5,-68(s0)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     968:	fbc42703          	lw	a4,-68(s0)
     96c:	000087b7          	lui	a5,0x8
     970:	00f777b3          	and	a5,a4,a5
     974:	04078463          	beqz	a5,9bc <altera_avalon_jtag_uart_irq+0xec>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     978:	fc442783          	lw	a5,-60(s0)
     97c:	0287a783          	lw	a5,40(a5) # 8028 <JTAG_UART_DBG+0xbf8>
     980:	fbc42703          	lw	a4,-68(s0)
     984:	0ff77713          	zext.b	a4,a4
     988:	fc442683          	lw	a3,-60(s0)
     98c:	00f687b3          	add	a5,a3,a5
     990:	02e78c23          	sb	a4,56(a5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     994:	fc442783          	lw	a5,-60(s0)
     998:	0287a783          	lw	a5,40(a5)
     99c:	00178793          	addi	a5,a5,1
     9a0:	7ff7f713          	andi	a4,a5,2047
     9a4:	fc442783          	lw	a5,-60(s0)
     9a8:	02e7a423          	sw	a4,40(a5)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
     9ac:	00000013          	nop
      {
     9b0:	f81ff06f          	j	930 <altera_avalon_jtag_uart_irq+0x60>
          break;
     9b4:	00000013          	nop
     9b8:	0080006f          	j	9c0 <altera_avalon_jtag_uart_irq+0xf0>
          break;
     9bc:	00000013          	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     9c0:	fbc42703          	lw	a4,-68(s0)
     9c4:	000107b7          	lui	a5,0x10
     9c8:	04f76463          	bltu	a4,a5,a10 <altera_avalon_jtag_uart_irq+0x140>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     9cc:	fc442783          	lw	a5,-60(s0)
     9d0:	0207a783          	lw	a5,32(a5) # 10020 <__alt_heap_start+0x5468>
     9d4:	ffe7f713          	andi	a4,a5,-2
     9d8:	fc442783          	lw	a5,-60(s0)
     9dc:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     9e0:	fc442783          	lw	a5,-60(s0)
     9e4:	0207a783          	lw	a5,32(a5)
     9e8:	fcf42e23          	sw	a5,-36(s0)
     9ec:	fc842783          	lw	a5,-56(s0)
     9f0:	00478793          	addi	a5,a5,4
     9f4:	00078713          	mv	a4,a5
     9f8:	fdc42783          	lw	a5,-36(s0)
     9fc:	00f72023          	sw	a5,0(a4) # 80000000 <__alt_data_end+0x7e000000>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     a00:	fc842783          	lw	a5,-56(s0)
     a04:	00478793          	addi	a5,a5,4
     a08:	0007a783          	lw	a5,0(a5)
     a0c:	fef42023          	sw	a5,-32(s0)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     a10:	fd042783          	lw	a5,-48(s0)
     a14:	2007f793          	andi	a5,a5,512
     a18:	ee0780e3          	beqz	a5,8f8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     a1c:	fd042783          	lw	a5,-48(s0)
     a20:	0107d793          	srli	a5,a5,0x10
     a24:	fcf42023          	sw	a5,-64(s0)

      while (space > 0 && sp->tx_out != sp->tx_in)
     a28:	05c0006f          	j	a84 <altera_avalon_jtag_uart_irq+0x1b4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     a2c:	fc442783          	lw	a5,-60(s0)
     a30:	0347a783          	lw	a5,52(a5)
     a34:	fc442703          	lw	a4,-60(s0)
     a38:	00f707b3          	add	a5,a4,a5
     a3c:	00001737          	lui	a4,0x1
     a40:	00f707b3          	add	a5,a4,a5
     a44:	8387c783          	lbu	a5,-1992(a5)
     a48:	fef42223          	sw	a5,-28(s0)
     a4c:	fc842783          	lw	a5,-56(s0)
     a50:	fe442703          	lw	a4,-28(s0)
     a54:	00e7a023          	sw	a4,0(a5)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     a58:	fc442783          	lw	a5,-60(s0)
     a5c:	0347a783          	lw	a5,52(a5)
     a60:	00178793          	addi	a5,a5,1
     a64:	7ff7f713          	andi	a4,a5,2047
     a68:	fc442783          	lw	a5,-60(s0)
     a6c:	02e7aa23          	sw	a4,52(a5)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
     a70:	00100793          	li	a5,1
     a74:	faf42c23          	sw	a5,-72(s0)

        space--;
     a78:	fc042783          	lw	a5,-64(s0)
     a7c:	fff78793          	addi	a5,a5,-1
     a80:	fcf42023          	sw	a5,-64(s0)
      while (space > 0 && sp->tx_out != sp->tx_in)
     a84:	fc042783          	lw	a5,-64(s0)
     a88:	00078c63          	beqz	a5,aa0 <altera_avalon_jtag_uart_irq+0x1d0>
     a8c:	fc442783          	lw	a5,-60(s0)
     a90:	0347a703          	lw	a4,52(a5)
     a94:	fc442783          	lw	a5,-60(s0)
     a98:	0307a783          	lw	a5,48(a5)
     a9c:	f8f718e3          	bne	a4,a5,a2c <altera_avalon_jtag_uart_irq+0x15c>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
     aa0:	fc042783          	lw	a5,-64(s0)
     aa4:	e4078ae3          	beqz	a5,8f8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     aa8:	fc442783          	lw	a5,-60(s0)
     aac:	0207a783          	lw	a5,32(a5)
     ab0:	ffd7f713          	andi	a4,a5,-3
     ab4:	fc442783          	lw	a5,-60(s0)
     ab8:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     abc:	fc442783          	lw	a5,-60(s0)
     ac0:	0207a783          	lw	a5,32(a5)
     ac4:	fef42423          	sw	a5,-24(s0)
     ac8:	fc442783          	lw	a5,-60(s0)
     acc:	0007a783          	lw	a5,0(a5)
     ad0:	00478793          	addi	a5,a5,4
     ad4:	00078713          	mv	a4,a5
     ad8:	fe842783          	lw	a5,-24(s0)
     adc:	00f72023          	sw	a5,0(a4) # 1000 <altera_avalon_jtag_uart_write+0xa4>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     ae0:	fc842783          	lw	a5,-56(s0)
     ae4:	00478793          	addi	a5,a5,4
     ae8:	0007a783          	lw	a5,0(a5)
     aec:	fef42623          	sw	a5,-20(s0)
  {
     af0:	e09ff06f          	j	8f8 <altera_avalon_jtag_uart_irq+0x28>
      break;
     af4:	00000013          	nop
      }
    }
  }
}
     af8:	00000013          	nop
     afc:	05c12403          	lw	s0,92(sp)
     b00:	06010113          	addi	sp,sp,96
     b04:	00008067          	ret

00000b08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     b08:	fd010113          	addi	sp,sp,-48
     b0c:	02812623          	sw	s0,44(sp)
     b10:	03010413          	addi	s0,sp,48
     b14:	fca42e23          	sw	a0,-36(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     b18:	fdc42783          	lw	a5,-36(s0)
     b1c:	fef42023          	sw	a5,-32(s0)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     b20:	fe042783          	lw	a5,-32(s0)
     b24:	0007a783          	lw	a5,0(a5)
     b28:	00478793          	addi	a5,a5,4
     b2c:	0007a783          	lw	a5,0(a5)
     b30:	fef42223          	sw	a5,-28(s0)
     b34:	fe442783          	lw	a5,-28(s0)
     b38:	fef42423          	sw	a5,-24(s0)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     b3c:	fe842783          	lw	a5,-24(s0)
     b40:	4007f793          	andi	a5,a5,1024
     b44:	02078c63          	beqz	a5,b7c <altera_avalon_jtag_uart_timeout+0x74>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     b48:	fe042783          	lw	a5,-32(s0)
     b4c:	0207a783          	lw	a5,32(a5)
     b50:	4007e793          	ori	a5,a5,1024
     b54:	fef42623          	sw	a5,-20(s0)
     b58:	fe042783          	lw	a5,-32(s0)
     b5c:	0007a783          	lw	a5,0(a5)
     b60:	00478793          	addi	a5,a5,4
     b64:	00078713          	mv	a4,a5
     b68:	fec42783          	lw	a5,-20(s0)
     b6c:	00f72023          	sw	a5,0(a4)
    sp->host_inactive = 0;
     b70:	fe042783          	lw	a5,-32(s0)
     b74:	0207a223          	sw	zero,36(a5)
     b78:	0340006f          	j	bac <altera_avalon_jtag_uart_timeout+0xa4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     b7c:	fe042783          	lw	a5,-32(s0)
     b80:	0247a703          	lw	a4,36(a5)
     b84:	800007b7          	lui	a5,0x80000
     b88:	ffc7c793          	xori	a5,a5,-4
     b8c:	02e7e063          	bltu	a5,a4,bac <altera_avalon_jtag_uart_timeout+0xa4>
    sp->host_inactive++;
     b90:	fe042783          	lw	a5,-32(s0)
     b94:	0247a783          	lw	a5,36(a5) # 80000024 <__alt_data_end+0x7e000024>
     b98:	00178713          	addi	a4,a5,1
     b9c:	fe042783          	lw	a5,-32(s0)
     ba0:	02e7a223          	sw	a4,36(a5)
    
    if (sp->host_inactive >= sp->timeout) {
     ba4:	fe042783          	lw	a5,-32(s0)
     ba8:	0247a783          	lw	a5,36(a5)
     bac:	0000b7b7          	lui	a5,0xb
     bb0:	ac07a783          	lw	a5,-1344(a5) # aac0 <_alt_tick_rate>
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     bb4:	00078513          	mv	a0,a5
     bb8:	02c12403          	lw	s0,44(sp)
     bbc:	03010113          	addi	sp,sp,48
     bc0:	00008067          	ret

00000bc4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     bc4:	fe010113          	addi	sp,sp,-32
     bc8:	00812e23          	sw	s0,28(sp)
     bcc:	02010413          	addi	s0,sp,32
     bd0:	fea42623          	sw	a0,-20(s0)
     bd4:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     bd8:	01c0006f          	j	bf4 <altera_avalon_jtag_uart_close+0x30>
    if (flags & O_NONBLOCK) {
     bdc:	fe842703          	lw	a4,-24(s0)
     be0:	000047b7          	lui	a5,0x4
     be4:	00f777b3          	and	a5,a4,a5
     be8:	00078663          	beqz	a5,bf4 <altera_avalon_jtag_uart_close+0x30>
      return -EWOULDBLOCK; 
     bec:	ff500793          	li	a5,-11
     bf0:	0300006f          	j	c20 <altera_avalon_jtag_uart_close+0x5c>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     bf4:	fec42783          	lw	a5,-20(s0)
     bf8:	0347a703          	lw	a4,52(a5) # 4034 <memset+0x70>
     bfc:	fec42783          	lw	a5,-20(s0)
     c00:	0307a783          	lw	a5,48(a5)
     c04:	00f70c63          	beq	a4,a5,c1c <altera_avalon_jtag_uart_close+0x58>
     c08:	fec42783          	lw	a5,-20(s0)
     c0c:	0247a703          	lw	a4,36(a5)
     c10:	fec42783          	lw	a5,-20(s0)
     c14:	0047a783          	lw	a5,4(a5)
     c18:	fcf762e3          	bltu	a4,a5,bdc <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
     c1c:	00000793          	li	a5,0
}
     c20:	00078513          	mv	a0,a5
     c24:	01c12403          	lw	s0,28(sp)
     c28:	02010113          	addi	sp,sp,32
     c2c:	00008067          	ret

00000c30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     c30:	fd010113          	addi	sp,sp,-48
     c34:	02812623          	sw	s0,44(sp)
     c38:	03010413          	addi	s0,sp,48
     c3c:	fca42e23          	sw	a0,-36(s0)
     c40:	fcb42c23          	sw	a1,-40(s0)
     c44:	fcc42a23          	sw	a2,-44(s0)
  int rc = -ENOTTY;
     c48:	fe700793          	li	a5,-25
     c4c:	fef42423          	sw	a5,-24(s0)

  switch (req)
     c50:	fd842703          	lw	a4,-40(s0)
     c54:	000077b7          	lui	a5,0x7
     c58:	a0178793          	addi	a5,a5,-1535 # 6a01 <alt_find_file+0x61>
     c5c:	00f70c63          	beq	a4,a5,c74 <altera_avalon_jtag_uart_ioctl+0x44>
     c60:	fd842703          	lw	a4,-40(s0)
     c64:	000077b7          	lui	a5,0x7
     c68:	a0278793          	addi	a5,a5,-1534 # 6a02 <alt_find_file+0x62>
     c6c:	06f70263          	beq	a4,a5,cd0 <altera_avalon_jtag_uart_ioctl+0xa0>
      rc = 0;
    }
    break;

  default:
    break;
     c70:	0ac0006f          	j	d1c <altera_avalon_jtag_uart_ioctl+0xec>
    if (sp->timeout != INT_MAX)
     c74:	fdc42783          	lw	a5,-36(s0)
     c78:	0047a703          	lw	a4,4(a5)
     c7c:	800007b7          	lui	a5,0x80000
     c80:	fff7c793          	not	a5,a5
     c84:	08f70663          	beq	a4,a5,d10 <altera_avalon_jtag_uart_ioctl+0xe0>
      int timeout = *((int *)arg);
     c88:	fd442783          	lw	a5,-44(s0)
     c8c:	0007a783          	lw	a5,0(a5) # 80000000 <__alt_data_end+0x7e000000>
     c90:	fef42623          	sw	a5,-20(s0)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     c94:	fec42703          	lw	a4,-20(s0)
     c98:	00100793          	li	a5,1
     c9c:	00e7de63          	bge	a5,a4,cb8 <altera_avalon_jtag_uart_ioctl+0x88>
     ca0:	fec42703          	lw	a4,-20(s0)
     ca4:	800007b7          	lui	a5,0x80000
     ca8:	fff7c793          	not	a5,a5
     cac:	00f70663          	beq	a4,a5,cb8 <altera_avalon_jtag_uart_ioctl+0x88>
     cb0:	fec42783          	lw	a5,-20(s0)
     cb4:	00c0006f          	j	cc0 <altera_avalon_jtag_uart_ioctl+0x90>
     cb8:	800007b7          	lui	a5,0x80000
     cbc:	ffe7c793          	xori	a5,a5,-2
     cc0:	fdc42703          	lw	a4,-36(s0)
     cc4:	00f72223          	sw	a5,4(a4)
      rc = 0;
     cc8:	fe042423          	sw	zero,-24(s0)
    break;
     ccc:	0440006f          	j	d10 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
     cd0:	fdc42783          	lw	a5,-36(s0)
     cd4:	0047a703          	lw	a4,4(a5) # 80000004 <__alt_data_end+0x7e000004>
     cd8:	800007b7          	lui	a5,0x80000
     cdc:	fff7c793          	not	a5,a5
     ce0:	02f70c63          	beq	a4,a5,d18 <altera_avalon_jtag_uart_ioctl+0xe8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     ce4:	fdc42783          	lw	a5,-36(s0)
     ce8:	0247a703          	lw	a4,36(a5) # 80000024 <__alt_data_end+0x7e000024>
     cec:	fdc42783          	lw	a5,-36(s0)
     cf0:	0047a783          	lw	a5,4(a5)
     cf4:	00f737b3          	sltu	a5,a4,a5
     cf8:	0ff7f793          	zext.b	a5,a5
     cfc:	00078713          	mv	a4,a5
     d00:	fd442783          	lw	a5,-44(s0)
     d04:	00e7a023          	sw	a4,0(a5)
      rc = 0;
     d08:	fe042423          	sw	zero,-24(s0)
    break;
     d0c:	00c0006f          	j	d18 <altera_avalon_jtag_uart_ioctl+0xe8>
    break;
     d10:	00000013          	nop
     d14:	0080006f          	j	d1c <altera_avalon_jtag_uart_ioctl+0xec>
    break;
     d18:	00000013          	nop
  }

  return rc;
     d1c:	fe842783          	lw	a5,-24(s0)
}
     d20:	00078513          	mv	a0,a5
     d24:	02c12403          	lw	s0,44(sp)
     d28:	03010113          	addi	sp,sp,48
     d2c:	00008067          	ret

00000d30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     d30:	fc010113          	addi	sp,sp,-64
     d34:	02112e23          	sw	ra,60(sp)
     d38:	02812c23          	sw	s0,56(sp)
     d3c:	04010413          	addi	s0,sp,64
     d40:	fca42623          	sw	a0,-52(s0)
     d44:	fcb42423          	sw	a1,-56(s0)
     d48:	fcc42223          	sw	a2,-60(s0)
     d4c:	fcd42023          	sw	a3,-64(s0)
  char * ptr = buffer;
     d50:	fc842783          	lw	a5,-56(s0)
     d54:	fcf42823          	sw	a5,-48(s0)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     d58:	1280006f          	j	e80 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     d5c:	fcc42783          	lw	a5,-52(s0)
     d60:	0287a783          	lw	a5,40(a5)
     d64:	fcf42c23          	sw	a5,-40(s0)
      out = sp->rx_out;
     d68:	fcc42783          	lw	a5,-52(s0)
     d6c:	02c7a783          	lw	a5,44(a5)
     d70:	fcf42e23          	sw	a5,-36(s0)

      if (in >= out)
     d74:	fd842703          	lw	a4,-40(s0)
     d78:	fdc42783          	lw	a5,-36(s0)
     d7c:	00f76c63          	bltu	a4,a5,d94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     d80:	fd842703          	lw	a4,-40(s0)
     d84:	fdc42783          	lw	a5,-36(s0)
     d88:	40f707b3          	sub	a5,a4,a5
     d8c:	fcf42a23          	sw	a5,-44(s0)
     d90:	0180006f          	j	da8 <altera_avalon_jtag_uart_read+0x78>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     d94:	000017b7          	lui	a5,0x1
     d98:	80078713          	addi	a4,a5,-2048 # 800 <altera_avalon_jtag_uart_ioctl_fd+0x48>
     d9c:	fdc42783          	lw	a5,-36(s0)
     da0:	40f707b3          	sub	a5,a4,a5
     da4:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
     da8:	fd442783          	lw	a5,-44(s0)
     dac:	06078e63          	beqz	a5,e28 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */

      if (n > space)
     db0:	fc442783          	lw	a5,-60(s0)
     db4:	fd442703          	lw	a4,-44(s0)
     db8:	00e7f663          	bgeu	a5,a4,dc4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
     dbc:	fc442783          	lw	a5,-60(s0)
     dc0:	fcf42a23          	sw	a5,-44(s0)

      memcpy(ptr, sp->rx_buf + out, n);
     dc4:	fcc42783          	lw	a5,-52(s0)
     dc8:	03878713          	addi	a4,a5,56
     dcc:	fdc42783          	lw	a5,-36(s0)
     dd0:	00f707b3          	add	a5,a4,a5
     dd4:	fd442603          	lw	a2,-44(s0)
     dd8:	00078593          	mv	a1,a5
     ddc:	fd042503          	lw	a0,-48(s0)
     de0:	040030ef          	jal	ra,3e20 <memcpy>
      ptr   += n;
     de4:	fd042703          	lw	a4,-48(s0)
     de8:	fd442783          	lw	a5,-44(s0)
     dec:	00f707b3          	add	a5,a4,a5
     df0:	fcf42823          	sw	a5,-48(s0)
      space -= n;
     df4:	fc442703          	lw	a4,-60(s0)
     df8:	fd442783          	lw	a5,-44(s0)
     dfc:	40f707b3          	sub	a5,a4,a5
     e00:	fcf42223          	sw	a5,-60(s0)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e04:	fdc42703          	lw	a4,-36(s0)
     e08:	fd442783          	lw	a5,-44(s0)
     e0c:	00f707b3          	add	a5,a4,a5
     e10:	7ff7f713          	andi	a4,a5,2047
     e14:	fcc42783          	lw	a5,-52(s0)
     e18:	02e7a623          	sw	a4,44(a5)
    }
    while (space > 0);
     e1c:	fc442783          	lw	a5,-60(s0)
     e20:	f2f04ee3          	bgtz	a5,d5c <altera_avalon_jtag_uart_read+0x2c>
     e24:	0080006f          	j	e2c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */
     e28:	00000013          	nop

    /* If we read any data then return it */
    if (ptr != buffer)
     e2c:	fd042703          	lw	a4,-48(s0)
     e30:	fc842783          	lw	a5,-56(s0)
     e34:	04f71c63          	bne	a4,a5,e8c <altera_avalon_jtag_uart_read+0x15c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     e38:	fc042703          	lw	a4,-64(s0)
     e3c:	000047b7          	lui	a5,0x4
     e40:	00f777b3          	and	a5,a4,a5
     e44:	04079863          	bnez	a5,e94 <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     e48:	00000013          	nop
     e4c:	fcc42783          	lw	a5,-52(s0)
     e50:	0287a783          	lw	a5,40(a5) # 4028 <memset+0x64>
     e54:	fd842703          	lw	a4,-40(s0)
     e58:	00f71c63          	bne	a4,a5,e70 <altera_avalon_jtag_uart_read+0x140>
     e5c:	fcc42783          	lw	a5,-52(s0)
     e60:	0247a703          	lw	a4,36(a5)
     e64:	fcc42783          	lw	a5,-52(s0)
     e68:	0047a783          	lw	a5,4(a5)
     e6c:	fef760e3          	bltu	a4,a5,e4c <altera_avalon_jtag_uart_read+0x11c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     e70:	fcc42783          	lw	a5,-52(s0)
     e74:	0287a783          	lw	a5,40(a5)
     e78:	fd842703          	lw	a4,-40(s0)
     e7c:	02f70063          	beq	a4,a5,e9c <altera_avalon_jtag_uart_read+0x16c>
  while (space > 0)
     e80:	fc442783          	lw	a5,-60(s0)
     e84:	ecf04ce3          	bgtz	a5,d5c <altera_avalon_jtag_uart_read+0x2c>
     e88:	0180006f          	j	ea0 <altera_avalon_jtag_uart_read+0x170>
      break;
     e8c:	00000013          	nop
     e90:	0100006f          	j	ea0 <altera_avalon_jtag_uart_read+0x170>
      break;
     e94:	00000013          	nop
     e98:	0080006f          	j	ea0 <altera_avalon_jtag_uart_read+0x170>
      break;
     e9c:	00000013          	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     ea0:	fd042703          	lw	a4,-48(s0)
     ea4:	fc842783          	lw	a5,-56(s0)
     ea8:	06f70463          	beq	a4,a5,f10 <altera_avalon_jtag_uart_read+0x1e0>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
     eac:	00800793          	li	a5,8
     eb0:	3007b7f3          	csrrc	a5,mstatus,a5
     eb4:	fef42623          	sw	a5,-20(s0)
    return context;
     eb8:	fec42783          	lw	a5,-20(s0)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     ebc:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     ec0:	fcc42783          	lw	a5,-52(s0)
     ec4:	0207a783          	lw	a5,32(a5)
     ec8:	0017e713          	ori	a4,a5,1
     ecc:	fcc42783          	lw	a5,-52(s0)
     ed0:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     ed4:	fcc42783          	lw	a5,-52(s0)
     ed8:	0207a783          	lw	a5,32(a5)
     edc:	fef42223          	sw	a5,-28(s0)
     ee0:	fcc42783          	lw	a5,-52(s0)
     ee4:	0007a783          	lw	a5,0(a5)
     ee8:	00478793          	addi	a5,a5,4
     eec:	00078713          	mv	a4,a5
     ef0:	fe442783          	lw	a5,-28(s0)
     ef4:	00f72023          	sw	a5,0(a4)
     ef8:	fe042783          	lw	a5,-32(s0)
     efc:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
     f00:	fe842783          	lw	a5,-24(s0)
     f04:	0087f793          	andi	a5,a5,8
     f08:	3007a073          	csrs	mstatus,a5
}
     f0c:	00000013          	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
     f10:	fd042703          	lw	a4,-48(s0)
     f14:	fc842783          	lw	a5,-56(s0)
     f18:	00f70a63          	beq	a4,a5,f2c <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
     f1c:	fd042703          	lw	a4,-48(s0)
     f20:	fc842783          	lw	a5,-56(s0)
     f24:	40f707b3          	sub	a5,a4,a5
     f28:	0200006f          	j	f48 <altera_avalon_jtag_uart_read+0x218>
  else if (flags & O_NONBLOCK)
     f2c:	fc042703          	lw	a4,-64(s0)
     f30:	000047b7          	lui	a5,0x4
     f34:	00f777b3          	and	a5,a4,a5
     f38:	00078663          	beqz	a5,f44 <altera_avalon_jtag_uart_read+0x214>
    return -EWOULDBLOCK;
     f3c:	ff500793          	li	a5,-11
     f40:	0080006f          	j	f48 <altera_avalon_jtag_uart_read+0x218>
  else
    return -EIO;
     f44:	ffb00793          	li	a5,-5
}
     f48:	00078513          	mv	a0,a5
     f4c:	03c12083          	lw	ra,60(sp)
     f50:	03812403          	lw	s0,56(sp)
     f54:	04010113          	addi	sp,sp,64
     f58:	00008067          	ret

00000f5c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     f5c:	fc010113          	addi	sp,sp,-64
     f60:	02112e23          	sw	ra,60(sp)
     f64:	02812c23          	sw	s0,56(sp)
     f68:	04010413          	addi	s0,sp,64
     f6c:	fca42623          	sw	a0,-52(s0)
     f70:	fcb42423          	sw	a1,-56(s0)
     f74:	fcc42223          	sw	a2,-60(s0)
     f78:	fcd42023          	sw	a3,-64(s0)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
     f7c:	fc042823          	sw	zero,-48(s0)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
     f80:	fc842783          	lw	a5,-56(s0)
     f84:	fcf42c23          	sw	a5,-40(s0)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     f88:	0ec0006f          	j	1074 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     f8c:	fcc42783          	lw	a5,-52(s0)
     f90:	0307a783          	lw	a5,48(a5) # 4030 <memset+0x6c>
     f94:	fcf42e23          	sw	a5,-36(s0)
      out = sp->tx_out;
     f98:	fcc42783          	lw	a5,-52(s0)
     f9c:	0347a783          	lw	a5,52(a5)
     fa0:	fcf42823          	sw	a5,-48(s0)

      if (in < out)
     fa4:	fdc42703          	lw	a4,-36(s0)
     fa8:	fd042783          	lw	a5,-48(s0)
     fac:	00f77e63          	bgeu	a4,a5,fc8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
     fb0:	fd042703          	lw	a4,-48(s0)
     fb4:	fdc42783          	lw	a5,-36(s0)
     fb8:	40f707b3          	sub	a5,a4,a5
     fbc:	fff78793          	addi	a5,a5,-1
     fc0:	fcf42a23          	sw	a5,-44(s0)
     fc4:	0340006f          	j	ff8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
     fc8:	fd042783          	lw	a5,-48(s0)
     fcc:	00078e63          	beqz	a5,fe8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     fd0:	000017b7          	lui	a5,0x1
     fd4:	80078713          	addi	a4,a5,-2048 # 800 <altera_avalon_jtag_uart_ioctl_fd+0x48>
     fd8:	fdc42783          	lw	a5,-36(s0)
     fdc:	40f707b3          	sub	a5,a4,a5
     fe0:	fcf42a23          	sw	a5,-44(s0)
     fe4:	0140006f          	j	ff8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     fe8:	7ff00713          	li	a4,2047
     fec:	fdc42783          	lw	a5,-36(s0)
     ff0:	40f707b3          	sub	a5,a4,a5
     ff4:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
     ff8:	fd442783          	lw	a5,-44(s0)
     ffc:	08078263          	beqz	a5,1080 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    1000:	fc442783          	lw	a5,-60(s0)
    1004:	fd442703          	lw	a4,-44(s0)
    1008:	00e7f663          	bgeu	a5,a4,1014 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    100c:	fc442783          	lw	a5,-60(s0)
    1010:	fcf42a23          	sw	a5,-44(s0)

      memcpy(sp->tx_buf + in, ptr, n);
    1014:	fcc42703          	lw	a4,-52(s0)
    1018:	000017b7          	lui	a5,0x1
    101c:	83878793          	addi	a5,a5,-1992 # 838 <altera_avalon_jtag_uart_init+0x28>
    1020:	00f70733          	add	a4,a4,a5
    1024:	fdc42783          	lw	a5,-36(s0)
    1028:	00f707b3          	add	a5,a4,a5
    102c:	fd442603          	lw	a2,-44(s0)
    1030:	fc842583          	lw	a1,-56(s0)
    1034:	00078513          	mv	a0,a5
    1038:	5e9020ef          	jal	ra,3e20 <memcpy>
      ptr   += n;
    103c:	fc842703          	lw	a4,-56(s0)
    1040:	fd442783          	lw	a5,-44(s0)
    1044:	00f707b3          	add	a5,a4,a5
    1048:	fcf42423          	sw	a5,-56(s0)
      count -= n;
    104c:	fc442703          	lw	a4,-60(s0)
    1050:	fd442783          	lw	a5,-44(s0)
    1054:	40f707b3          	sub	a5,a4,a5
    1058:	fcf42223          	sw	a5,-60(s0)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    105c:	fdc42703          	lw	a4,-36(s0)
    1060:	fd442783          	lw	a5,-44(s0)
    1064:	00f707b3          	add	a5,a4,a5
    1068:	7ff7f713          	andi	a4,a5,2047
    106c:	fcc42783          	lw	a5,-52(s0)
    1070:	02e7a823          	sw	a4,48(a5)
    while (count > 0)
    1074:	fc442783          	lw	a5,-60(s0)
    1078:	f0f04ae3          	bgtz	a5,f8c <altera_avalon_jtag_uart_write+0x30>
    107c:	0080006f          	j	1084 <altera_avalon_jtag_uart_write+0x128>
        break;
    1080:	00000013          	nop
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1084:	00800793          	li	a5,8
    1088:	3007b7f3          	csrrc	a5,mstatus,a5
    108c:	fef42623          	sw	a5,-20(s0)
    return context;
    1090:	fec42783          	lw	a5,-20(s0)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1094:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1098:	fcc42783          	lw	a5,-52(s0)
    109c:	0207a783          	lw	a5,32(a5)
    10a0:	0027e713          	ori	a4,a5,2
    10a4:	fcc42783          	lw	a5,-52(s0)
    10a8:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    10ac:	fcc42783          	lw	a5,-52(s0)
    10b0:	0207a783          	lw	a5,32(a5)
    10b4:	fef42223          	sw	a5,-28(s0)
    10b8:	fcc42783          	lw	a5,-52(s0)
    10bc:	0007a783          	lw	a5,0(a5)
    10c0:	00478793          	addi	a5,a5,4
    10c4:	00078713          	mv	a4,a5
    10c8:	fe442783          	lw	a5,-28(s0)
    10cc:	00f72023          	sw	a5,0(a4)
    10d0:	fe042783          	lw	a5,-32(s0)
    10d4:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    10d8:	fe842783          	lw	a5,-24(s0)
    10dc:	0087f793          	andi	a5,a5,8
    10e0:	3007a073          	csrs	mstatus,a5
}
    10e4:	00000013          	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    10e8:	fc442783          	lw	a5,-60(s0)
    10ec:	04f05463          	blez	a5,1134 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    10f0:	fc042703          	lw	a4,-64(s0)
    10f4:	000047b7          	lui	a5,0x4
    10f8:	00f777b3          	and	a5,a4,a5
    10fc:	04079263          	bnez	a5,1140 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1100:	00000013          	nop
    1104:	fcc42783          	lw	a5,-52(s0)
    1108:	0347a783          	lw	a5,52(a5) # 4034 <memset+0x70>
    110c:	fd042703          	lw	a4,-48(s0)
    1110:	00f71c63          	bne	a4,a5,1128 <altera_avalon_jtag_uart_write+0x1cc>
    1114:	fcc42783          	lw	a5,-52(s0)
    1118:	0247a703          	lw	a4,36(a5)
    111c:	fcc42783          	lw	a5,-52(s0)
    1120:	0047a783          	lw	a5,4(a5)
    1124:	fef760e3          	bltu	a4,a5,1104 <altera_avalon_jtag_uart_write+0x1a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1128:	fcc42783          	lw	a5,-52(s0)
    112c:	0247a783          	lw	a5,36(a5)
    1130:	00079c63          	bnez	a5,1148 <altera_avalon_jtag_uart_write+0x1ec>
         break;
    }
  }
  while (count > 0);
    1134:	fc442783          	lw	a5,-60(s0)
    1138:	f2f04ee3          	bgtz	a5,1074 <altera_avalon_jtag_uart_write+0x118>
    113c:	0100006f          	j	114c <altera_avalon_jtag_uart_write+0x1f0>
        break;
    1140:	00000013          	nop
    1144:	0080006f          	j	114c <altera_avalon_jtag_uart_write+0x1f0>
         break;
    1148:	00000013          	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    114c:	fc842703          	lw	a4,-56(s0)
    1150:	fd842783          	lw	a5,-40(s0)
    1154:	00f70a63          	beq	a4,a5,1168 <altera_avalon_jtag_uart_write+0x20c>
    return ptr - start;
    1158:	fc842703          	lw	a4,-56(s0)
    115c:	fd842783          	lw	a5,-40(s0)
    1160:	40f707b3          	sub	a5,a4,a5
    1164:	0200006f          	j	1184 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    1168:	fc042703          	lw	a4,-64(s0)
    116c:	000047b7          	lui	a5,0x4
    1170:	00f777b3          	and	a5,a4,a5
    1174:	00078663          	beqz	a5,1180 <altera_avalon_jtag_uart_write+0x224>
    return -EWOULDBLOCK;
    1178:	ff500793          	li	a5,-11
    117c:	0080006f          	j	1184 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1180:	ffb00793          	li	a5,-5
}
    1184:	00078513          	mv	a0,a5
    1188:	03c12083          	lw	ra,60(sp)
    118c:	03812403          	lw	s0,56(sp)
    1190:	04010113          	addi	sp,sp,64
    1194:	00008067          	ret

00001198 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1198:	fd010113          	addi	sp,sp,-48
    119c:	02112623          	sw	ra,44(sp)
    11a0:	02812423          	sw	s0,40(sp)
    11a4:	03010413          	addi	s0,sp,48
    11a8:	fca42e23          	sw	a0,-36(s0)
    11ac:	fcb42c23          	sw	a1,-40(s0)
    11b0:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    11b4:	fdc42783          	lw	a5,-36(s0)
    11b8:	0007a783          	lw	a5,0(a5) # 4000 <memset+0x3c>
    11bc:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    11c0:	fec42783          	lw	a5,-20(s0)
    11c4:	02878713          	addi	a4,a5,40
    11c8:	fdc42783          	lw	a5,-36(s0)
    11cc:	0087a783          	lw	a5,8(a5)
    11d0:	00078693          	mv	a3,a5
    11d4:	fd442603          	lw	a2,-44(s0)
    11d8:	fd842583          	lw	a1,-40(s0)
    11dc:	00070513          	mv	a0,a4
    11e0:	514000ef          	jal	ra,16f4 <altera_avalon_uart_read>
    11e4:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    11e8:	00078513          	mv	a0,a5
    11ec:	02c12083          	lw	ra,44(sp)
    11f0:	02812403          	lw	s0,40(sp)
    11f4:	03010113          	addi	sp,sp,48
    11f8:	00008067          	ret

000011fc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    11fc:	fd010113          	addi	sp,sp,-48
    1200:	02112623          	sw	ra,44(sp)
    1204:	02812423          	sw	s0,40(sp)
    1208:	03010413          	addi	s0,sp,48
    120c:	fca42e23          	sw	a0,-36(s0)
    1210:	fcb42c23          	sw	a1,-40(s0)
    1214:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    1218:	fdc42783          	lw	a5,-36(s0)
    121c:	0007a783          	lw	a5,0(a5)
    1220:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    1224:	fec42783          	lw	a5,-20(s0)
    1228:	02878713          	addi	a4,a5,40
    122c:	fdc42783          	lw	a5,-36(s0)
    1230:	0087a783          	lw	a5,8(a5)
    1234:	00078693          	mv	a3,a5
    1238:	fd442603          	lw	a2,-44(s0)
    123c:	fd842583          	lw	a1,-40(s0)
    1240:	00070513          	mv	a0,a4
    1244:	6e8000ef          	jal	ra,192c <altera_avalon_uart_write>
    1248:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    124c:	00078513          	mv	a0,a5
    1250:	02c12083          	lw	ra,44(sp)
    1254:	02812403          	lw	s0,40(sp)
    1258:	03010113          	addi	sp,sp,48
    125c:	00008067          	ret

00001260 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    1260:	fd010113          	addi	sp,sp,-48
    1264:	02112623          	sw	ra,44(sp)
    1268:	02812423          	sw	s0,40(sp)
    126c:	03010413          	addi	s0,sp,48
    1270:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    1274:	fdc42783          	lw	a5,-36(s0)
    1278:	0007a783          	lw	a5,0(a5)
    127c:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    1280:	fec42783          	lw	a5,-20(s0)
    1284:	02878713          	addi	a4,a5,40
    1288:	fdc42783          	lw	a5,-36(s0)
    128c:	0087a783          	lw	a5,8(a5)
    1290:	00078593          	mv	a1,a5
    1294:	00070513          	mv	a0,a4
    1298:	3b8000ef          	jal	ra,1650 <altera_avalon_uart_close>
    129c:	00050793          	mv	a5,a0
}
    12a0:	00078513          	mv	a0,a5
    12a4:	02c12083          	lw	ra,44(sp)
    12a8:	02812403          	lw	s0,40(sp)
    12ac:	03010113          	addi	sp,sp,48
    12b0:	00008067          	ret

000012b4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    12b4:	fd010113          	addi	sp,sp,-48
    12b8:	02112623          	sw	ra,44(sp)
    12bc:	02812423          	sw	s0,40(sp)
    12c0:	03010413          	addi	s0,sp,48
    12c4:	fca42e23          	sw	a0,-36(s0)
    12c8:	fcb42c23          	sw	a1,-40(s0)
    12cc:	fcc42a23          	sw	a2,-44(s0)
  void* base = sp->base;
    12d0:	fdc42783          	lw	a5,-36(s0)
    12d4:	0007a783          	lw	a5,0(a5)
    12d8:	fef42223          	sw	a5,-28(s0)
    12dc:	00000793          	li	a5,0
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    12e0:	00079a63          	bnez	a5,12f4 <altera_avalon_uart_init+0x40>
    12e4:	00000793          	li	a5,0
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    12e8:	00079663          	bnez	a5,12f4 <altera_avalon_uart_init+0x40>
    12ec:	00000793          	li	a5,0
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    12f0:	00078663          	beqz	a5,12fc <altera_avalon_uart_init+0x48>
    12f4:	00100793          	li	a5,1
    12f8:	0080006f          	j	1300 <altera_avalon_uart_init+0x4c>
    12fc:	00000793          	li	a5,0
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    1300:	fef42423          	sw	a5,-24(s0)
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    1304:	fe842783          	lw	a5,-24(s0)
    1308:	04079663          	bnez	a5,1354 <altera_avalon_uart_init+0xa0>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    130c:	fdc42783          	lw	a5,-36(s0)
    1310:	00001737          	lui	a4,0x1
    1314:	c8070713          	addi	a4,a4,-896 # c80 <altera_avalon_jtag_uart_ioctl+0x50>
    1318:	00e7a223          	sw	a4,4(a5)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    131c:	fdc42783          	lw	a5,-36(s0)
    1320:	0047a783          	lw	a5,4(a5)
    1324:	fef42623          	sw	a5,-20(s0)
    1328:	fe442783          	lw	a5,-28(s0)
    132c:	00c78793          	addi	a5,a5,12
    1330:	fec42703          	lw	a4,-20(s0)
    1334:	00e7a023          	sw	a4,0(a5)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    1338:	00000713          	li	a4,0
    133c:	fdc42683          	lw	a3,-36(s0)
    1340:	000017b7          	lui	a5,0x1
    1344:	36878613          	addi	a2,a5,872 # 1368 <altera_avalon_uart_irq>
    1348:	fd442583          	lw	a1,-44(s0)
    134c:	fd842503          	lw	a0,-40(s0)
    1350:	3d9000ef          	jal	ra,1f28 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    1354:	00000013          	nop
    1358:	02c12083          	lw	ra,44(sp)
    135c:	02812403          	lw	s0,40(sp)
    1360:	03010113          	addi	sp,sp,48
    1364:	00008067          	ret

00001368 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    1368:	fc010113          	addi	sp,sp,-64
    136c:	02112e23          	sw	ra,60(sp)
    1370:	02812c23          	sw	s0,56(sp)
    1374:	04010413          	addi	s0,sp,64
    1378:	fca42623          	sw	a0,-52(s0)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    137c:	fcc42783          	lw	a5,-52(s0)
    1380:	fcf42c23          	sw	a5,-40(s0)
  void* base               = sp->base;
    1384:	fd842783          	lw	a5,-40(s0)
    1388:	0007a783          	lw	a5,0(a5)
    138c:	fcf42e23          	sw	a5,-36(s0)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    1390:	fdc42783          	lw	a5,-36(s0)
    1394:	00878793          	addi	a5,a5,8
    1398:	0007a783          	lw	a5,0(a5)
    139c:	fef42023          	sw	a5,-32(s0)
    13a0:	fe042783          	lw	a5,-32(s0)
    13a4:	fef42223          	sw	a5,-28(s0)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    13a8:	fe042423          	sw	zero,-24(s0)
    13ac:	fdc42783          	lw	a5,-36(s0)
    13b0:	00878793          	addi	a5,a5,8
    13b4:	fe842703          	lw	a4,-24(s0)
    13b8:	00e7a023          	sw	a4,0(a5)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    13bc:	fdc42783          	lw	a5,-36(s0)
    13c0:	00878793          	addi	a5,a5,8
    13c4:	0007a783          	lw	a5,0(a5)
    13c8:	fef42623          	sw	a5,-20(s0)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    13cc:	fe442783          	lw	a5,-28(s0)
    13d0:	0807f793          	andi	a5,a5,128
    13d4:	00078863          	beqz	a5,13e4 <altera_avalon_uart_irq+0x7c>
  {
    altera_avalon_uart_rxirq(sp, status);
    13d8:	fe442583          	lw	a1,-28(s0)
    13dc:	fd842503          	lw	a0,-40(s0)
    13e0:	030000ef          	jal	ra,1410 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    13e4:	fe442783          	lw	a5,-28(s0)
    13e8:	4407f793          	andi	a5,a5,1088
    13ec:	00078863          	beqz	a5,13fc <altera_avalon_uart_irq+0x94>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    13f0:	fe442583          	lw	a1,-28(s0)
    13f4:	fd842503          	lw	a0,-40(s0)
    13f8:	100000ef          	jal	ra,14f8 <altera_avalon_uart_txirq>
  }
  

}
    13fc:	00000013          	nop
    1400:	03c12083          	lw	ra,60(sp)
    1404:	03812403          	lw	s0,56(sp)
    1408:	04010113          	addi	sp,sp,64
    140c:	00008067          	ret

00001410 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    1410:	fd010113          	addi	sp,sp,-48
    1414:	02812623          	sw	s0,44(sp)
    1418:	03010413          	addi	s0,sp,48
    141c:	fca42e23          	sw	a0,-36(s0)
    1420:	fcb42c23          	sw	a1,-40(s0)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    1424:	fd842783          	lw	a5,-40(s0)
    1428:	0037f793          	andi	a5,a5,3
    142c:	0a079e63          	bnez	a5,14e8 <altera_avalon_uart_rxirq+0xd8>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    1430:	fdc42783          	lw	a5,-36(s0)
    1434:	00c7a783          	lw	a5,12(a5)
    1438:	fdc42783          	lw	a5,-36(s0)
    143c:	0087a783          	lw	a5,8(a5)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, ALT_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    1440:	fdc42783          	lw	a5,-36(s0)
    1444:	00c7a783          	lw	a5,12(a5)
    1448:	00178793          	addi	a5,a5,1
    144c:	03f7f793          	andi	a5,a5,63
    1450:	fef42223          	sw	a5,-28(s0)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    1454:	fdc42783          	lw	a5,-36(s0)
    1458:	0007a783          	lw	a5,0(a5)
    145c:	0007a783          	lw	a5,0(a5)
    1460:	fef42423          	sw	a5,-24(s0)
    1464:	fe842703          	lw	a4,-24(s0)
    1468:	fdc42783          	lw	a5,-36(s0)
    146c:	00c7a783          	lw	a5,12(a5)
    1470:	0ff77713          	zext.b	a4,a4
    1474:	fdc42683          	lw	a3,-36(s0)
    1478:	00f687b3          	add	a5,a3,a5
    147c:	00e78e23          	sb	a4,28(a5)

  sp->rx_end = next;
    1480:	fdc42783          	lw	a5,-36(s0)
    1484:	fe442703          	lw	a4,-28(s0)
    1488:	00e7a623          	sw	a4,12(a5)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    148c:	fdc42783          	lw	a5,-36(s0)
    1490:	00c7a783          	lw	a5,12(a5)
    1494:	00178793          	addi	a5,a5,1
    1498:	03f7f793          	andi	a5,a5,63
    149c:	fef42223          	sw	a5,-28(s0)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    14a0:	fdc42783          	lw	a5,-36(s0)
    14a4:	0087a783          	lw	a5,8(a5)
    14a8:	fe442703          	lw	a4,-28(s0)
    14ac:	04f71063          	bne	a4,a5,14ec <altera_avalon_uart_rxirq+0xdc>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    14b0:	fdc42783          	lw	a5,-36(s0)
    14b4:	0047a783          	lw	a5,4(a5)
    14b8:	f7f7f713          	andi	a4,a5,-129
    14bc:	fdc42783          	lw	a5,-36(s0)
    14c0:	00e7a223          	sw	a4,4(a5)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    14c4:	fdc42783          	lw	a5,-36(s0)
    14c8:	0047a783          	lw	a5,4(a5)
    14cc:	fef42623          	sw	a5,-20(s0)
    14d0:	fdc42783          	lw	a5,-36(s0)
    14d4:	0007a783          	lw	a5,0(a5)
    14d8:	00c78793          	addi	a5,a5,12
    14dc:	fec42703          	lw	a4,-20(s0)
    14e0:	00e7a023          	sw	a4,0(a5)
    14e4:	0080006f          	j	14ec <altera_avalon_uart_rxirq+0xdc>
    return;
    14e8:	00000013          	nop
  }   
}
    14ec:	02c12403          	lw	s0,44(sp)
    14f0:	03010113          	addi	sp,sp,48
    14f4:	00008067          	ret

000014f8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    14f8:	fd010113          	addi	sp,sp,-48
    14fc:	02812623          	sw	s0,44(sp)
    1500:	03010413          	addi	s0,sp,48
    1504:	fca42e23          	sw	a0,-36(s0)
    1508:	fcb42c23          	sw	a1,-40(s0)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    150c:	fdc42783          	lw	a5,-36(s0)
    1510:	0107a703          	lw	a4,16(a5)
    1514:	fdc42783          	lw	a5,-36(s0)
    1518:	0147a783          	lw	a5,20(a5)
    151c:	0cf70e63          	beq	a4,a5,15f8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    1520:	fdc42783          	lw	a5,-36(s0)
    1524:	0187a783          	lw	a5,24(a5)
    1528:	0027f793          	andi	a5,a5,2
    152c:	00078c63          	beqz	a5,1544 <altera_avalon_uart_txirq+0x4c>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    1530:	fd842703          	lw	a4,-40(s0)
    1534:	000017b7          	lui	a5,0x1
    1538:	80078793          	addi	a5,a5,-2048 # 800 <altera_avalon_jtag_uart_ioctl_fd+0x48>
    153c:	00f777b3          	and	a5,a4,a5
    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    1540:	06078a63          	beqz	a5,15b4 <altera_avalon_uart_txirq+0xbc>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    1544:	fdc42783          	lw	a5,-36(s0)
    1548:	0107a783          	lw	a5,16(a5)
    154c:	fdc42783          	lw	a5,-36(s0)
    1550:	0147a783          	lw	a5,20(a5)
                       ALT_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    1554:	fdc42783          	lw	a5,-36(s0)
    1558:	0107a783          	lw	a5,16(a5)
    155c:	fdc42703          	lw	a4,-36(s0)
    1560:	00f707b3          	add	a5,a4,a5
    1564:	05c7c783          	lbu	a5,92(a5)
    1568:	0ff7f793          	zext.b	a5,a5
    156c:	fef42423          	sw	a5,-24(s0)
    1570:	fdc42783          	lw	a5,-36(s0)
    1574:	0007a783          	lw	a5,0(a5)
    1578:	00478793          	addi	a5,a5,4
    157c:	fe842703          	lw	a4,-24(s0)
    1580:	00e7a023          	sw	a4,0(a5)

      sp->tx_start = ((sp->tx_start) + 1) & ALT_AVALON_UART_BUF_MSK;
    1584:	fdc42783          	lw	a5,-36(s0)
    1588:	0107a783          	lw	a5,16(a5)
    158c:	00178793          	addi	a5,a5,1
    1590:	03f7f713          	andi	a4,a5,63
    1594:	fdc42783          	lw	a5,-36(s0)
    1598:	00e7a823          	sw	a4,16(a5)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    159c:	fdc42783          	lw	a5,-36(s0)
    15a0:	0047a783          	lw	a5,4(a5)
    15a4:	0407e713          	ori	a4,a5,64
    15a8:	fdc42783          	lw	a5,-36(s0)
    15ac:	00e7a223          	sw	a4,4(a5)
    15b0:	0480006f          	j	15f8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    15b4:	fdc42783          	lw	a5,-36(s0)
    15b8:	0007a783          	lw	a5,0(a5)
    15bc:	00878793          	addi	a5,a5,8
    15c0:	0007a783          	lw	a5,0(a5)
    15c4:	fef42223          	sw	a5,-28(s0)
    15c8:	fe442783          	lw	a5,-28(s0)
    15cc:	fcf42c23          	sw	a5,-40(s0)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    15d0:	fd842703          	lw	a4,-40(s0)
    15d4:	000017b7          	lui	a5,0x1
    15d8:	80078793          	addi	a5,a5,-2048 # 800 <altera_avalon_jtag_uart_ioctl_fd+0x48>
    15dc:	00f777b3          	and	a5,a4,a5
    15e0:	00079c63          	bnez	a5,15f8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    15e4:	fdc42783          	lw	a5,-36(s0)
    15e8:	0047a783          	lw	a5,4(a5)
    15ec:	fbf7f713          	andi	a4,a5,-65
    15f0:	fdc42783          	lw	a5,-36(s0)
    15f4:	00e7a223          	sw	a4,4(a5)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    15f8:	fdc42783          	lw	a5,-36(s0)
    15fc:	0107a703          	lw	a4,16(a5)
    1600:	fdc42783          	lw	a5,-36(s0)
    1604:	0147a783          	lw	a5,20(a5)
    1608:	00f71c63          	bne	a4,a5,1620 <altera_avalon_uart_txirq+0x128>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    160c:	fdc42783          	lw	a5,-36(s0)
    1610:	0047a783          	lw	a5,4(a5)
    1614:	bbf7f713          	andi	a4,a5,-1089
    1618:	fdc42783          	lw	a5,-36(s0)
    161c:	00e7a223          	sw	a4,4(a5)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1620:	fdc42783          	lw	a5,-36(s0)
    1624:	0047a783          	lw	a5,4(a5)
    1628:	fef42623          	sw	a5,-20(s0)
    162c:	fdc42783          	lw	a5,-36(s0)
    1630:	0007a783          	lw	a5,0(a5)
    1634:	00c78793          	addi	a5,a5,12
    1638:	fec42703          	lw	a4,-20(s0)
    163c:	00e7a023          	sw	a4,0(a5)
}
    1640:	00000013          	nop
    1644:	02c12403          	lw	s0,44(sp)
    1648:	03010113          	addi	sp,sp,48
    164c:	00008067          	ret

00001650 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    1650:	fe010113          	addi	sp,sp,-32
    1654:	00812e23          	sw	s0,28(sp)
    1658:	02010413          	addi	s0,sp,32
    165c:	fea42623          	sw	a0,-20(s0)
    1660:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    1664:	01c0006f          	j	1680 <altera_avalon_uart_close+0x30>
    if (flags & O_NONBLOCK) {
    1668:	fe842703          	lw	a4,-24(s0)
    166c:	000047b7          	lui	a5,0x4
    1670:	00f777b3          	and	a5,a4,a5
    1674:	00078663          	beqz	a5,1680 <altera_avalon_uart_close+0x30>
      return -EWOULDBLOCK; 
    1678:	ff500793          	li	a5,-11
    167c:	01c0006f          	j	1698 <altera_avalon_uart_close+0x48>
  while (sp->tx_start != sp->tx_end) {
    1680:	fec42783          	lw	a5,-20(s0)
    1684:	0107a703          	lw	a4,16(a5) # 4010 <memset+0x4c>
    1688:	fec42783          	lw	a5,-20(s0)
    168c:	0147a783          	lw	a5,20(a5)
    1690:	fcf71ce3          	bne	a4,a5,1668 <altera_avalon_uart_close+0x18>
    }
  }

  return 0;
    1694:	00000793          	li	a5,0
}
    1698:	00078513          	mv	a0,a5
    169c:	01c12403          	lw	s0,28(sp)
    16a0:	02010113          	addi	sp,sp,32
    16a4:	00008067          	ret

000016a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    16a8:	ff010113          	addi	sp,sp,-16
    16ac:	00112623          	sw	ra,12(sp)
    16b0:	00812423          	sw	s0,8(sp)
    16b4:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    16b8:	000097b7          	lui	a5,0x9
    16bc:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    16c0:	00078c63          	beqz	a5,16d8 <alt_get_errno+0x30>
    16c4:	000097b7          	lui	a5,0x9
    16c8:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    16cc:	000780e7          	jalr	a5
    16d0:	00050793          	mv	a5,a0
    16d4:	00c0006f          	j	16e0 <alt_get_errno+0x38>
    16d8:	0000b7b7          	lui	a5,0xb
    16dc:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    16e0:	00078513          	mv	a0,a5
    16e4:	00c12083          	lw	ra,12(sp)
    16e8:	00812403          	lw	s0,8(sp)
    16ec:	01010113          	addi	sp,sp,16
    16f0:	00008067          	ret

000016f4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    16f4:	fb010113          	addi	sp,sp,-80
    16f8:	04112623          	sw	ra,76(sp)
    16fc:	04812423          	sw	s0,72(sp)
    1700:	05010413          	addi	s0,sp,80
    1704:	faa42e23          	sw	a0,-68(s0)
    1708:	fab42c23          	sw	a1,-72(s0)
    170c:	fac42a23          	sw	a2,-76(s0)
    1710:	fad42823          	sw	a3,-80(s0)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
    1714:	fc0405a3          	sb	zero,-53(s0)
  int             count = 0;
    1718:	fc042623          	sw	zero,-52(s0)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    171c:	fb042703          	lw	a4,-80(s0)
    1720:	000047b7          	lui	a5,0x4
    1724:	00f777b3          	and	a5,a4,a5
    1728:	0017b793          	seqz	a5,a5
    172c:	0ff7f793          	zext.b	a5,a5
    1730:	fcf42823          	sw	a5,-48(s0)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    1734:	0500006f          	j	1784 <altera_avalon_uart_read+0x90>
    {
      count++;
    1738:	fcc42783          	lw	a5,-52(s0)
    173c:	00178793          	addi	a5,a5,1 # 4001 <memset+0x3d>
    1740:	fcf42623          	sw	a5,-52(s0)
      *ptr++ = sp->rx_buf[sp->rx_start];
    1744:	fbc42783          	lw	a5,-68(s0)
    1748:	0087a703          	lw	a4,8(a5)
    174c:	fb842783          	lw	a5,-72(s0)
    1750:	00178693          	addi	a3,a5,1
    1754:	fad42c23          	sw	a3,-72(s0)
    1758:	fbc42683          	lw	a3,-68(s0)
    175c:	00e68733          	add	a4,a3,a4
    1760:	01c74703          	lbu	a4,28(a4)
    1764:	0ff77713          	zext.b	a4,a4
    1768:	00e78023          	sb	a4,0(a5)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
    176c:	fbc42783          	lw	a5,-68(s0)
    1770:	0087a783          	lw	a5,8(a5)
    1774:	00178793          	addi	a5,a5,1
    1778:	03f7f713          	andi	a4,a5,63
    177c:	fbc42783          	lw	a5,-68(s0)
    1780:	00e7a423          	sw	a4,8(a5)
    while ((count < len) && (sp->rx_start != sp->rx_end))
    1784:	fcc42703          	lw	a4,-52(s0)
    1788:	fb442783          	lw	a5,-76(s0)
    178c:	00f75c63          	bge	a4,a5,17a4 <altera_avalon_uart_read+0xb0>
    1790:	fbc42783          	lw	a5,-68(s0)
    1794:	0087a703          	lw	a4,8(a5)
    1798:	fbc42783          	lw	a5,-68(s0)
    179c:	00c7a783          	lw	a5,12(a5)
    17a0:	f8f71ce3          	bne	a4,a5,1738 <altera_avalon_uart_read+0x44>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    17a4:	fcc42783          	lw	a5,-52(s0)
    17a8:	0a079063          	bnez	a5,1848 <altera_avalon_uart_read+0x154>
    17ac:	fbc42783          	lw	a5,-68(s0)
    17b0:	0087a703          	lw	a4,8(a5)
    17b4:	fbc42783          	lw	a5,-68(s0)
    17b8:	00c7a783          	lw	a5,12(a5)
    17bc:	08f71663          	bne	a4,a5,1848 <altera_avalon_uart_read+0x154>
    {
      if (!block)
    17c0:	fd042783          	lw	a5,-48(s0)
    17c4:	02079063          	bnez	a5,17e4 <altera_avalon_uart_read+0xf0>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    17c8:	ee1ff0ef          	jal	ra,16a8 <alt_get_errno>
    17cc:	00050713          	mv	a4,a0
    17d0:	00b00793          	li	a5,11
    17d4:	00f72023          	sw	a5,0(a4)
        read_would_block = 1;
    17d8:	00100793          	li	a5,1
    17dc:	fcf405a3          	sb	a5,-53(s0)
        break;
    17e0:	0780006f          	j	1858 <altera_avalon_uart_read+0x164>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    17e4:	00800793          	li	a5,8
    17e8:	3007b7f3          	csrrc	a5,mstatus,a5
    17ec:	fef42223          	sw	a5,-28(s0)
    return context;
    17f0:	fe442783          	lw	a5,-28(s0)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    17f4:	fcf42a23          	sw	a5,-44(s0)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    17f8:	fbc42783          	lw	a5,-68(s0)
    17fc:	0047a783          	lw	a5,4(a5)
    1800:	0807e713          	ori	a4,a5,128
    1804:	fbc42783          	lw	a5,-68(s0)
    1808:	00e7a223          	sw	a4,4(a5)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    180c:	fbc42783          	lw	a5,-68(s0)
    1810:	0047a783          	lw	a5,4(a5)
    1814:	fcf42c23          	sw	a5,-40(s0)
    1818:	fbc42783          	lw	a5,-68(s0)
    181c:	0007a783          	lw	a5,0(a5)
    1820:	00c78793          	addi	a5,a5,12
    1824:	fd842703          	lw	a4,-40(s0)
    1828:	00e7a023          	sw	a4,0(a5)
    182c:	fd442783          	lw	a5,-44(s0)
    1830:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1834:	fe042783          	lw	a5,-32(s0)
    1838:	0087f793          	andi	a5,a5,8
    183c:	3007a073          	csrs	mstatus,a5
}
    1840:	00000013          	nop
    1844:	00000013          	nop
                      ALT_FLAG_WAIT_SET_ANY_WITH_CONSUME,
                      ALT_FLAG_WAIT_MAX_TIMEOUT);
      }
    }
  }
  while (!count && len);
    1848:	fcc42783          	lw	a5,-52(s0)
    184c:	00079663          	bnez	a5,1858 <altera_avalon_uart_read+0x164>
    1850:	fb442783          	lw	a5,-76(s0)
    1854:	f20798e3          	bnez	a5,1784 <altera_avalon_uart_read+0x90>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1858:	00800793          	li	a5,8
    185c:	3007b7f3          	csrrc	a5,mstatus,a5
    1860:	fef42623          	sw	a5,-20(s0)
    return context;
    1864:	fec42783          	lw	a5,-20(s0)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    1868:	fcf42a23          	sw	a5,-44(s0)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    186c:	fbc42783          	lw	a5,-68(s0)
    1870:	0047a783          	lw	a5,4(a5)
    1874:	0807e713          	ori	a4,a5,128
    1878:	fbc42783          	lw	a5,-68(s0)
    187c:	00e7a223          	sw	a4,4(a5)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1880:	fbc42783          	lw	a5,-68(s0)
    1884:	0047a783          	lw	a5,4(a5)
    1888:	fcf42e23          	sw	a5,-36(s0)
    188c:	fbc42783          	lw	a5,-68(s0)
    1890:	0007a783          	lw	a5,0(a5)
    1894:	00c78793          	addi	a5,a5,12
    1898:	fdc42703          	lw	a4,-36(s0)
    189c:	00e7a023          	sw	a4,0(a5)
    18a0:	fd442783          	lw	a5,-44(s0)
    18a4:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    18a8:	fe842783          	lw	a5,-24(s0)
    18ac:	0087f793          	andi	a5,a5,8
    18b0:	3007a073          	csrs	mstatus,a5
}
    18b4:	00000013          	nop
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    18b8:	fcb44783          	lbu	a5,-53(s0)
    18bc:	00078663          	beqz	a5,18c8 <altera_avalon_uart_read+0x1d4>
    return -EWOULDBLOCK;
    18c0:	ff500793          	li	a5,-11
    18c4:	0080006f          	j	18cc <altera_avalon_uart_read+0x1d8>
  }
  else {
    return count;
    18c8:	fcc42783          	lw	a5,-52(s0)
  }
}
    18cc:	00078513          	mv	a0,a5
    18d0:	04c12083          	lw	ra,76(sp)
    18d4:	04812403          	lw	s0,72(sp)
    18d8:	05010113          	addi	sp,sp,80
    18dc:	00008067          	ret

000018e0 <alt_get_errno>:
{
    18e0:	ff010113          	addi	sp,sp,-16
    18e4:	00112623          	sw	ra,12(sp)
    18e8:	00812423          	sw	s0,8(sp)
    18ec:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    18f0:	000097b7          	lui	a5,0x9
    18f4:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    18f8:	00078c63          	beqz	a5,1910 <alt_get_errno+0x30>
    18fc:	000097b7          	lui	a5,0x9
    1900:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    1904:	000780e7          	jalr	a5
    1908:	00050793          	mv	a5,a0
    190c:	00c0006f          	j	1918 <alt_get_errno+0x38>
    1910:	0000b7b7          	lui	a5,0xb
    1914:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    1918:	00078513          	mv	a0,a5
    191c:	00c12083          	lw	ra,12(sp)
    1920:	00812403          	lw	s0,8(sp)
    1924:	01010113          	addi	sp,sp,16
    1928:	00008067          	ret

0000192c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    192c:	fb010113          	addi	sp,sp,-80
    1930:	04112623          	sw	ra,76(sp)
    1934:	04812423          	sw	s0,72(sp)
    1938:	05010413          	addi	s0,sp,80
    193c:	faa42e23          	sw	a0,-68(s0)
    1940:	fab42c23          	sw	a1,-72(s0)
    1944:	fac42a23          	sw	a2,-76(s0)
    1948:	fad42823          	sw	a3,-80(s0)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    194c:	fb442783          	lw	a5,-76(s0)
    1950:	fcf42423          	sw	a5,-56(s0)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    1954:	fb042703          	lw	a4,-80(s0)
    1958:	000047b7          	lui	a5,0x4
    195c:	00f777b3          	and	a5,a4,a5
    1960:	fcf42623          	sw	a5,-52(s0)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    1964:	0f40006f          	j	1a58 <altera_avalon_uart_write+0x12c>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    1968:	fbc42783          	lw	a5,-68(s0)
    196c:	0147a783          	lw	a5,20(a5) # 4014 <memset+0x50>
    1970:	00178793          	addi	a5,a5,1
    1974:	03f7f793          	andi	a5,a5,63
    1978:	fcf42823          	sw	a5,-48(s0)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    197c:	fbc42783          	lw	a5,-68(s0)
    1980:	0107a783          	lw	a5,16(a5)
    1984:	fd042703          	lw	a4,-48(s0)
    1988:	08f71a63          	bne	a4,a5,1a1c <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    198c:	fcc42783          	lw	a5,-52(s0)
    1990:	00078c63          	beqz	a5,19a8 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    1994:	f4dff0ef          	jal	ra,18e0 <alt_get_errno>
    1998:	00050713          	mv	a4,a0
    199c:	00b00793          	li	a5,11
    19a0:	00f72023          	sw	a5,0(a4)
        break;
    19a4:	0bc0006f          	j	1a60 <altera_avalon_uart_write+0x134>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    19a8:	00800793          	li	a5,8
    19ac:	3007b7f3          	csrrc	a5,mstatus,a5
    19b0:	fef42223          	sw	a5,-28(s0)
    return context;
    19b4:	fe442783          	lw	a5,-28(s0)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    19b8:	fcf42a23          	sw	a5,-44(s0)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    19bc:	fbc42783          	lw	a5,-68(s0)
    19c0:	0047a783          	lw	a5,4(a5)
    19c4:	4407e713          	ori	a4,a5,1088
    19c8:	fbc42783          	lw	a5,-68(s0)
    19cc:	00e7a223          	sw	a4,4(a5)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    19d0:	fbc42783          	lw	a5,-68(s0)
    19d4:	0047a783          	lw	a5,4(a5)
    19d8:	fcf42c23          	sw	a5,-40(s0)
    19dc:	fbc42783          	lw	a5,-68(s0)
    19e0:	0007a783          	lw	a5,0(a5)
    19e4:	00c78793          	addi	a5,a5,12
    19e8:	fd842703          	lw	a4,-40(s0)
    19ec:	00e7a023          	sw	a4,0(a5)
    19f0:	fd442783          	lw	a5,-44(s0)
    19f4:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    19f8:	fe042783          	lw	a5,-32(s0)
    19fc:	0087f793          	andi	a5,a5,8
    1a00:	3007a073          	csrs	mstatus,a5
}
    1a04:	00000013          	nop
    1a08:	00000013          	nop
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         ALT_FLAG_WAIT_SET_ANY_WITH_CONSUME,
                         ALT_FLAG_WAIT_MAX_TIMEOUT);
        }
        while ((next == sp->tx_start));
    1a0c:	fbc42783          	lw	a5,-68(s0)
    1a10:	0107a783          	lw	a5,16(a5)
    1a14:	fd042703          	lw	a4,-48(s0)
    1a18:	fef708e3          	beq	a4,a5,1a08 <altera_avalon_uart_write+0xdc>
      }
    }

    count--;
    1a1c:	fc842783          	lw	a5,-56(s0)
    1a20:	fff78793          	addi	a5,a5,-1
    1a24:	fcf42423          	sw	a5,-56(s0)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    1a28:	fb842783          	lw	a5,-72(s0)
    1a2c:	00178713          	addi	a4,a5,1
    1a30:	fae42c23          	sw	a4,-72(s0)
    1a34:	fbc42703          	lw	a4,-68(s0)
    1a38:	01472683          	lw	a3,20(a4)
    1a3c:	0007c703          	lbu	a4,0(a5)
    1a40:	fbc42783          	lw	a5,-68(s0)
    1a44:	00d787b3          	add	a5,a5,a3
    1a48:	04e78e23          	sb	a4,92(a5)
    sp->tx_end = next;
    1a4c:	fbc42783          	lw	a5,-68(s0)
    1a50:	fd042703          	lw	a4,-48(s0)
    1a54:	00e7aa23          	sw	a4,20(a5)
  while (count)
    1a58:	fc842783          	lw	a5,-56(s0)
    1a5c:	f00796e3          	bnez	a5,1968 <altera_avalon_uart_write+0x3c>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1a60:	00800793          	li	a5,8
    1a64:	3007b7f3          	csrrc	a5,mstatus,a5
    1a68:	fef42623          	sw	a5,-20(s0)
    return context;
    1a6c:	fec42783          	lw	a5,-20(s0)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    1a70:	fcf42a23          	sw	a5,-44(s0)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    1a74:	fbc42783          	lw	a5,-68(s0)
    1a78:	0047a783          	lw	a5,4(a5)
    1a7c:	4407e713          	ori	a4,a5,1088
    1a80:	fbc42783          	lw	a5,-68(s0)
    1a84:	00e7a223          	sw	a4,4(a5)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1a88:	fbc42783          	lw	a5,-68(s0)
    1a8c:	0047a783          	lw	a5,4(a5)
    1a90:	fcf42e23          	sw	a5,-36(s0)
    1a94:	fbc42783          	lw	a5,-68(s0)
    1a98:	0007a783          	lw	a5,0(a5)
    1a9c:	00c78793          	addi	a5,a5,12
    1aa0:	fdc42703          	lw	a4,-36(s0)
    1aa4:	00e7a023          	sw	a4,0(a5)
    1aa8:	fd442783          	lw	a5,-44(s0)
    1aac:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1ab0:	fe842783          	lw	a5,-24(s0)
    1ab4:	0087f793          	andi	a5,a5,8
    1ab8:	3007a073          	csrs	mstatus,a5
}
    1abc:	00000013          	nop
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    1ac0:	fb442703          	lw	a4,-76(s0)
    1ac4:	fc842783          	lw	a5,-56(s0)
    1ac8:	40f707b3          	sub	a5,a4,a5
}
    1acc:	00078513          	mv	a0,a5
    1ad0:	04c12083          	lw	ra,76(sp)
    1ad4:	04812403          	lw	s0,72(sp)
    1ad8:	05010113          	addi	sp,sp,80
    1adc:	00008067          	ret

00001ae0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1ae0:	fc010113          	addi	sp,sp,-64
    1ae4:	02812e23          	sw	s0,60(sp)
    1ae8:	04010413          	addi	s0,sp,64
    1aec:	fca42623          	sw	a0,-52(s0)
    1af0:	fcb42423          	sw	a1,-56(s0)
    1af4:	fcc42223          	sw	a2,-60(s0)
    1af8:	fcd42023          	sw	a3,-64(s0)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    1afc:	00000713          	li	a4,0
    1b00:	00000793          	li	a5,0
    1b04:	fee42423          	sw	a4,-24(s0)
    1b08:	fef42623          	sw	a5,-20(s0)
    1b0c:	0000b7b7          	lui	a5,0xb
    1b10:	ac07a783          	lw	a5,-1344(a5) # aac0 <_alt_tick_rate>
  
  if (alt_ticks_per_second ())
    1b14:	12078263          	beqz	a5,1c38 <alt_alarm_start+0x158>
  {
    if (alarm)
    1b18:	fcc42783          	lw	a5,-52(s0)
    1b1c:	10078a63          	beqz	a5,1c30 <alt_alarm_start+0x150>
    {
      alarm->callback = callback;
    1b20:	fcc42783          	lw	a5,-52(s0)
    1b24:	fc442703          	lw	a4,-60(s0)
    1b28:	00e7a823          	sw	a4,16(a5)
      alarm->context  = context;
    1b2c:	fcc42783          	lw	a5,-52(s0)
    1b30:	fc042703          	lw	a4,-64(s0)
    1b34:	00e7aa23          	sw	a4,20(a5)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1b38:	00800793          	li	a5,8
    1b3c:	3007b7f3          	csrrc	a5,mstatus,a5
    1b40:	fef42223          	sw	a5,-28(s0)
    return context;
    1b44:	fe442783          	lw	a5,-28(s0)
 
      irq_context = alt_irq_disable_all ();
    1b48:	fcf42a23          	sw	a5,-44(s0)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1b4c:	0000b7b7          	lui	a5,0xb
    1b50:	ac87a703          	lw	a4,-1336(a5) # aac8 <_alt_nticks>
    1b54:	acc7a783          	lw	a5,-1332(a5)
      
      current_nticks = alt_nticks();
    1b58:	fee42423          	sw	a4,-24(s0)
    1b5c:	fef42623          	sw	a5,-20(s0)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    1b60:	fc842783          	lw	a5,-56(s0)
    1b64:	00078813          	mv	a6,a5
    1b68:	00000893          	li	a7,0
    1b6c:	fe842603          	lw	a2,-24(s0)
    1b70:	fec42683          	lw	a3,-20(s0)
    1b74:	00c80733          	add	a4,a6,a2
    1b78:	00070593          	mv	a1,a4
    1b7c:	0105b5b3          	sltu	a1,a1,a6
    1b80:	00d887b3          	add	a5,a7,a3
    1b84:	00f586b3          	add	a3,a1,a5
    1b88:	00068793          	mv	a5,a3
    1b8c:	00070613          	mv	a2,a4
    1b90:	00078693          	mv	a3,a5
    1b94:	00100513          	li	a0,1
    1b98:	00000593          	li	a1,0
    1b9c:	00a60733          	add	a4,a2,a0
    1ba0:	00070813          	mv	a6,a4
    1ba4:	00c83833          	sltu	a6,a6,a2
    1ba8:	00b687b3          	add	a5,a3,a1
    1bac:	00f806b3          	add	a3,a6,a5
    1bb0:	00068793          	mv	a5,a3
    1bb4:	fcc42683          	lw	a3,-52(s0)
    1bb8:	00e6a423          	sw	a4,8(a3)
    1bbc:	00f6a623          	sw	a5,12(a3)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1bc0:	fcc42783          	lw	a5,-52(s0)
    1bc4:	00009737          	lui	a4,0x9
    1bc8:	f4c70713          	addi	a4,a4,-180 # 8f4c <alt_alarm_list>
    1bcc:	fce42e23          	sw	a4,-36(s0)
    1bd0:	fef42023          	sw	a5,-32(s0)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1bd4:	fe042783          	lw	a5,-32(s0)
    1bd8:	fdc42703          	lw	a4,-36(s0)
    1bdc:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    1be0:	fdc42783          	lw	a5,-36(s0)
    1be4:	0007a703          	lw	a4,0(a5)
    1be8:	fe042783          	lw	a5,-32(s0)
    1bec:	00e7a023          	sw	a4,0(a5)

  list->next->previous = entry;
    1bf0:	fdc42783          	lw	a5,-36(s0)
    1bf4:	0007a783          	lw	a5,0(a5)
    1bf8:	fe042703          	lw	a4,-32(s0)
    1bfc:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    1c00:	fdc42783          	lw	a5,-36(s0)
    1c04:	fe042703          	lw	a4,-32(s0)
    1c08:	00e7a023          	sw	a4,0(a5)
}
    1c0c:	00000013          	nop
    1c10:	fd442783          	lw	a5,-44(s0)
    1c14:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1c18:	fd842783          	lw	a5,-40(s0)
    1c1c:	0087f793          	andi	a5,a5,8
    1c20:	3007a073          	csrs	mstatus,a5
}
    1c24:	00000013          	nop
      alt_irq_enable_all (irq_context);

      return 0;
    1c28:	00000793          	li	a5,0
    1c2c:	0100006f          	j	1c3c <alt_alarm_start+0x15c>
    }
    else
    {
      return -EINVAL;
    1c30:	fea00793          	li	a5,-22
    1c34:	0080006f          	j	1c3c <alt_alarm_start+0x15c>
    }
  }
  else
  {
    return -ENOTSUP;
    1c38:	f7a00793          	li	a5,-134
  }
}
    1c3c:	00078513          	mv	a0,a5
    1c40:	03c12403          	lw	s0,60(sp)
    1c44:	04010113          	addi	sp,sp,64
    1c48:	00008067          	ret

00001c4c <alt_busy_sleep>:

// For a 50 Mhz clock, this is 1,202,590,842.
#define US_PER_OUTER_LOOP ((alt_u64)CLOCKS_PER_OUTER_LOOP / (alt_u64)CPU_FREQUENCY_MHZ)

unsigned int alt_busy_sleep (unsigned int us)
{
    1c4c:	fd010113          	addi	sp,sp,-48
    1c50:	02112623          	sw	ra,44(sp)
    1c54:	02812423          	sw	s0,40(sp)
    1c58:	03010413          	addi	s0,sp,48
    1c5c:	fca42e23          	sw	a0,-36(s0)
 * is connected, use that. If no timer agent is connected, fallback to a low accuracy busy
 * loop. If accurate timing is desired for busy sleep (used by usleep), please be sure to
 * provide a timestamp source, or connect the timer agent.
 */
#if HAL_TIMESTAMP_ENABLED
    alt_timestamp_start();
    1c60:	07d000ef          	jal	ra,24dc <alt_timestamp_start>
    const alt_timestamp_type end_time = (CPU_FREQUENCY_MHZ * us);
    1c64:	fdc42703          	lw	a4,-36(s0)
    1c68:	00070793          	mv	a5,a4
    1c6c:	00179793          	slli	a5,a5,0x1
    1c70:	00e787b3          	add	a5,a5,a4
    1c74:	00379793          	slli	a5,a5,0x3
    1c78:	00e787b3          	add	a5,a5,a4
    1c7c:	00279793          	slli	a5,a5,0x2
    1c80:	fef42423          	sw	a5,-24(s0)
    1c84:	fe042623          	sw	zero,-20(s0)
    while (alt_timestamp() < end_time) {
    1c88:	00000013          	nop
    1c8c:	091000ef          	jal	ra,251c <alt_timestamp>
    1c90:	00050713          	mv	a4,a0
    1c94:	00058793          	mv	a5,a1
    1c98:	fec42683          	lw	a3,-20(s0)
    1c9c:	00078613          	mv	a2,a5
    1ca0:	fed666e3          	bltu	a2,a3,1c8c <alt_busy_sleep+0x40>
    1ca4:	fec42683          	lw	a3,-20(s0)
    1ca8:	00078613          	mv	a2,a5
    1cac:	00c69863          	bne	a3,a2,1cbc <alt_busy_sleep+0x70>
    1cb0:	fe842683          	lw	a3,-24(s0)
    1cb4:	00070793          	mv	a5,a4
    1cb8:	fcd7eae3          	bltu	a5,a3,1c8c <alt_busy_sleep+0x40>
        );
    }
#endif
#endif /* #ifndef ALT_SIM_OPTIMIZE */

  return 0;
    1cbc:	00000793          	li	a5,0
}
    1cc0:	00078513          	mv	a0,a5
    1cc4:	02c12083          	lw	ra,44(sp)
    1cc8:	02812403          	lw	s0,40(sp)
    1ccc:	03010113          	addi	sp,sp,48
    1cd0:	00008067          	ret

00001cd4 <alt_dcache_flush_all>:

/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */
void alt_dcache_flush_all (void)
{
    1cd4:	ff010113          	addi	sp,sp,-16
    1cd8:	00812623          	sw	s0,12(sp)
    1cdc:	01010413          	addi	s0,sp,16
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    { 
      DCACHE_CLEAN_BY_INDEX_VAL(i); 
    }
#endif
}
    1ce0:	00000013          	nop
    1ce4:	00c12403          	lw	s0,12(sp)
    1ce8:	01010113          	addi	sp,sp,16
    1cec:	00008067          	ret

00001cf0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1cf0:	fe010113          	addi	sp,sp,-32
    1cf4:	00812e23          	sw	s0,28(sp)
    1cf8:	02010413          	addi	s0,sp,32
    1cfc:	fea42623          	sw	a0,-20(s0)
    1d00:	feb42423          	sw	a1,-24(s0)
    1d04:	fec42223          	sw	a2,-28(s0)
  return len;
    1d08:	fe442783          	lw	a5,-28(s0)
}
    1d0c:	00078513          	mv	a0,a5
    1d10:	01c12403          	lw	s0,28(sp)
    1d14:	02010113          	addi	sp,sp,32
    1d18:	00008067          	ret

00001d1c <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
    1d1c:	fe010113          	addi	sp,sp,-32
    1d20:	00112e23          	sw	ra,28(sp)
    1d24:	00812c23          	sw	s0,24(sp)
    1d28:	02010413          	addi	s0,sp,32
    1d2c:	fea42623          	sw	a0,-20(s0)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1d30:	000097b7          	lui	a5,0x9
    1d34:	f3c78593          	addi	a1,a5,-196 # 8f3c <alt_dev_list>
    1d38:	fec42503          	lw	a0,-20(s0)
    1d3c:	068000ef          	jal	ra,1da4 <alt_dev_llist_insert>
    1d40:	00050793          	mv	a5,a0
}
    1d44:	00078513          	mv	a0,a5
    1d48:	01c12083          	lw	ra,28(sp)
    1d4c:	01812403          	lw	s0,24(sp)
    1d50:	02010113          	addi	sp,sp,32
    1d54:	00008067          	ret

00001d58 <alt_get_errno>:
{
    1d58:	ff010113          	addi	sp,sp,-16
    1d5c:	00112623          	sw	ra,12(sp)
    1d60:	00812423          	sw	s0,8(sp)
    1d64:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    1d68:	000097b7          	lui	a5,0x9
    1d6c:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    1d70:	00078c63          	beqz	a5,1d88 <alt_get_errno+0x30>
    1d74:	000097b7          	lui	a5,0x9
    1d78:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    1d7c:	000780e7          	jalr	a5
    1d80:	00050793          	mv	a5,a0
    1d84:	00c0006f          	j	1d90 <alt_get_errno+0x38>
    1d88:	0000b7b7          	lui	a5,0xb
    1d8c:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    1d90:	00078513          	mv	a0,a5
    1d94:	00c12083          	lw	ra,12(sp)
    1d98:	00812403          	lw	s0,8(sp)
    1d9c:	01010113          	addi	sp,sp,16
    1da0:	00008067          	ret

00001da4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1da4:	fd010113          	addi	sp,sp,-48
    1da8:	02112623          	sw	ra,44(sp)
    1dac:	02812423          	sw	s0,40(sp)
    1db0:	03010413          	addi	s0,sp,48
    1db4:	fca42e23          	sw	a0,-36(s0)
    1db8:	fcb42c23          	sw	a1,-40(s0)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1dbc:	fdc42783          	lw	a5,-36(s0)
    1dc0:	00078863          	beqz	a5,1dd0 <alt_dev_llist_insert+0x2c>
    1dc4:	fdc42783          	lw	a5,-36(s0)
    1dc8:	0087a783          	lw	a5,8(a5)
    1dcc:	00079e63          	bnez	a5,1de8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    1dd0:	f89ff0ef          	jal	ra,1d58 <alt_get_errno>
    1dd4:	00050713          	mv	a4,a0
    1dd8:	01600793          	li	a5,22
    1ddc:	00f72023          	sw	a5,0(a4)
    return -EINVAL;
    1de0:	fea00793          	li	a5,-22
    1de4:	0540006f          	j	1e38 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1de8:	fdc42783          	lw	a5,-36(s0)
    1dec:	fd842703          	lw	a4,-40(s0)
    1df0:	fee42423          	sw	a4,-24(s0)
    1df4:	fef42623          	sw	a5,-20(s0)
  entry->previous = list;
    1df8:	fec42783          	lw	a5,-20(s0)
    1dfc:	fe842703          	lw	a4,-24(s0)
    1e00:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    1e04:	fe842783          	lw	a5,-24(s0)
    1e08:	0007a703          	lw	a4,0(a5)
    1e0c:	fec42783          	lw	a5,-20(s0)
    1e10:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    1e14:	fe842783          	lw	a5,-24(s0)
    1e18:	0007a783          	lw	a5,0(a5)
    1e1c:	fec42703          	lw	a4,-20(s0)
    1e20:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    1e24:	fe842783          	lw	a5,-24(s0)
    1e28:	fec42703          	lw	a4,-20(s0)
    1e2c:	00e7a023          	sw	a4,0(a5)
}
    1e30:	00000013          	nop

  return 0;  
    1e34:	00000793          	li	a5,0
}
    1e38:	00078513          	mv	a0,a5
    1e3c:	02c12083          	lw	ra,44(sp)
    1e40:	02812403          	lw	s0,40(sp)
    1e44:	03010113          	addi	sp,sp,48
    1e48:	00008067          	ret

00001e4c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    1e4c:	fe010113          	addi	sp,sp,-32
    1e50:	00112e23          	sw	ra,28(sp)
    1e54:	00812c23          	sw	s0,24(sp)
    1e58:	02010413          	addi	s0,sp,32
  constructor* ctor;

  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    1e5c:	000077b7          	lui	a5,0x7
    1e60:	36c78793          	addi	a5,a5,876 # 736c <__init_array_start+0x4>
    1e64:	fef42623          	sw	a5,-20(s0)
    1e68:	01c0006f          	j	1e84 <_do_ctors+0x38>
        (*ctor) (); 
    1e6c:	fec42783          	lw	a5,-20(s0)
    1e70:	0007a783          	lw	a5,0(a5)
    1e74:	000780e7          	jalr	a5
  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    1e78:	fec42783          	lw	a5,-20(s0)
    1e7c:	ffc78793          	addi	a5,a5,-4
    1e80:	fef42623          	sw	a5,-20(s0)
    1e84:	fec42703          	lw	a4,-20(s0)
    1e88:	000077b7          	lui	a5,0x7
    1e8c:	36878793          	addi	a5,a5,872 # 7368 <__init_array_start>
    1e90:	fcf77ee3          	bgeu	a4,a5,1e6c <_do_ctors+0x20>
}
    1e94:	00000013          	nop
    1e98:	00000013          	nop
    1e9c:	01c12083          	lw	ra,28(sp)
    1ea0:	01812403          	lw	s0,24(sp)
    1ea4:	02010113          	addi	sp,sp,32
    1ea8:	00008067          	ret

00001eac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1eac:	fe010113          	addi	sp,sp,-32
    1eb0:	00112e23          	sw	ra,28(sp)
    1eb4:	00812c23          	sw	s0,24(sp)
    1eb8:	02010413          	addi	s0,sp,32
  destructor* dtor;

  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    1ebc:	000077b7          	lui	a5,0x7
    1ec0:	36c78793          	addi	a5,a5,876 # 736c <__init_array_start+0x4>
    1ec4:	fef42623          	sw	a5,-20(s0)
    1ec8:	01c0006f          	j	1ee4 <_do_dtors+0x38>
        (*dtor) (); 
    1ecc:	fec42783          	lw	a5,-20(s0)
    1ed0:	0007a783          	lw	a5,0(a5)
    1ed4:	000780e7          	jalr	a5
  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    1ed8:	fec42783          	lw	a5,-20(s0)
    1edc:	ffc78793          	addi	a5,a5,-4
    1ee0:	fef42623          	sw	a5,-20(s0)
    1ee4:	fec42703          	lw	a4,-20(s0)
    1ee8:	000077b7          	lui	a5,0x7
    1eec:	37078793          	addi	a5,a5,880 # 7370 <__fini_array_end>
    1ef0:	fcf77ee3          	bgeu	a4,a5,1ecc <_do_dtors+0x20>
}
    1ef4:	00000013          	nop
    1ef8:	00000013          	nop
    1efc:	01c12083          	lw	ra,28(sp)
    1f00:	01812403          	lw	s0,24(sp)
    1f04:	02010113          	addi	sp,sp,32
    1f08:	00008067          	ret

00001f0c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1f0c:	ff010113          	addi	sp,sp,-16
    1f10:	00812623          	sw	s0,12(sp)
    1f14:	01010413          	addi	s0,sp,16
#if ALT_CPU_ICACHE_SIZE > 0
    __asm__ volatile("fence.i" ::: "memory");
#endif
}
    1f18:	00000013          	nop
    1f1c:	00c12403          	lw	s0,12(sp)
    1f20:	01010113          	addi	sp,sp,16
    1f24:	00008067          	ret

00001f28 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int 
alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1f28:	fd010113          	addi	sp,sp,-48
    1f2c:	02112623          	sw	ra,44(sp)
    1f30:	02812423          	sw	s0,40(sp)
    1f34:	03010413          	addi	s0,sp,48
    1f38:	fea42623          	sw	a0,-20(s0)
    1f3c:	feb42423          	sw	a1,-24(s0)
    1f40:	fec42223          	sw	a2,-28(s0)
    1f44:	fed42023          	sw	a3,-32(s0)
    1f48:	fce42e23          	sw	a4,-36(s0)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1f4c:	fdc42703          	lw	a4,-36(s0)
    1f50:	fe042683          	lw	a3,-32(s0)
    1f54:	fe442603          	lw	a2,-28(s0)
    1f58:	fe842583          	lw	a1,-24(s0)
    1f5c:	fec42503          	lw	a0,-20(s0)
    1f60:	01c000ef          	jal	ra,1f7c <alt_iic_isr_register>
    1f64:	00050793          	mv	a5,a0
}  
    1f68:	00078513          	mv	a0,a5
    1f6c:	02c12083          	lw	ra,44(sp)
    1f70:	02812403          	lw	s0,40(sp)
    1f74:	03010113          	addi	sp,sp,48
    1f78:	00008067          	ret

00001f7c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1f7c:	fa010113          	addi	sp,sp,-96
    1f80:	04812e23          	sw	s0,92(sp)
    1f84:	06010413          	addi	s0,sp,96
    1f88:	faa42e23          	sw	a0,-68(s0)
    1f8c:	fab42c23          	sw	a1,-72(s0)
    1f90:	fac42a23          	sw	a2,-76(s0)
    1f94:	fad42823          	sw	a3,-80(s0)
    1f98:	fae42623          	sw	a4,-84(s0)
  int rc = -EINVAL;  
    1f9c:	fea00793          	li	a5,-22
    1fa0:	fcf42223          	sw	a5,-60(s0)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1fa4:	fb842783          	lw	a5,-72(s0)
    1fa8:	fcf42423          	sw	a5,-56(s0)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1fac:	fc842703          	lw	a4,-56(s0)
    1fb0:	00f00793          	li	a5,15
    1fb4:	12e7c863          	blt	a5,a4,20e4 <alt_iic_isr_register+0x168>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1fb8:	00800793          	li	a5,8
    1fbc:	3007b7f3          	csrrc	a5,mstatus,a5
    1fc0:	fcf42823          	sw	a5,-48(s0)
    return context;
    1fc4:	fd042783          	lw	a5,-48(s0)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1fc8:	fcf42623          	sw	a5,-52(s0)

    alt_irq[id].handler = isr;
    1fcc:	0000b7b7          	lui	a5,0xb
    1fd0:	b1078713          	addi	a4,a5,-1264 # ab10 <alt_irq>
    1fd4:	fc842783          	lw	a5,-56(s0)
    1fd8:	00379793          	slli	a5,a5,0x3
    1fdc:	00f707b3          	add	a5,a4,a5
    1fe0:	fb442703          	lw	a4,-76(s0)
    1fe4:	00e7a023          	sw	a4,0(a5)
    alt_irq[id].context = isr_context;
    1fe8:	0000b7b7          	lui	a5,0xb
    1fec:	b1078713          	addi	a4,a5,-1264 # ab10 <alt_irq>
    1ff0:	fc842783          	lw	a5,-56(s0)
    1ff4:	00379793          	slli	a5,a5,0x3
    1ff8:	00f707b3          	add	a5,a4,a5
    1ffc:	fb042703          	lw	a4,-80(s0)
    2000:	00e7a223          	sw	a4,4(a5)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2004:	fb442783          	lw	a5,-76(s0)
    2008:	06078263          	beqz	a5,206c <alt_iic_isr_register+0xf0>
    200c:	fc842783          	lw	a5,-56(s0)
    2010:	fbc42703          	lw	a4,-68(s0)
    2014:	fce42a23          	sw	a4,-44(s0)
    2018:	fcf42c23          	sw	a5,-40(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    201c:	fd842703          	lw	a4,-40(s0)
    2020:	00f00793          	li	a5,15
    2024:	00e7e863          	bltu	a5,a4,2034 <alt_iic_isr_register+0xb8>
    2028:	fd842783          	lw	a5,-40(s0)
    202c:	01078793          	addi	a5,a5,16
    2030:	0080006f          	j	2038 <alt_iic_isr_register+0xbc>
    2034:	fff00793          	li	a5,-1
    2038:	fcf42e23          	sw	a5,-36(s0)
    if (rc < 0)
    203c:	fdc42783          	lw	a5,-36(s0)
    2040:	0007d663          	bgez	a5,204c <alt_iic_isr_register+0xd0>
        return rc;
    2044:	fdc42783          	lw	a5,-36(s0)
    2048:	0800006f          	j	20c8 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    204c:	fdc42783          	lw	a5,-36(s0)
    2050:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    2054:	fd842783          	lw	a5,-40(s0)
    2058:	00100713          	li	a4,1
    205c:	00f717b3          	sll	a5,a4,a5
    2060:	3047a073          	csrs	mie,a5
    return 0;
    2064:	00000793          	li	a5,0
    2068:	0600006f          	j	20c8 <alt_iic_isr_register+0x14c>
    206c:	fc842783          	lw	a5,-56(s0)
    2070:	fbc42703          	lw	a4,-68(s0)
    2074:	fee42023          	sw	a4,-32(s0)
    2078:	fef42223          	sw	a5,-28(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    207c:	fe442703          	lw	a4,-28(s0)
    2080:	00f00793          	li	a5,15
    2084:	00e7e863          	bltu	a5,a4,2094 <alt_iic_isr_register+0x118>
    2088:	fe442783          	lw	a5,-28(s0)
    208c:	01078793          	addi	a5,a5,16
    2090:	0080006f          	j	2098 <alt_iic_isr_register+0x11c>
    2094:	fff00793          	li	a5,-1
    2098:	fef42423          	sw	a5,-24(s0)
    if (rc < 0)
    209c:	fe842783          	lw	a5,-24(s0)
    20a0:	0007d663          	bgez	a5,20ac <alt_iic_isr_register+0x130>
        return rc;
    20a4:	fe842783          	lw	a5,-24(s0)
    20a8:	0200006f          	j	20c8 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    20ac:	fe842783          	lw	a5,-24(s0)
    20b0:	fef42223          	sw	a5,-28(s0)
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    20b4:	fe442783          	lw	a5,-28(s0)
    20b8:	00100713          	li	a4,1
    20bc:	00f717b3          	sll	a5,a4,a5
    20c0:	3047b073          	csrc	mie,a5
    return 0;
    20c4:	00000793          	li	a5,0
    20c8:	fcf42223          	sw	a5,-60(s0)
    20cc:	fcc42783          	lw	a5,-52(s0)
    20d0:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    20d4:	fec42783          	lw	a5,-20(s0)
    20d8:	0087f793          	andi	a5,a5,8
    20dc:	3007a073          	csrs	mstatus,a5
}
    20e0:	00000013          	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    20e4:	fc442783          	lw	a5,-60(s0)
}
    20e8:	00078513          	mv	a0,a5
    20ec:	05c12403          	lw	s0,92(sp)
    20f0:	06010113          	addi	sp,sp,96
    20f4:	00008067          	ret

000020f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    20f8:	fd010113          	addi	sp,sp,-48
    20fc:	02112623          	sw	ra,44(sp)
    2100:	02812423          	sw	s0,40(sp)
    2104:	03010413          	addi	s0,sp,48
    2108:	fca42e23          	sw	a0,-36(s0)
    210c:	fcb42c23          	sw	a1,-40(s0)
    2110:	fcc42a23          	sw	a2,-44(s0)
    2114:	fcd42823          	sw	a3,-48(s0)
  int old;

  old = open (name, flags, mode);
    2118:	fd042603          	lw	a2,-48(s0)
    211c:	fd442583          	lw	a1,-44(s0)
    2120:	fd842503          	lw	a0,-40(s0)
    2124:	4d8020ef          	jal	ra,45fc <open>
    2128:	fea42623          	sw	a0,-20(s0)

  if (old >= 0)
    212c:	fec42783          	lw	a5,-20(s0)
    2130:	0807c863          	bltz	a5,21c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    2134:	000087b7          	lui	a5,0x8
    2138:	57c78693          	addi	a3,a5,1404 # 857c <alt_fd_list>
    213c:	fec42703          	lw	a4,-20(s0)
    2140:	00070793          	mv	a5,a4
    2144:	00179793          	slli	a5,a5,0x1
    2148:	00e787b3          	add	a5,a5,a4
    214c:	00279793          	slli	a5,a5,0x2
    2150:	00f687b3          	add	a5,a3,a5
    2154:	0007a703          	lw	a4,0(a5)
    2158:	fdc42783          	lw	a5,-36(s0)
    215c:	00e7a023          	sw	a4,0(a5)
    fd->priv     = alt_fd_list[old].priv;
    2160:	000087b7          	lui	a5,0x8
    2164:	57c78693          	addi	a3,a5,1404 # 857c <alt_fd_list>
    2168:	fec42703          	lw	a4,-20(s0)
    216c:	00070793          	mv	a5,a4
    2170:	00179793          	slli	a5,a5,0x1
    2174:	00e787b3          	add	a5,a5,a4
    2178:	00279793          	slli	a5,a5,0x2
    217c:	00f687b3          	add	a5,a3,a5
    2180:	0047a703          	lw	a4,4(a5)
    2184:	fdc42783          	lw	a5,-36(s0)
    2188:	00e7a223          	sw	a4,4(a5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    218c:	000087b7          	lui	a5,0x8
    2190:	57c78693          	addi	a3,a5,1404 # 857c <alt_fd_list>
    2194:	fec42703          	lw	a4,-20(s0)
    2198:	00070793          	mv	a5,a4
    219c:	00179793          	slli	a5,a5,0x1
    21a0:	00e787b3          	add	a5,a5,a4
    21a4:	00279793          	slli	a5,a5,0x2
    21a8:	00f687b3          	add	a5,a3,a5
    21ac:	0087a703          	lw	a4,8(a5)
    21b0:	fdc42783          	lw	a5,-36(s0)
    21b4:	00e7a423          	sw	a4,8(a5)

    alt_release_fd (old);
    21b8:	fec42503          	lw	a0,-20(s0)
    21bc:	090000ef          	jal	ra,224c <alt_release_fd>
  }
} 
    21c0:	00000013          	nop
    21c4:	02c12083          	lw	ra,44(sp)
    21c8:	02812403          	lw	s0,40(sp)
    21cc:	03010113          	addi	sp,sp,48
    21d0:	00008067          	ret

000021d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    21d4:	fe010113          	addi	sp,sp,-32
    21d8:	00112e23          	sw	ra,28(sp)
    21dc:	00812c23          	sw	s0,24(sp)
    21e0:	02010413          	addi	s0,sp,32
    21e4:	fea42623          	sw	a0,-20(s0)
    21e8:	feb42423          	sw	a1,-24(s0)
    21ec:	fec42223          	sw	a2,-28(s0)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    21f0:	1ff00693          	li	a3,511
    21f4:	00100613          	li	a2,1
    21f8:	fec42583          	lw	a1,-20(s0)
    21fc:	000087b7          	lui	a5,0x8
    2200:	58878513          	addi	a0,a5,1416 # 8588 <alt_fd_list+0xc>
    2204:	ef5ff0ef          	jal	ra,20f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2208:	1ff00693          	li	a3,511
    220c:	00000613          	li	a2,0
    2210:	fe842583          	lw	a1,-24(s0)
    2214:	000087b7          	lui	a5,0x8
    2218:	57c78513          	addi	a0,a5,1404 # 857c <alt_fd_list>
    221c:	eddff0ef          	jal	ra,20f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2220:	1ff00693          	li	a3,511
    2224:	00100613          	li	a2,1
    2228:	fe442583          	lw	a1,-28(s0)
    222c:	000087b7          	lui	a5,0x8
    2230:	59478513          	addi	a0,a5,1428 # 8594 <alt_fd_list+0x18>
    2234:	ec5ff0ef          	jal	ra,20f8 <alt_open_fd>
}  
    2238:	00000013          	nop
    223c:	01c12083          	lw	ra,28(sp)
    2240:	01812403          	lw	s0,24(sp)
    2244:	02010113          	addi	sp,sp,32
    2248:	00008067          	ret

0000224c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    224c:	fe010113          	addi	sp,sp,-32
    2250:	00812e23          	sw	s0,28(sp)
    2254:	02010413          	addi	s0,sp,32
    2258:	fea42623          	sw	a0,-20(s0)
  if (fd > 2)
    225c:	fec42703          	lw	a4,-20(s0)
    2260:	00200793          	li	a5,2
    2264:	04e7d663          	bge	a5,a4,22b0 <alt_release_fd+0x64>
  {
    alt_fd_list[fd].fd_flags = 0;
    2268:	000087b7          	lui	a5,0x8
    226c:	57c78693          	addi	a3,a5,1404 # 857c <alt_fd_list>
    2270:	fec42703          	lw	a4,-20(s0)
    2274:	00070793          	mv	a5,a4
    2278:	00179793          	slli	a5,a5,0x1
    227c:	00e787b3          	add	a5,a5,a4
    2280:	00279793          	slli	a5,a5,0x2
    2284:	00f687b3          	add	a5,a3,a5
    2288:	0007a423          	sw	zero,8(a5)
    alt_fd_list[fd].dev      = 0;
    228c:	000087b7          	lui	a5,0x8
    2290:	57c78693          	addi	a3,a5,1404 # 857c <alt_fd_list>
    2294:	fec42703          	lw	a4,-20(s0)
    2298:	00070793          	mv	a5,a4
    229c:	00179793          	slli	a5,a5,0x1
    22a0:	00e787b3          	add	a5,a5,a4
    22a4:	00279793          	slli	a5,a5,0x2
    22a8:	00f687b3          	add	a5,a3,a5
    22ac:	0007a023          	sw	zero,0(a5)
  }
}
    22b0:	00000013          	nop
    22b4:	01c12403          	lw	s0,28(sp)
    22b8:	02010113          	addi	sp,sp,32
    22bc:	00008067          	ret

000022c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    22c0:	fd010113          	addi	sp,sp,-48
    22c4:	02812623          	sw	s0,44(sp)
    22c8:	03010413          	addi	s0,sp,48
    22cc:	fca42e23          	sw	a0,-36(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    22d0:	00800793          	li	a5,8
    22d4:	3007b7f3          	csrrc	a5,mstatus,a5
    22d8:	fef42623          	sw	a5,-20(s0)
    return context;
    22dc:	fec42783          	lw	a5,-20(s0)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    22e0:	fef42023          	sw	a5,-32(s0)
  alt_llist_remove (&alarm->llist);
    22e4:	fdc42783          	lw	a5,-36(s0)
    22e8:	fef42423          	sw	a5,-24(s0)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    22ec:	fe842783          	lw	a5,-24(s0)
    22f0:	0007a783          	lw	a5,0(a5)
    22f4:	fe842703          	lw	a4,-24(s0)
    22f8:	00472703          	lw	a4,4(a4)
    22fc:	00e7a223          	sw	a4,4(a5)
  entry->previous->next = entry->next;
    2300:	fe842783          	lw	a5,-24(s0)
    2304:	0047a783          	lw	a5,4(a5)
    2308:	fe842703          	lw	a4,-24(s0)
    230c:	00072703          	lw	a4,0(a4)
    2310:	00e7a023          	sw	a4,0(a5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2314:	fe842783          	lw	a5,-24(s0)
    2318:	fe842703          	lw	a4,-24(s0)
    231c:	00e7a223          	sw	a4,4(a5)
  entry->next     = entry;
    2320:	fe842783          	lw	a5,-24(s0)
    2324:	fe842703          	lw	a4,-24(s0)
    2328:	00e7a023          	sw	a4,0(a5)
} 
    232c:	00000013          	nop
    2330:	fe042783          	lw	a5,-32(s0)
    2334:	fef42223          	sw	a5,-28(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    2338:	fe442783          	lw	a5,-28(s0)
    233c:	0087f793          	andi	a5,a5,8
    2340:	3007a073          	csrs	mstatus,a5
}
    2344:	00000013          	nop
  alt_irq_enable_all (irq_context);
}
    2348:	00000013          	nop
    234c:	02c12403          	lw	s0,44(sp)
    2350:	03010113          	addi	sp,sp,48
    2354:	00008067          	ret

00002358 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2358:	fe010113          	addi	sp,sp,-32
    235c:	00112e23          	sw	ra,28(sp)
    2360:	00812c23          	sw	s0,24(sp)
    2364:	01212a23          	sw	s2,20(sp)
    2368:	01312823          	sw	s3,16(sp)
    236c:	02010413          	addi	s0,sp,32
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2370:	000097b7          	lui	a5,0x9
    2374:	f4c78793          	addi	a5,a5,-180 # 8f4c <alt_alarm_list>
    2378:	0007a783          	lw	a5,0(a5)
    237c:	fef42223          	sw	a5,-28(s0)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2380:	0000b7b7          	lui	a5,0xb
    2384:	ac87a703          	lw	a4,-1336(a5) # aac8 <_alt_nticks>
    2388:	acc7a783          	lw	a5,-1332(a5)
    238c:	00100513          	li	a0,1
    2390:	00000593          	li	a1,0
    2394:	00a70633          	add	a2,a4,a0
    2398:	00060813          	mv	a6,a2
    239c:	00e83833          	sltu	a6,a6,a4
    23a0:	00b786b3          	add	a3,a5,a1
    23a4:	00d807b3          	add	a5,a6,a3
    23a8:	00078693          	mv	a3,a5
    23ac:	00060713          	mv	a4,a2
    23b0:	00068793          	mv	a5,a3
    23b4:	0000b6b7          	lui	a3,0xb
    23b8:	ace6a423          	sw	a4,-1336(a3) # aac8 <_alt_nticks>
    23bc:	acf6a623          	sw	a5,-1332(a3)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    23c0:	0c80006f          	j	2488 <alt_tick+0x130>
  {
    next = (alt_alarm*) alarm->llist.next;
    23c4:	fe442783          	lw	a5,-28(s0)
    23c8:	0007a783          	lw	a5,0(a5)
    23cc:	fef42423          	sw	a5,-24(s0)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    23d0:	fe442783          	lw	a5,-28(s0)
    23d4:	0087a603          	lw	a2,8(a5)
    23d8:	00c7a683          	lw	a3,12(a5)
    23dc:	0000b7b7          	lui	a5,0xb
    23e0:	ac87a703          	lw	a4,-1336(a5) # aac8 <_alt_nticks>
    23e4:	acc7a783          	lw	a5,-1332(a5)
    23e8:	00068513          	mv	a0,a3
    23ec:	00078593          	mv	a1,a5
    23f0:	08a5e863          	bltu	a1,a0,2480 <alt_tick+0x128>
    23f4:	00068513          	mv	a0,a3
    23f8:	00078593          	mv	a1,a5
    23fc:	00b51863          	bne	a0,a1,240c <alt_tick+0xb4>
    2400:	00060693          	mv	a3,a2
    2404:	00070793          	mv	a5,a4
    2408:	06d7ec63          	bltu	a5,a3,2480 <alt_tick+0x128>
    {
      next_callback = alarm->callback (alarm->context);
    240c:	fe442783          	lw	a5,-28(s0)
    2410:	0107a783          	lw	a5,16(a5)
    2414:	fe442703          	lw	a4,-28(s0)
    2418:	01472703          	lw	a4,20(a4)
    241c:	00070513          	mv	a0,a4
    2420:	000780e7          	jalr	a5
    2424:	fea42623          	sw	a0,-20(s0)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2428:	fec42783          	lw	a5,-20(s0)
    242c:	00079863          	bnez	a5,243c <alt_tick+0xe4>
      {
        alt_alarm_stop (alarm);
    2430:	fe442503          	lw	a0,-28(s0)
    2434:	e8dff0ef          	jal	ra,22c0 <alt_alarm_stop>
    2438:	0480006f          	j	2480 <alt_tick+0x128>
      }
      else
      {
        alarm->time += next_callback;
    243c:	fe442783          	lw	a5,-28(s0)
    2440:	0087a703          	lw	a4,8(a5)
    2444:	00c7a783          	lw	a5,12(a5)
    2448:	fec42683          	lw	a3,-20(s0)
    244c:	00068913          	mv	s2,a3
    2450:	00000993          	li	s3,0
    2454:	01270633          	add	a2,a4,s2
    2458:	00060593          	mv	a1,a2
    245c:	00e5b5b3          	sltu	a1,a1,a4
    2460:	013786b3          	add	a3,a5,s3
    2464:	00d587b3          	add	a5,a1,a3
    2468:	00078693          	mv	a3,a5
    246c:	00060713          	mv	a4,a2
    2470:	00068793          	mv	a5,a3
    2474:	fe442683          	lw	a3,-28(s0)
    2478:	00e6a423          	sw	a4,8(a3)
    247c:	00f6a623          	sw	a5,12(a3)
      }
    }
    alarm = next;
    2480:	fe842783          	lw	a5,-24(s0)
    2484:	fef42223          	sw	a5,-28(s0)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    2488:	fe442703          	lw	a4,-28(s0)
    248c:	000097b7          	lui	a5,0x9
    2490:	f4c78793          	addi	a5,a5,-180 # 8f4c <alt_alarm_list>
    2494:	f2f718e3          	bne	a4,a5,23c4 <alt_tick+0x6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    2498:	00000013          	nop
}
    249c:	00000013          	nop
    24a0:	01c12083          	lw	ra,28(sp)
    24a4:	01812403          	lw	s0,24(sp)
    24a8:	01412903          	lw	s2,20(sp)
    24ac:	01012983          	lw	s3,16(sp)
    24b0:	02010113          	addi	sp,sp,32
    24b4:	00008067          	ret

000024b8 <intel_niosv_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the mie
 * register so that all possible IRQs are disabled.
 */
void intel_niosv_irq_init(void) 
{
    24b8:	ff010113          	addi	sp,sp,-16
    24bc:	00812623          	sw	s0,12(sp)
    24c0:	01010413          	addi	s0,sp,16
#if ALT_HAS_IRQ_SUPPORT
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, NIOSV_MIE_MASK);
    24c4:	fff00793          	li	a5,-1
    24c8:	3047b073          	csrc	mie,a5
#endif
}
    24cc:	00000013          	nop
    24d0:	00c12403          	lw	s0,12(sp)
    24d4:	01010113          	addi	sp,sp,16
    24d8:	00008067          	ret

000024dc <alt_timestamp_start>:
#define INTEL_NIOSV_TIMER_DEVICE_TYPE 2

#if (ALT_TIMESTAMP_CLK_TIMER_DEVICE_TYPE == INTEL_NIOSV_TIMER_DEVICE_TYPE)
alt_u64 alt_niosv_timestamp_offset = 0;

int alt_timestamp_start() {
    24dc:	ff010113          	addi	sp,sp,-16
    24e0:	00112623          	sw	ra,12(sp)
    24e4:	00812423          	sw	s0,8(sp)
    24e8:	01010413          	addi	s0,sp,16
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval);

extern alt_u64 alt_niosv_timestamp_offset;

static ALT_INLINE int ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_start() {
    alt_niosv_timestamp_offset = alt_niosv_mtime_get();
    24ec:	0ac000ef          	jal	ra,2598 <alt_niosv_mtime_get>
    24f0:	00050713          	mv	a4,a0
    24f4:	00058793          	mv	a5,a1
    24f8:	0000b6b7          	lui	a3,0xb
    24fc:	ace6a823          	sw	a4,-1328(a3) # aad0 <alt_niosv_timestamp_offset>
    2500:	acf6aa23          	sw	a5,-1324(a3)
    return 0;
    2504:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_start();
}
    2508:	00078513          	mv	a0,a5
    250c:	00c12083          	lw	ra,12(sp)
    2510:	00812403          	lw	s0,8(sp)
    2514:	01010113          	addi	sp,sp,16
    2518:	00008067          	ret

0000251c <alt_timestamp>:

alt_timestamp_type alt_timestamp() {
    251c:	ff010113          	addi	sp,sp,-16
    2520:	00112623          	sw	ra,12(sp)
    2524:	00812423          	sw	s0,8(sp)
    2528:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp() {
    return alt_niosv_mtime_get() - alt_niosv_timestamp_offset;
    252c:	06c000ef          	jal	ra,2598 <alt_niosv_mtime_get>
    2530:	00050613          	mv	a2,a0
    2534:	00058693          	mv	a3,a1
    2538:	0000b7b7          	lui	a5,0xb
    253c:	ad07a503          	lw	a0,-1328(a5) # aad0 <alt_niosv_timestamp_offset>
    2540:	ad47a583          	lw	a1,-1324(a5)
    2544:	40a60733          	sub	a4,a2,a0
    2548:	00070813          	mv	a6,a4
    254c:	01063833          	sltu	a6,a2,a6
    2550:	40b687b3          	sub	a5,a3,a1
    2554:	410786b3          	sub	a3,a5,a6
    2558:	00068793          	mv	a5,a3
    return alt_niosv_timer_timestamp();
}
    255c:	00070513          	mv	a0,a4
    2560:	00078593          	mv	a1,a5
    2564:	00c12083          	lw	ra,12(sp)
    2568:	00812403          	lw	s0,8(sp)
    256c:	01010113          	addi	sp,sp,16
    2570:	00008067          	ret

00002574 <alt_timestamp_freq>:

alt_u32 alt_timestamp_freq() {
    2574:	ff010113          	addi	sp,sp,-16
    2578:	00812623          	sw	s0,12(sp)
    257c:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_freq() {
    return ALT_CPU_CPU_FREQ;
    2580:	05f5e7b7          	lui	a5,0x5f5e
    2584:	10078793          	addi	a5,a5,256 # 5f5e100 <__alt_data_end+0x3f5e100>
    return alt_niosv_timer_timestamp_freq();
}
    2588:	00078513          	mv	a0,a5
    258c:	00c12403          	lw	s0,12(sp)
    2590:	01010113          	addi	sp,sp,16
    2594:	00008067          	ret

00002598 <alt_niosv_mtime_get>:
#endif

alt_u64 alt_niosv_mtime_get() {
    2598:	fe010113          	addi	sp,sp,-32
    259c:	00812e23          	sw	s0,28(sp)
    25a0:	02010413          	addi	s0,sp,32
    alt_u32 lowbits;
    alt_u32 highbits;

    // Guard against rollover while acquiring each word
    do {
        highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4));
    25a4:	02010337          	lui	t1,0x2010
    25a8:	00c30313          	addi	t1,t1,12 # 201000c <__alt_data_end+0x1000c>
    25ac:	00032303          	lw	t1,0(t1)
    25b0:	fe642423          	sw	t1,-24(s0)
        lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIME_ADDR);
    25b4:	02010337          	lui	t1,0x2010
    25b8:	00830313          	addi	t1,t1,8 # 2010008 <__alt_data_end+0x10008>
    25bc:	00032303          	lw	t1,0(t1)
    25c0:	fe642623          	sw	t1,-20(s0)
    } while (ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4)) != highbits);
    25c4:	02010337          	lui	t1,0x2010
    25c8:	00c30313          	addi	t1,t1,12 # 201000c <__alt_data_end+0x1000c>
    25cc:	00032303          	lw	t1,0(t1)
    25d0:	fe842e03          	lw	t3,-24(s0)
    25d4:	fc6e18e3          	bne	t3,t1,25a4 <alt_niosv_mtime_get+0xc>

    return (((alt_u64)highbits) << 32) | lowbits;
    25d8:	fe842303          	lw	t1,-24(s0)
    25dc:	00030813          	mv	a6,t1
    25e0:	00000893          	li	a7,0
    25e4:	00081793          	slli	a5,a6,0x0
    25e8:	00000713          	li	a4,0
    25ec:	fec42803          	lw	a6,-20(s0)
    25f0:	00080613          	mv	a2,a6
    25f4:	00000693          	li	a3,0
    25f8:	00c76533          	or	a0,a4,a2
    25fc:	00d7e5b3          	or	a1,a5,a3
    2600:	00050713          	mv	a4,a0
    2604:	00058793          	mv	a5,a1
}
    2608:	00070513          	mv	a0,a4
    260c:	00078593          	mv	a1,a5
    2610:	01c12403          	lw	s0,28(sp)
    2614:	02010113          	addi	sp,sp,32
    2618:	00008067          	ret

0000261c <alt_niosv_mtimecmp_set>:

void alt_niosv_mtimecmp_set(alt_u64 time) {
    261c:	fe010113          	addi	sp,sp,-32
    2620:	00812e23          	sw	s0,28(sp)
    2624:	02010413          	addi	s0,sp,32
    2628:	fea42423          	sw	a0,-24(s0)
    262c:	feb42623          	sw	a1,-20(s0)
    // Make sure to set the high word to a max value first to prevent triggering inadvertently
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = 0xFFFFFFFF;
    2630:	020106b7          	lui	a3,0x2010
    2634:	00468693          	addi	a3,a3,4 # 2010004 <__alt_data_end+0x10004>
    2638:	fff00613          	li	a2,-1
    263c:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR) = (alt_u32)time;
    2640:	020106b7          	lui	a3,0x2010
    2644:	fe842603          	lw	a2,-24(s0)
    2648:	00c6a023          	sw	a2,0(a3) # 2010000 <__alt_data_end+0x10000>
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = (alt_u32)(time >> 32);
    264c:	fec42683          	lw	a3,-20(s0)
    2650:	0006d713          	srli	a4,a3,0x0
    2654:	00000793          	li	a5,0
    2658:	020106b7          	lui	a3,0x2010
    265c:	00468693          	addi	a3,a3,4 # 2010004 <__alt_data_end+0x10004>
    2660:	00070793          	mv	a5,a4
    2664:	00f6a023          	sw	a5,0(a3)
}
    2668:	00000013          	nop
    266c:	01c12403          	lw	s0,28(sp)
    2670:	02010113          	addi	sp,sp,32
    2674:	00008067          	ret

00002678 <alt_niosv_mtimecmp_get>:

alt_u64 alt_niosv_mtimecmp_get() {
    2678:	fe010113          	addi	sp,sp,-32
    267c:	00812e23          	sw	s0,28(sp)
    2680:	02010413          	addi	s0,sp,32
    alt_u32 lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR);
    2684:	02010337          	lui	t1,0x2010
    2688:	00032303          	lw	t1,0(t1) # 2010000 <__alt_data_end+0x10000>
    268c:	fe642423          	sw	t1,-24(s0)
    alt_u32 highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4));
    2690:	02010337          	lui	t1,0x2010
    2694:	00430313          	addi	t1,t1,4 # 2010004 <__alt_data_end+0x10004>
    2698:	00032303          	lw	t1,0(t1)
    269c:	fe642623          	sw	t1,-20(s0)
    return (((alt_u64)highbits) << 32) | lowbits;
    26a0:	fec42303          	lw	t1,-20(s0)
    26a4:	00030813          	mv	a6,t1
    26a8:	00000893          	li	a7,0
    26ac:	00081793          	slli	a5,a6,0x0
    26b0:	00000713          	li	a4,0
    26b4:	fe842803          	lw	a6,-24(s0)
    26b8:	00080613          	mv	a2,a6
    26bc:	00000693          	li	a3,0
    26c0:	00c76533          	or	a0,a4,a2
    26c4:	00d7e5b3          	or	a1,a5,a3
    26c8:	00050713          	mv	a4,a0
    26cc:	00058793          	mv	a5,a1
}
    26d0:	00070513          	mv	a0,a4
    26d4:	00078593          	mv	a1,a5
    26d8:	01c12403          	lw	s0,28(sp)
    26dc:	02010113          	addi	sp,sp,32
    26e0:	00008067          	ret

000026e4 <alt_niosv_timer_sc_isr>:
// Let's the OS port handles the machine timer configuration and interrupt if
// the OS port has it (ex: FreeRTOS).
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {}
void alt_niosv_mtimecmp_interrupt_init() {}
#else
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {
    26e4:	fc010113          	addi	sp,sp,-64
    26e8:	02112e23          	sw	ra,60(sp)
    26ec:	02812c23          	sw	s0,56(sp)
    26f0:	04010413          	addi	s0,sp,64
    26f4:	fca42623          	sw	a0,-52(s0)
    26f8:	fcb42423          	sw	a1,-56(s0)
    26fc:	fcc42223          	sw	a2,-60(s0)
    // Schedule the next interrupt.  This is done first since who knows how long
    // the following code takes, and the contract is ticks per second, irrespective
    // of how long a given clock tick may take.

    alt_u64 curr_time = alt_niosv_mtime_get();
    2700:	e99ff0ef          	jal	ra,2598 <alt_niosv_mtime_get>
    2704:	fea42423          	sw	a0,-24(s0)
    2708:	feb42623          	sw	a1,-20(s0)
    alt_niosv_mtimecmp_set(curr_time + MTIMECMP_DELTA_AMT);
    270c:	fe842703          	lw	a4,-24(s0)
    2710:	fec42783          	lw	a5,-20(s0)
    2714:	00018537          	lui	a0,0x18
    2718:	6a050513          	addi	a0,a0,1696 # 186a0 <__alt_heap_start+0xdae8>
    271c:	00000593          	li	a1,0
    2720:	00a70633          	add	a2,a4,a0
    2724:	00060813          	mv	a6,a2
    2728:	00e83833          	sltu	a6,a6,a4
    272c:	00b786b3          	add	a3,a5,a1
    2730:	00d807b3          	add	a5,a6,a3
    2734:	00078693          	mv	a3,a5
    2738:	00060713          	mv	a4,a2
    273c:	00068793          	mv	a5,a3
    2740:	00070513          	mv	a0,a4
    2744:	00078593          	mv	a1,a5
    2748:	ed5ff0ef          	jal	ra,261c <alt_niosv_mtimecmp_set>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    274c:	00800793          	li	a5,8
    2750:	3007b7f3          	csrrc	a5,mstatus,a5
    2754:	fef42223          	sw	a5,-28(s0)
    return context;
    2758:	fe442783          	lw	a5,-28(s0)

    /* 
    * Notify the system of a clock tick. disable interrupts 
    * during this time to safely support ISR preemption
    */
    alt_irq_context cpu_sr = alt_irq_disable_all();
    275c:	fcf42e23          	sw	a5,-36(s0)
    alt_tick();
    2760:	bf9ff0ef          	jal	ra,2358 <alt_tick>
    2764:	fdc42783          	lw	a5,-36(s0)
    2768:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    276c:	fe042783          	lw	a5,-32(s0)
    2770:	0087f793          	andi	a5,a5,8
    2774:	3007a073          	csrs	mstatus,a5
}
    2778:	00000013          	nop
    alt_irq_enable_all(cpu_sr);
}
    277c:	00000013          	nop
    2780:	03c12083          	lw	ra,60(sp)
    2784:	03812403          	lw	s0,56(sp)
    2788:	04010113          	addi	sp,sp,64
    278c:	00008067          	ret

00002790 <alt_niosv_mtimecmp_interrupt_init>:

void alt_niosv_mtimecmp_interrupt_init() {
    2790:	ff010113          	addi	sp,sp,-16
    2794:	00112623          	sw	ra,12(sp)
    2798:	00812423          	sw	s0,8(sp)
    279c:	01010413          	addi	s0,sp,16
    alt_niosv_mtimecmp_set(MTIMECMP_MAX_VALUE);
    27a0:	fff00513          	li	a0,-1
    27a4:	fff00593          	li	a1,-1
    27a8:	e75ff0ef          	jal	ra,261c <alt_niosv_mtimecmp_set>
    NIOSV_SET_CSR(NIOSV_MIE_CSR, (0x1 << NIOSV_TIMER_IRQ));
    27ac:	08000793          	li	a5,128
    27b0:	3047a073          	csrs	mie,a5
}
    27b4:	00000013          	nop
    alt_niosv_enable_timer_interrupt();
}
    27b8:	00000013          	nop
    27bc:	00c12083          	lw	ra,12(sp)
    27c0:	00812403          	lw	s0,8(sp)
    27c4:	01010113          	addi	sp,sp,16
    27c8:	00008067          	ret

000027cc <atexit>:
    27cc:	00050593          	mv	a1,a0
    27d0:	00000693          	li	a3,0
    27d4:	00000613          	li	a2,0
    27d8:	00000513          	li	a0,0
    27dc:	6cd0106f          	j	46a8 <__register_exitproc>

000027e0 <exit>:
    27e0:	ff010113          	addi	sp,sp,-16
    27e4:	00000593          	li	a1,0
    27e8:	00812423          	sw	s0,8(sp)
    27ec:	00112623          	sw	ra,12(sp)
    27f0:	00050413          	mv	s0,a0
    27f4:	79d010ef          	jal	ra,4790 <__call_exitprocs>
    27f8:	00005517          	auipc	a0,0x5
    27fc:	c3452503          	lw	a0,-972(a0) # 742c <_global_impure_ptr>
    2800:	03c52783          	lw	a5,60(a0)
    2804:	00078463          	beqz	a5,280c <exit+0x2c>
    2808:	000780e7          	jalr	a5
    280c:	00040513          	mv	a0,s0
    2810:	674030ef          	jal	ra,5e84 <_exit>

00002814 <__sflush_r>:
    2814:	00c59783          	lh	a5,12(a1)
    2818:	fe010113          	addi	sp,sp,-32
    281c:	00812c23          	sw	s0,24(sp)
    2820:	01312623          	sw	s3,12(sp)
    2824:	00112e23          	sw	ra,28(sp)
    2828:	00912a23          	sw	s1,20(sp)
    282c:	01212823          	sw	s2,16(sp)
    2830:	0087f713          	andi	a4,a5,8
    2834:	00058413          	mv	s0,a1
    2838:	00050993          	mv	s3,a0
    283c:	12071263          	bnez	a4,2960 <__sflush_r+0x14c>
    2840:	00001737          	lui	a4,0x1
    2844:	80070713          	addi	a4,a4,-2048 # 800 <altera_avalon_jtag_uart_ioctl_fd+0x48>
    2848:	0045a683          	lw	a3,4(a1)
    284c:	00e7e733          	or	a4,a5,a4
    2850:	00e59623          	sh	a4,12(a1)
    2854:	18d05863          	blez	a3,29e4 <__sflush_r+0x1d0>
    2858:	02842803          	lw	a6,40(s0)
    285c:	0e080263          	beqz	a6,2940 <__sflush_r+0x12c>
    2860:	00c7d793          	srli	a5,a5,0xc
    2864:	0009a483          	lw	s1,0(s3)
    2868:	0017f793          	andi	a5,a5,1
    286c:	0009a023          	sw	zero,0(s3)
    2870:	01c42583          	lw	a1,28(s0)
    2874:	18079063          	bnez	a5,29f4 <__sflush_r+0x1e0>
    2878:	00000613          	li	a2,0
    287c:	00100693          	li	a3,1
    2880:	00098513          	mv	a0,s3
    2884:	000800e7          	jalr	a6
    2888:	fff00793          	li	a5,-1
    288c:	00050613          	mv	a2,a0
    2890:	1af50063          	beq	a0,a5,2a30 <__sflush_r+0x21c>
    2894:	00c41703          	lh	a4,12(s0)
    2898:	02842803          	lw	a6,40(s0)
    289c:	01c42583          	lw	a1,28(s0)
    28a0:	00477713          	andi	a4,a4,4
    28a4:	00070e63          	beqz	a4,28c0 <__sflush_r+0xac>
    28a8:	00442703          	lw	a4,4(s0)
    28ac:	03042783          	lw	a5,48(s0)
    28b0:	40e60633          	sub	a2,a2,a4
    28b4:	00078663          	beqz	a5,28c0 <__sflush_r+0xac>
    28b8:	03c42783          	lw	a5,60(s0)
    28bc:	40f60633          	sub	a2,a2,a5
    28c0:	00000693          	li	a3,0
    28c4:	00098513          	mv	a0,s3
    28c8:	000800e7          	jalr	a6
    28cc:	fff00793          	li	a5,-1
    28d0:	12f51663          	bne	a0,a5,29fc <__sflush_r+0x1e8>
    28d4:	0009a683          	lw	a3,0(s3)
    28d8:	01d00793          	li	a5,29
    28dc:	0cd7ee63          	bltu	a5,a3,29b8 <__sflush_r+0x1a4>
    28e0:	dfc00737          	lui	a4,0xdfc00
    28e4:	ffe70713          	addi	a4,a4,-2 # dfbffffe <__alt_data_end+0xddbffffe>
    28e8:	40d75733          	sra	a4,a4,a3
    28ec:	00177713          	andi	a4,a4,1
    28f0:	00c41783          	lh	a5,12(s0)
    28f4:	0c071463          	bnez	a4,29bc <__sflush_r+0x1a8>
    28f8:	01042603          	lw	a2,16(s0)
    28fc:	fffff737          	lui	a4,0xfffff
    2900:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfdfff7ff>
    2904:	00e7f733          	and	a4,a5,a4
    2908:	00c7d793          	srli	a5,a5,0xc
    290c:	00e41623          	sh	a4,12(s0)
    2910:	00042223          	sw	zero,4(s0)
    2914:	00c42023          	sw	a2,0(s0)
    2918:	0017f793          	andi	a5,a5,1
    291c:	12079c63          	bnez	a5,2a54 <__sflush_r+0x240>
    2920:	03042583          	lw	a1,48(s0)
    2924:	0099a023          	sw	s1,0(s3)
    2928:	00058c63          	beqz	a1,2940 <__sflush_r+0x12c>
    292c:	04040793          	addi	a5,s0,64
    2930:	00f58663          	beq	a1,a5,293c <__sflush_r+0x128>
    2934:	00098513          	mv	a0,s3
    2938:	0b9000ef          	jal	ra,31f0 <_free_r>
    293c:	02042823          	sw	zero,48(s0)
    2940:	00000513          	li	a0,0
    2944:	01c12083          	lw	ra,28(sp)
    2948:	01812403          	lw	s0,24(sp)
    294c:	01412483          	lw	s1,20(sp)
    2950:	01012903          	lw	s2,16(sp)
    2954:	00c12983          	lw	s3,12(sp)
    2958:	02010113          	addi	sp,sp,32
    295c:	00008067          	ret
    2960:	0105a903          	lw	s2,16(a1)
    2964:	fc090ee3          	beqz	s2,2940 <__sflush_r+0x12c>
    2968:	0005a483          	lw	s1,0(a1)
    296c:	0037f793          	andi	a5,a5,3
    2970:	0125a023          	sw	s2,0(a1)
    2974:	412484b3          	sub	s1,s1,s2
    2978:	00000713          	li	a4,0
    297c:	00079463          	bnez	a5,2984 <__sflush_r+0x170>
    2980:	0145a703          	lw	a4,20(a1)
    2984:	00e42423          	sw	a4,8(s0)
    2988:	00904863          	bgtz	s1,2998 <__sflush_r+0x184>
    298c:	fb5ff06f          	j	2940 <__sflush_r+0x12c>
    2990:	00a90933          	add	s2,s2,a0
    2994:	fa9056e3          	blez	s1,2940 <__sflush_r+0x12c>
    2998:	02442783          	lw	a5,36(s0)
    299c:	01c42583          	lw	a1,28(s0)
    29a0:	00048693          	mv	a3,s1
    29a4:	00090613          	mv	a2,s2
    29a8:	00098513          	mv	a0,s3
    29ac:	000780e7          	jalr	a5
    29b0:	40a484b3          	sub	s1,s1,a0
    29b4:	fca04ee3          	bgtz	a0,2990 <__sflush_r+0x17c>
    29b8:	00c41783          	lh	a5,12(s0)
    29bc:	0407e793          	ori	a5,a5,64
    29c0:	01c12083          	lw	ra,28(sp)
    29c4:	00f41623          	sh	a5,12(s0)
    29c8:	01812403          	lw	s0,24(sp)
    29cc:	01412483          	lw	s1,20(sp)
    29d0:	01012903          	lw	s2,16(sp)
    29d4:	00c12983          	lw	s3,12(sp)
    29d8:	fff00513          	li	a0,-1
    29dc:	02010113          	addi	sp,sp,32
    29e0:	00008067          	ret
    29e4:	03c5a683          	lw	a3,60(a1)
    29e8:	e6d048e3          	bgtz	a3,2858 <__sflush_r+0x44>
    29ec:	00000513          	li	a0,0
    29f0:	f55ff06f          	j	2944 <__sflush_r+0x130>
    29f4:	05042603          	lw	a2,80(s0)
    29f8:	ea9ff06f          	j	28a0 <__sflush_r+0x8c>
    29fc:	00c41783          	lh	a5,12(s0)
    2a00:	01042683          	lw	a3,16(s0)
    2a04:	fffff737          	lui	a4,0xfffff
    2a08:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfdfff7ff>
    2a0c:	00e7f733          	and	a4,a5,a4
    2a10:	00c7d793          	srli	a5,a5,0xc
    2a14:	00e41623          	sh	a4,12(s0)
    2a18:	00042223          	sw	zero,4(s0)
    2a1c:	00d42023          	sw	a3,0(s0)
    2a20:	0017f793          	andi	a5,a5,1
    2a24:	ee078ee3          	beqz	a5,2920 <__sflush_r+0x10c>
    2a28:	04a42823          	sw	a0,80(s0)
    2a2c:	ef5ff06f          	j	2920 <__sflush_r+0x10c>
    2a30:	0009a783          	lw	a5,0(s3)
    2a34:	e60780e3          	beqz	a5,2894 <__sflush_r+0x80>
    2a38:	01d00713          	li	a4,29
    2a3c:	00e78663          	beq	a5,a4,2a48 <__sflush_r+0x234>
    2a40:	01600713          	li	a4,22
    2a44:	f6e79ae3          	bne	a5,a4,29b8 <__sflush_r+0x1a4>
    2a48:	0099a023          	sw	s1,0(s3)
    2a4c:	00000513          	li	a0,0
    2a50:	ef5ff06f          	j	2944 <__sflush_r+0x130>
    2a54:	ec0696e3          	bnez	a3,2920 <__sflush_r+0x10c>
    2a58:	04a42823          	sw	a0,80(s0)
    2a5c:	ec5ff06f          	j	2920 <__sflush_r+0x10c>

00002a60 <_fflush_r>:
    2a60:	ff010113          	addi	sp,sp,-16
    2a64:	00812423          	sw	s0,8(sp)
    2a68:	00912223          	sw	s1,4(sp)
    2a6c:	00112623          	sw	ra,12(sp)
    2a70:	01212023          	sw	s2,0(sp)
    2a74:	00050493          	mv	s1,a0
    2a78:	00058413          	mv	s0,a1
    2a7c:	00050663          	beqz	a0,2a88 <_fflush_r+0x28>
    2a80:	03852783          	lw	a5,56(a0)
    2a84:	06078463          	beqz	a5,2aec <_fflush_r+0x8c>
    2a88:	00c41783          	lh	a5,12(s0)
    2a8c:	00000913          	li	s2,0
    2a90:	04078063          	beqz	a5,2ad0 <_fflush_r+0x70>
    2a94:	06442703          	lw	a4,100(s0)
    2a98:	00177713          	andi	a4,a4,1
    2a9c:	00071663          	bnez	a4,2aa8 <_fflush_r+0x48>
    2aa0:	2007f793          	andi	a5,a5,512
    2aa4:	04078863          	beqz	a5,2af4 <_fflush_r+0x94>
    2aa8:	00040593          	mv	a1,s0
    2aac:	00048513          	mv	a0,s1
    2ab0:	d65ff0ef          	jal	ra,2814 <__sflush_r>
    2ab4:	06442783          	lw	a5,100(s0)
    2ab8:	00050913          	mv	s2,a0
    2abc:	0017f793          	andi	a5,a5,1
    2ac0:	00079863          	bnez	a5,2ad0 <_fflush_r+0x70>
    2ac4:	00c45783          	lhu	a5,12(s0)
    2ac8:	2007f793          	andi	a5,a5,512
    2acc:	04078863          	beqz	a5,2b1c <_fflush_r+0xbc>
    2ad0:	00c12083          	lw	ra,12(sp)
    2ad4:	00812403          	lw	s0,8(sp)
    2ad8:	00412483          	lw	s1,4(sp)
    2adc:	00090513          	mv	a0,s2
    2ae0:	00012903          	lw	s2,0(sp)
    2ae4:	01010113          	addi	sp,sp,16
    2ae8:	00008067          	ret
    2aec:	234000ef          	jal	ra,2d20 <__sinit>
    2af0:	f99ff06f          	j	2a88 <_fflush_r+0x28>
    2af4:	05842503          	lw	a0,88(s0)
    2af8:	36d000ef          	jal	ra,3664 <__retarget_lock_acquire_recursive>
    2afc:	00040593          	mv	a1,s0
    2b00:	00048513          	mv	a0,s1
    2b04:	d11ff0ef          	jal	ra,2814 <__sflush_r>
    2b08:	06442783          	lw	a5,100(s0)
    2b0c:	00050913          	mv	s2,a0
    2b10:	0017f793          	andi	a5,a5,1
    2b14:	fa079ee3          	bnez	a5,2ad0 <_fflush_r+0x70>
    2b18:	fadff06f          	j	2ac4 <_fflush_r+0x64>
    2b1c:	05842503          	lw	a0,88(s0)
    2b20:	35d000ef          	jal	ra,367c <__retarget_lock_release_recursive>
    2b24:	00c12083          	lw	ra,12(sp)
    2b28:	00812403          	lw	s0,8(sp)
    2b2c:	00412483          	lw	s1,4(sp)
    2b30:	00090513          	mv	a0,s2
    2b34:	00012903          	lw	s2,0(sp)
    2b38:	01010113          	addi	sp,sp,16
    2b3c:	00008067          	ret

00002b40 <fflush>:
    2b40:	0a050a63          	beqz	a0,2bf4 <fflush+0xb4>
    2b44:	ff010113          	addi	sp,sp,-16
    2b48:	00812423          	sw	s0,8(sp)
    2b4c:	01212023          	sw	s2,0(sp)
    2b50:	00112623          	sw	ra,12(sp)
    2b54:	00912223          	sw	s1,4(sp)
    2b58:	8241a903          	lw	s2,-2012(gp) # 8f54 <_impure_ptr>
    2b5c:	00050413          	mv	s0,a0
    2b60:	00090663          	beqz	s2,2b6c <fflush+0x2c>
    2b64:	03892783          	lw	a5,56(s2)
    2b68:	06078463          	beqz	a5,2bd0 <fflush+0x90>
    2b6c:	00c41783          	lh	a5,12(s0)
    2b70:	00000493          	li	s1,0
    2b74:	04078063          	beqz	a5,2bb4 <fflush+0x74>
    2b78:	06442703          	lw	a4,100(s0)
    2b7c:	00177713          	andi	a4,a4,1
    2b80:	00071663          	bnez	a4,2b8c <fflush+0x4c>
    2b84:	2007f793          	andi	a5,a5,512
    2b88:	04078a63          	beqz	a5,2bdc <fflush+0x9c>
    2b8c:	00040593          	mv	a1,s0
    2b90:	00090513          	mv	a0,s2
    2b94:	c81ff0ef          	jal	ra,2814 <__sflush_r>
    2b98:	06442783          	lw	a5,100(s0)
    2b9c:	00050493          	mv	s1,a0
    2ba0:	0017f793          	andi	a5,a5,1
    2ba4:	00079863          	bnez	a5,2bb4 <fflush+0x74>
    2ba8:	00c45783          	lhu	a5,12(s0)
    2bac:	2007f793          	andi	a5,a5,512
    2bb0:	02078c63          	beqz	a5,2be8 <fflush+0xa8>
    2bb4:	00c12083          	lw	ra,12(sp)
    2bb8:	00812403          	lw	s0,8(sp)
    2bbc:	00012903          	lw	s2,0(sp)
    2bc0:	00048513          	mv	a0,s1
    2bc4:	00412483          	lw	s1,4(sp)
    2bc8:	01010113          	addi	sp,sp,16
    2bcc:	00008067          	ret
    2bd0:	00090513          	mv	a0,s2
    2bd4:	14c000ef          	jal	ra,2d20 <__sinit>
    2bd8:	f95ff06f          	j	2b6c <fflush+0x2c>
    2bdc:	05842503          	lw	a0,88(s0)
    2be0:	285000ef          	jal	ra,3664 <__retarget_lock_acquire_recursive>
    2be4:	fa9ff06f          	j	2b8c <fflush+0x4c>
    2be8:	05842503          	lw	a0,88(s0)
    2bec:	291000ef          	jal	ra,367c <__retarget_lock_release_recursive>
    2bf0:	fc5ff06f          	j	2bb4 <fflush+0x74>
    2bf4:	00000597          	auipc	a1,0x0
    2bf8:	e6c58593          	addi	a1,a1,-404 # 2a60 <_fflush_r>
    2bfc:	00005517          	auipc	a0,0x5
    2c00:	83052503          	lw	a0,-2000(a0) # 742c <_global_impure_ptr>
    2c04:	1990006f          	j	359c <_fwalk_reent>

00002c08 <_cleanup_r>:
    2c08:	00002597          	auipc	a1,0x2
    2c0c:	d3458593          	addi	a1,a1,-716 # 493c <_fclose_r>
    2c10:	18d0006f          	j	359c <_fwalk_reent>

00002c14 <__fp_lock>:
    2c14:	06452783          	lw	a5,100(a0)
    2c18:	0017f793          	andi	a5,a5,1
    2c1c:	00079863          	bnez	a5,2c2c <__fp_lock+0x18>
    2c20:	00c55783          	lhu	a5,12(a0)
    2c24:	2007f793          	andi	a5,a5,512
    2c28:	00078663          	beqz	a5,2c34 <__fp_lock+0x20>
    2c2c:	00000513          	li	a0,0
    2c30:	00008067          	ret
    2c34:	05852503          	lw	a0,88(a0)
    2c38:	ff010113          	addi	sp,sp,-16
    2c3c:	00112623          	sw	ra,12(sp)
    2c40:	225000ef          	jal	ra,3664 <__retarget_lock_acquire_recursive>
    2c44:	00c12083          	lw	ra,12(sp)
    2c48:	00000513          	li	a0,0
    2c4c:	01010113          	addi	sp,sp,16
    2c50:	00008067          	ret

00002c54 <__fp_unlock>:
    2c54:	06452783          	lw	a5,100(a0)
    2c58:	0017f793          	andi	a5,a5,1
    2c5c:	00079863          	bnez	a5,2c6c <__fp_unlock+0x18>
    2c60:	00c55783          	lhu	a5,12(a0)
    2c64:	2007f793          	andi	a5,a5,512
    2c68:	00078663          	beqz	a5,2c74 <__fp_unlock+0x20>
    2c6c:	00000513          	li	a0,0
    2c70:	00008067          	ret
    2c74:	05852503          	lw	a0,88(a0)
    2c78:	ff010113          	addi	sp,sp,-16
    2c7c:	00112623          	sw	ra,12(sp)
    2c80:	1fd000ef          	jal	ra,367c <__retarget_lock_release_recursive>
    2c84:	00c12083          	lw	ra,12(sp)
    2c88:	00000513          	li	a0,0
    2c8c:	01010113          	addi	sp,sp,16
    2c90:	00008067          	ret

00002c94 <__sfmoreglue>:
    2c94:	ff010113          	addi	sp,sp,-16
    2c98:	fff58793          	addi	a5,a1,-1
    2c9c:	00812423          	sw	s0,8(sp)
    2ca0:	00179413          	slli	s0,a5,0x1
    2ca4:	00f40433          	add	s0,s0,a5
    2ca8:	00241413          	slli	s0,s0,0x2
    2cac:	00f40433          	add	s0,s0,a5
    2cb0:	00341413          	slli	s0,s0,0x3
    2cb4:	01212023          	sw	s2,0(sp)
    2cb8:	00058913          	mv	s2,a1
    2cbc:	07440593          	addi	a1,s0,116
    2cc0:	00912223          	sw	s1,4(sp)
    2cc4:	00112623          	sw	ra,12(sp)
    2cc8:	1b9000ef          	jal	ra,3680 <_malloc_r>
    2ccc:	00050493          	mv	s1,a0
    2cd0:	02050063          	beqz	a0,2cf0 <__sfmoreglue+0x5c>
    2cd4:	00c50513          	addi	a0,a0,12
    2cd8:	0004a023          	sw	zero,0(s1)
    2cdc:	0124a223          	sw	s2,4(s1)
    2ce0:	00a4a423          	sw	a0,8(s1)
    2ce4:	06840613          	addi	a2,s0,104
    2ce8:	00000593          	li	a1,0
    2cec:	2d8010ef          	jal	ra,3fc4 <memset>
    2cf0:	00c12083          	lw	ra,12(sp)
    2cf4:	00812403          	lw	s0,8(sp)
    2cf8:	00012903          	lw	s2,0(sp)
    2cfc:	00048513          	mv	a0,s1
    2d00:	00412483          	lw	s1,4(sp)
    2d04:	01010113          	addi	sp,sp,16
    2d08:	00008067          	ret

00002d0c <_cleanup>:
    2d0c:	00002597          	auipc	a1,0x2
    2d10:	c3058593          	addi	a1,a1,-976 # 493c <_fclose_r>
    2d14:	00004517          	auipc	a0,0x4
    2d18:	71852503          	lw	a0,1816(a0) # 742c <_global_impure_ptr>
    2d1c:	0810006f          	j	359c <_fwalk_reent>

00002d20 <__sinit>:
    2d20:	fe010113          	addi	sp,sp,-32
    2d24:	00912a23          	sw	s1,20(sp)
    2d28:	00050493          	mv	s1,a0
    2d2c:	00008517          	auipc	a0,0x8
    2d30:	dcc50513          	addi	a0,a0,-564 # aaf8 <__lock___sinit_recursive_mutex>
    2d34:	00112e23          	sw	ra,28(sp)
    2d38:	00812c23          	sw	s0,24(sp)
    2d3c:	01212823          	sw	s2,16(sp)
    2d40:	01312623          	sw	s3,12(sp)
    2d44:	01412423          	sw	s4,8(sp)
    2d48:	01512223          	sw	s5,4(sp)
    2d4c:	119000ef          	jal	ra,3664 <__retarget_lock_acquire_recursive>
    2d50:	0384a783          	lw	a5,56(s1)
    2d54:	14079863          	bnez	a5,2ea4 <__sinit+0x184>
    2d58:	0044a403          	lw	s0,4(s1)
    2d5c:	00000717          	auipc	a4,0x0
    2d60:	eac70713          	addi	a4,a4,-340 # 2c08 <_cleanup_r>
    2d64:	02e4ae23          	sw	a4,60(s1)
    2d68:	2ec48793          	addi	a5,s1,748
    2d6c:	00300713          	li	a4,3
    2d70:	2ee4a223          	sw	a4,740(s1)
    2d74:	2ef4a423          	sw	a5,744(s1)
    2d78:	2e04a023          	sw	zero,736(s1)
    2d7c:	00400793          	li	a5,4
    2d80:	00f42623          	sw	a5,12(s0)
    2d84:	00800613          	li	a2,8
    2d88:	00000593          	li	a1,0
    2d8c:	00042023          	sw	zero,0(s0)
    2d90:	00042223          	sw	zero,4(s0)
    2d94:	00042423          	sw	zero,8(s0)
    2d98:	06042223          	sw	zero,100(s0)
    2d9c:	00042823          	sw	zero,16(s0)
    2da0:	00042a23          	sw	zero,20(s0)
    2da4:	00042c23          	sw	zero,24(s0)
    2da8:	05c40513          	addi	a0,s0,92
    2dac:	218010ef          	jal	ra,3fc4 <memset>
    2db0:	00001a97          	auipc	s5,0x1
    2db4:	648a8a93          	addi	s5,s5,1608 # 43f8 <__sread>
    2db8:	00001a17          	auipc	s4,0x1
    2dbc:	6a4a0a13          	addi	s4,s4,1700 # 445c <__swrite>
    2dc0:	00001997          	auipc	s3,0x1
    2dc4:	72498993          	addi	s3,s3,1828 # 44e4 <__sseek>
    2dc8:	00001917          	auipc	s2,0x1
    2dcc:	79490913          	addi	s2,s2,1940 # 455c <__sclose>
    2dd0:	05840513          	addi	a0,s0,88
    2dd4:	00842e23          	sw	s0,28(s0)
    2dd8:	03542023          	sw	s5,32(s0)
    2ddc:	03442223          	sw	s4,36(s0)
    2de0:	03342423          	sw	s3,40(s0)
    2de4:	03242623          	sw	s2,44(s0)
    2de8:	06d000ef          	jal	ra,3654 <__retarget_lock_init_recursive>
    2dec:	0084a403          	lw	s0,8(s1)
    2df0:	000107b7          	lui	a5,0x10
    2df4:	00878793          	addi	a5,a5,8 # 10008 <__alt_heap_start+0x5450>
    2df8:	00f42623          	sw	a5,12(s0)
    2dfc:	00800613          	li	a2,8
    2e00:	00000593          	li	a1,0
    2e04:	00042023          	sw	zero,0(s0)
    2e08:	00042223          	sw	zero,4(s0)
    2e0c:	00042423          	sw	zero,8(s0)
    2e10:	06042223          	sw	zero,100(s0)
    2e14:	00042823          	sw	zero,16(s0)
    2e18:	00042a23          	sw	zero,20(s0)
    2e1c:	00042c23          	sw	zero,24(s0)
    2e20:	05c40513          	addi	a0,s0,92
    2e24:	1a0010ef          	jal	ra,3fc4 <memset>
    2e28:	05840513          	addi	a0,s0,88
    2e2c:	00842e23          	sw	s0,28(s0)
    2e30:	03542023          	sw	s5,32(s0)
    2e34:	03442223          	sw	s4,36(s0)
    2e38:	03342423          	sw	s3,40(s0)
    2e3c:	03242623          	sw	s2,44(s0)
    2e40:	015000ef          	jal	ra,3654 <__retarget_lock_init_recursive>
    2e44:	00c4a403          	lw	s0,12(s1)
    2e48:	000207b7          	lui	a5,0x20
    2e4c:	01278793          	addi	a5,a5,18 # 20012 <__alt_heap_start+0x1545a>
    2e50:	00f42623          	sw	a5,12(s0)
    2e54:	00800613          	li	a2,8
    2e58:	00000593          	li	a1,0
    2e5c:	00042023          	sw	zero,0(s0)
    2e60:	00042223          	sw	zero,4(s0)
    2e64:	00042423          	sw	zero,8(s0)
    2e68:	06042223          	sw	zero,100(s0)
    2e6c:	00042823          	sw	zero,16(s0)
    2e70:	00042a23          	sw	zero,20(s0)
    2e74:	00042c23          	sw	zero,24(s0)
    2e78:	05c40513          	addi	a0,s0,92
    2e7c:	148010ef          	jal	ra,3fc4 <memset>
    2e80:	05840513          	addi	a0,s0,88
    2e84:	00842e23          	sw	s0,28(s0)
    2e88:	03542023          	sw	s5,32(s0)
    2e8c:	03442223          	sw	s4,36(s0)
    2e90:	03342423          	sw	s3,40(s0)
    2e94:	03242623          	sw	s2,44(s0)
    2e98:	7bc000ef          	jal	ra,3654 <__retarget_lock_init_recursive>
    2e9c:	00100793          	li	a5,1
    2ea0:	02f4ac23          	sw	a5,56(s1)
    2ea4:	01812403          	lw	s0,24(sp)
    2ea8:	01c12083          	lw	ra,28(sp)
    2eac:	01412483          	lw	s1,20(sp)
    2eb0:	01012903          	lw	s2,16(sp)
    2eb4:	00c12983          	lw	s3,12(sp)
    2eb8:	00812a03          	lw	s4,8(sp)
    2ebc:	00412a83          	lw	s5,4(sp)
    2ec0:	00008517          	auipc	a0,0x8
    2ec4:	c3850513          	addi	a0,a0,-968 # aaf8 <__lock___sinit_recursive_mutex>
    2ec8:	02010113          	addi	sp,sp,32
    2ecc:	7b00006f          	j	367c <__retarget_lock_release_recursive>

00002ed0 <__sfp>:
    2ed0:	fe010113          	addi	sp,sp,-32
    2ed4:	01312623          	sw	s3,12(sp)
    2ed8:	00050993          	mv	s3,a0
    2edc:	00008517          	auipc	a0,0x8
    2ee0:	c1850513          	addi	a0,a0,-1000 # aaf4 <__lock___sfp_recursive_mutex>
    2ee4:	01212823          	sw	s2,16(sp)
    2ee8:	00112e23          	sw	ra,28(sp)
    2eec:	00812c23          	sw	s0,24(sp)
    2ef0:	00912a23          	sw	s1,20(sp)
    2ef4:	770000ef          	jal	ra,3664 <__retarget_lock_acquire_recursive>
    2ef8:	00004917          	auipc	s2,0x4
    2efc:	53492903          	lw	s2,1332(s2) # 742c <_global_impure_ptr>
    2f00:	03892783          	lw	a5,56(s2)
    2f04:	0c078063          	beqz	a5,2fc4 <__sfp+0xf4>
    2f08:	2e090913          	addi	s2,s2,736
    2f0c:	fff00493          	li	s1,-1
    2f10:	00492783          	lw	a5,4(s2)
    2f14:	00892403          	lw	s0,8(s2)
    2f18:	fff78793          	addi	a5,a5,-1
    2f1c:	0007d863          	bgez	a5,2f2c <__sfp+0x5c>
    2f20:	0940006f          	j	2fb4 <__sfp+0xe4>
    2f24:	06840413          	addi	s0,s0,104
    2f28:	08978663          	beq	a5,s1,2fb4 <__sfp+0xe4>
    2f2c:	00c41703          	lh	a4,12(s0)
    2f30:	fff78793          	addi	a5,a5,-1
    2f34:	fe0718e3          	bnez	a4,2f24 <__sfp+0x54>
    2f38:	ffff07b7          	lui	a5,0xffff0
    2f3c:	00178793          	addi	a5,a5,1 # ffff0001 <__alt_data_end+0xfdff0001>
    2f40:	00f42623          	sw	a5,12(s0)
    2f44:	05840513          	addi	a0,s0,88
    2f48:	06042223          	sw	zero,100(s0)
    2f4c:	708000ef          	jal	ra,3654 <__retarget_lock_init_recursive>
    2f50:	00008517          	auipc	a0,0x8
    2f54:	ba450513          	addi	a0,a0,-1116 # aaf4 <__lock___sfp_recursive_mutex>
    2f58:	724000ef          	jal	ra,367c <__retarget_lock_release_recursive>
    2f5c:	00800613          	li	a2,8
    2f60:	00042023          	sw	zero,0(s0)
    2f64:	00042423          	sw	zero,8(s0)
    2f68:	00042223          	sw	zero,4(s0)
    2f6c:	00042823          	sw	zero,16(s0)
    2f70:	00042a23          	sw	zero,20(s0)
    2f74:	00042c23          	sw	zero,24(s0)
    2f78:	00000593          	li	a1,0
    2f7c:	05c40513          	addi	a0,s0,92
    2f80:	044010ef          	jal	ra,3fc4 <memset>
    2f84:	02042823          	sw	zero,48(s0)
    2f88:	02042a23          	sw	zero,52(s0)
    2f8c:	04042223          	sw	zero,68(s0)
    2f90:	04042423          	sw	zero,72(s0)
    2f94:	01c12083          	lw	ra,28(sp)
    2f98:	00040513          	mv	a0,s0
    2f9c:	01812403          	lw	s0,24(sp)
    2fa0:	01412483          	lw	s1,20(sp)
    2fa4:	01012903          	lw	s2,16(sp)
    2fa8:	00c12983          	lw	s3,12(sp)
    2fac:	02010113          	addi	sp,sp,32
    2fb0:	00008067          	ret
    2fb4:	00092403          	lw	s0,0(s2)
    2fb8:	00040c63          	beqz	s0,2fd0 <__sfp+0x100>
    2fbc:	00040913          	mv	s2,s0
    2fc0:	f51ff06f          	j	2f10 <__sfp+0x40>
    2fc4:	00090513          	mv	a0,s2
    2fc8:	d59ff0ef          	jal	ra,2d20 <__sinit>
    2fcc:	f3dff06f          	j	2f08 <__sfp+0x38>
    2fd0:	1ac00593          	li	a1,428
    2fd4:	00098513          	mv	a0,s3
    2fd8:	6a8000ef          	jal	ra,3680 <_malloc_r>
    2fdc:	00050413          	mv	s0,a0
    2fe0:	02050863          	beqz	a0,3010 <__sfp+0x140>
    2fe4:	00c50513          	addi	a0,a0,12
    2fe8:	00400793          	li	a5,4
    2fec:	00042023          	sw	zero,0(s0)
    2ff0:	00f42223          	sw	a5,4(s0)
    2ff4:	00a42423          	sw	a0,8(s0)
    2ff8:	1a000613          	li	a2,416
    2ffc:	00000593          	li	a1,0
    3000:	7c5000ef          	jal	ra,3fc4 <memset>
    3004:	00892023          	sw	s0,0(s2)
    3008:	00040913          	mv	s2,s0
    300c:	f05ff06f          	j	2f10 <__sfp+0x40>
    3010:	00092023          	sw	zero,0(s2)
    3014:	00008517          	auipc	a0,0x8
    3018:	ae050513          	addi	a0,a0,-1312 # aaf4 <__lock___sfp_recursive_mutex>
    301c:	660000ef          	jal	ra,367c <__retarget_lock_release_recursive>
    3020:	00c00793          	li	a5,12
    3024:	00f9a023          	sw	a5,0(s3)
    3028:	f6dff06f          	j	2f94 <__sfp+0xc4>

0000302c <__sfp_lock_acquire>:
    302c:	00008517          	auipc	a0,0x8
    3030:	ac850513          	addi	a0,a0,-1336 # aaf4 <__lock___sfp_recursive_mutex>
    3034:	6300006f          	j	3664 <__retarget_lock_acquire_recursive>

00003038 <__sfp_lock_release>:
    3038:	00008517          	auipc	a0,0x8
    303c:	abc50513          	addi	a0,a0,-1348 # aaf4 <__lock___sfp_recursive_mutex>
    3040:	63c0006f          	j	367c <__retarget_lock_release_recursive>

00003044 <__sinit_lock_acquire>:
    3044:	00008517          	auipc	a0,0x8
    3048:	ab450513          	addi	a0,a0,-1356 # aaf8 <__lock___sinit_recursive_mutex>
    304c:	6180006f          	j	3664 <__retarget_lock_acquire_recursive>

00003050 <__sinit_lock_release>:
    3050:	00008517          	auipc	a0,0x8
    3054:	aa850513          	addi	a0,a0,-1368 # aaf8 <__lock___sinit_recursive_mutex>
    3058:	6240006f          	j	367c <__retarget_lock_release_recursive>

0000305c <__fp_lock_all>:
    305c:	ff010113          	addi	sp,sp,-16
    3060:	00008517          	auipc	a0,0x8
    3064:	a9450513          	addi	a0,a0,-1388 # aaf4 <__lock___sfp_recursive_mutex>
    3068:	00112623          	sw	ra,12(sp)
    306c:	5f8000ef          	jal	ra,3664 <__retarget_lock_acquire_recursive>
    3070:	00c12083          	lw	ra,12(sp)
    3074:	8241a503          	lw	a0,-2012(gp) # 8f54 <_impure_ptr>
    3078:	00000597          	auipc	a1,0x0
    307c:	b9c58593          	addi	a1,a1,-1124 # 2c14 <__fp_lock>
    3080:	01010113          	addi	sp,sp,16
    3084:	4740006f          	j	34f8 <_fwalk>

00003088 <__fp_unlock_all>:
    3088:	ff010113          	addi	sp,sp,-16
    308c:	00000597          	auipc	a1,0x0
    3090:	bc858593          	addi	a1,a1,-1080 # 2c54 <__fp_unlock>
    3094:	8241a503          	lw	a0,-2012(gp) # 8f54 <_impure_ptr>
    3098:	00112623          	sw	ra,12(sp)
    309c:	45c000ef          	jal	ra,34f8 <_fwalk>
    30a0:	00c12083          	lw	ra,12(sp)
    30a4:	00008517          	auipc	a0,0x8
    30a8:	a5050513          	addi	a0,a0,-1456 # aaf4 <__lock___sfp_recursive_mutex>
    30ac:	01010113          	addi	sp,sp,16
    30b0:	5cc0006f          	j	367c <__retarget_lock_release_recursive>

000030b4 <_malloc_trim_r>:
    30b4:	fe010113          	addi	sp,sp,-32
    30b8:	00812c23          	sw	s0,24(sp)
    30bc:	00912a23          	sw	s1,20(sp)
    30c0:	01212823          	sw	s2,16(sp)
    30c4:	01312623          	sw	s3,12(sp)
    30c8:	01412423          	sw	s4,8(sp)
    30cc:	00058993          	mv	s3,a1
    30d0:	00112e23          	sw	ra,28(sp)
    30d4:	00006a17          	auipc	s4,0x6
    30d8:	a54a0a13          	addi	s4,s4,-1452 # 8b28 <__malloc_av_>
    30dc:	00050913          	mv	s2,a0
    30e0:	7c1000ef          	jal	ra,40a0 <__malloc_lock>
    30e4:	008a2703          	lw	a4,8(s4)
    30e8:	000017b7          	lui	a5,0x1
    30ec:	fef78413          	addi	s0,a5,-17 # fef <altera_avalon_jtag_uart_write+0x93>
    30f0:	00472483          	lw	s1,4(a4)
    30f4:	ffc4f493          	andi	s1,s1,-4
    30f8:	00848433          	add	s0,s1,s0
    30fc:	41340433          	sub	s0,s0,s3
    3100:	00c45413          	srli	s0,s0,0xc
    3104:	fff40413          	addi	s0,s0,-1
    3108:	00c41413          	slli	s0,s0,0xc
    310c:	00f44e63          	blt	s0,a5,3128 <_malloc_trim_r+0x74>
    3110:	00000593          	li	a1,0
    3114:	00090513          	mv	a0,s2
    3118:	288010ef          	jal	ra,43a0 <_sbrk_r>
    311c:	008a2783          	lw	a5,8(s4)
    3120:	009787b3          	add	a5,a5,s1
    3124:	02f50863          	beq	a0,a5,3154 <_malloc_trim_r+0xa0>
    3128:	00090513          	mv	a0,s2
    312c:	781000ef          	jal	ra,40ac <__malloc_unlock>
    3130:	01c12083          	lw	ra,28(sp)
    3134:	01812403          	lw	s0,24(sp)
    3138:	01412483          	lw	s1,20(sp)
    313c:	01012903          	lw	s2,16(sp)
    3140:	00c12983          	lw	s3,12(sp)
    3144:	00812a03          	lw	s4,8(sp)
    3148:	00000513          	li	a0,0
    314c:	02010113          	addi	sp,sp,32
    3150:	00008067          	ret
    3154:	408005b3          	neg	a1,s0
    3158:	00090513          	mv	a0,s2
    315c:	244010ef          	jal	ra,43a0 <_sbrk_r>
    3160:	fff00793          	li	a5,-1
    3164:	04f50a63          	beq	a0,a5,31b8 <_malloc_trim_r+0x104>
    3168:	00008717          	auipc	a4,0x8
    316c:	a2870713          	addi	a4,a4,-1496 # ab90 <__malloc_current_mallinfo>
    3170:	00072783          	lw	a5,0(a4)
    3174:	008a2683          	lw	a3,8(s4)
    3178:	408484b3          	sub	s1,s1,s0
    317c:	0014e493          	ori	s1,s1,1
    3180:	408787b3          	sub	a5,a5,s0
    3184:	00090513          	mv	a0,s2
    3188:	0096a223          	sw	s1,4(a3)
    318c:	00f72023          	sw	a5,0(a4)
    3190:	71d000ef          	jal	ra,40ac <__malloc_unlock>
    3194:	01c12083          	lw	ra,28(sp)
    3198:	01812403          	lw	s0,24(sp)
    319c:	01412483          	lw	s1,20(sp)
    31a0:	01012903          	lw	s2,16(sp)
    31a4:	00c12983          	lw	s3,12(sp)
    31a8:	00812a03          	lw	s4,8(sp)
    31ac:	00100513          	li	a0,1
    31b0:	02010113          	addi	sp,sp,32
    31b4:	00008067          	ret
    31b8:	00000593          	li	a1,0
    31bc:	00090513          	mv	a0,s2
    31c0:	1e0010ef          	jal	ra,43a0 <_sbrk_r>
    31c4:	008a2703          	lw	a4,8(s4)
    31c8:	00f00693          	li	a3,15
    31cc:	40e507b3          	sub	a5,a0,a4
    31d0:	f4f6dce3          	bge	a3,a5,3128 <_malloc_trim_r+0x74>
    31d4:	8281a683          	lw	a3,-2008(gp) # 8f58 <__malloc_sbrk_base>
    31d8:	40d50533          	sub	a0,a0,a3
    31dc:	0017e793          	ori	a5,a5,1
    31e0:	00008697          	auipc	a3,0x8
    31e4:	9aa6a823          	sw	a0,-1616(a3) # ab90 <__malloc_current_mallinfo>
    31e8:	00f72223          	sw	a5,4(a4)
    31ec:	f3dff06f          	j	3128 <_malloc_trim_r+0x74>

000031f0 <_free_r>:
    31f0:	18058263          	beqz	a1,3374 <_free_r+0x184>
    31f4:	ff010113          	addi	sp,sp,-16
    31f8:	00812423          	sw	s0,8(sp)
    31fc:	00912223          	sw	s1,4(sp)
    3200:	00058413          	mv	s0,a1
    3204:	00050493          	mv	s1,a0
    3208:	00112623          	sw	ra,12(sp)
    320c:	695000ef          	jal	ra,40a0 <__malloc_lock>
    3210:	ffc42583          	lw	a1,-4(s0)
    3214:	ff840713          	addi	a4,s0,-8
    3218:	00006517          	auipc	a0,0x6
    321c:	91050513          	addi	a0,a0,-1776 # 8b28 <__malloc_av_>
    3220:	ffe5f793          	andi	a5,a1,-2
    3224:	00f70633          	add	a2,a4,a5
    3228:	00462683          	lw	a3,4(a2)
    322c:	00852803          	lw	a6,8(a0)
    3230:	ffc6f693          	andi	a3,a3,-4
    3234:	1ac80263          	beq	a6,a2,33d8 <_free_r+0x1e8>
    3238:	00d62223          	sw	a3,4(a2)
    323c:	0015f593          	andi	a1,a1,1
    3240:	00d60833          	add	a6,a2,a3
    3244:	0a059063          	bnez	a1,32e4 <_free_r+0xf4>
    3248:	ff842303          	lw	t1,-8(s0)
    324c:	00482583          	lw	a1,4(a6)
    3250:	00006897          	auipc	a7,0x6
    3254:	8e088893          	addi	a7,a7,-1824 # 8b30 <__malloc_av_+0x8>
    3258:	40670733          	sub	a4,a4,t1
    325c:	00872803          	lw	a6,8(a4)
    3260:	006787b3          	add	a5,a5,t1
    3264:	0015f593          	andi	a1,a1,1
    3268:	15180263          	beq	a6,a7,33ac <_free_r+0x1bc>
    326c:	00c72303          	lw	t1,12(a4)
    3270:	00682623          	sw	t1,12(a6)
    3274:	01032423          	sw	a6,8(t1)
    3278:	1a058863          	beqz	a1,3428 <_free_r+0x238>
    327c:	0017e693          	ori	a3,a5,1
    3280:	00d72223          	sw	a3,4(a4)
    3284:	00f62023          	sw	a5,0(a2)
    3288:	1ff00693          	li	a3,511
    328c:	06f6ec63          	bltu	a3,a5,3304 <_free_r+0x114>
    3290:	ff87f693          	andi	a3,a5,-8
    3294:	00868693          	addi	a3,a3,8
    3298:	00452583          	lw	a1,4(a0)
    329c:	00d506b3          	add	a3,a0,a3
    32a0:	0006a603          	lw	a2,0(a3)
    32a4:	0057d813          	srli	a6,a5,0x5
    32a8:	00100793          	li	a5,1
    32ac:	010797b3          	sll	a5,a5,a6
    32b0:	00b7e7b3          	or	a5,a5,a1
    32b4:	ff868593          	addi	a1,a3,-8
    32b8:	00b72623          	sw	a1,12(a4)
    32bc:	00c72423          	sw	a2,8(a4)
    32c0:	00f52223          	sw	a5,4(a0)
    32c4:	00e6a023          	sw	a4,0(a3)
    32c8:	00e62623          	sw	a4,12(a2)
    32cc:	00812403          	lw	s0,8(sp)
    32d0:	00c12083          	lw	ra,12(sp)
    32d4:	00048513          	mv	a0,s1
    32d8:	00412483          	lw	s1,4(sp)
    32dc:	01010113          	addi	sp,sp,16
    32e0:	5cd0006f          	j	40ac <__malloc_unlock>
    32e4:	00482583          	lw	a1,4(a6)
    32e8:	0015f593          	andi	a1,a1,1
    32ec:	08058663          	beqz	a1,3378 <_free_r+0x188>
    32f0:	0017e693          	ori	a3,a5,1
    32f4:	fed42e23          	sw	a3,-4(s0)
    32f8:	00f62023          	sw	a5,0(a2)
    32fc:	1ff00693          	li	a3,511
    3300:	f8f6f8e3          	bgeu	a3,a5,3290 <_free_r+0xa0>
    3304:	0097d693          	srli	a3,a5,0x9
    3308:	00400613          	li	a2,4
    330c:	12d66263          	bltu	a2,a3,3430 <_free_r+0x240>
    3310:	0067d693          	srli	a3,a5,0x6
    3314:	03968593          	addi	a1,a3,57
    3318:	03868613          	addi	a2,a3,56
    331c:	00359593          	slli	a1,a1,0x3
    3320:	00b505b3          	add	a1,a0,a1
    3324:	0005a683          	lw	a3,0(a1)
    3328:	ff858593          	addi	a1,a1,-8
    332c:	00d59863          	bne	a1,a3,333c <_free_r+0x14c>
    3330:	1580006f          	j	3488 <_free_r+0x298>
    3334:	0086a683          	lw	a3,8(a3)
    3338:	00d58863          	beq	a1,a3,3348 <_free_r+0x158>
    333c:	0046a603          	lw	a2,4(a3)
    3340:	ffc67613          	andi	a2,a2,-4
    3344:	fec7e8e3          	bltu	a5,a2,3334 <_free_r+0x144>
    3348:	00c6a583          	lw	a1,12(a3)
    334c:	00b72623          	sw	a1,12(a4)
    3350:	00d72423          	sw	a3,8(a4)
    3354:	00812403          	lw	s0,8(sp)
    3358:	00c12083          	lw	ra,12(sp)
    335c:	00e5a423          	sw	a4,8(a1)
    3360:	00048513          	mv	a0,s1
    3364:	00412483          	lw	s1,4(sp)
    3368:	00e6a623          	sw	a4,12(a3)
    336c:	01010113          	addi	sp,sp,16
    3370:	53d0006f          	j	40ac <__malloc_unlock>
    3374:	00008067          	ret
    3378:	00d787b3          	add	a5,a5,a3
    337c:	00005897          	auipc	a7,0x5
    3380:	7b488893          	addi	a7,a7,1972 # 8b30 <__malloc_av_+0x8>
    3384:	00862683          	lw	a3,8(a2)
    3388:	0d168e63          	beq	a3,a7,3464 <_free_r+0x274>
    338c:	00c62803          	lw	a6,12(a2)
    3390:	0017e593          	ori	a1,a5,1
    3394:	00f70633          	add	a2,a4,a5
    3398:	0106a623          	sw	a6,12(a3)
    339c:	00d82423          	sw	a3,8(a6)
    33a0:	00b72223          	sw	a1,4(a4)
    33a4:	00f62023          	sw	a5,0(a2)
    33a8:	ee1ff06f          	j	3288 <_free_r+0x98>
    33ac:	12059e63          	bnez	a1,34e8 <_free_r+0x2f8>
    33b0:	00862583          	lw	a1,8(a2)
    33b4:	00c62603          	lw	a2,12(a2)
    33b8:	00f686b3          	add	a3,a3,a5
    33bc:	0016e793          	ori	a5,a3,1
    33c0:	00c5a623          	sw	a2,12(a1)
    33c4:	00b62423          	sw	a1,8(a2)
    33c8:	00f72223          	sw	a5,4(a4)
    33cc:	00d70733          	add	a4,a4,a3
    33d0:	00d72023          	sw	a3,0(a4)
    33d4:	ef9ff06f          	j	32cc <_free_r+0xdc>
    33d8:	0015f593          	andi	a1,a1,1
    33dc:	00d786b3          	add	a3,a5,a3
    33e0:	02059063          	bnez	a1,3400 <_free_r+0x210>
    33e4:	ff842583          	lw	a1,-8(s0)
    33e8:	40b70733          	sub	a4,a4,a1
    33ec:	00c72783          	lw	a5,12(a4)
    33f0:	00872603          	lw	a2,8(a4)
    33f4:	00b686b3          	add	a3,a3,a1
    33f8:	00f62623          	sw	a5,12(a2)
    33fc:	00c7a423          	sw	a2,8(a5)
    3400:	0016e793          	ori	a5,a3,1
    3404:	00f72223          	sw	a5,4(a4)
    3408:	00e52423          	sw	a4,8(a0)
    340c:	82c1a783          	lw	a5,-2004(gp) # 8f5c <__malloc_trim_threshold>
    3410:	eaf6eee3          	bltu	a3,a5,32cc <_free_r+0xdc>
    3414:	00007597          	auipc	a1,0x7
    3418:	6f05a583          	lw	a1,1776(a1) # ab04 <__malloc_top_pad>
    341c:	00048513          	mv	a0,s1
    3420:	c95ff0ef          	jal	ra,30b4 <_malloc_trim_r>
    3424:	ea9ff06f          	j	32cc <_free_r+0xdc>
    3428:	00d787b3          	add	a5,a5,a3
    342c:	f59ff06f          	j	3384 <_free_r+0x194>
    3430:	01400613          	li	a2,20
    3434:	02d67063          	bgeu	a2,a3,3454 <_free_r+0x264>
    3438:	05400613          	li	a2,84
    343c:	06d66463          	bltu	a2,a3,34a4 <_free_r+0x2b4>
    3440:	00c7d693          	srli	a3,a5,0xc
    3444:	06f68593          	addi	a1,a3,111
    3448:	06e68613          	addi	a2,a3,110
    344c:	00359593          	slli	a1,a1,0x3
    3450:	ed1ff06f          	j	3320 <_free_r+0x130>
    3454:	05c68593          	addi	a1,a3,92
    3458:	05b68613          	addi	a2,a3,91
    345c:	00359593          	slli	a1,a1,0x3
    3460:	ec1ff06f          	j	3320 <_free_r+0x130>
    3464:	00e52a23          	sw	a4,20(a0)
    3468:	00e52823          	sw	a4,16(a0)
    346c:	0017e693          	ori	a3,a5,1
    3470:	01172623          	sw	a7,12(a4)
    3474:	01172423          	sw	a7,8(a4)
    3478:	00d72223          	sw	a3,4(a4)
    347c:	00f70733          	add	a4,a4,a5
    3480:	00f72023          	sw	a5,0(a4)
    3484:	e49ff06f          	j	32cc <_free_r+0xdc>
    3488:	00452803          	lw	a6,4(a0)
    348c:	40265613          	srai	a2,a2,0x2
    3490:	00100793          	li	a5,1
    3494:	00c797b3          	sll	a5,a5,a2
    3498:	0107e7b3          	or	a5,a5,a6
    349c:	00f52223          	sw	a5,4(a0)
    34a0:	eadff06f          	j	334c <_free_r+0x15c>
    34a4:	15400613          	li	a2,340
    34a8:	00d66c63          	bltu	a2,a3,34c0 <_free_r+0x2d0>
    34ac:	00f7d693          	srli	a3,a5,0xf
    34b0:	07868593          	addi	a1,a3,120
    34b4:	07768613          	addi	a2,a3,119
    34b8:	00359593          	slli	a1,a1,0x3
    34bc:	e65ff06f          	j	3320 <_free_r+0x130>
    34c0:	55400613          	li	a2,1364
    34c4:	00d66c63          	bltu	a2,a3,34dc <_free_r+0x2ec>
    34c8:	0127d693          	srli	a3,a5,0x12
    34cc:	07d68593          	addi	a1,a3,125
    34d0:	07c68613          	addi	a2,a3,124
    34d4:	00359593          	slli	a1,a1,0x3
    34d8:	e49ff06f          	j	3320 <_free_r+0x130>
    34dc:	3f800593          	li	a1,1016
    34e0:	07e00613          	li	a2,126
    34e4:	e3dff06f          	j	3320 <_free_r+0x130>
    34e8:	0017e693          	ori	a3,a5,1
    34ec:	00d72223          	sw	a3,4(a4)
    34f0:	00f62023          	sw	a5,0(a2)
    34f4:	dd9ff06f          	j	32cc <_free_r+0xdc>

000034f8 <_fwalk>:
    34f8:	fe010113          	addi	sp,sp,-32
    34fc:	01212823          	sw	s2,16(sp)
    3500:	01312623          	sw	s3,12(sp)
    3504:	01412423          	sw	s4,8(sp)
    3508:	01512223          	sw	s5,4(sp)
    350c:	01612023          	sw	s6,0(sp)
    3510:	00112e23          	sw	ra,28(sp)
    3514:	00812c23          	sw	s0,24(sp)
    3518:	00912a23          	sw	s1,20(sp)
    351c:	00058b13          	mv	s6,a1
    3520:	2e050a93          	addi	s5,a0,736
    3524:	00000a13          	li	s4,0
    3528:	00100993          	li	s3,1
    352c:	fff00913          	li	s2,-1
    3530:	004aa483          	lw	s1,4(s5)
    3534:	008aa403          	lw	s0,8(s5)
    3538:	fff48493          	addi	s1,s1,-1
    353c:	0204c663          	bltz	s1,3568 <_fwalk+0x70>
    3540:	00c45783          	lhu	a5,12(s0)
    3544:	fff48493          	addi	s1,s1,-1
    3548:	00f9fc63          	bgeu	s3,a5,3560 <_fwalk+0x68>
    354c:	00e41783          	lh	a5,14(s0)
    3550:	00040513          	mv	a0,s0
    3554:	01278663          	beq	a5,s2,3560 <_fwalk+0x68>
    3558:	000b00e7          	jalr	s6
    355c:	00aa6a33          	or	s4,s4,a0
    3560:	06840413          	addi	s0,s0,104
    3564:	fd249ee3          	bne	s1,s2,3540 <_fwalk+0x48>
    3568:	000aaa83          	lw	s5,0(s5)
    356c:	fc0a92e3          	bnez	s5,3530 <_fwalk+0x38>
    3570:	01c12083          	lw	ra,28(sp)
    3574:	01812403          	lw	s0,24(sp)
    3578:	01412483          	lw	s1,20(sp)
    357c:	01012903          	lw	s2,16(sp)
    3580:	00c12983          	lw	s3,12(sp)
    3584:	00412a83          	lw	s5,4(sp)
    3588:	00012b03          	lw	s6,0(sp)
    358c:	000a0513          	mv	a0,s4
    3590:	00812a03          	lw	s4,8(sp)
    3594:	02010113          	addi	sp,sp,32
    3598:	00008067          	ret

0000359c <_fwalk_reent>:
    359c:	fd010113          	addi	sp,sp,-48
    35a0:	03212023          	sw	s2,32(sp)
    35a4:	01312e23          	sw	s3,28(sp)
    35a8:	01412c23          	sw	s4,24(sp)
    35ac:	01512a23          	sw	s5,20(sp)
    35b0:	01612823          	sw	s6,16(sp)
    35b4:	01712623          	sw	s7,12(sp)
    35b8:	02112623          	sw	ra,44(sp)
    35bc:	02812423          	sw	s0,40(sp)
    35c0:	02912223          	sw	s1,36(sp)
    35c4:	00050a93          	mv	s5,a0
    35c8:	00058b93          	mv	s7,a1
    35cc:	2e050b13          	addi	s6,a0,736
    35d0:	00000a13          	li	s4,0
    35d4:	00100993          	li	s3,1
    35d8:	fff00913          	li	s2,-1
    35dc:	004b2483          	lw	s1,4(s6)
    35e0:	008b2403          	lw	s0,8(s6)
    35e4:	fff48493          	addi	s1,s1,-1
    35e8:	0204c863          	bltz	s1,3618 <_fwalk_reent+0x7c>
    35ec:	00c45783          	lhu	a5,12(s0)
    35f0:	fff48493          	addi	s1,s1,-1
    35f4:	00f9fe63          	bgeu	s3,a5,3610 <_fwalk_reent+0x74>
    35f8:	00e41783          	lh	a5,14(s0)
    35fc:	00040593          	mv	a1,s0
    3600:	000a8513          	mv	a0,s5
    3604:	01278663          	beq	a5,s2,3610 <_fwalk_reent+0x74>
    3608:	000b80e7          	jalr	s7
    360c:	00aa6a33          	or	s4,s4,a0
    3610:	06840413          	addi	s0,s0,104
    3614:	fd249ce3          	bne	s1,s2,35ec <_fwalk_reent+0x50>
    3618:	000b2b03          	lw	s6,0(s6)
    361c:	fc0b10e3          	bnez	s6,35dc <_fwalk_reent+0x40>
    3620:	02c12083          	lw	ra,44(sp)
    3624:	02812403          	lw	s0,40(sp)
    3628:	02412483          	lw	s1,36(sp)
    362c:	02012903          	lw	s2,32(sp)
    3630:	01c12983          	lw	s3,28(sp)
    3634:	01412a83          	lw	s5,20(sp)
    3638:	01012b03          	lw	s6,16(sp)
    363c:	00c12b83          	lw	s7,12(sp)
    3640:	000a0513          	mv	a0,s4
    3644:	01812a03          	lw	s4,24(sp)
    3648:	03010113          	addi	sp,sp,48
    364c:	00008067          	ret

00003650 <__retarget_lock_init>:
    3650:	00008067          	ret

00003654 <__retarget_lock_init_recursive>:
    3654:	00008067          	ret

00003658 <__retarget_lock_close>:
    3658:	00008067          	ret

0000365c <__retarget_lock_close_recursive>:
    365c:	00008067          	ret

00003660 <__retarget_lock_acquire>:
    3660:	00008067          	ret

00003664 <__retarget_lock_acquire_recursive>:
    3664:	00008067          	ret

00003668 <__retarget_lock_try_acquire>:
    3668:	00100513          	li	a0,1
    366c:	00008067          	ret

00003670 <__retarget_lock_try_acquire_recursive>:
    3670:	00100513          	li	a0,1
    3674:	00008067          	ret

00003678 <__retarget_lock_release>:
    3678:	00008067          	ret

0000367c <__retarget_lock_release_recursive>:
    367c:	00008067          	ret

00003680 <_malloc_r>:
    3680:	fd010113          	addi	sp,sp,-48
    3684:	03212023          	sw	s2,32(sp)
    3688:	02112623          	sw	ra,44(sp)
    368c:	02812423          	sw	s0,40(sp)
    3690:	02912223          	sw	s1,36(sp)
    3694:	01312e23          	sw	s3,28(sp)
    3698:	01412c23          	sw	s4,24(sp)
    369c:	01512a23          	sw	s5,20(sp)
    36a0:	01612823          	sw	s6,16(sp)
    36a4:	01712623          	sw	s7,12(sp)
    36a8:	01812423          	sw	s8,8(sp)
    36ac:	01912223          	sw	s9,4(sp)
    36b0:	00b58793          	addi	a5,a1,11
    36b4:	01600713          	li	a4,22
    36b8:	00050913          	mv	s2,a0
    36bc:	08f76e63          	bltu	a4,a5,3758 <_malloc_r+0xd8>
    36c0:	01000793          	li	a5,16
    36c4:	22b7e063          	bltu	a5,a1,38e4 <_malloc_r+0x264>
    36c8:	1d9000ef          	jal	ra,40a0 <__malloc_lock>
    36cc:	01000493          	li	s1,16
    36d0:	01800793          	li	a5,24
    36d4:	00200593          	li	a1,2
    36d8:	00005997          	auipc	s3,0x5
    36dc:	45098993          	addi	s3,s3,1104 # 8b28 <__malloc_av_>
    36e0:	00f987b3          	add	a5,s3,a5
    36e4:	0047a403          	lw	s0,4(a5)
    36e8:	ff878713          	addi	a4,a5,-8
    36ec:	32e40263          	beq	s0,a4,3a10 <_malloc_r+0x390>
    36f0:	00442783          	lw	a5,4(s0)
    36f4:	00c42683          	lw	a3,12(s0)
    36f8:	00842603          	lw	a2,8(s0)
    36fc:	ffc7f793          	andi	a5,a5,-4
    3700:	00f407b3          	add	a5,s0,a5
    3704:	0047a703          	lw	a4,4(a5)
    3708:	00d62623          	sw	a3,12(a2)
    370c:	00c6a423          	sw	a2,8(a3)
    3710:	00176713          	ori	a4,a4,1
    3714:	00090513          	mv	a0,s2
    3718:	00e7a223          	sw	a4,4(a5)
    371c:	191000ef          	jal	ra,40ac <__malloc_unlock>
    3720:	00840513          	addi	a0,s0,8
    3724:	02c12083          	lw	ra,44(sp)
    3728:	02812403          	lw	s0,40(sp)
    372c:	02412483          	lw	s1,36(sp)
    3730:	02012903          	lw	s2,32(sp)
    3734:	01c12983          	lw	s3,28(sp)
    3738:	01812a03          	lw	s4,24(sp)
    373c:	01412a83          	lw	s5,20(sp)
    3740:	01012b03          	lw	s6,16(sp)
    3744:	00c12b83          	lw	s7,12(sp)
    3748:	00812c03          	lw	s8,8(sp)
    374c:	00412c83          	lw	s9,4(sp)
    3750:	03010113          	addi	sp,sp,48
    3754:	00008067          	ret
    3758:	ff87f493          	andi	s1,a5,-8
    375c:	1807c463          	bltz	a5,38e4 <_malloc_r+0x264>
    3760:	18b4e263          	bltu	s1,a1,38e4 <_malloc_r+0x264>
    3764:	13d000ef          	jal	ra,40a0 <__malloc_lock>
    3768:	1f700793          	li	a5,503
    376c:	3a97fc63          	bgeu	a5,s1,3b24 <_malloc_r+0x4a4>
    3770:	0094d793          	srli	a5,s1,0x9
    3774:	18078063          	beqz	a5,38f4 <_malloc_r+0x274>
    3778:	00400713          	li	a4,4
    377c:	30f76263          	bltu	a4,a5,3a80 <_malloc_r+0x400>
    3780:	0064d793          	srli	a5,s1,0x6
    3784:	03978593          	addi	a1,a5,57
    3788:	03878513          	addi	a0,a5,56
    378c:	00359693          	slli	a3,a1,0x3
    3790:	00005997          	auipc	s3,0x5
    3794:	39898993          	addi	s3,s3,920 # 8b28 <__malloc_av_>
    3798:	00d986b3          	add	a3,s3,a3
    379c:	0046a403          	lw	s0,4(a3)
    37a0:	ff868693          	addi	a3,a3,-8
    37a4:	02868663          	beq	a3,s0,37d0 <_malloc_r+0x150>
    37a8:	00f00613          	li	a2,15
    37ac:	0100006f          	j	37bc <_malloc_r+0x13c>
    37b0:	24075a63          	bgez	a4,3a04 <_malloc_r+0x384>
    37b4:	00c42403          	lw	s0,12(s0)
    37b8:	00868c63          	beq	a3,s0,37d0 <_malloc_r+0x150>
    37bc:	00442783          	lw	a5,4(s0)
    37c0:	ffc7f793          	andi	a5,a5,-4
    37c4:	40978733          	sub	a4,a5,s1
    37c8:	fee654e3          	bge	a2,a4,37b0 <_malloc_r+0x130>
    37cc:	00050593          	mv	a1,a0
    37d0:	0109a403          	lw	s0,16(s3)
    37d4:	00005897          	auipc	a7,0x5
    37d8:	35c88893          	addi	a7,a7,860 # 8b30 <__malloc_av_+0x8>
    37dc:	1f140c63          	beq	s0,a7,39d4 <_malloc_r+0x354>
    37e0:	00442783          	lw	a5,4(s0)
    37e4:	00f00693          	li	a3,15
    37e8:	ffc7f793          	andi	a5,a5,-4
    37ec:	40978733          	sub	a4,a5,s1
    37f0:	34e6c063          	blt	a3,a4,3b30 <_malloc_r+0x4b0>
    37f4:	0119aa23          	sw	a7,20(s3)
    37f8:	0119a823          	sw	a7,16(s3)
    37fc:	30075463          	bgez	a4,3b04 <_malloc_r+0x484>
    3800:	1ff00713          	li	a4,511
    3804:	0049a503          	lw	a0,4(s3)
    3808:	20f76c63          	bltu	a4,a5,3a20 <_malloc_r+0x3a0>
    380c:	ff87f713          	andi	a4,a5,-8
    3810:	00870713          	addi	a4,a4,8
    3814:	00e98733          	add	a4,s3,a4
    3818:	00072683          	lw	a3,0(a4)
    381c:	0057d613          	srli	a2,a5,0x5
    3820:	00100793          	li	a5,1
    3824:	00c797b3          	sll	a5,a5,a2
    3828:	00f56533          	or	a0,a0,a5
    382c:	ff870793          	addi	a5,a4,-8
    3830:	00f42623          	sw	a5,12(s0)
    3834:	00d42423          	sw	a3,8(s0)
    3838:	00a9a223          	sw	a0,4(s3)
    383c:	00872023          	sw	s0,0(a4)
    3840:	0086a623          	sw	s0,12(a3)
    3844:	4025d793          	srai	a5,a1,0x2
    3848:	00100613          	li	a2,1
    384c:	00f61633          	sll	a2,a2,a5
    3850:	0ac56a63          	bltu	a0,a2,3904 <_malloc_r+0x284>
    3854:	00a677b3          	and	a5,a2,a0
    3858:	02079463          	bnez	a5,3880 <_malloc_r+0x200>
    385c:	00161613          	slli	a2,a2,0x1
    3860:	ffc5f593          	andi	a1,a1,-4
    3864:	00a677b3          	and	a5,a2,a0
    3868:	00458593          	addi	a1,a1,4
    386c:	00079a63          	bnez	a5,3880 <_malloc_r+0x200>
    3870:	00161613          	slli	a2,a2,0x1
    3874:	00a677b3          	and	a5,a2,a0
    3878:	00458593          	addi	a1,a1,4
    387c:	fe078ae3          	beqz	a5,3870 <_malloc_r+0x1f0>
    3880:	00f00813          	li	a6,15
    3884:	00359313          	slli	t1,a1,0x3
    3888:	00698333          	add	t1,s3,t1
    388c:	00030513          	mv	a0,t1
    3890:	00c52783          	lw	a5,12(a0)
    3894:	00058e13          	mv	t3,a1
    3898:	20f50663          	beq	a0,a5,3aa4 <_malloc_r+0x424>
    389c:	0047a703          	lw	a4,4(a5)
    38a0:	00078413          	mv	s0,a5
    38a4:	00c7a783          	lw	a5,12(a5)
    38a8:	ffc77713          	andi	a4,a4,-4
    38ac:	409706b3          	sub	a3,a4,s1
    38b0:	20d84663          	blt	a6,a3,3abc <_malloc_r+0x43c>
    38b4:	fe06c2e3          	bltz	a3,3898 <_malloc_r+0x218>
    38b8:	00e40733          	add	a4,s0,a4
    38bc:	00472683          	lw	a3,4(a4)
    38c0:	00842603          	lw	a2,8(s0)
    38c4:	00090513          	mv	a0,s2
    38c8:	0016e693          	ori	a3,a3,1
    38cc:	00d72223          	sw	a3,4(a4)
    38d0:	00f62623          	sw	a5,12(a2)
    38d4:	00c7a423          	sw	a2,8(a5)
    38d8:	7d4000ef          	jal	ra,40ac <__malloc_unlock>
    38dc:	00840513          	addi	a0,s0,8
    38e0:	e45ff06f          	j	3724 <_malloc_r+0xa4>
    38e4:	00c00793          	li	a5,12
    38e8:	00f92023          	sw	a5,0(s2)
    38ec:	00000513          	li	a0,0
    38f0:	e35ff06f          	j	3724 <_malloc_r+0xa4>
    38f4:	20000693          	li	a3,512
    38f8:	04000593          	li	a1,64
    38fc:	03f00513          	li	a0,63
    3900:	e91ff06f          	j	3790 <_malloc_r+0x110>
    3904:	0089a403          	lw	s0,8(s3)
    3908:	00442783          	lw	a5,4(s0)
    390c:	ffc7fb13          	andi	s6,a5,-4
    3910:	009b6863          	bltu	s6,s1,3920 <_malloc_r+0x2a0>
    3914:	409b0733          	sub	a4,s6,s1
    3918:	00f00793          	li	a5,15
    391c:	0ce7c063          	blt	a5,a4,39dc <_malloc_r+0x35c>
    3920:	82818c93          	addi	s9,gp,-2008 # 8f58 <__malloc_sbrk_base>
    3924:	000ca703          	lw	a4,0(s9)
    3928:	00007a97          	auipc	s5,0x7
    392c:	1dcaaa83          	lw	s5,476(s5) # ab04 <__malloc_top_pad>
    3930:	fff00793          	li	a5,-1
    3934:	01640a33          	add	s4,s0,s6
    3938:	01548ab3          	add	s5,s1,s5
    393c:	3cf70063          	beq	a4,a5,3cfc <_malloc_r+0x67c>
    3940:	000017b7          	lui	a5,0x1
    3944:	00f78793          	addi	a5,a5,15 # 100f <altera_avalon_jtag_uart_write+0xb3>
    3948:	00fa8ab3          	add	s5,s5,a5
    394c:	fffff7b7          	lui	a5,0xfffff
    3950:	00fafab3          	and	s5,s5,a5
    3954:	000a8593          	mv	a1,s5
    3958:	00090513          	mv	a0,s2
    395c:	245000ef          	jal	ra,43a0 <_sbrk_r>
    3960:	fff00793          	li	a5,-1
    3964:	00050b93          	mv	s7,a0
    3968:	20f50e63          	beq	a0,a5,3b84 <_malloc_r+0x504>
    396c:	21456a63          	bltu	a0,s4,3b80 <_malloc_r+0x500>
    3970:	00007c17          	auipc	s8,0x7
    3974:	220c0c13          	addi	s8,s8,544 # ab90 <__malloc_current_mallinfo>
    3978:	000c2583          	lw	a1,0(s8)
    397c:	00ba85b3          	add	a1,s5,a1
    3980:	00bc2023          	sw	a1,0(s8)
    3984:	00058713          	mv	a4,a1
    3988:	2aaa1063          	bne	s4,a0,3c28 <_malloc_r+0x5a8>
    398c:	01451793          	slli	a5,a0,0x14
    3990:	28079c63          	bnez	a5,3c28 <_malloc_r+0x5a8>
    3994:	0089ab83          	lw	s7,8(s3)
    3998:	015b07b3          	add	a5,s6,s5
    399c:	0017e793          	ori	a5,a5,1
    39a0:	00fba223          	sw	a5,4(s7)
    39a4:	00007717          	auipc	a4,0x7
    39a8:	15c70713          	addi	a4,a4,348 # ab00 <__malloc_max_sbrked_mem>
    39ac:	00072683          	lw	a3,0(a4)
    39b0:	00b6f463          	bgeu	a3,a1,39b8 <_malloc_r+0x338>
    39b4:	00b72023          	sw	a1,0(a4)
    39b8:	00007717          	auipc	a4,0x7
    39bc:	14470713          	addi	a4,a4,324 # aafc <__malloc_max_total_mem>
    39c0:	00072683          	lw	a3,0(a4)
    39c4:	00b6f463          	bgeu	a3,a1,39cc <_malloc_r+0x34c>
    39c8:	00b72023          	sw	a1,0(a4)
    39cc:	000b8413          	mv	s0,s7
    39d0:	1bc0006f          	j	3b8c <_malloc_r+0x50c>
    39d4:	0049a503          	lw	a0,4(s3)
    39d8:	e6dff06f          	j	3844 <_malloc_r+0x1c4>
    39dc:	0014e793          	ori	a5,s1,1
    39e0:	00f42223          	sw	a5,4(s0)
    39e4:	009404b3          	add	s1,s0,s1
    39e8:	0099a423          	sw	s1,8(s3)
    39ec:	00176713          	ori	a4,a4,1
    39f0:	00090513          	mv	a0,s2
    39f4:	00e4a223          	sw	a4,4(s1)
    39f8:	6b4000ef          	jal	ra,40ac <__malloc_unlock>
    39fc:	00840513          	addi	a0,s0,8
    3a00:	d25ff06f          	j	3724 <_malloc_r+0xa4>
    3a04:	00c42683          	lw	a3,12(s0)
    3a08:	00842603          	lw	a2,8(s0)
    3a0c:	cf5ff06f          	j	3700 <_malloc_r+0x80>
    3a10:	00c7a403          	lw	s0,12(a5) # fffff00c <__alt_data_end+0xfdfff00c>
    3a14:	00258593          	addi	a1,a1,2
    3a18:	da878ce3          	beq	a5,s0,37d0 <_malloc_r+0x150>
    3a1c:	cd5ff06f          	j	36f0 <_malloc_r+0x70>
    3a20:	0097d713          	srli	a4,a5,0x9
    3a24:	00400693          	li	a3,4
    3a28:	14e6f263          	bgeu	a3,a4,3b6c <_malloc_r+0x4ec>
    3a2c:	01400693          	li	a3,20
    3a30:	30e6ec63          	bltu	a3,a4,3d48 <_malloc_r+0x6c8>
    3a34:	05c70613          	addi	a2,a4,92
    3a38:	05b70693          	addi	a3,a4,91
    3a3c:	00361613          	slli	a2,a2,0x3
    3a40:	00c98633          	add	a2,s3,a2
    3a44:	00062703          	lw	a4,0(a2)
    3a48:	ff860613          	addi	a2,a2,-8
    3a4c:	00e61863          	bne	a2,a4,3a5c <_malloc_r+0x3dc>
    3a50:	2b40006f          	j	3d04 <_malloc_r+0x684>
    3a54:	00872703          	lw	a4,8(a4)
    3a58:	00e60863          	beq	a2,a4,3a68 <_malloc_r+0x3e8>
    3a5c:	00472683          	lw	a3,4(a4)
    3a60:	ffc6f693          	andi	a3,a3,-4
    3a64:	fed7e8e3          	bltu	a5,a3,3a54 <_malloc_r+0x3d4>
    3a68:	00c72603          	lw	a2,12(a4)
    3a6c:	00c42623          	sw	a2,12(s0)
    3a70:	00e42423          	sw	a4,8(s0)
    3a74:	00862423          	sw	s0,8(a2)
    3a78:	00872623          	sw	s0,12(a4)
    3a7c:	dc9ff06f          	j	3844 <_malloc_r+0x1c4>
    3a80:	01400713          	li	a4,20
    3a84:	12f77663          	bgeu	a4,a5,3bb0 <_malloc_r+0x530>
    3a88:	05400713          	li	a4,84
    3a8c:	2cf76c63          	bltu	a4,a5,3d64 <_malloc_r+0x6e4>
    3a90:	00c4d793          	srli	a5,s1,0xc
    3a94:	06f78593          	addi	a1,a5,111
    3a98:	06e78513          	addi	a0,a5,110
    3a9c:	00359693          	slli	a3,a1,0x3
    3aa0:	cf1ff06f          	j	3790 <_malloc_r+0x110>
    3aa4:	001e0e13          	addi	t3,t3,1
    3aa8:	003e7793          	andi	a5,t3,3
    3aac:	00850513          	addi	a0,a0,8
    3ab0:	10078e63          	beqz	a5,3bcc <_malloc_r+0x54c>
    3ab4:	00c52783          	lw	a5,12(a0)
    3ab8:	de1ff06f          	j	3898 <_malloc_r+0x218>
    3abc:	00842603          	lw	a2,8(s0)
    3ac0:	0014e593          	ori	a1,s1,1
    3ac4:	00b42223          	sw	a1,4(s0)
    3ac8:	00f62623          	sw	a5,12(a2)
    3acc:	00c7a423          	sw	a2,8(a5)
    3ad0:	009404b3          	add	s1,s0,s1
    3ad4:	0099aa23          	sw	s1,20(s3)
    3ad8:	0099a823          	sw	s1,16(s3)
    3adc:	0016e793          	ori	a5,a3,1
    3ae0:	0114a623          	sw	a7,12(s1)
    3ae4:	0114a423          	sw	a7,8(s1)
    3ae8:	00f4a223          	sw	a5,4(s1)
    3aec:	00e40733          	add	a4,s0,a4
    3af0:	00090513          	mv	a0,s2
    3af4:	00d72023          	sw	a3,0(a4)
    3af8:	5b4000ef          	jal	ra,40ac <__malloc_unlock>
    3afc:	00840513          	addi	a0,s0,8
    3b00:	c25ff06f          	j	3724 <_malloc_r+0xa4>
    3b04:	00f407b3          	add	a5,s0,a5
    3b08:	0047a703          	lw	a4,4(a5)
    3b0c:	00090513          	mv	a0,s2
    3b10:	00176713          	ori	a4,a4,1
    3b14:	00e7a223          	sw	a4,4(a5)
    3b18:	594000ef          	jal	ra,40ac <__malloc_unlock>
    3b1c:	00840513          	addi	a0,s0,8
    3b20:	c05ff06f          	j	3724 <_malloc_r+0xa4>
    3b24:	0034d593          	srli	a1,s1,0x3
    3b28:	00848793          	addi	a5,s1,8
    3b2c:	badff06f          	j	36d8 <_malloc_r+0x58>
    3b30:	0014e693          	ori	a3,s1,1
    3b34:	00d42223          	sw	a3,4(s0)
    3b38:	009404b3          	add	s1,s0,s1
    3b3c:	0099aa23          	sw	s1,20(s3)
    3b40:	0099a823          	sw	s1,16(s3)
    3b44:	00176693          	ori	a3,a4,1
    3b48:	0114a623          	sw	a7,12(s1)
    3b4c:	0114a423          	sw	a7,8(s1)
    3b50:	00d4a223          	sw	a3,4(s1)
    3b54:	00f407b3          	add	a5,s0,a5
    3b58:	00090513          	mv	a0,s2
    3b5c:	00e7a023          	sw	a4,0(a5)
    3b60:	54c000ef          	jal	ra,40ac <__malloc_unlock>
    3b64:	00840513          	addi	a0,s0,8
    3b68:	bbdff06f          	j	3724 <_malloc_r+0xa4>
    3b6c:	0067d713          	srli	a4,a5,0x6
    3b70:	03970613          	addi	a2,a4,57
    3b74:	03870693          	addi	a3,a4,56
    3b78:	00361613          	slli	a2,a2,0x3
    3b7c:	ec5ff06f          	j	3a40 <_malloc_r+0x3c0>
    3b80:	09340a63          	beq	s0,s3,3c14 <_malloc_r+0x594>
    3b84:	0089a403          	lw	s0,8(s3)
    3b88:	00442783          	lw	a5,4(s0)
    3b8c:	ffc7f793          	andi	a5,a5,-4
    3b90:	40978733          	sub	a4,a5,s1
    3b94:	0097e663          	bltu	a5,s1,3ba0 <_malloc_r+0x520>
    3b98:	00f00793          	li	a5,15
    3b9c:	e4e7c0e3          	blt	a5,a4,39dc <_malloc_r+0x35c>
    3ba0:	00090513          	mv	a0,s2
    3ba4:	508000ef          	jal	ra,40ac <__malloc_unlock>
    3ba8:	00000513          	li	a0,0
    3bac:	b79ff06f          	j	3724 <_malloc_r+0xa4>
    3bb0:	05c78593          	addi	a1,a5,92
    3bb4:	05b78513          	addi	a0,a5,91
    3bb8:	00359693          	slli	a3,a1,0x3
    3bbc:	bd5ff06f          	j	3790 <_malloc_r+0x110>
    3bc0:	00832783          	lw	a5,8(t1)
    3bc4:	fff58593          	addi	a1,a1,-1
    3bc8:	24679863          	bne	a5,t1,3e18 <_malloc_r+0x798>
    3bcc:	0035f793          	andi	a5,a1,3
    3bd0:	ff830313          	addi	t1,t1,-8
    3bd4:	fe0796e3          	bnez	a5,3bc0 <_malloc_r+0x540>
    3bd8:	0049a703          	lw	a4,4(s3)
    3bdc:	fff64793          	not	a5,a2
    3be0:	00e7f7b3          	and	a5,a5,a4
    3be4:	00f9a223          	sw	a5,4(s3)
    3be8:	00161613          	slli	a2,a2,0x1
    3bec:	d0c7ece3          	bltu	a5,a2,3904 <_malloc_r+0x284>
    3bf0:	d0060ae3          	beqz	a2,3904 <_malloc_r+0x284>
    3bf4:	00f67733          	and	a4,a2,a5
    3bf8:	00071a63          	bnez	a4,3c0c <_malloc_r+0x58c>
    3bfc:	00161613          	slli	a2,a2,0x1
    3c00:	00f67733          	and	a4,a2,a5
    3c04:	004e0e13          	addi	t3,t3,4
    3c08:	fe070ae3          	beqz	a4,3bfc <_malloc_r+0x57c>
    3c0c:	000e0593          	mv	a1,t3
    3c10:	c75ff06f          	j	3884 <_malloc_r+0x204>
    3c14:	00007c17          	auipc	s8,0x7
    3c18:	f7cc0c13          	addi	s8,s8,-132 # ab90 <__malloc_current_mallinfo>
    3c1c:	000c2703          	lw	a4,0(s8)
    3c20:	00ea8733          	add	a4,s5,a4
    3c24:	00ec2023          	sw	a4,0(s8)
    3c28:	000ca683          	lw	a3,0(s9)
    3c2c:	fff00793          	li	a5,-1
    3c30:	14f68863          	beq	a3,a5,3d80 <_malloc_r+0x700>
    3c34:	414b87b3          	sub	a5,s7,s4
    3c38:	00e787b3          	add	a5,a5,a4
    3c3c:	00fc2023          	sw	a5,0(s8)
    3c40:	007bfc93          	andi	s9,s7,7
    3c44:	0c0c8c63          	beqz	s9,3d1c <_malloc_r+0x69c>
    3c48:	00001737          	lui	a4,0x1
    3c4c:	419b8bb3          	sub	s7,s7,s9
    3c50:	00870593          	addi	a1,a4,8 # 1008 <altera_avalon_jtag_uart_write+0xac>
    3c54:	008b8b93          	addi	s7,s7,8
    3c58:	419585b3          	sub	a1,a1,s9
    3c5c:	015b8ab3          	add	s5,s7,s5
    3c60:	415585b3          	sub	a1,a1,s5
    3c64:	fff70713          	addi	a4,a4,-1
    3c68:	00e5fa33          	and	s4,a1,a4
    3c6c:	000a0593          	mv	a1,s4
    3c70:	00090513          	mv	a0,s2
    3c74:	72c000ef          	jal	ra,43a0 <_sbrk_r>
    3c78:	fff00793          	li	a5,-1
    3c7c:	14f50863          	beq	a0,a5,3dcc <_malloc_r+0x74c>
    3c80:	41750533          	sub	a0,a0,s7
    3c84:	01450ab3          	add	s5,a0,s4
    3c88:	000c2703          	lw	a4,0(s8)
    3c8c:	0179a423          	sw	s7,8(s3)
    3c90:	001ae793          	ori	a5,s5,1
    3c94:	00ea05b3          	add	a1,s4,a4
    3c98:	00bc2023          	sw	a1,0(s8)
    3c9c:	00fba223          	sw	a5,4(s7)
    3ca0:	d13402e3          	beq	s0,s3,39a4 <_malloc_r+0x324>
    3ca4:	00f00693          	li	a3,15
    3ca8:	0f66f063          	bgeu	a3,s6,3d88 <_malloc_r+0x708>
    3cac:	00442703          	lw	a4,4(s0)
    3cb0:	ff4b0793          	addi	a5,s6,-12
    3cb4:	ff87f793          	andi	a5,a5,-8
    3cb8:	00177713          	andi	a4,a4,1
    3cbc:	00f76733          	or	a4,a4,a5
    3cc0:	00e42223          	sw	a4,4(s0)
    3cc4:	00500613          	li	a2,5
    3cc8:	00f40733          	add	a4,s0,a5
    3ccc:	00c72223          	sw	a2,4(a4)
    3cd0:	00c72423          	sw	a2,8(a4)
    3cd4:	00f6e663          	bltu	a3,a5,3ce0 <_malloc_r+0x660>
    3cd8:	004ba783          	lw	a5,4(s7)
    3cdc:	cc9ff06f          	j	39a4 <_malloc_r+0x324>
    3ce0:	00840593          	addi	a1,s0,8
    3ce4:	00090513          	mv	a0,s2
    3ce8:	d08ff0ef          	jal	ra,31f0 <_free_r>
    3cec:	0089ab83          	lw	s7,8(s3)
    3cf0:	000c2583          	lw	a1,0(s8)
    3cf4:	004ba783          	lw	a5,4(s7)
    3cf8:	cadff06f          	j	39a4 <_malloc_r+0x324>
    3cfc:	010a8a93          	addi	s5,s5,16
    3d00:	c55ff06f          	j	3954 <_malloc_r+0x2d4>
    3d04:	4026d693          	srai	a3,a3,0x2
    3d08:	00100793          	li	a5,1
    3d0c:	00d797b3          	sll	a5,a5,a3
    3d10:	00f56533          	or	a0,a0,a5
    3d14:	00a9a223          	sw	a0,4(s3)
    3d18:	d55ff06f          	j	3a6c <_malloc_r+0x3ec>
    3d1c:	015b85b3          	add	a1,s7,s5
    3d20:	40b005b3          	neg	a1,a1
    3d24:	01459593          	slli	a1,a1,0x14
    3d28:	0145da13          	srli	s4,a1,0x14
    3d2c:	000a0593          	mv	a1,s4
    3d30:	00090513          	mv	a0,s2
    3d34:	66c000ef          	jal	ra,43a0 <_sbrk_r>
    3d38:	fff00793          	li	a5,-1
    3d3c:	f4f512e3          	bne	a0,a5,3c80 <_malloc_r+0x600>
    3d40:	00000a13          	li	s4,0
    3d44:	f45ff06f          	j	3c88 <_malloc_r+0x608>
    3d48:	05400693          	li	a3,84
    3d4c:	04e6e463          	bltu	a3,a4,3d94 <_malloc_r+0x714>
    3d50:	00c7d713          	srli	a4,a5,0xc
    3d54:	06f70613          	addi	a2,a4,111
    3d58:	06e70693          	addi	a3,a4,110
    3d5c:	00361613          	slli	a2,a2,0x3
    3d60:	ce1ff06f          	j	3a40 <_malloc_r+0x3c0>
    3d64:	15400713          	li	a4,340
    3d68:	04f76463          	bltu	a4,a5,3db0 <_malloc_r+0x730>
    3d6c:	00f4d793          	srli	a5,s1,0xf
    3d70:	07878593          	addi	a1,a5,120
    3d74:	07778513          	addi	a0,a5,119
    3d78:	00359693          	slli	a3,a1,0x3
    3d7c:	a15ff06f          	j	3790 <_malloc_r+0x110>
    3d80:	017ca023          	sw	s7,0(s9)
    3d84:	ebdff06f          	j	3c40 <_malloc_r+0x5c0>
    3d88:	00100793          	li	a5,1
    3d8c:	00fba223          	sw	a5,4(s7)
    3d90:	e11ff06f          	j	3ba0 <_malloc_r+0x520>
    3d94:	15400693          	li	a3,340
    3d98:	04e6e463          	bltu	a3,a4,3de0 <_malloc_r+0x760>
    3d9c:	00f7d713          	srli	a4,a5,0xf
    3da0:	07870613          	addi	a2,a4,120
    3da4:	07770693          	addi	a3,a4,119
    3da8:	00361613          	slli	a2,a2,0x3
    3dac:	c95ff06f          	j	3a40 <_malloc_r+0x3c0>
    3db0:	55400713          	li	a4,1364
    3db4:	04f76463          	bltu	a4,a5,3dfc <_malloc_r+0x77c>
    3db8:	0124d793          	srli	a5,s1,0x12
    3dbc:	07d78593          	addi	a1,a5,125
    3dc0:	07c78513          	addi	a0,a5,124
    3dc4:	00359693          	slli	a3,a1,0x3
    3dc8:	9c9ff06f          	j	3790 <_malloc_r+0x110>
    3dcc:	ff8c8c93          	addi	s9,s9,-8
    3dd0:	019a8ab3          	add	s5,s5,s9
    3dd4:	417a8ab3          	sub	s5,s5,s7
    3dd8:	00000a13          	li	s4,0
    3ddc:	eadff06f          	j	3c88 <_malloc_r+0x608>
    3de0:	55400693          	li	a3,1364
    3de4:	02e6e463          	bltu	a3,a4,3e0c <_malloc_r+0x78c>
    3de8:	0127d713          	srli	a4,a5,0x12
    3dec:	07d70613          	addi	a2,a4,125
    3df0:	07c70693          	addi	a3,a4,124
    3df4:	00361613          	slli	a2,a2,0x3
    3df8:	c49ff06f          	j	3a40 <_malloc_r+0x3c0>
    3dfc:	3f800693          	li	a3,1016
    3e00:	07f00593          	li	a1,127
    3e04:	07e00513          	li	a0,126
    3e08:	989ff06f          	j	3790 <_malloc_r+0x110>
    3e0c:	3f800613          	li	a2,1016
    3e10:	07e00693          	li	a3,126
    3e14:	c2dff06f          	j	3a40 <_malloc_r+0x3c0>
    3e18:	0049a783          	lw	a5,4(s3)
    3e1c:	dcdff06f          	j	3be8 <_malloc_r+0x568>

00003e20 <memcpy>:
    3e20:	00b547b3          	xor	a5,a0,a1
    3e24:	0037f793          	andi	a5,a5,3
    3e28:	00c508b3          	add	a7,a0,a2
    3e2c:	06079463          	bnez	a5,3e94 <memcpy+0x74>
    3e30:	00300793          	li	a5,3
    3e34:	06c7f063          	bgeu	a5,a2,3e94 <memcpy+0x74>
    3e38:	00357793          	andi	a5,a0,3
    3e3c:	00050713          	mv	a4,a0
    3e40:	06079a63          	bnez	a5,3eb4 <memcpy+0x94>
    3e44:	ffc8f613          	andi	a2,a7,-4
    3e48:	40e606b3          	sub	a3,a2,a4
    3e4c:	02000793          	li	a5,32
    3e50:	08d7ce63          	blt	a5,a3,3eec <memcpy+0xcc>
    3e54:	00058693          	mv	a3,a1
    3e58:	00070793          	mv	a5,a4
    3e5c:	02c77863          	bgeu	a4,a2,3e8c <memcpy+0x6c>
    3e60:	0006a803          	lw	a6,0(a3)
    3e64:	00478793          	addi	a5,a5,4
    3e68:	00468693          	addi	a3,a3,4
    3e6c:	ff07ae23          	sw	a6,-4(a5)
    3e70:	fec7e8e3          	bltu	a5,a2,3e60 <memcpy+0x40>
    3e74:	fff60793          	addi	a5,a2,-1
    3e78:	40e787b3          	sub	a5,a5,a4
    3e7c:	ffc7f793          	andi	a5,a5,-4
    3e80:	00478793          	addi	a5,a5,4
    3e84:	00f70733          	add	a4,a4,a5
    3e88:	00f585b3          	add	a1,a1,a5
    3e8c:	01176863          	bltu	a4,a7,3e9c <memcpy+0x7c>
    3e90:	00008067          	ret
    3e94:	00050713          	mv	a4,a0
    3e98:	05157863          	bgeu	a0,a7,3ee8 <memcpy+0xc8>
    3e9c:	0005c783          	lbu	a5,0(a1)
    3ea0:	00170713          	addi	a4,a4,1
    3ea4:	00158593          	addi	a1,a1,1
    3ea8:	fef70fa3          	sb	a5,-1(a4)
    3eac:	fee898e3          	bne	a7,a4,3e9c <memcpy+0x7c>
    3eb0:	00008067          	ret
    3eb4:	0005c683          	lbu	a3,0(a1)
    3eb8:	00170713          	addi	a4,a4,1
    3ebc:	00377793          	andi	a5,a4,3
    3ec0:	fed70fa3          	sb	a3,-1(a4)
    3ec4:	00158593          	addi	a1,a1,1
    3ec8:	f6078ee3          	beqz	a5,3e44 <memcpy+0x24>
    3ecc:	0005c683          	lbu	a3,0(a1)
    3ed0:	00170713          	addi	a4,a4,1
    3ed4:	00377793          	andi	a5,a4,3
    3ed8:	fed70fa3          	sb	a3,-1(a4)
    3edc:	00158593          	addi	a1,a1,1
    3ee0:	fc079ae3          	bnez	a5,3eb4 <memcpy+0x94>
    3ee4:	f61ff06f          	j	3e44 <memcpy+0x24>
    3ee8:	00008067          	ret
    3eec:	ff010113          	addi	sp,sp,-16
    3ef0:	00812623          	sw	s0,12(sp)
    3ef4:	02000413          	li	s0,32
    3ef8:	0005a383          	lw	t2,0(a1)
    3efc:	0045a283          	lw	t0,4(a1)
    3f00:	0085af83          	lw	t6,8(a1)
    3f04:	00c5af03          	lw	t5,12(a1)
    3f08:	0105ae83          	lw	t4,16(a1)
    3f0c:	0145ae03          	lw	t3,20(a1)
    3f10:	0185a303          	lw	t1,24(a1)
    3f14:	01c5a803          	lw	a6,28(a1)
    3f18:	0205a683          	lw	a3,32(a1)
    3f1c:	02470713          	addi	a4,a4,36
    3f20:	40e607b3          	sub	a5,a2,a4
    3f24:	fc772e23          	sw	t2,-36(a4)
    3f28:	fe572023          	sw	t0,-32(a4)
    3f2c:	fff72223          	sw	t6,-28(a4)
    3f30:	ffe72423          	sw	t5,-24(a4)
    3f34:	ffd72623          	sw	t4,-20(a4)
    3f38:	ffc72823          	sw	t3,-16(a4)
    3f3c:	fe672a23          	sw	t1,-12(a4)
    3f40:	ff072c23          	sw	a6,-8(a4)
    3f44:	fed72e23          	sw	a3,-4(a4)
    3f48:	02458593          	addi	a1,a1,36
    3f4c:	faf446e3          	blt	s0,a5,3ef8 <memcpy+0xd8>
    3f50:	00058693          	mv	a3,a1
    3f54:	00070793          	mv	a5,a4
    3f58:	02c77863          	bgeu	a4,a2,3f88 <memcpy+0x168>
    3f5c:	0006a803          	lw	a6,0(a3)
    3f60:	00478793          	addi	a5,a5,4
    3f64:	00468693          	addi	a3,a3,4
    3f68:	ff07ae23          	sw	a6,-4(a5)
    3f6c:	fec7e8e3          	bltu	a5,a2,3f5c <memcpy+0x13c>
    3f70:	fff60793          	addi	a5,a2,-1
    3f74:	40e787b3          	sub	a5,a5,a4
    3f78:	ffc7f793          	andi	a5,a5,-4
    3f7c:	00478793          	addi	a5,a5,4
    3f80:	00f70733          	add	a4,a4,a5
    3f84:	00f585b3          	add	a1,a1,a5
    3f88:	01176863          	bltu	a4,a7,3f98 <memcpy+0x178>
    3f8c:	00c12403          	lw	s0,12(sp)
    3f90:	01010113          	addi	sp,sp,16
    3f94:	00008067          	ret
    3f98:	0005c783          	lbu	a5,0(a1)
    3f9c:	00170713          	addi	a4,a4,1
    3fa0:	00158593          	addi	a1,a1,1
    3fa4:	fef70fa3          	sb	a5,-1(a4)
    3fa8:	fee882e3          	beq	a7,a4,3f8c <memcpy+0x16c>
    3fac:	0005c783          	lbu	a5,0(a1)
    3fb0:	00170713          	addi	a4,a4,1
    3fb4:	00158593          	addi	a1,a1,1
    3fb8:	fef70fa3          	sb	a5,-1(a4)
    3fbc:	fce89ee3          	bne	a7,a4,3f98 <memcpy+0x178>
    3fc0:	fcdff06f          	j	3f8c <memcpy+0x16c>

00003fc4 <memset>:
    3fc4:	00f00313          	li	t1,15
    3fc8:	00050713          	mv	a4,a0
    3fcc:	02c37e63          	bgeu	t1,a2,4008 <memset+0x44>
    3fd0:	00f77793          	andi	a5,a4,15
    3fd4:	0a079063          	bnez	a5,4074 <memset+0xb0>
    3fd8:	08059263          	bnez	a1,405c <memset+0x98>
    3fdc:	ff067693          	andi	a3,a2,-16
    3fe0:	00f67613          	andi	a2,a2,15
    3fe4:	00e686b3          	add	a3,a3,a4
    3fe8:	00b72023          	sw	a1,0(a4)
    3fec:	00b72223          	sw	a1,4(a4)
    3ff0:	00b72423          	sw	a1,8(a4)
    3ff4:	00b72623          	sw	a1,12(a4)
    3ff8:	01070713          	addi	a4,a4,16
    3ffc:	fed766e3          	bltu	a4,a3,3fe8 <memset+0x24>
    4000:	00061463          	bnez	a2,4008 <memset+0x44>
    4004:	00008067          	ret
    4008:	40c306b3          	sub	a3,t1,a2
    400c:	00269693          	slli	a3,a3,0x2
    4010:	00000297          	auipc	t0,0x0
    4014:	005686b3          	add	a3,a3,t0
    4018:	00c68067          	jr	12(a3)
    401c:	00b70723          	sb	a1,14(a4)
    4020:	00b706a3          	sb	a1,13(a4)
    4024:	00b70623          	sb	a1,12(a4)
    4028:	00b705a3          	sb	a1,11(a4)
    402c:	00b70523          	sb	a1,10(a4)
    4030:	00b704a3          	sb	a1,9(a4)
    4034:	00b70423          	sb	a1,8(a4)
    4038:	00b703a3          	sb	a1,7(a4)
    403c:	00b70323          	sb	a1,6(a4)
    4040:	00b702a3          	sb	a1,5(a4)
    4044:	00b70223          	sb	a1,4(a4)
    4048:	00b701a3          	sb	a1,3(a4)
    404c:	00b70123          	sb	a1,2(a4)
    4050:	00b700a3          	sb	a1,1(a4)
    4054:	00b70023          	sb	a1,0(a4)
    4058:	00008067          	ret
    405c:	0ff5f593          	zext.b	a1,a1
    4060:	00859693          	slli	a3,a1,0x8
    4064:	00d5e5b3          	or	a1,a1,a3
    4068:	01059693          	slli	a3,a1,0x10
    406c:	00d5e5b3          	or	a1,a1,a3
    4070:	f6dff06f          	j	3fdc <memset+0x18>
    4074:	00279693          	slli	a3,a5,0x2
    4078:	00000297          	auipc	t0,0x0
    407c:	005686b3          	add	a3,a3,t0
    4080:	00008293          	mv	t0,ra
    4084:	fa0680e7          	jalr	-96(a3)
    4088:	00028093          	mv	ra,t0
    408c:	ff078793          	addi	a5,a5,-16
    4090:	40f70733          	sub	a4,a4,a5
    4094:	00f60633          	add	a2,a2,a5
    4098:	f6c378e3          	bgeu	t1,a2,4008 <memset+0x44>
    409c:	f3dff06f          	j	3fd8 <memset+0x14>

000040a0 <__malloc_lock>:
    40a0:	00007517          	auipc	a0,0x7
    40a4:	a4850513          	addi	a0,a0,-1464 # aae8 <__lock___malloc_recursive_mutex>
    40a8:	dbcff06f          	j	3664 <__retarget_lock_acquire_recursive>

000040ac <__malloc_unlock>:
    40ac:	00007517          	auipc	a0,0x7
    40b0:	a3c50513          	addi	a0,a0,-1476 # aae8 <__lock___malloc_recursive_mutex>
    40b4:	dc8ff06f          	j	367c <__retarget_lock_release_recursive>

000040b8 <_puts_r>:
    40b8:	fd010113          	addi	sp,sp,-48
    40bc:	02812423          	sw	s0,40(sp)
    40c0:	00050413          	mv	s0,a0
    40c4:	00058513          	mv	a0,a1
    40c8:	02912223          	sw	s1,36(sp)
    40cc:	02112623          	sw	ra,44(sp)
    40d0:	00058493          	mv	s1,a1
    40d4:	490000ef          	jal	ra,4564 <strlen>
    40d8:	00150713          	addi	a4,a0,1
    40dc:	00003697          	auipc	a3,0x3
    40e0:	31c68693          	addi	a3,a3,796 # 73f8 <__fini_array_end+0x88>
    40e4:	00e12623          	sw	a4,12(sp)
    40e8:	03842783          	lw	a5,56(s0)
    40ec:	01010713          	addi	a4,sp,16
    40f0:	00d12c23          	sw	a3,24(sp)
    40f4:	00e12223          	sw	a4,4(sp)
    40f8:	00100693          	li	a3,1
    40fc:	00200713          	li	a4,2
    4100:	00912823          	sw	s1,16(sp)
    4104:	00a12a23          	sw	a0,20(sp)
    4108:	00d12e23          	sw	a3,28(sp)
    410c:	00e12423          	sw	a4,8(sp)
    4110:	00842483          	lw	s1,8(s0)
    4114:	08078a63          	beqz	a5,41a8 <_puts_r+0xf0>
    4118:	0644a703          	lw	a4,100(s1)
    411c:	00c49783          	lh	a5,12(s1)
    4120:	00177713          	andi	a4,a4,1
    4124:	00071663          	bnez	a4,4130 <_puts_r+0x78>
    4128:	2007f713          	andi	a4,a5,512
    412c:	0a070463          	beqz	a4,41d4 <_puts_r+0x11c>
    4130:	01279713          	slli	a4,a5,0x12
    4134:	02074263          	bltz	a4,4158 <_puts_r+0xa0>
    4138:	0644a703          	lw	a4,100(s1)
    413c:	000026b7          	lui	a3,0x2
    4140:	00d7e7b3          	or	a5,a5,a3
    4144:	ffffe6b7          	lui	a3,0xffffe
    4148:	fff68693          	addi	a3,a3,-1 # ffffdfff <__alt_data_end+0xfdffdfff>
    414c:	00d77733          	and	a4,a4,a3
    4150:	00f49623          	sh	a5,12(s1)
    4154:	06e4a223          	sw	a4,100(s1)
    4158:	00040513          	mv	a0,s0
    415c:	00410613          	addi	a2,sp,4
    4160:	00048593          	mv	a1,s1
    4164:	1b9000ef          	jal	ra,4b1c <__sfvwrite_r>
    4168:	0644a783          	lw	a5,100(s1)
    416c:	00153413          	seqz	s0,a0
    4170:	40800433          	neg	s0,s0
    4174:	00b47413          	andi	s0,s0,11
    4178:	0017f793          	andi	a5,a5,1
    417c:	fff40413          	addi	s0,s0,-1
    4180:	00079863          	bnez	a5,4190 <_puts_r+0xd8>
    4184:	00c4d783          	lhu	a5,12(s1)
    4188:	2007f793          	andi	a5,a5,512
    418c:	02078463          	beqz	a5,41b4 <_puts_r+0xfc>
    4190:	02c12083          	lw	ra,44(sp)
    4194:	00040513          	mv	a0,s0
    4198:	02812403          	lw	s0,40(sp)
    419c:	02412483          	lw	s1,36(sp)
    41a0:	03010113          	addi	sp,sp,48
    41a4:	00008067          	ret
    41a8:	00040513          	mv	a0,s0
    41ac:	b75fe0ef          	jal	ra,2d20 <__sinit>
    41b0:	f69ff06f          	j	4118 <_puts_r+0x60>
    41b4:	0584a503          	lw	a0,88(s1)
    41b8:	cc4ff0ef          	jal	ra,367c <__retarget_lock_release_recursive>
    41bc:	02c12083          	lw	ra,44(sp)
    41c0:	00040513          	mv	a0,s0
    41c4:	02812403          	lw	s0,40(sp)
    41c8:	02412483          	lw	s1,36(sp)
    41cc:	03010113          	addi	sp,sp,48
    41d0:	00008067          	ret
    41d4:	0584a503          	lw	a0,88(s1)
    41d8:	c8cff0ef          	jal	ra,3664 <__retarget_lock_acquire_recursive>
    41dc:	00c49783          	lh	a5,12(s1)
    41e0:	f51ff06f          	j	4130 <_puts_r+0x78>

000041e4 <puts>:
    41e4:	00050593          	mv	a1,a0
    41e8:	8241a503          	lw	a0,-2012(gp) # 8f54 <_impure_ptr>
    41ec:	ecdff06f          	j	40b8 <_puts_r>

000041f0 <cleanup_glue>:
    41f0:	fe010113          	addi	sp,sp,-32
    41f4:	01212823          	sw	s2,16(sp)
    41f8:	0005a903          	lw	s2,0(a1)
    41fc:	00812c23          	sw	s0,24(sp)
    4200:	00912a23          	sw	s1,20(sp)
    4204:	00112e23          	sw	ra,28(sp)
    4208:	01312623          	sw	s3,12(sp)
    420c:	01412423          	sw	s4,8(sp)
    4210:	00058413          	mv	s0,a1
    4214:	00050493          	mv	s1,a0
    4218:	04090263          	beqz	s2,425c <cleanup_glue+0x6c>
    421c:	00092983          	lw	s3,0(s2)
    4220:	02098863          	beqz	s3,4250 <cleanup_glue+0x60>
    4224:	0009aa03          	lw	s4,0(s3)
    4228:	000a0e63          	beqz	s4,4244 <cleanup_glue+0x54>
    422c:	000a2583          	lw	a1,0(s4)
    4230:	00058463          	beqz	a1,4238 <cleanup_glue+0x48>
    4234:	fbdff0ef          	jal	ra,41f0 <cleanup_glue>
    4238:	000a0593          	mv	a1,s4
    423c:	00048513          	mv	a0,s1
    4240:	fb1fe0ef          	jal	ra,31f0 <_free_r>
    4244:	00098593          	mv	a1,s3
    4248:	00048513          	mv	a0,s1
    424c:	fa5fe0ef          	jal	ra,31f0 <_free_r>
    4250:	00090593          	mv	a1,s2
    4254:	00048513          	mv	a0,s1
    4258:	f99fe0ef          	jal	ra,31f0 <_free_r>
    425c:	00040593          	mv	a1,s0
    4260:	01812403          	lw	s0,24(sp)
    4264:	01c12083          	lw	ra,28(sp)
    4268:	01012903          	lw	s2,16(sp)
    426c:	00c12983          	lw	s3,12(sp)
    4270:	00812a03          	lw	s4,8(sp)
    4274:	00048513          	mv	a0,s1
    4278:	01412483          	lw	s1,20(sp)
    427c:	02010113          	addi	sp,sp,32
    4280:	f71fe06f          	j	31f0 <_free_r>

00004284 <_reclaim_reent>:
    4284:	8241a783          	lw	a5,-2012(gp) # 8f54 <_impure_ptr>
    4288:	10a78a63          	beq	a5,a0,439c <_reclaim_reent+0x118>
    428c:	04c52583          	lw	a1,76(a0)
    4290:	fe010113          	addi	sp,sp,-32
    4294:	00912a23          	sw	s1,20(sp)
    4298:	00112e23          	sw	ra,28(sp)
    429c:	00812c23          	sw	s0,24(sp)
    42a0:	01212823          	sw	s2,16(sp)
    42a4:	01312623          	sw	s3,12(sp)
    42a8:	00050493          	mv	s1,a0
    42ac:	04058063          	beqz	a1,42ec <_reclaim_reent+0x68>
    42b0:	00000913          	li	s2,0
    42b4:	08000993          	li	s3,128
    42b8:	012587b3          	add	a5,a1,s2
    42bc:	0007a403          	lw	s0,0(a5)
    42c0:	00040e63          	beqz	s0,42dc <_reclaim_reent+0x58>
    42c4:	00040593          	mv	a1,s0
    42c8:	00042403          	lw	s0,0(s0)
    42cc:	00048513          	mv	a0,s1
    42d0:	f21fe0ef          	jal	ra,31f0 <_free_r>
    42d4:	fe0418e3          	bnez	s0,42c4 <_reclaim_reent+0x40>
    42d8:	04c4a583          	lw	a1,76(s1)
    42dc:	00490913          	addi	s2,s2,4
    42e0:	fd391ce3          	bne	s2,s3,42b8 <_reclaim_reent+0x34>
    42e4:	00048513          	mv	a0,s1
    42e8:	f09fe0ef          	jal	ra,31f0 <_free_r>
    42ec:	0404a583          	lw	a1,64(s1)
    42f0:	00058663          	beqz	a1,42fc <_reclaim_reent+0x78>
    42f4:	00048513          	mv	a0,s1
    42f8:	ef9fe0ef          	jal	ra,31f0 <_free_r>
    42fc:	1484a403          	lw	s0,328(s1)
    4300:	02040063          	beqz	s0,4320 <_reclaim_reent+0x9c>
    4304:	14c48913          	addi	s2,s1,332
    4308:	01240c63          	beq	s0,s2,4320 <_reclaim_reent+0x9c>
    430c:	00040593          	mv	a1,s0
    4310:	00042403          	lw	s0,0(s0)
    4314:	00048513          	mv	a0,s1
    4318:	ed9fe0ef          	jal	ra,31f0 <_free_r>
    431c:	fe8918e3          	bne	s2,s0,430c <_reclaim_reent+0x88>
    4320:	0544a583          	lw	a1,84(s1)
    4324:	00058663          	beqz	a1,4330 <_reclaim_reent+0xac>
    4328:	00048513          	mv	a0,s1
    432c:	ec5fe0ef          	jal	ra,31f0 <_free_r>
    4330:	0384a783          	lw	a5,56(s1)
    4334:	04078663          	beqz	a5,4380 <_reclaim_reent+0xfc>
    4338:	03c4a783          	lw	a5,60(s1)
    433c:	00048513          	mv	a0,s1
    4340:	000780e7          	jalr	a5
    4344:	2e04a403          	lw	s0,736(s1)
    4348:	02040c63          	beqz	s0,4380 <_reclaim_reent+0xfc>
    434c:	00042583          	lw	a1,0(s0)
    4350:	00058663          	beqz	a1,435c <_reclaim_reent+0xd8>
    4354:	00048513          	mv	a0,s1
    4358:	e99ff0ef          	jal	ra,41f0 <cleanup_glue>
    435c:	00040593          	mv	a1,s0
    4360:	01812403          	lw	s0,24(sp)
    4364:	01c12083          	lw	ra,28(sp)
    4368:	01012903          	lw	s2,16(sp)
    436c:	00c12983          	lw	s3,12(sp)
    4370:	00048513          	mv	a0,s1
    4374:	01412483          	lw	s1,20(sp)
    4378:	02010113          	addi	sp,sp,32
    437c:	e75fe06f          	j	31f0 <_free_r>
    4380:	01c12083          	lw	ra,28(sp)
    4384:	01812403          	lw	s0,24(sp)
    4388:	01412483          	lw	s1,20(sp)
    438c:	01012903          	lw	s2,16(sp)
    4390:	00c12983          	lw	s3,12(sp)
    4394:	02010113          	addi	sp,sp,32
    4398:	00008067          	ret
    439c:	00008067          	ret

000043a0 <_sbrk_r>:
    43a0:	ff010113          	addi	sp,sp,-16
    43a4:	00812423          	sw	s0,8(sp)
    43a8:	00050413          	mv	s0,a0
    43ac:	00058513          	mv	a0,a1
    43b0:	00006797          	auipc	a5,0x6
    43b4:	7407ac23          	sw	zero,1880(a5) # ab08 <errno>
    43b8:	00112623          	sw	ra,12(sp)
    43bc:	27c020ef          	jal	ra,6638 <_sbrk>
    43c0:	fff00793          	li	a5,-1
    43c4:	00f50a63          	beq	a0,a5,43d8 <_sbrk_r+0x38>
    43c8:	00c12083          	lw	ra,12(sp)
    43cc:	00812403          	lw	s0,8(sp)
    43d0:	01010113          	addi	sp,sp,16
    43d4:	00008067          	ret
    43d8:	00006797          	auipc	a5,0x6
    43dc:	7307a783          	lw	a5,1840(a5) # ab08 <errno>
    43e0:	fe0784e3          	beqz	a5,43c8 <_sbrk_r+0x28>
    43e4:	00c12083          	lw	ra,12(sp)
    43e8:	00f42023          	sw	a5,0(s0)
    43ec:	00812403          	lw	s0,8(sp)
    43f0:	01010113          	addi	sp,sp,16
    43f4:	00008067          	ret

000043f8 <__sread>:
    43f8:	ff010113          	addi	sp,sp,-16
    43fc:	00812423          	sw	s0,8(sp)
    4400:	00058413          	mv	s0,a1
    4404:	00e59583          	lh	a1,14(a1)
    4408:	00112623          	sw	ra,12(sp)
    440c:	659000ef          	jal	ra,5264 <_read_r>
    4410:	02054063          	bltz	a0,4430 <__sread+0x38>
    4414:	05042783          	lw	a5,80(s0)
    4418:	00c12083          	lw	ra,12(sp)
    441c:	00a787b3          	add	a5,a5,a0
    4420:	04f42823          	sw	a5,80(s0)
    4424:	00812403          	lw	s0,8(sp)
    4428:	01010113          	addi	sp,sp,16
    442c:	00008067          	ret
    4430:	00c45783          	lhu	a5,12(s0)
    4434:	fffff737          	lui	a4,0xfffff
    4438:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfdffefff>
    443c:	00e7f7b3          	and	a5,a5,a4
    4440:	00c12083          	lw	ra,12(sp)
    4444:	00f41623          	sh	a5,12(s0)
    4448:	00812403          	lw	s0,8(sp)
    444c:	01010113          	addi	sp,sp,16
    4450:	00008067          	ret

00004454 <__seofread>:
    4454:	00000513          	li	a0,0
    4458:	00008067          	ret

0000445c <__swrite>:
    445c:	00c59783          	lh	a5,12(a1)
    4460:	fe010113          	addi	sp,sp,-32
    4464:	00812c23          	sw	s0,24(sp)
    4468:	00912a23          	sw	s1,20(sp)
    446c:	01212823          	sw	s2,16(sp)
    4470:	01312623          	sw	s3,12(sp)
    4474:	00112e23          	sw	ra,28(sp)
    4478:	1007f713          	andi	a4,a5,256
    447c:	00058413          	mv	s0,a1
    4480:	00050493          	mv	s1,a0
    4484:	00060913          	mv	s2,a2
    4488:	00068993          	mv	s3,a3
    448c:	04071063          	bnez	a4,44cc <__swrite+0x70>
    4490:	fffff737          	lui	a4,0xfffff
    4494:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfdffefff>
    4498:	00e7f7b3          	and	a5,a5,a4
    449c:	00e41583          	lh	a1,14(s0)
    44a0:	00f41623          	sh	a5,12(s0)
    44a4:	01812403          	lw	s0,24(sp)
    44a8:	01c12083          	lw	ra,28(sp)
    44ac:	00098693          	mv	a3,s3
    44b0:	00090613          	mv	a2,s2
    44b4:	00c12983          	lw	s3,12(sp)
    44b8:	01012903          	lw	s2,16(sp)
    44bc:	00048513          	mv	a0,s1
    44c0:	01412483          	lw	s1,20(sp)
    44c4:	02010113          	addi	sp,sp,32
    44c8:	17c0006f          	j	4644 <_write_r>
    44cc:	00e59583          	lh	a1,14(a1)
    44d0:	00200693          	li	a3,2
    44d4:	00000613          	li	a2,0
    44d8:	2e5000ef          	jal	ra,4fbc <_lseek_r>
    44dc:	00c41783          	lh	a5,12(s0)
    44e0:	fb1ff06f          	j	4490 <__swrite+0x34>

000044e4 <__sseek>:
    44e4:	ff010113          	addi	sp,sp,-16
    44e8:	00812423          	sw	s0,8(sp)
    44ec:	00058413          	mv	s0,a1
    44f0:	00e59583          	lh	a1,14(a1)
    44f4:	00112623          	sw	ra,12(sp)
    44f8:	2c5000ef          	jal	ra,4fbc <_lseek_r>
    44fc:	fff00793          	li	a5,-1
    4500:	02f50863          	beq	a0,a5,4530 <__sseek+0x4c>
    4504:	00c45783          	lhu	a5,12(s0)
    4508:	00001737          	lui	a4,0x1
    450c:	00c12083          	lw	ra,12(sp)
    4510:	00e7e7b3          	or	a5,a5,a4
    4514:	01079793          	slli	a5,a5,0x10
    4518:	4107d793          	srai	a5,a5,0x10
    451c:	04a42823          	sw	a0,80(s0)
    4520:	00f41623          	sh	a5,12(s0)
    4524:	00812403          	lw	s0,8(sp)
    4528:	01010113          	addi	sp,sp,16
    452c:	00008067          	ret
    4530:	00c45783          	lhu	a5,12(s0)
    4534:	fffff737          	lui	a4,0xfffff
    4538:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfdffefff>
    453c:	00e7f7b3          	and	a5,a5,a4
    4540:	01079793          	slli	a5,a5,0x10
    4544:	4107d793          	srai	a5,a5,0x10
    4548:	00c12083          	lw	ra,12(sp)
    454c:	00f41623          	sh	a5,12(s0)
    4550:	00812403          	lw	s0,8(sp)
    4554:	01010113          	addi	sp,sp,16
    4558:	00008067          	ret

0000455c <__sclose>:
    455c:	00e59583          	lh	a1,14(a1)
    4560:	3840006f          	j	48e4 <_close_r>

00004564 <strlen>:
    4564:	00357793          	andi	a5,a0,3
    4568:	00050713          	mv	a4,a0
    456c:	04079c63          	bnez	a5,45c4 <strlen+0x60>
    4570:	7f7f86b7          	lui	a3,0x7f7f8
    4574:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__alt_data_end+0x7d7f7f7f>
    4578:	fff00593          	li	a1,-1
    457c:	00072603          	lw	a2,0(a4)
    4580:	00470713          	addi	a4,a4,4
    4584:	00d677b3          	and	a5,a2,a3
    4588:	00d787b3          	add	a5,a5,a3
    458c:	00c7e7b3          	or	a5,a5,a2
    4590:	00d7e7b3          	or	a5,a5,a3
    4594:	feb784e3          	beq	a5,a1,457c <strlen+0x18>
    4598:	ffc74683          	lbu	a3,-4(a4)
    459c:	40a707b3          	sub	a5,a4,a0
    45a0:	04068463          	beqz	a3,45e8 <strlen+0x84>
    45a4:	ffd74683          	lbu	a3,-3(a4)
    45a8:	02068c63          	beqz	a3,45e0 <strlen+0x7c>
    45ac:	ffe74503          	lbu	a0,-2(a4)
    45b0:	00a03533          	snez	a0,a0
    45b4:	00f50533          	add	a0,a0,a5
    45b8:	ffe50513          	addi	a0,a0,-2
    45bc:	00008067          	ret
    45c0:	fa0688e3          	beqz	a3,4570 <strlen+0xc>
    45c4:	00074783          	lbu	a5,0(a4)
    45c8:	00170713          	addi	a4,a4,1
    45cc:	00377693          	andi	a3,a4,3
    45d0:	fe0798e3          	bnez	a5,45c0 <strlen+0x5c>
    45d4:	40a70733          	sub	a4,a4,a0
    45d8:	fff70513          	addi	a0,a4,-1
    45dc:	00008067          	ret
    45e0:	ffd78513          	addi	a0,a5,-3
    45e4:	00008067          	ret
    45e8:	ffc78513          	addi	a0,a5,-4
    45ec:	00008067          	ret

000045f0 <close>:
    45f0:	00050593          	mv	a1,a0
    45f4:	8241a503          	lw	a0,-2012(gp) # 8f54 <_impure_ptr>
    45f8:	2ec0006f          	j	48e4 <_close_r>

000045fc <open>:
    45fc:	fc010113          	addi	sp,sp,-64
    4600:	02c12423          	sw	a2,40(sp)
    4604:	02d12623          	sw	a3,44(sp)
    4608:	02f12a23          	sw	a5,52(sp)
    460c:	00060693          	mv	a3,a2
    4610:	02810793          	addi	a5,sp,40
    4614:	00058613          	mv	a2,a1
    4618:	00050593          	mv	a1,a0
    461c:	8241a503          	lw	a0,-2012(gp) # 8f54 <_impure_ptr>
    4620:	00112e23          	sw	ra,28(sp)
    4624:	02e12823          	sw	a4,48(sp)
    4628:	03012c23          	sw	a6,56(sp)
    462c:	03112e23          	sw	a7,60(sp)
    4630:	00f12623          	sw	a5,12(sp)
    4634:	3cd000ef          	jal	ra,5200 <_open_r>
    4638:	01c12083          	lw	ra,28(sp)
    463c:	04010113          	addi	sp,sp,64
    4640:	00008067          	ret

00004644 <_write_r>:
    4644:	ff010113          	addi	sp,sp,-16
    4648:	00058713          	mv	a4,a1
    464c:	00812423          	sw	s0,8(sp)
    4650:	00060593          	mv	a1,a2
    4654:	00050413          	mv	s0,a0
    4658:	00068613          	mv	a2,a3
    465c:	00070513          	mv	a0,a4
    4660:	00006797          	auipc	a5,0x6
    4664:	4a07a423          	sw	zero,1192(a5) # ab08 <errno>
    4668:	00112623          	sw	ra,12(sp)
    466c:	110020ef          	jal	ra,677c <_write>
    4670:	fff00793          	li	a5,-1
    4674:	00f50a63          	beq	a0,a5,4688 <_write_r+0x44>
    4678:	00c12083          	lw	ra,12(sp)
    467c:	00812403          	lw	s0,8(sp)
    4680:	01010113          	addi	sp,sp,16
    4684:	00008067          	ret
    4688:	00006797          	auipc	a5,0x6
    468c:	4807a783          	lw	a5,1152(a5) # ab08 <errno>
    4690:	fe0784e3          	beqz	a5,4678 <_write_r+0x34>
    4694:	00c12083          	lw	ra,12(sp)
    4698:	00f42023          	sw	a5,0(s0)
    469c:	00812403          	lw	s0,8(sp)
    46a0:	01010113          	addi	sp,sp,16
    46a4:	00008067          	ret

000046a8 <__register_exitproc>:
    46a8:	fe010113          	addi	sp,sp,-32
    46ac:	01212823          	sw	s2,16(sp)
    46b0:	83018913          	addi	s2,gp,-2000 # 8f60 <__atexit_recursive_mutex>
    46b4:	00812c23          	sw	s0,24(sp)
    46b8:	00050413          	mv	s0,a0
    46bc:	00092503          	lw	a0,0(s2)
    46c0:	00912a23          	sw	s1,20(sp)
    46c4:	01312623          	sw	s3,12(sp)
    46c8:	01412423          	sw	s4,8(sp)
    46cc:	00112e23          	sw	ra,28(sp)
    46d0:	00058493          	mv	s1,a1
    46d4:	00060a13          	mv	s4,a2
    46d8:	00068993          	mv	s3,a3
    46dc:	f89fe0ef          	jal	ra,3664 <__retarget_lock_acquire_recursive>
    46e0:	00003717          	auipc	a4,0x3
    46e4:	d4c72703          	lw	a4,-692(a4) # 742c <_global_impure_ptr>
    46e8:	14872783          	lw	a5,328(a4)
    46ec:	08078663          	beqz	a5,4778 <__register_exitproc+0xd0>
    46f0:	0047a703          	lw	a4,4(a5)
    46f4:	01f00593          	li	a1,31
    46f8:	00092503          	lw	a0,0(s2)
    46fc:	08e5c463          	blt	a1,a4,4784 <__register_exitproc+0xdc>
    4700:	00271593          	slli	a1,a4,0x2
    4704:	02041e63          	bnez	s0,4740 <__register_exitproc+0x98>
    4708:	00170713          	addi	a4,a4,1
    470c:	00e7a223          	sw	a4,4(a5)
    4710:	00b787b3          	add	a5,a5,a1
    4714:	0097a423          	sw	s1,8(a5)
    4718:	f65fe0ef          	jal	ra,367c <__retarget_lock_release_recursive>
    471c:	00000513          	li	a0,0
    4720:	01c12083          	lw	ra,28(sp)
    4724:	01812403          	lw	s0,24(sp)
    4728:	01412483          	lw	s1,20(sp)
    472c:	01012903          	lw	s2,16(sp)
    4730:	00c12983          	lw	s3,12(sp)
    4734:	00812a03          	lw	s4,8(sp)
    4738:	02010113          	addi	sp,sp,32
    473c:	00008067          	ret
    4740:	00b78833          	add	a6,a5,a1
    4744:	09482423          	sw	s4,136(a6)
    4748:	1887a683          	lw	a3,392(a5)
    474c:	00100613          	li	a2,1
    4750:	00e61633          	sll	a2,a2,a4
    4754:	00c6e6b3          	or	a3,a3,a2
    4758:	18d7a423          	sw	a3,392(a5)
    475c:	11382423          	sw	s3,264(a6)
    4760:	00200693          	li	a3,2
    4764:	fad412e3          	bne	s0,a3,4708 <__register_exitproc+0x60>
    4768:	18c7a683          	lw	a3,396(a5)
    476c:	00c6e6b3          	or	a3,a3,a2
    4770:	18d7a623          	sw	a3,396(a5)
    4774:	f95ff06f          	j	4708 <__register_exitproc+0x60>
    4778:	14c70793          	addi	a5,a4,332
    477c:	14f72423          	sw	a5,328(a4)
    4780:	f71ff06f          	j	46f0 <__register_exitproc+0x48>
    4784:	ef9fe0ef          	jal	ra,367c <__retarget_lock_release_recursive>
    4788:	fff00513          	li	a0,-1
    478c:	f95ff06f          	j	4720 <__register_exitproc+0x78>

00004790 <__call_exitprocs>:
    4790:	fd010113          	addi	sp,sp,-48
    4794:	01712623          	sw	s7,12(sp)
    4798:	83018b93          	addi	s7,gp,-2000 # 8f60 <__atexit_recursive_mutex>
    479c:	01612823          	sw	s6,16(sp)
    47a0:	00050b13          	mv	s6,a0
    47a4:	000ba503          	lw	a0,0(s7)
    47a8:	03212023          	sw	s2,32(sp)
    47ac:	01312e23          	sw	s3,28(sp)
    47b0:	01412c23          	sw	s4,24(sp)
    47b4:	01512a23          	sw	s5,20(sp)
    47b8:	01812423          	sw	s8,8(sp)
    47bc:	02112623          	sw	ra,44(sp)
    47c0:	02812423          	sw	s0,40(sp)
    47c4:	02912223          	sw	s1,36(sp)
    47c8:	01912223          	sw	s9,4(sp)
    47cc:	00058c13          	mv	s8,a1
    47d0:	e95fe0ef          	jal	ra,3664 <__retarget_lock_acquire_recursive>
    47d4:	00003a17          	auipc	s4,0x3
    47d8:	c58a2a03          	lw	s4,-936(s4) # 742c <_global_impure_ptr>
    47dc:	148a2903          	lw	s2,328(s4)
    47e0:	00100a93          	li	s5,1
    47e4:	fff00993          	li	s3,-1
    47e8:	02090863          	beqz	s2,4818 <__call_exitprocs+0x88>
    47ec:	00492483          	lw	s1,4(s2)
    47f0:	fff48413          	addi	s0,s1,-1
    47f4:	02044263          	bltz	s0,4818 <__call_exitprocs+0x88>
    47f8:	00249493          	slli	s1,s1,0x2
    47fc:	009904b3          	add	s1,s2,s1
    4800:	040c0863          	beqz	s8,4850 <__call_exitprocs+0xc0>
    4804:	1044a783          	lw	a5,260(s1)
    4808:	05878463          	beq	a5,s8,4850 <__call_exitprocs+0xc0>
    480c:	fff40413          	addi	s0,s0,-1
    4810:	ffc48493          	addi	s1,s1,-4
    4814:	ff3416e3          	bne	s0,s3,4800 <__call_exitprocs+0x70>
    4818:	02812403          	lw	s0,40(sp)
    481c:	000ba503          	lw	a0,0(s7)
    4820:	02c12083          	lw	ra,44(sp)
    4824:	02412483          	lw	s1,36(sp)
    4828:	02012903          	lw	s2,32(sp)
    482c:	01c12983          	lw	s3,28(sp)
    4830:	01812a03          	lw	s4,24(sp)
    4834:	01412a83          	lw	s5,20(sp)
    4838:	01012b03          	lw	s6,16(sp)
    483c:	00c12b83          	lw	s7,12(sp)
    4840:	00812c03          	lw	s8,8(sp)
    4844:	00412c83          	lw	s9,4(sp)
    4848:	03010113          	addi	sp,sp,48
    484c:	e31fe06f          	j	367c <__retarget_lock_release_recursive>
    4850:	00492783          	lw	a5,4(s2)
    4854:	0044a683          	lw	a3,4(s1)
    4858:	fff78793          	addi	a5,a5,-1
    485c:	04878e63          	beq	a5,s0,48b8 <__call_exitprocs+0x128>
    4860:	0004a223          	sw	zero,4(s1)
    4864:	fa0684e3          	beqz	a3,480c <__call_exitprocs+0x7c>
    4868:	18892783          	lw	a5,392(s2)
    486c:	008a9733          	sll	a4,s5,s0
    4870:	00492c83          	lw	s9,4(s2)
    4874:	00f777b3          	and	a5,a4,a5
    4878:	02079263          	bnez	a5,489c <__call_exitprocs+0x10c>
    487c:	000680e7          	jalr	a3
    4880:	00492703          	lw	a4,4(s2)
    4884:	148a2783          	lw	a5,328(s4)
    4888:	01971463          	bne	a4,s9,4890 <__call_exitprocs+0x100>
    488c:	f92780e3          	beq	a5,s2,480c <__call_exitprocs+0x7c>
    4890:	f80784e3          	beqz	a5,4818 <__call_exitprocs+0x88>
    4894:	00078913          	mv	s2,a5
    4898:	f55ff06f          	j	47ec <__call_exitprocs+0x5c>
    489c:	18c92783          	lw	a5,396(s2)
    48a0:	0844a583          	lw	a1,132(s1)
    48a4:	00f77733          	and	a4,a4,a5
    48a8:	00071c63          	bnez	a4,48c0 <__call_exitprocs+0x130>
    48ac:	000b0513          	mv	a0,s6
    48b0:	000680e7          	jalr	a3
    48b4:	fcdff06f          	j	4880 <__call_exitprocs+0xf0>
    48b8:	00892223          	sw	s0,4(s2)
    48bc:	fa9ff06f          	j	4864 <__call_exitprocs+0xd4>
    48c0:	00058513          	mv	a0,a1
    48c4:	000680e7          	jalr	a3
    48c8:	fb9ff06f          	j	4880 <__call_exitprocs+0xf0>

000048cc <register_fini>:
    48cc:	00000793          	li	a5,0
    48d0:	00078863          	beqz	a5,48e0 <register_fini+0x14>
    48d4:	00000517          	auipc	a0,0x0
    48d8:	1ec50513          	addi	a0,a0,492 # 4ac0 <__libc_fini_array>
    48dc:	ef1fd06f          	j	27cc <atexit>
    48e0:	00008067          	ret

000048e4 <_close_r>:
    48e4:	ff010113          	addi	sp,sp,-16
    48e8:	00812423          	sw	s0,8(sp)
    48ec:	00050413          	mv	s0,a0
    48f0:	00058513          	mv	a0,a1
    48f4:	00006797          	auipc	a5,0x6
    48f8:	2007aa23          	sw	zero,532(a5) # ab08 <errno>
    48fc:	00112623          	sw	ra,12(sp)
    4900:	4a4010ef          	jal	ra,5da4 <_close>
    4904:	fff00793          	li	a5,-1
    4908:	00f50a63          	beq	a0,a5,491c <_close_r+0x38>
    490c:	00c12083          	lw	ra,12(sp)
    4910:	00812403          	lw	s0,8(sp)
    4914:	01010113          	addi	sp,sp,16
    4918:	00008067          	ret
    491c:	00006797          	auipc	a5,0x6
    4920:	1ec7a783          	lw	a5,492(a5) # ab08 <errno>
    4924:	fe0784e3          	beqz	a5,490c <_close_r+0x28>
    4928:	00c12083          	lw	ra,12(sp)
    492c:	00f42023          	sw	a5,0(s0)
    4930:	00812403          	lw	s0,8(sp)
    4934:	01010113          	addi	sp,sp,16
    4938:	00008067          	ret

0000493c <_fclose_r>:
    493c:	ff010113          	addi	sp,sp,-16
    4940:	00112623          	sw	ra,12(sp)
    4944:	00812423          	sw	s0,8(sp)
    4948:	00912223          	sw	s1,4(sp)
    494c:	01212023          	sw	s2,0(sp)
    4950:	0c058a63          	beqz	a1,4a24 <_fclose_r+0xe8>
    4954:	00058413          	mv	s0,a1
    4958:	00050493          	mv	s1,a0
    495c:	00050663          	beqz	a0,4968 <_fclose_r+0x2c>
    4960:	03852783          	lw	a5,56(a0)
    4964:	0e078063          	beqz	a5,4a44 <_fclose_r+0x108>
    4968:	06442783          	lw	a5,100(s0)
    496c:	00c41703          	lh	a4,12(s0)
    4970:	0017f793          	andi	a5,a5,1
    4974:	0a079663          	bnez	a5,4a20 <_fclose_r+0xe4>
    4978:	20077713          	andi	a4,a4,512
    497c:	10070063          	beqz	a4,4a7c <_fclose_r+0x140>
    4980:	00040593          	mv	a1,s0
    4984:	00048513          	mv	a0,s1
    4988:	e8dfd0ef          	jal	ra,2814 <__sflush_r>
    498c:	02c42783          	lw	a5,44(s0)
    4990:	00050913          	mv	s2,a0
    4994:	00078a63          	beqz	a5,49a8 <_fclose_r+0x6c>
    4998:	01c42583          	lw	a1,28(s0)
    499c:	00048513          	mv	a0,s1
    49a0:	000780e7          	jalr	a5
    49a4:	0a054c63          	bltz	a0,4a5c <_fclose_r+0x120>
    49a8:	00c45783          	lhu	a5,12(s0)
    49ac:	0807f793          	andi	a5,a5,128
    49b0:	0a079e63          	bnez	a5,4a6c <_fclose_r+0x130>
    49b4:	03042583          	lw	a1,48(s0)
    49b8:	00058c63          	beqz	a1,49d0 <_fclose_r+0x94>
    49bc:	04040793          	addi	a5,s0,64
    49c0:	00f58663          	beq	a1,a5,49cc <_fclose_r+0x90>
    49c4:	00048513          	mv	a0,s1
    49c8:	829fe0ef          	jal	ra,31f0 <_free_r>
    49cc:	02042823          	sw	zero,48(s0)
    49d0:	04442583          	lw	a1,68(s0)
    49d4:	00058863          	beqz	a1,49e4 <_fclose_r+0xa8>
    49d8:	00048513          	mv	a0,s1
    49dc:	815fe0ef          	jal	ra,31f0 <_free_r>
    49e0:	04042223          	sw	zero,68(s0)
    49e4:	e48fe0ef          	jal	ra,302c <__sfp_lock_acquire>
    49e8:	06442783          	lw	a5,100(s0)
    49ec:	00041623          	sh	zero,12(s0)
    49f0:	0017f793          	andi	a5,a5,1
    49f4:	0a078a63          	beqz	a5,4aa8 <_fclose_r+0x16c>
    49f8:	05842503          	lw	a0,88(s0)
    49fc:	c61fe0ef          	jal	ra,365c <__retarget_lock_close_recursive>
    4a00:	e38fe0ef          	jal	ra,3038 <__sfp_lock_release>
    4a04:	00c12083          	lw	ra,12(sp)
    4a08:	00812403          	lw	s0,8(sp)
    4a0c:	00412483          	lw	s1,4(sp)
    4a10:	00090513          	mv	a0,s2
    4a14:	00012903          	lw	s2,0(sp)
    4a18:	01010113          	addi	sp,sp,16
    4a1c:	00008067          	ret
    4a20:	f60710e3          	bnez	a4,4980 <_fclose_r+0x44>
    4a24:	00000913          	li	s2,0
    4a28:	00c12083          	lw	ra,12(sp)
    4a2c:	00812403          	lw	s0,8(sp)
    4a30:	00412483          	lw	s1,4(sp)
    4a34:	00090513          	mv	a0,s2
    4a38:	00012903          	lw	s2,0(sp)
    4a3c:	01010113          	addi	sp,sp,16
    4a40:	00008067          	ret
    4a44:	adcfe0ef          	jal	ra,2d20 <__sinit>
    4a48:	06442783          	lw	a5,100(s0)
    4a4c:	00c41703          	lh	a4,12(s0)
    4a50:	0017f793          	andi	a5,a5,1
    4a54:	fc0796e3          	bnez	a5,4a20 <_fclose_r+0xe4>
    4a58:	f21ff06f          	j	4978 <_fclose_r+0x3c>
    4a5c:	00c45783          	lhu	a5,12(s0)
    4a60:	fff00913          	li	s2,-1
    4a64:	0807f793          	andi	a5,a5,128
    4a68:	f40786e3          	beqz	a5,49b4 <_fclose_r+0x78>
    4a6c:	01042583          	lw	a1,16(s0)
    4a70:	00048513          	mv	a0,s1
    4a74:	f7cfe0ef          	jal	ra,31f0 <_free_r>
    4a78:	f3dff06f          	j	49b4 <_fclose_r+0x78>
    4a7c:	05842503          	lw	a0,88(s0)
    4a80:	be5fe0ef          	jal	ra,3664 <__retarget_lock_acquire_recursive>
    4a84:	00c41783          	lh	a5,12(s0)
    4a88:	ee079ce3          	bnez	a5,4980 <_fclose_r+0x44>
    4a8c:	06442783          	lw	a5,100(s0)
    4a90:	0017f793          	andi	a5,a5,1
    4a94:	f80798e3          	bnez	a5,4a24 <_fclose_r+0xe8>
    4a98:	05842503          	lw	a0,88(s0)
    4a9c:	00000913          	li	s2,0
    4aa0:	bddfe0ef          	jal	ra,367c <__retarget_lock_release_recursive>
    4aa4:	f85ff06f          	j	4a28 <_fclose_r+0xec>
    4aa8:	05842503          	lw	a0,88(s0)
    4aac:	bd1fe0ef          	jal	ra,367c <__retarget_lock_release_recursive>
    4ab0:	f49ff06f          	j	49f8 <_fclose_r+0xbc>

00004ab4 <fclose>:
    4ab4:	00050593          	mv	a1,a0
    4ab8:	8241a503          	lw	a0,-2012(gp) # 8f54 <_impure_ptr>
    4abc:	e81ff06f          	j	493c <_fclose_r>

00004ac0 <__libc_fini_array>:
    4ac0:	ff010113          	addi	sp,sp,-16
    4ac4:	00812423          	sw	s0,8(sp)
    4ac8:	00003797          	auipc	a5,0x3
    4acc:	8a878793          	addi	a5,a5,-1880 # 7370 <__fini_array_end>
    4ad0:	00003417          	auipc	s0,0x3
    4ad4:	8a040413          	addi	s0,s0,-1888 # 7370 <__fini_array_end>
    4ad8:	40f40433          	sub	s0,s0,a5
    4adc:	00912223          	sw	s1,4(sp)
    4ae0:	00112623          	sw	ra,12(sp)
    4ae4:	40245493          	srai	s1,s0,0x2
    4ae8:	02048063          	beqz	s1,4b08 <__libc_fini_array+0x48>
    4aec:	ffc40413          	addi	s0,s0,-4
    4af0:	00f40433          	add	s0,s0,a5
    4af4:	00042783          	lw	a5,0(s0)
    4af8:	fff48493          	addi	s1,s1,-1
    4afc:	ffc40413          	addi	s0,s0,-4
    4b00:	000780e7          	jalr	a5
    4b04:	fe0498e3          	bnez	s1,4af4 <__libc_fini_array+0x34>
    4b08:	00c12083          	lw	ra,12(sp)
    4b0c:	00812403          	lw	s0,8(sp)
    4b10:	00412483          	lw	s1,4(sp)
    4b14:	01010113          	addi	sp,sp,16
    4b18:	00008067          	ret

00004b1c <__sfvwrite_r>:
    4b1c:	00862783          	lw	a5,8(a2)
    4b20:	30078a63          	beqz	a5,4e34 <__sfvwrite_r+0x318>
    4b24:	00c59683          	lh	a3,12(a1)
    4b28:	fd010113          	addi	sp,sp,-48
    4b2c:	02812423          	sw	s0,40(sp)
    4b30:	01412c23          	sw	s4,24(sp)
    4b34:	01612823          	sw	s6,16(sp)
    4b38:	02112623          	sw	ra,44(sp)
    4b3c:	02912223          	sw	s1,36(sp)
    4b40:	03212023          	sw	s2,32(sp)
    4b44:	01312e23          	sw	s3,28(sp)
    4b48:	01512a23          	sw	s5,20(sp)
    4b4c:	01712623          	sw	s7,12(sp)
    4b50:	01812423          	sw	s8,8(sp)
    4b54:	01912223          	sw	s9,4(sp)
    4b58:	0086f793          	andi	a5,a3,8
    4b5c:	00060b13          	mv	s6,a2
    4b60:	00050a13          	mv	s4,a0
    4b64:	00058413          	mv	s0,a1
    4b68:	08078663          	beqz	a5,4bf4 <__sfvwrite_r+0xd8>
    4b6c:	0105a783          	lw	a5,16(a1)
    4b70:	08078263          	beqz	a5,4bf4 <__sfvwrite_r+0xd8>
    4b74:	0026f793          	andi	a5,a3,2
    4b78:	000b2483          	lw	s1,0(s6)
    4b7c:	08078c63          	beqz	a5,4c14 <__sfvwrite_r+0xf8>
    4b80:	02442783          	lw	a5,36(s0)
    4b84:	01c42583          	lw	a1,28(s0)
    4b88:	80000ab7          	lui	s5,0x80000
    4b8c:	00000993          	li	s3,0
    4b90:	00000913          	li	s2,0
    4b94:	c00aca93          	xori	s5,s5,-1024
    4b98:	00098613          	mv	a2,s3
    4b9c:	000a0513          	mv	a0,s4
    4ba0:	04090263          	beqz	s2,4be4 <__sfvwrite_r+0xc8>
    4ba4:	00090693          	mv	a3,s2
    4ba8:	012af463          	bgeu	s5,s2,4bb0 <__sfvwrite_r+0x94>
    4bac:	000a8693          	mv	a3,s5
    4bb0:	000780e7          	jalr	a5
    4bb4:	26a05663          	blez	a0,4e20 <__sfvwrite_r+0x304>
    4bb8:	008b2783          	lw	a5,8(s6)
    4bbc:	00a989b3          	add	s3,s3,a0
    4bc0:	40a90933          	sub	s2,s2,a0
    4bc4:	40a787b3          	sub	a5,a5,a0
    4bc8:	00fb2423          	sw	a5,8(s6)
    4bcc:	20078663          	beqz	a5,4dd8 <__sfvwrite_r+0x2bc>
    4bd0:	02442783          	lw	a5,36(s0)
    4bd4:	01c42583          	lw	a1,28(s0)
    4bd8:	00098613          	mv	a2,s3
    4bdc:	000a0513          	mv	a0,s4
    4be0:	fc0912e3          	bnez	s2,4ba4 <__sfvwrite_r+0x88>
    4be4:	0004a983          	lw	s3,0(s1)
    4be8:	0044a903          	lw	s2,4(s1)
    4bec:	00848493          	addi	s1,s1,8
    4bf0:	fa9ff06f          	j	4b98 <__sfvwrite_r+0x7c>
    4bf4:	00040593          	mv	a1,s0
    4bf8:	000a0513          	mv	a0,s4
    4bfc:	425000ef          	jal	ra,5820 <__swsetup_r>
    4c00:	22051663          	bnez	a0,4e2c <__sfvwrite_r+0x310>
    4c04:	00c41683          	lh	a3,12(s0)
    4c08:	000b2483          	lw	s1,0(s6)
    4c0c:	0026f793          	andi	a5,a3,2
    4c10:	f60798e3          	bnez	a5,4b80 <__sfvwrite_r+0x64>
    4c14:	0016f793          	andi	a5,a3,1
    4c18:	12079c63          	bnez	a5,4d50 <__sfvwrite_r+0x234>
    4c1c:	00042783          	lw	a5,0(s0)
    4c20:	00842703          	lw	a4,8(s0)
    4c24:	80000ab7          	lui	s5,0x80000
    4c28:	00000b93          	li	s7,0
    4c2c:	00000993          	li	s3,0
    4c30:	fffaca93          	not	s5,s5
    4c34:	00078513          	mv	a0,a5
    4c38:	00070c13          	mv	s8,a4
    4c3c:	10098263          	beqz	s3,4d40 <__sfvwrite_r+0x224>
    4c40:	2006f613          	andi	a2,a3,512
    4c44:	24060c63          	beqz	a2,4e9c <__sfvwrite_r+0x380>
    4c48:	00070c93          	mv	s9,a4
    4c4c:	2ee9e663          	bltu	s3,a4,4f38 <__sfvwrite_r+0x41c>
    4c50:	4806f713          	andi	a4,a3,1152
    4c54:	08070a63          	beqz	a4,4ce8 <__sfvwrite_r+0x1cc>
    4c58:	01442603          	lw	a2,20(s0)
    4c5c:	01042583          	lw	a1,16(s0)
    4c60:	00161713          	slli	a4,a2,0x1
    4c64:	00c70733          	add	a4,a4,a2
    4c68:	40b78933          	sub	s2,a5,a1
    4c6c:	01f75c13          	srli	s8,a4,0x1f
    4c70:	00ec0c33          	add	s8,s8,a4
    4c74:	00190793          	addi	a5,s2,1
    4c78:	401c5c13          	srai	s8,s8,0x1
    4c7c:	013787b3          	add	a5,a5,s3
    4c80:	000c0613          	mv	a2,s8
    4c84:	00fc7663          	bgeu	s8,a5,4c90 <__sfvwrite_r+0x174>
    4c88:	00078c13          	mv	s8,a5
    4c8c:	00078613          	mv	a2,a5
    4c90:	4006f693          	andi	a3,a3,1024
    4c94:	2c068e63          	beqz	a3,4f70 <__sfvwrite_r+0x454>
    4c98:	00060593          	mv	a1,a2
    4c9c:	000a0513          	mv	a0,s4
    4ca0:	9e1fe0ef          	jal	ra,3680 <_malloc_r>
    4ca4:	00050c93          	mv	s9,a0
    4ca8:	30050263          	beqz	a0,4fac <__sfvwrite_r+0x490>
    4cac:	01042583          	lw	a1,16(s0)
    4cb0:	00090613          	mv	a2,s2
    4cb4:	96cff0ef          	jal	ra,3e20 <memcpy>
    4cb8:	00c45783          	lhu	a5,12(s0)
    4cbc:	b7f7f793          	andi	a5,a5,-1153
    4cc0:	0807e793          	ori	a5,a5,128
    4cc4:	00f41623          	sh	a5,12(s0)
    4cc8:	012c8533          	add	a0,s9,s2
    4ccc:	412c07b3          	sub	a5,s8,s2
    4cd0:	01942823          	sw	s9,16(s0)
    4cd4:	01842a23          	sw	s8,20(s0)
    4cd8:	00a42023          	sw	a0,0(s0)
    4cdc:	00098c13          	mv	s8,s3
    4ce0:	00f42423          	sw	a5,8(s0)
    4ce4:	00098c93          	mv	s9,s3
    4ce8:	000c8613          	mv	a2,s9
    4cec:	000b8593          	mv	a1,s7
    4cf0:	3f4000ef          	jal	ra,50e4 <memmove>
    4cf4:	00842703          	lw	a4,8(s0)
    4cf8:	00042783          	lw	a5,0(s0)
    4cfc:	00098913          	mv	s2,s3
    4d00:	41870733          	sub	a4,a4,s8
    4d04:	019787b3          	add	a5,a5,s9
    4d08:	00e42423          	sw	a4,8(s0)
    4d0c:	00f42023          	sw	a5,0(s0)
    4d10:	00000993          	li	s3,0
    4d14:	008b2783          	lw	a5,8(s6)
    4d18:	012b8bb3          	add	s7,s7,s2
    4d1c:	412787b3          	sub	a5,a5,s2
    4d20:	00fb2423          	sw	a5,8(s6)
    4d24:	0a078a63          	beqz	a5,4dd8 <__sfvwrite_r+0x2bc>
    4d28:	00042783          	lw	a5,0(s0)
    4d2c:	00842703          	lw	a4,8(s0)
    4d30:	00c41683          	lh	a3,12(s0)
    4d34:	00078513          	mv	a0,a5
    4d38:	00070c13          	mv	s8,a4
    4d3c:	f00992e3          	bnez	s3,4c40 <__sfvwrite_r+0x124>
    4d40:	0004ab83          	lw	s7,0(s1)
    4d44:	0044a983          	lw	s3,4(s1)
    4d48:	00848493          	addi	s1,s1,8
    4d4c:	ee9ff06f          	j	4c34 <__sfvwrite_r+0x118>
    4d50:	00000a93          	li	s5,0
    4d54:	00000513          	li	a0,0
    4d58:	00000c13          	li	s8,0
    4d5c:	00000993          	li	s3,0
    4d60:	0c098e63          	beqz	s3,4e3c <__sfvwrite_r+0x320>
    4d64:	0e050663          	beqz	a0,4e50 <__sfvwrite_r+0x334>
    4d68:	000a8793          	mv	a5,s5
    4d6c:	00098b93          	mv	s7,s3
    4d70:	0137f463          	bgeu	a5,s3,4d78 <__sfvwrite_r+0x25c>
    4d74:	00078b93          	mv	s7,a5
    4d78:	00042503          	lw	a0,0(s0)
    4d7c:	01042783          	lw	a5,16(s0)
    4d80:	00842903          	lw	s2,8(s0)
    4d84:	01442683          	lw	a3,20(s0)
    4d88:	00a7f663          	bgeu	a5,a0,4d94 <__sfvwrite_r+0x278>
    4d8c:	00d90933          	add	s2,s2,a3
    4d90:	0f794063          	blt	s2,s7,4e70 <__sfvwrite_r+0x354>
    4d94:	1adbc863          	blt	s7,a3,4f44 <__sfvwrite_r+0x428>
    4d98:	02442783          	lw	a5,36(s0)
    4d9c:	01c42583          	lw	a1,28(s0)
    4da0:	000c0613          	mv	a2,s8
    4da4:	000a0513          	mv	a0,s4
    4da8:	000780e7          	jalr	a5
    4dac:	00050913          	mv	s2,a0
    4db0:	06a05863          	blez	a0,4e20 <__sfvwrite_r+0x304>
    4db4:	412a8ab3          	sub	s5,s5,s2
    4db8:	00100513          	li	a0,1
    4dbc:	040a8a63          	beqz	s5,4e10 <__sfvwrite_r+0x2f4>
    4dc0:	008b2783          	lw	a5,8(s6)
    4dc4:	012c0c33          	add	s8,s8,s2
    4dc8:	412989b3          	sub	s3,s3,s2
    4dcc:	412787b3          	sub	a5,a5,s2
    4dd0:	00fb2423          	sw	a5,8(s6)
    4dd4:	f80796e3          	bnez	a5,4d60 <__sfvwrite_r+0x244>
    4dd8:	00000513          	li	a0,0
    4ddc:	02c12083          	lw	ra,44(sp)
    4de0:	02812403          	lw	s0,40(sp)
    4de4:	02412483          	lw	s1,36(sp)
    4de8:	02012903          	lw	s2,32(sp)
    4dec:	01c12983          	lw	s3,28(sp)
    4df0:	01812a03          	lw	s4,24(sp)
    4df4:	01412a83          	lw	s5,20(sp)
    4df8:	01012b03          	lw	s6,16(sp)
    4dfc:	00c12b83          	lw	s7,12(sp)
    4e00:	00812c03          	lw	s8,8(sp)
    4e04:	00412c83          	lw	s9,4(sp)
    4e08:	03010113          	addi	sp,sp,48
    4e0c:	00008067          	ret
    4e10:	00040593          	mv	a1,s0
    4e14:	000a0513          	mv	a0,s4
    4e18:	c49fd0ef          	jal	ra,2a60 <_fflush_r>
    4e1c:	fa0502e3          	beqz	a0,4dc0 <__sfvwrite_r+0x2a4>
    4e20:	00c41783          	lh	a5,12(s0)
    4e24:	0407e793          	ori	a5,a5,64
    4e28:	00f41623          	sh	a5,12(s0)
    4e2c:	fff00513          	li	a0,-1
    4e30:	fadff06f          	j	4ddc <__sfvwrite_r+0x2c0>
    4e34:	00000513          	li	a0,0
    4e38:	00008067          	ret
    4e3c:	0044a983          	lw	s3,4(s1)
    4e40:	00048793          	mv	a5,s1
    4e44:	00848493          	addi	s1,s1,8
    4e48:	fe098ae3          	beqz	s3,4e3c <__sfvwrite_r+0x320>
    4e4c:	0007ac03          	lw	s8,0(a5)
    4e50:	00098613          	mv	a2,s3
    4e54:	00a00593          	li	a1,10
    4e58:	000c0513          	mv	a0,s8
    4e5c:	1c4000ef          	jal	ra,5020 <memchr>
    4e60:	14050063          	beqz	a0,4fa0 <__sfvwrite_r+0x484>
    4e64:	00150513          	addi	a0,a0,1
    4e68:	41850ab3          	sub	s5,a0,s8
    4e6c:	efdff06f          	j	4d68 <__sfvwrite_r+0x24c>
    4e70:	000c0593          	mv	a1,s8
    4e74:	00090613          	mv	a2,s2
    4e78:	26c000ef          	jal	ra,50e4 <memmove>
    4e7c:	00042783          	lw	a5,0(s0)
    4e80:	00040593          	mv	a1,s0
    4e84:	000a0513          	mv	a0,s4
    4e88:	012787b3          	add	a5,a5,s2
    4e8c:	00f42023          	sw	a5,0(s0)
    4e90:	bd1fd0ef          	jal	ra,2a60 <_fflush_r>
    4e94:	f20500e3          	beqz	a0,4db4 <__sfvwrite_r+0x298>
    4e98:	f89ff06f          	j	4e20 <__sfvwrite_r+0x304>
    4e9c:	01042683          	lw	a3,16(s0)
    4ea0:	04f6e463          	bltu	a3,a5,4ee8 <__sfvwrite_r+0x3cc>
    4ea4:	01442583          	lw	a1,20(s0)
    4ea8:	04b9e063          	bltu	s3,a1,4ee8 <__sfvwrite_r+0x3cc>
    4eac:	00098913          	mv	s2,s3
    4eb0:	013af463          	bgeu	s5,s3,4eb8 <__sfvwrite_r+0x39c>
    4eb4:	000a8913          	mv	s2,s5
    4eb8:	00090513          	mv	a0,s2
    4ebc:	66d000ef          	jal	ra,5d28 <__modsi3>
    4ec0:	02442783          	lw	a5,36(s0)
    4ec4:	01c42583          	lw	a1,28(s0)
    4ec8:	40a906b3          	sub	a3,s2,a0
    4ecc:	000b8613          	mv	a2,s7
    4ed0:	000a0513          	mv	a0,s4
    4ed4:	000780e7          	jalr	a5
    4ed8:	00050913          	mv	s2,a0
    4edc:	f4a052e3          	blez	a0,4e20 <__sfvwrite_r+0x304>
    4ee0:	412989b3          	sub	s3,s3,s2
    4ee4:	e31ff06f          	j	4d14 <__sfvwrite_r+0x1f8>
    4ee8:	00070913          	mv	s2,a4
    4eec:	00e9f463          	bgeu	s3,a4,4ef4 <__sfvwrite_r+0x3d8>
    4ef0:	00098913          	mv	s2,s3
    4ef4:	00078513          	mv	a0,a5
    4ef8:	00090613          	mv	a2,s2
    4efc:	000b8593          	mv	a1,s7
    4f00:	1e4000ef          	jal	ra,50e4 <memmove>
    4f04:	00842703          	lw	a4,8(s0)
    4f08:	00042783          	lw	a5,0(s0)
    4f0c:	41270733          	sub	a4,a4,s2
    4f10:	012787b3          	add	a5,a5,s2
    4f14:	00e42423          	sw	a4,8(s0)
    4f18:	00f42023          	sw	a5,0(s0)
    4f1c:	fc0712e3          	bnez	a4,4ee0 <__sfvwrite_r+0x3c4>
    4f20:	00040593          	mv	a1,s0
    4f24:	000a0513          	mv	a0,s4
    4f28:	b39fd0ef          	jal	ra,2a60 <_fflush_r>
    4f2c:	ee051ae3          	bnez	a0,4e20 <__sfvwrite_r+0x304>
    4f30:	412989b3          	sub	s3,s3,s2
    4f34:	de1ff06f          	j	4d14 <__sfvwrite_r+0x1f8>
    4f38:	00098c13          	mv	s8,s3
    4f3c:	00098c93          	mv	s9,s3
    4f40:	da9ff06f          	j	4ce8 <__sfvwrite_r+0x1cc>
    4f44:	000b8613          	mv	a2,s7
    4f48:	000c0593          	mv	a1,s8
    4f4c:	198000ef          	jal	ra,50e4 <memmove>
    4f50:	00842703          	lw	a4,8(s0)
    4f54:	00042783          	lw	a5,0(s0)
    4f58:	000b8913          	mv	s2,s7
    4f5c:	41770733          	sub	a4,a4,s7
    4f60:	017787b3          	add	a5,a5,s7
    4f64:	00e42423          	sw	a4,8(s0)
    4f68:	00f42023          	sw	a5,0(s0)
    4f6c:	e49ff06f          	j	4db4 <__sfvwrite_r+0x298>
    4f70:	000a0513          	mv	a0,s4
    4f74:	354000ef          	jal	ra,52c8 <_realloc_r>
    4f78:	00050c93          	mv	s9,a0
    4f7c:	d40516e3          	bnez	a0,4cc8 <__sfvwrite_r+0x1ac>
    4f80:	01042583          	lw	a1,16(s0)
    4f84:	000a0513          	mv	a0,s4
    4f88:	a68fe0ef          	jal	ra,31f0 <_free_r>
    4f8c:	00c41783          	lh	a5,12(s0)
    4f90:	00c00713          	li	a4,12
    4f94:	00ea2023          	sw	a4,0(s4)
    4f98:	f7f7f793          	andi	a5,a5,-129
    4f9c:	e89ff06f          	j	4e24 <__sfvwrite_r+0x308>
    4fa0:	00198793          	addi	a5,s3,1
    4fa4:	00078a93          	mv	s5,a5
    4fa8:	dc5ff06f          	j	4d6c <__sfvwrite_r+0x250>
    4fac:	00c00713          	li	a4,12
    4fb0:	00c41783          	lh	a5,12(s0)
    4fb4:	00ea2023          	sw	a4,0(s4)
    4fb8:	e6dff06f          	j	4e24 <__sfvwrite_r+0x308>

00004fbc <_lseek_r>:
    4fbc:	ff010113          	addi	sp,sp,-16
    4fc0:	00058713          	mv	a4,a1
    4fc4:	00812423          	sw	s0,8(sp)
    4fc8:	00060593          	mv	a1,a2
    4fcc:	00050413          	mv	s0,a0
    4fd0:	00068613          	mv	a2,a3
    4fd4:	00070513          	mv	a0,a4
    4fd8:	00006797          	auipc	a5,0x6
    4fdc:	b207a823          	sw	zero,-1232(a5) # ab08 <errno>
    4fe0:	00112623          	sw	ra,12(sp)
    4fe4:	180010ef          	jal	ra,6164 <_lseek>
    4fe8:	fff00793          	li	a5,-1
    4fec:	00f50a63          	beq	a0,a5,5000 <_lseek_r+0x44>
    4ff0:	00c12083          	lw	ra,12(sp)
    4ff4:	00812403          	lw	s0,8(sp)
    4ff8:	01010113          	addi	sp,sp,16
    4ffc:	00008067          	ret
    5000:	00006797          	auipc	a5,0x6
    5004:	b087a783          	lw	a5,-1272(a5) # ab08 <errno>
    5008:	fe0784e3          	beqz	a5,4ff0 <_lseek_r+0x34>
    500c:	00c12083          	lw	ra,12(sp)
    5010:	00f42023          	sw	a5,0(s0)
    5014:	00812403          	lw	s0,8(sp)
    5018:	01010113          	addi	sp,sp,16
    501c:	00008067          	ret

00005020 <memchr>:
    5020:	00357793          	andi	a5,a0,3
    5024:	0ff5f693          	zext.b	a3,a1
    5028:	02078e63          	beqz	a5,5064 <memchr+0x44>
    502c:	fff60793          	addi	a5,a2,-1
    5030:	02060663          	beqz	a2,505c <memchr+0x3c>
    5034:	fff00613          	li	a2,-1
    5038:	0180006f          	j	5050 <memchr+0x30>
    503c:	00150513          	addi	a0,a0,1
    5040:	00357713          	andi	a4,a0,3
    5044:	02070263          	beqz	a4,5068 <memchr+0x48>
    5048:	fff78793          	addi	a5,a5,-1
    504c:	00c78863          	beq	a5,a2,505c <memchr+0x3c>
    5050:	00054703          	lbu	a4,0(a0)
    5054:	fed714e3          	bne	a4,a3,503c <memchr+0x1c>
    5058:	00008067          	ret
    505c:	00000513          	li	a0,0
    5060:	00008067          	ret
    5064:	00060793          	mv	a5,a2
    5068:	00300713          	li	a4,3
    506c:	04f77c63          	bgeu	a4,a5,50c4 <memchr+0xa4>
    5070:	0ff5f593          	zext.b	a1,a1
    5074:	00859713          	slli	a4,a1,0x8
    5078:	00b705b3          	add	a1,a4,a1
    507c:	01059713          	slli	a4,a1,0x10
    5080:	feff08b7          	lui	a7,0xfeff0
    5084:	80808837          	lui	a6,0x80808
    5088:	00e585b3          	add	a1,a1,a4
    508c:	eff88893          	addi	a7,a7,-257 # fefefeff <__alt_data_end+0xfcfefeff>
    5090:	08080813          	addi	a6,a6,128 # 80808080 <__alt_data_end+0x7e808080>
    5094:	00300313          	li	t1,3
    5098:	0100006f          	j	50a8 <memchr+0x88>
    509c:	ffc78793          	addi	a5,a5,-4
    50a0:	00450513          	addi	a0,a0,4
    50a4:	02f37063          	bgeu	t1,a5,50c4 <memchr+0xa4>
    50a8:	00052703          	lw	a4,0(a0)
    50ac:	00e5c733          	xor	a4,a1,a4
    50b0:	01170633          	add	a2,a4,a7
    50b4:	fff74713          	not	a4,a4
    50b8:	00e67733          	and	a4,a2,a4
    50bc:	01077733          	and	a4,a4,a6
    50c0:	fc070ee3          	beqz	a4,509c <memchr+0x7c>
    50c4:	00f50733          	add	a4,a0,a5
    50c8:	00079863          	bnez	a5,50d8 <memchr+0xb8>
    50cc:	f91ff06f          	j	505c <memchr+0x3c>
    50d0:	00150513          	addi	a0,a0,1
    50d4:	f8e504e3          	beq	a0,a4,505c <memchr+0x3c>
    50d8:	00054783          	lbu	a5,0(a0)
    50dc:	fed79ae3          	bne	a5,a3,50d0 <memchr+0xb0>
    50e0:	00008067          	ret

000050e4 <memmove>:
    50e4:	02a5f663          	bgeu	a1,a0,5110 <memmove+0x2c>
    50e8:	00c58733          	add	a4,a1,a2
    50ec:	02e57263          	bgeu	a0,a4,5110 <memmove+0x2c>
    50f0:	00c507b3          	add	a5,a0,a2
    50f4:	04060663          	beqz	a2,5140 <memmove+0x5c>
    50f8:	fff74683          	lbu	a3,-1(a4)
    50fc:	fff78793          	addi	a5,a5,-1
    5100:	fff70713          	addi	a4,a4,-1
    5104:	00d78023          	sb	a3,0(a5)
    5108:	fef518e3          	bne	a0,a5,50f8 <memmove+0x14>
    510c:	00008067          	ret
    5110:	00f00793          	li	a5,15
    5114:	02c7e863          	bltu	a5,a2,5144 <memmove+0x60>
    5118:	00050793          	mv	a5,a0
    511c:	fff60693          	addi	a3,a2,-1
    5120:	0c060a63          	beqz	a2,51f4 <memmove+0x110>
    5124:	00168693          	addi	a3,a3,1
    5128:	00d786b3          	add	a3,a5,a3
    512c:	0005c703          	lbu	a4,0(a1)
    5130:	00178793          	addi	a5,a5,1
    5134:	00158593          	addi	a1,a1,1
    5138:	fee78fa3          	sb	a4,-1(a5)
    513c:	fed798e3          	bne	a5,a3,512c <memmove+0x48>
    5140:	00008067          	ret
    5144:	00b567b3          	or	a5,a0,a1
    5148:	0037f793          	andi	a5,a5,3
    514c:	08079e63          	bnez	a5,51e8 <memmove+0x104>
    5150:	ff060893          	addi	a7,a2,-16
    5154:	ff08f893          	andi	a7,a7,-16
    5158:	01088893          	addi	a7,a7,16
    515c:	011507b3          	add	a5,a0,a7
    5160:	00058693          	mv	a3,a1
    5164:	00050713          	mv	a4,a0
    5168:	0006a803          	lw	a6,0(a3)
    516c:	01068693          	addi	a3,a3,16
    5170:	01070713          	addi	a4,a4,16
    5174:	ff072823          	sw	a6,-16(a4)
    5178:	ff46a803          	lw	a6,-12(a3)
    517c:	ff072a23          	sw	a6,-12(a4)
    5180:	ff86a803          	lw	a6,-8(a3)
    5184:	ff072c23          	sw	a6,-8(a4)
    5188:	ffc6a803          	lw	a6,-4(a3)
    518c:	ff072e23          	sw	a6,-4(a4)
    5190:	fcf71ce3          	bne	a4,a5,5168 <memmove+0x84>
    5194:	00c67713          	andi	a4,a2,12
    5198:	011585b3          	add	a1,a1,a7
    519c:	00f67813          	andi	a6,a2,15
    51a0:	04070c63          	beqz	a4,51f8 <memmove+0x114>
    51a4:	00058693          	mv	a3,a1
    51a8:	00078713          	mv	a4,a5
    51ac:	01078eb3          	add	t4,a5,a6
    51b0:	00300e13          	li	t3,3
    51b4:	0006a303          	lw	t1,0(a3)
    51b8:	00470713          	addi	a4,a4,4
    51bc:	40ee88b3          	sub	a7,t4,a4
    51c0:	fe672e23          	sw	t1,-4(a4)
    51c4:	00468693          	addi	a3,a3,4
    51c8:	ff1e66e3          	bltu	t3,a7,51b4 <memmove+0xd0>
    51cc:	ffc80713          	addi	a4,a6,-4
    51d0:	ffc77713          	andi	a4,a4,-4
    51d4:	00470713          	addi	a4,a4,4
    51d8:	00367613          	andi	a2,a2,3
    51dc:	00e787b3          	add	a5,a5,a4
    51e0:	00e585b3          	add	a1,a1,a4
    51e4:	f39ff06f          	j	511c <memmove+0x38>
    51e8:	fff60693          	addi	a3,a2,-1
    51ec:	00050793          	mv	a5,a0
    51f0:	f35ff06f          	j	5124 <memmove+0x40>
    51f4:	00008067          	ret
    51f8:	00080613          	mv	a2,a6
    51fc:	f21ff06f          	j	511c <memmove+0x38>

00005200 <_open_r>:
    5200:	ff010113          	addi	sp,sp,-16
    5204:	00058713          	mv	a4,a1
    5208:	00812423          	sw	s0,8(sp)
    520c:	00060593          	mv	a1,a2
    5210:	00050413          	mv	s0,a0
    5214:	00068613          	mv	a2,a3
    5218:	00070513          	mv	a0,a4
    521c:	00006797          	auipc	a5,0x6
    5220:	8e07a623          	sw	zero,-1812(a5) # ab08 <errno>
    5224:	00112623          	sw	ra,12(sp)
    5228:	154010ef          	jal	ra,637c <_open>
    522c:	fff00793          	li	a5,-1
    5230:	00f50a63          	beq	a0,a5,5244 <_open_r+0x44>
    5234:	00c12083          	lw	ra,12(sp)
    5238:	00812403          	lw	s0,8(sp)
    523c:	01010113          	addi	sp,sp,16
    5240:	00008067          	ret
    5244:	00006797          	auipc	a5,0x6
    5248:	8c47a783          	lw	a5,-1852(a5) # ab08 <errno>
    524c:	fe0784e3          	beqz	a5,5234 <_open_r+0x34>
    5250:	00c12083          	lw	ra,12(sp)
    5254:	00f42023          	sw	a5,0(s0)
    5258:	00812403          	lw	s0,8(sp)
    525c:	01010113          	addi	sp,sp,16
    5260:	00008067          	ret

00005264 <_read_r>:
    5264:	ff010113          	addi	sp,sp,-16
    5268:	00058713          	mv	a4,a1
    526c:	00812423          	sw	s0,8(sp)
    5270:	00060593          	mv	a1,a2
    5274:	00050413          	mv	s0,a0
    5278:	00068613          	mv	a2,a3
    527c:	00070513          	mv	a0,a4
    5280:	00006797          	auipc	a5,0x6
    5284:	8807a423          	sw	zero,-1912(a5) # ab08 <errno>
    5288:	00112623          	sw	ra,12(sp)
    528c:	2a4010ef          	jal	ra,6530 <_read>
    5290:	fff00793          	li	a5,-1
    5294:	00f50a63          	beq	a0,a5,52a8 <_read_r+0x44>
    5298:	00c12083          	lw	ra,12(sp)
    529c:	00812403          	lw	s0,8(sp)
    52a0:	01010113          	addi	sp,sp,16
    52a4:	00008067          	ret
    52a8:	00006797          	auipc	a5,0x6
    52ac:	8607a783          	lw	a5,-1952(a5) # ab08 <errno>
    52b0:	fe0784e3          	beqz	a5,5298 <_read_r+0x34>
    52b4:	00c12083          	lw	ra,12(sp)
    52b8:	00f42023          	sw	a5,0(s0)
    52bc:	00812403          	lw	s0,8(sp)
    52c0:	01010113          	addi	sp,sp,16
    52c4:	00008067          	ret

000052c8 <_realloc_r>:
    52c8:	fd010113          	addi	sp,sp,-48
    52cc:	02912223          	sw	s1,36(sp)
    52d0:	02112623          	sw	ra,44(sp)
    52d4:	02812423          	sw	s0,40(sp)
    52d8:	03212023          	sw	s2,32(sp)
    52dc:	01312e23          	sw	s3,28(sp)
    52e0:	01412c23          	sw	s4,24(sp)
    52e4:	01512a23          	sw	s5,20(sp)
    52e8:	01612823          	sw	s6,16(sp)
    52ec:	01712623          	sw	s7,12(sp)
    52f0:	01812423          	sw	s8,8(sp)
    52f4:	00060493          	mv	s1,a2
    52f8:	1c058263          	beqz	a1,54bc <_realloc_r+0x1f4>
    52fc:	00058413          	mv	s0,a1
    5300:	00050913          	mv	s2,a0
    5304:	d9dfe0ef          	jal	ra,40a0 <__malloc_lock>
    5308:	ffc42703          	lw	a4,-4(s0)
    530c:	00b48793          	addi	a5,s1,11
    5310:	01600693          	li	a3,22
    5314:	ff840a93          	addi	s5,s0,-8
    5318:	ffc77993          	andi	s3,a4,-4
    531c:	0ef6f663          	bgeu	a3,a5,5408 <_realloc_r+0x140>
    5320:	ff87fa13          	andi	s4,a5,-8
    5324:	0e07c663          	bltz	a5,5410 <_realloc_r+0x148>
    5328:	0e9a6463          	bltu	s4,s1,5410 <_realloc_r+0x148>
    532c:	1149d463          	bge	s3,s4,5434 <_realloc_r+0x16c>
    5330:	00003c17          	auipc	s8,0x3
    5334:	7f8c0c13          	addi	s8,s8,2040 # 8b28 <__malloc_av_>
    5338:	008c2603          	lw	a2,8(s8)
    533c:	013a86b3          	add	a3,s5,s3
    5340:	0046a783          	lw	a5,4(a3)
    5344:	1cd60e63          	beq	a2,a3,5520 <_realloc_r+0x258>
    5348:	ffe7f613          	andi	a2,a5,-2
    534c:	00c68633          	add	a2,a3,a2
    5350:	00462603          	lw	a2,4(a2)
    5354:	00167613          	andi	a2,a2,1
    5358:	14061463          	bnez	a2,54a0 <_realloc_r+0x1d8>
    535c:	ffc7f793          	andi	a5,a5,-4
    5360:	00f98633          	add	a2,s3,a5
    5364:	0b465e63          	bge	a2,s4,5420 <_realloc_r+0x158>
    5368:	00177713          	andi	a4,a4,1
    536c:	02071463          	bnez	a4,5394 <_realloc_r+0xcc>
    5370:	ff842b83          	lw	s7,-8(s0)
    5374:	417a8bb3          	sub	s7,s5,s7
    5378:	004ba703          	lw	a4,4(s7)
    537c:	ffc77713          	andi	a4,a4,-4
    5380:	00e787b3          	add	a5,a5,a4
    5384:	01378b33          	add	s6,a5,s3
    5388:	334b5463          	bge	s6,s4,56b0 <_realloc_r+0x3e8>
    538c:	00e98b33          	add	s6,s3,a4
    5390:	294b5663          	bge	s6,s4,561c <_realloc_r+0x354>
    5394:	00048593          	mv	a1,s1
    5398:	00090513          	mv	a0,s2
    539c:	ae4fe0ef          	jal	ra,3680 <_malloc_r>
    53a0:	00050493          	mv	s1,a0
    53a4:	40050263          	beqz	a0,57a8 <_realloc_r+0x4e0>
    53a8:	ffc42783          	lw	a5,-4(s0)
    53ac:	ff850713          	addi	a4,a0,-8
    53b0:	ffe7f793          	andi	a5,a5,-2
    53b4:	00fa87b3          	add	a5,s5,a5
    53b8:	24e78a63          	beq	a5,a4,560c <_realloc_r+0x344>
    53bc:	ffc98613          	addi	a2,s3,-4
    53c0:	02400793          	li	a5,36
    53c4:	2ec7e063          	bltu	a5,a2,56a4 <_realloc_r+0x3dc>
    53c8:	01300713          	li	a4,19
    53cc:	20c76e63          	bltu	a4,a2,55e8 <_realloc_r+0x320>
    53d0:	00050793          	mv	a5,a0
    53d4:	00040713          	mv	a4,s0
    53d8:	00072683          	lw	a3,0(a4)
    53dc:	00d7a023          	sw	a3,0(a5)
    53e0:	00472683          	lw	a3,4(a4)
    53e4:	00d7a223          	sw	a3,4(a5)
    53e8:	00872703          	lw	a4,8(a4)
    53ec:	00e7a423          	sw	a4,8(a5)
    53f0:	00090513          	mv	a0,s2
    53f4:	00040593          	mv	a1,s0
    53f8:	df9fd0ef          	jal	ra,31f0 <_free_r>
    53fc:	00090513          	mv	a0,s2
    5400:	cadfe0ef          	jal	ra,40ac <__malloc_unlock>
    5404:	0680006f          	j	546c <_realloc_r+0x1a4>
    5408:	01000a13          	li	s4,16
    540c:	f29a70e3          	bgeu	s4,s1,532c <_realloc_r+0x64>
    5410:	00c00793          	li	a5,12
    5414:	00f92023          	sw	a5,0(s2)
    5418:	00000493          	li	s1,0
    541c:	0500006f          	j	546c <_realloc_r+0x1a4>
    5420:	00c6a783          	lw	a5,12(a3)
    5424:	0086a703          	lw	a4,8(a3)
    5428:	00060993          	mv	s3,a2
    542c:	00f72623          	sw	a5,12(a4)
    5430:	00e7a423          	sw	a4,8(a5)
    5434:	004aa783          	lw	a5,4(s5) # 80000004 <__alt_data_end+0x7e000004>
    5438:	414986b3          	sub	a3,s3,s4
    543c:	00f00613          	li	a2,15
    5440:	0017f793          	andi	a5,a5,1
    5444:	013a8733          	add	a4,s5,s3
    5448:	0ad66463          	bltu	a2,a3,54f0 <_realloc_r+0x228>
    544c:	0137e7b3          	or	a5,a5,s3
    5450:	00faa223          	sw	a5,4(s5)
    5454:	00472783          	lw	a5,4(a4)
    5458:	0017e793          	ori	a5,a5,1
    545c:	00f72223          	sw	a5,4(a4)
    5460:	00090513          	mv	a0,s2
    5464:	c49fe0ef          	jal	ra,40ac <__malloc_unlock>
    5468:	00040493          	mv	s1,s0
    546c:	02c12083          	lw	ra,44(sp)
    5470:	02812403          	lw	s0,40(sp)
    5474:	02012903          	lw	s2,32(sp)
    5478:	01c12983          	lw	s3,28(sp)
    547c:	01812a03          	lw	s4,24(sp)
    5480:	01412a83          	lw	s5,20(sp)
    5484:	01012b03          	lw	s6,16(sp)
    5488:	00c12b83          	lw	s7,12(sp)
    548c:	00812c03          	lw	s8,8(sp)
    5490:	00048513          	mv	a0,s1
    5494:	02412483          	lw	s1,36(sp)
    5498:	03010113          	addi	sp,sp,48
    549c:	00008067          	ret
    54a0:	00177713          	andi	a4,a4,1
    54a4:	ee0718e3          	bnez	a4,5394 <_realloc_r+0xcc>
    54a8:	ff842b83          	lw	s7,-8(s0)
    54ac:	417a8bb3          	sub	s7,s5,s7
    54b0:	004ba703          	lw	a4,4(s7)
    54b4:	ffc77713          	andi	a4,a4,-4
    54b8:	ed5ff06f          	j	538c <_realloc_r+0xc4>
    54bc:	02812403          	lw	s0,40(sp)
    54c0:	02c12083          	lw	ra,44(sp)
    54c4:	02412483          	lw	s1,36(sp)
    54c8:	02012903          	lw	s2,32(sp)
    54cc:	01c12983          	lw	s3,28(sp)
    54d0:	01812a03          	lw	s4,24(sp)
    54d4:	01412a83          	lw	s5,20(sp)
    54d8:	01012b03          	lw	s6,16(sp)
    54dc:	00c12b83          	lw	s7,12(sp)
    54e0:	00812c03          	lw	s8,8(sp)
    54e4:	00060593          	mv	a1,a2
    54e8:	03010113          	addi	sp,sp,48
    54ec:	994fe06f          	j	3680 <_malloc_r>
    54f0:	0147e7b3          	or	a5,a5,s4
    54f4:	00faa223          	sw	a5,4(s5)
    54f8:	014a85b3          	add	a1,s5,s4
    54fc:	0016e693          	ori	a3,a3,1
    5500:	00d5a223          	sw	a3,4(a1)
    5504:	00472783          	lw	a5,4(a4)
    5508:	00858593          	addi	a1,a1,8
    550c:	00090513          	mv	a0,s2
    5510:	0017e793          	ori	a5,a5,1
    5514:	00f72223          	sw	a5,4(a4)
    5518:	cd9fd0ef          	jal	ra,31f0 <_free_r>
    551c:	f45ff06f          	j	5460 <_realloc_r+0x198>
    5520:	ffc7f793          	andi	a5,a5,-4
    5524:	013786b3          	add	a3,a5,s3
    5528:	010a0613          	addi	a2,s4,16
    552c:	22c6de63          	bge	a3,a2,5768 <_realloc_r+0x4a0>
    5530:	00177713          	andi	a4,a4,1
    5534:	e60710e3          	bnez	a4,5394 <_realloc_r+0xcc>
    5538:	ff842b83          	lw	s7,-8(s0)
    553c:	417a8bb3          	sub	s7,s5,s7
    5540:	004ba703          	lw	a4,4(s7)
    5544:	ffc77713          	andi	a4,a4,-4
    5548:	00e787b3          	add	a5,a5,a4
    554c:	01378b33          	add	s6,a5,s3
    5550:	e2cb4ee3          	blt	s6,a2,538c <_realloc_r+0xc4>
    5554:	00cba783          	lw	a5,12(s7)
    5558:	008ba703          	lw	a4,8(s7)
    555c:	ffc98613          	addi	a2,s3,-4
    5560:	02400693          	li	a3,36
    5564:	00f72623          	sw	a5,12(a4)
    5568:	00e7a423          	sw	a4,8(a5)
    556c:	008b8493          	addi	s1,s7,8
    5570:	26c6e263          	bltu	a3,a2,57d4 <_realloc_r+0x50c>
    5574:	01300713          	li	a4,19
    5578:	00048793          	mv	a5,s1
    557c:	02c77263          	bgeu	a4,a2,55a0 <_realloc_r+0x2d8>
    5580:	00042703          	lw	a4,0(s0)
    5584:	01b00793          	li	a5,27
    5588:	00eba423          	sw	a4,8(s7)
    558c:	00442703          	lw	a4,4(s0)
    5590:	00eba623          	sw	a4,12(s7)
    5594:	24c7e863          	bltu	a5,a2,57e4 <_realloc_r+0x51c>
    5598:	00840413          	addi	s0,s0,8
    559c:	010b8793          	addi	a5,s7,16
    55a0:	00042703          	lw	a4,0(s0)
    55a4:	00e7a023          	sw	a4,0(a5)
    55a8:	00442703          	lw	a4,4(s0)
    55ac:	00e7a223          	sw	a4,4(a5)
    55b0:	00842703          	lw	a4,8(s0)
    55b4:	00e7a423          	sw	a4,8(a5)
    55b8:	014b8733          	add	a4,s7,s4
    55bc:	414b07b3          	sub	a5,s6,s4
    55c0:	00ec2423          	sw	a4,8(s8)
    55c4:	0017e793          	ori	a5,a5,1
    55c8:	00f72223          	sw	a5,4(a4)
    55cc:	004ba783          	lw	a5,4(s7)
    55d0:	00090513          	mv	a0,s2
    55d4:	0017f793          	andi	a5,a5,1
    55d8:	0147e7b3          	or	a5,a5,s4
    55dc:	00fba223          	sw	a5,4(s7)
    55e0:	acdfe0ef          	jal	ra,40ac <__malloc_unlock>
    55e4:	e89ff06f          	j	546c <_realloc_r+0x1a4>
    55e8:	00042683          	lw	a3,0(s0)
    55ec:	01b00713          	li	a4,27
    55f0:	00d52023          	sw	a3,0(a0)
    55f4:	00442683          	lw	a3,4(s0)
    55f8:	00d52223          	sw	a3,4(a0)
    55fc:	14c76663          	bltu	a4,a2,5748 <_realloc_r+0x480>
    5600:	00840713          	addi	a4,s0,8
    5604:	00850793          	addi	a5,a0,8
    5608:	dd1ff06f          	j	53d8 <_realloc_r+0x110>
    560c:	ffc52783          	lw	a5,-4(a0)
    5610:	ffc7f793          	andi	a5,a5,-4
    5614:	00f989b3          	add	s3,s3,a5
    5618:	e1dff06f          	j	5434 <_realloc_r+0x16c>
    561c:	00cba783          	lw	a5,12(s7)
    5620:	008ba703          	lw	a4,8(s7)
    5624:	ffc98613          	addi	a2,s3,-4
    5628:	02400693          	li	a3,36
    562c:	00f72623          	sw	a5,12(a4)
    5630:	00e7a423          	sw	a4,8(a5)
    5634:	008b8493          	addi	s1,s7,8
    5638:	10c6e063          	bltu	a3,a2,5738 <_realloc_r+0x470>
    563c:	01300713          	li	a4,19
    5640:	00048793          	mv	a5,s1
    5644:	02c77c63          	bgeu	a4,a2,567c <_realloc_r+0x3b4>
    5648:	00042703          	lw	a4,0(s0)
    564c:	01b00793          	li	a5,27
    5650:	00eba423          	sw	a4,8(s7)
    5654:	00442703          	lw	a4,4(s0)
    5658:	00eba623          	sw	a4,12(s7)
    565c:	14c7f063          	bgeu	a5,a2,579c <_realloc_r+0x4d4>
    5660:	00842783          	lw	a5,8(s0)
    5664:	00fba823          	sw	a5,16(s7)
    5668:	00c42783          	lw	a5,12(s0)
    566c:	00fbaa23          	sw	a5,20(s7)
    5670:	0ad60663          	beq	a2,a3,571c <_realloc_r+0x454>
    5674:	01040413          	addi	s0,s0,16
    5678:	018b8793          	addi	a5,s7,24
    567c:	00042703          	lw	a4,0(s0)
    5680:	00e7a023          	sw	a4,0(a5)
    5684:	00442703          	lw	a4,4(s0)
    5688:	00e7a223          	sw	a4,4(a5)
    568c:	00842703          	lw	a4,8(s0)
    5690:	00e7a423          	sw	a4,8(a5)
    5694:	00048413          	mv	s0,s1
    5698:	000b0993          	mv	s3,s6
    569c:	000b8a93          	mv	s5,s7
    56a0:	d95ff06f          	j	5434 <_realloc_r+0x16c>
    56a4:	00040593          	mv	a1,s0
    56a8:	a3dff0ef          	jal	ra,50e4 <memmove>
    56ac:	d45ff06f          	j	53f0 <_realloc_r+0x128>
    56b0:	00c6a783          	lw	a5,12(a3)
    56b4:	0086a703          	lw	a4,8(a3)
    56b8:	ffc98613          	addi	a2,s3,-4
    56bc:	02400693          	li	a3,36
    56c0:	00f72623          	sw	a5,12(a4)
    56c4:	00e7a423          	sw	a4,8(a5)
    56c8:	008ba703          	lw	a4,8(s7)
    56cc:	00cba783          	lw	a5,12(s7)
    56d0:	008b8493          	addi	s1,s7,8
    56d4:	00f72623          	sw	a5,12(a4)
    56d8:	00e7a423          	sw	a4,8(a5)
    56dc:	04c6ee63          	bltu	a3,a2,5738 <_realloc_r+0x470>
    56e0:	01300713          	li	a4,19
    56e4:	00048793          	mv	a5,s1
    56e8:	f8c77ae3          	bgeu	a4,a2,567c <_realloc_r+0x3b4>
    56ec:	00042703          	lw	a4,0(s0)
    56f0:	01b00793          	li	a5,27
    56f4:	00eba423          	sw	a4,8(s7)
    56f8:	00442703          	lw	a4,4(s0)
    56fc:	00eba623          	sw	a4,12(s7)
    5700:	08c7fe63          	bgeu	a5,a2,579c <_realloc_r+0x4d4>
    5704:	00842703          	lw	a4,8(s0)
    5708:	02400793          	li	a5,36
    570c:	00eba823          	sw	a4,16(s7)
    5710:	00c42703          	lw	a4,12(s0)
    5714:	00ebaa23          	sw	a4,20(s7)
    5718:	f4f61ee3          	bne	a2,a5,5674 <_realloc_r+0x3ac>
    571c:	01042703          	lw	a4,16(s0)
    5720:	020b8793          	addi	a5,s7,32
    5724:	01840413          	addi	s0,s0,24
    5728:	00ebac23          	sw	a4,24(s7)
    572c:	ffc42703          	lw	a4,-4(s0)
    5730:	00ebae23          	sw	a4,28(s7)
    5734:	f49ff06f          	j	567c <_realloc_r+0x3b4>
    5738:	00040593          	mv	a1,s0
    573c:	00048513          	mv	a0,s1
    5740:	9a5ff0ef          	jal	ra,50e4 <memmove>
    5744:	f51ff06f          	j	5694 <_realloc_r+0x3cc>
    5748:	00842703          	lw	a4,8(s0)
    574c:	00e52423          	sw	a4,8(a0)
    5750:	00c42703          	lw	a4,12(s0)
    5754:	00e52623          	sw	a4,12(a0)
    5758:	06f60063          	beq	a2,a5,57b8 <_realloc_r+0x4f0>
    575c:	01040713          	addi	a4,s0,16
    5760:	01050793          	addi	a5,a0,16
    5764:	c75ff06f          	j	53d8 <_realloc_r+0x110>
    5768:	014a8ab3          	add	s5,s5,s4
    576c:	414687b3          	sub	a5,a3,s4
    5770:	015c2423          	sw	s5,8(s8)
    5774:	0017e793          	ori	a5,a5,1
    5778:	00faa223          	sw	a5,4(s5)
    577c:	ffc42783          	lw	a5,-4(s0)
    5780:	00090513          	mv	a0,s2
    5784:	00040493          	mv	s1,s0
    5788:	0017f793          	andi	a5,a5,1
    578c:	0147e7b3          	or	a5,a5,s4
    5790:	fef42e23          	sw	a5,-4(s0)
    5794:	919fe0ef          	jal	ra,40ac <__malloc_unlock>
    5798:	cd5ff06f          	j	546c <_realloc_r+0x1a4>
    579c:	00840413          	addi	s0,s0,8
    57a0:	010b8793          	addi	a5,s7,16
    57a4:	ed9ff06f          	j	567c <_realloc_r+0x3b4>
    57a8:	00090513          	mv	a0,s2
    57ac:	901fe0ef          	jal	ra,40ac <__malloc_unlock>
    57b0:	00000493          	li	s1,0
    57b4:	cb9ff06f          	j	546c <_realloc_r+0x1a4>
    57b8:	01042683          	lw	a3,16(s0)
    57bc:	01840713          	addi	a4,s0,24
    57c0:	01850793          	addi	a5,a0,24
    57c4:	00d52823          	sw	a3,16(a0)
    57c8:	01442683          	lw	a3,20(s0)
    57cc:	00d52a23          	sw	a3,20(a0)
    57d0:	c09ff06f          	j	53d8 <_realloc_r+0x110>
    57d4:	00040593          	mv	a1,s0
    57d8:	00048513          	mv	a0,s1
    57dc:	909ff0ef          	jal	ra,50e4 <memmove>
    57e0:	dd9ff06f          	j	55b8 <_realloc_r+0x2f0>
    57e4:	00842783          	lw	a5,8(s0)
    57e8:	00fba823          	sw	a5,16(s7)
    57ec:	00c42783          	lw	a5,12(s0)
    57f0:	00fbaa23          	sw	a5,20(s7)
    57f4:	00d60863          	beq	a2,a3,5804 <_realloc_r+0x53c>
    57f8:	01040413          	addi	s0,s0,16
    57fc:	018b8793          	addi	a5,s7,24
    5800:	da1ff06f          	j	55a0 <_realloc_r+0x2d8>
    5804:	01042703          	lw	a4,16(s0)
    5808:	020b8793          	addi	a5,s7,32
    580c:	01840413          	addi	s0,s0,24
    5810:	00ebac23          	sw	a4,24(s7)
    5814:	ffc42703          	lw	a4,-4(s0)
    5818:	00ebae23          	sw	a4,28(s7)
    581c:	d85ff06f          	j	55a0 <_realloc_r+0x2d8>

00005820 <__swsetup_r>:
    5820:	ff010113          	addi	sp,sp,-16
    5824:	00812423          	sw	s0,8(sp)
    5828:	00912223          	sw	s1,4(sp)
    582c:	00112623          	sw	ra,12(sp)
    5830:	8241a783          	lw	a5,-2012(gp) # 8f54 <_impure_ptr>
    5834:	00050493          	mv	s1,a0
    5838:	00058413          	mv	s0,a1
    583c:	00078663          	beqz	a5,5848 <__swsetup_r+0x28>
    5840:	0387a703          	lw	a4,56(a5)
    5844:	08070063          	beqz	a4,58c4 <__swsetup_r+0xa4>
    5848:	00c41783          	lh	a5,12(s0)
    584c:	0087f713          	andi	a4,a5,8
    5850:	08070463          	beqz	a4,58d8 <__swsetup_r+0xb8>
    5854:	01042703          	lw	a4,16(s0)
    5858:	0a070063          	beqz	a4,58f8 <__swsetup_r+0xd8>
    585c:	0017f693          	andi	a3,a5,1
    5860:	02068863          	beqz	a3,5890 <__swsetup_r+0x70>
    5864:	01442683          	lw	a3,20(s0)
    5868:	00042423          	sw	zero,8(s0)
    586c:	00000513          	li	a0,0
    5870:	40d006b3          	neg	a3,a3
    5874:	00d42c23          	sw	a3,24(s0)
    5878:	02070a63          	beqz	a4,58ac <__swsetup_r+0x8c>
    587c:	00c12083          	lw	ra,12(sp)
    5880:	00812403          	lw	s0,8(sp)
    5884:	00412483          	lw	s1,4(sp)
    5888:	01010113          	addi	sp,sp,16
    588c:	00008067          	ret
    5890:	0027f693          	andi	a3,a5,2
    5894:	00000613          	li	a2,0
    5898:	00069463          	bnez	a3,58a0 <__swsetup_r+0x80>
    589c:	01442603          	lw	a2,20(s0)
    58a0:	00c42423          	sw	a2,8(s0)
    58a4:	00000513          	li	a0,0
    58a8:	fc071ae3          	bnez	a4,587c <__swsetup_r+0x5c>
    58ac:	0807f713          	andi	a4,a5,128
    58b0:	fc0706e3          	beqz	a4,587c <__swsetup_r+0x5c>
    58b4:	0407e793          	ori	a5,a5,64
    58b8:	00f41623          	sh	a5,12(s0)
    58bc:	fff00513          	li	a0,-1
    58c0:	fbdff06f          	j	587c <__swsetup_r+0x5c>
    58c4:	00078513          	mv	a0,a5
    58c8:	c58fd0ef          	jal	ra,2d20 <__sinit>
    58cc:	00c41783          	lh	a5,12(s0)
    58d0:	0087f713          	andi	a4,a5,8
    58d4:	f80710e3          	bnez	a4,5854 <__swsetup_r+0x34>
    58d8:	0107f713          	andi	a4,a5,16
    58dc:	06070a63          	beqz	a4,5950 <__swsetup_r+0x130>
    58e0:	0047f713          	andi	a4,a5,4
    58e4:	02071c63          	bnez	a4,591c <__swsetup_r+0xfc>
    58e8:	01042703          	lw	a4,16(s0)
    58ec:	0087e793          	ori	a5,a5,8
    58f0:	00f41623          	sh	a5,12(s0)
    58f4:	f60714e3          	bnez	a4,585c <__swsetup_r+0x3c>
    58f8:	2807f693          	andi	a3,a5,640
    58fc:	20000613          	li	a2,512
    5900:	f4c68ee3          	beq	a3,a2,585c <__swsetup_r+0x3c>
    5904:	00040593          	mv	a1,s0
    5908:	00048513          	mv	a0,s1
    590c:	054000ef          	jal	ra,5960 <__smakebuf_r>
    5910:	00c41783          	lh	a5,12(s0)
    5914:	01042703          	lw	a4,16(s0)
    5918:	f45ff06f          	j	585c <__swsetup_r+0x3c>
    591c:	03042583          	lw	a1,48(s0)
    5920:	00058e63          	beqz	a1,593c <__swsetup_r+0x11c>
    5924:	04040713          	addi	a4,s0,64
    5928:	00e58863          	beq	a1,a4,5938 <__swsetup_r+0x118>
    592c:	00048513          	mv	a0,s1
    5930:	8c1fd0ef          	jal	ra,31f0 <_free_r>
    5934:	00c41783          	lh	a5,12(s0)
    5938:	02042823          	sw	zero,48(s0)
    593c:	01042703          	lw	a4,16(s0)
    5940:	fdb7f793          	andi	a5,a5,-37
    5944:	00042223          	sw	zero,4(s0)
    5948:	00e42023          	sw	a4,0(s0)
    594c:	fa1ff06f          	j	58ec <__swsetup_r+0xcc>
    5950:	00900713          	li	a4,9
    5954:	00e4a023          	sw	a4,0(s1)
    5958:	0407e793          	ori	a5,a5,64
    595c:	f5dff06f          	j	58b8 <__swsetup_r+0x98>

00005960 <__smakebuf_r>:
    5960:	00c59783          	lh	a5,12(a1)
    5964:	f8010113          	addi	sp,sp,-128
    5968:	06812c23          	sw	s0,120(sp)
    596c:	06112e23          	sw	ra,124(sp)
    5970:	06912a23          	sw	s1,116(sp)
    5974:	07212823          	sw	s2,112(sp)
    5978:	07312623          	sw	s3,108(sp)
    597c:	07412423          	sw	s4,104(sp)
    5980:	0027f713          	andi	a4,a5,2
    5984:	00058413          	mv	s0,a1
    5988:	02070c63          	beqz	a4,59c0 <__smakebuf_r+0x60>
    598c:	04358793          	addi	a5,a1,67
    5990:	00f5a023          	sw	a5,0(a1)
    5994:	00f5a823          	sw	a5,16(a1)
    5998:	00100793          	li	a5,1
    599c:	00f5aa23          	sw	a5,20(a1)
    59a0:	07c12083          	lw	ra,124(sp)
    59a4:	07812403          	lw	s0,120(sp)
    59a8:	07412483          	lw	s1,116(sp)
    59ac:	07012903          	lw	s2,112(sp)
    59b0:	06c12983          	lw	s3,108(sp)
    59b4:	06812a03          	lw	s4,104(sp)
    59b8:	08010113          	addi	sp,sp,128
    59bc:	00008067          	ret
    59c0:	00e59583          	lh	a1,14(a1)
    59c4:	00050493          	mv	s1,a0
    59c8:	0805cc63          	bltz	a1,5a60 <__smakebuf_r+0x100>
    59cc:	00810613          	addi	a2,sp,8
    59d0:	1f8000ef          	jal	ra,5bc8 <_fstat_r>
    59d4:	08054463          	bltz	a0,5a5c <__smakebuf_r+0xfc>
    59d8:	00c12783          	lw	a5,12(sp)
    59dc:	0000f937          	lui	s2,0xf
    59e0:	00001a37          	lui	s4,0x1
    59e4:	00f97933          	and	s2,s2,a5
    59e8:	ffffe7b7          	lui	a5,0xffffe
    59ec:	00f90933          	add	s2,s2,a5
    59f0:	00193913          	seqz	s2,s2
    59f4:	40000993          	li	s3,1024
    59f8:	800a0a13          	addi	s4,s4,-2048 # 800 <altera_avalon_jtag_uart_ioctl_fd+0x48>
    59fc:	00098593          	mv	a1,s3
    5a00:	00048513          	mv	a0,s1
    5a04:	c7dfd0ef          	jal	ra,3680 <_malloc_r>
    5a08:	00c41783          	lh	a5,12(s0)
    5a0c:	06050e63          	beqz	a0,5a88 <__smakebuf_r+0x128>
    5a10:	ffffd717          	auipc	a4,0xffffd
    5a14:	1f870713          	addi	a4,a4,504 # 2c08 <_cleanup_r>
    5a18:	02e4ae23          	sw	a4,60(s1)
    5a1c:	0807e793          	ori	a5,a5,128
    5a20:	00f41623          	sh	a5,12(s0)
    5a24:	00a42023          	sw	a0,0(s0)
    5a28:	00a42823          	sw	a0,16(s0)
    5a2c:	01342a23          	sw	s3,20(s0)
    5a30:	08091863          	bnez	s2,5ac0 <__smakebuf_r+0x160>
    5a34:	0147e7b3          	or	a5,a5,s4
    5a38:	07c12083          	lw	ra,124(sp)
    5a3c:	00f41623          	sh	a5,12(s0)
    5a40:	07812403          	lw	s0,120(sp)
    5a44:	07412483          	lw	s1,116(sp)
    5a48:	07012903          	lw	s2,112(sp)
    5a4c:	06c12983          	lw	s3,108(sp)
    5a50:	06812a03          	lw	s4,104(sp)
    5a54:	08010113          	addi	sp,sp,128
    5a58:	00008067          	ret
    5a5c:	00c41783          	lh	a5,12(s0)
    5a60:	0807f793          	andi	a5,a5,128
    5a64:	00000913          	li	s2,0
    5a68:	04078663          	beqz	a5,5ab4 <__smakebuf_r+0x154>
    5a6c:	04000993          	li	s3,64
    5a70:	00098593          	mv	a1,s3
    5a74:	00048513          	mv	a0,s1
    5a78:	c09fd0ef          	jal	ra,3680 <_malloc_r>
    5a7c:	00c41783          	lh	a5,12(s0)
    5a80:	00000a13          	li	s4,0
    5a84:	f80516e3          	bnez	a0,5a10 <__smakebuf_r+0xb0>
    5a88:	2007f713          	andi	a4,a5,512
    5a8c:	f0071ae3          	bnez	a4,59a0 <__smakebuf_r+0x40>
    5a90:	ffc7f793          	andi	a5,a5,-4
    5a94:	0027e793          	ori	a5,a5,2
    5a98:	04340713          	addi	a4,s0,67
    5a9c:	00f41623          	sh	a5,12(s0)
    5aa0:	00100793          	li	a5,1
    5aa4:	00e42023          	sw	a4,0(s0)
    5aa8:	00e42823          	sw	a4,16(s0)
    5aac:	00f42a23          	sw	a5,20(s0)
    5ab0:	ef1ff06f          	j	59a0 <__smakebuf_r+0x40>
    5ab4:	40000993          	li	s3,1024
    5ab8:	00000a13          	li	s4,0
    5abc:	f41ff06f          	j	59fc <__smakebuf_r+0x9c>
    5ac0:	00e41583          	lh	a1,14(s0)
    5ac4:	00048513          	mv	a0,s1
    5ac8:	160000ef          	jal	ra,5c28 <_isatty_r>
    5acc:	00051663          	bnez	a0,5ad8 <__smakebuf_r+0x178>
    5ad0:	00c41783          	lh	a5,12(s0)
    5ad4:	f61ff06f          	j	5a34 <__smakebuf_r+0xd4>
    5ad8:	00c45783          	lhu	a5,12(s0)
    5adc:	ffc7f793          	andi	a5,a5,-4
    5ae0:	0017e793          	ori	a5,a5,1
    5ae4:	01079793          	slli	a5,a5,0x10
    5ae8:	4107d793          	srai	a5,a5,0x10
    5aec:	f49ff06f          	j	5a34 <__smakebuf_r+0xd4>

00005af0 <__swhatbuf_r>:
    5af0:	f9010113          	addi	sp,sp,-112
    5af4:	06812423          	sw	s0,104(sp)
    5af8:	00058413          	mv	s0,a1
    5afc:	00e59583          	lh	a1,14(a1)
    5b00:	06912223          	sw	s1,100(sp)
    5b04:	07212023          	sw	s2,96(sp)
    5b08:	06112623          	sw	ra,108(sp)
    5b0c:	00060493          	mv	s1,a2
    5b10:	00068913          	mv	s2,a3
    5b14:	0405ca63          	bltz	a1,5b68 <__swhatbuf_r+0x78>
    5b18:	00810613          	addi	a2,sp,8
    5b1c:	0ac000ef          	jal	ra,5bc8 <_fstat_r>
    5b20:	04054463          	bltz	a0,5b68 <__swhatbuf_r+0x78>
    5b24:	00c12703          	lw	a4,12(sp)
    5b28:	0000f7b7          	lui	a5,0xf
    5b2c:	06c12083          	lw	ra,108(sp)
    5b30:	00e7f7b3          	and	a5,a5,a4
    5b34:	ffffe737          	lui	a4,0xffffe
    5b38:	00e787b3          	add	a5,a5,a4
    5b3c:	06812403          	lw	s0,104(sp)
    5b40:	0017b793          	seqz	a5,a5
    5b44:	00f92023          	sw	a5,0(s2) # f000 <__alt_heap_start+0x4448>
    5b48:	40000713          	li	a4,1024
    5b4c:	00e4a023          	sw	a4,0(s1)
    5b50:	00001537          	lui	a0,0x1
    5b54:	06412483          	lw	s1,100(sp)
    5b58:	06012903          	lw	s2,96(sp)
    5b5c:	80050513          	addi	a0,a0,-2048 # 800 <altera_avalon_jtag_uart_ioctl_fd+0x48>
    5b60:	07010113          	addi	sp,sp,112
    5b64:	00008067          	ret
    5b68:	00c45783          	lhu	a5,12(s0)
    5b6c:	0807f793          	andi	a5,a5,128
    5b70:	02078863          	beqz	a5,5ba0 <__swhatbuf_r+0xb0>
    5b74:	06c12083          	lw	ra,108(sp)
    5b78:	06812403          	lw	s0,104(sp)
    5b7c:	00000793          	li	a5,0
    5b80:	00f92023          	sw	a5,0(s2)
    5b84:	04000713          	li	a4,64
    5b88:	00e4a023          	sw	a4,0(s1)
    5b8c:	06012903          	lw	s2,96(sp)
    5b90:	06412483          	lw	s1,100(sp)
    5b94:	00000513          	li	a0,0
    5b98:	07010113          	addi	sp,sp,112
    5b9c:	00008067          	ret
    5ba0:	06c12083          	lw	ra,108(sp)
    5ba4:	06812403          	lw	s0,104(sp)
    5ba8:	00f92023          	sw	a5,0(s2)
    5bac:	40000713          	li	a4,1024
    5bb0:	00e4a023          	sw	a4,0(s1)
    5bb4:	06012903          	lw	s2,96(sp)
    5bb8:	06412483          	lw	s1,100(sp)
    5bbc:	00000513          	li	a0,0
    5bc0:	07010113          	addi	sp,sp,112
    5bc4:	00008067          	ret

00005bc8 <_fstat_r>:
    5bc8:	ff010113          	addi	sp,sp,-16
    5bcc:	00058713          	mv	a4,a1
    5bd0:	00812423          	sw	s0,8(sp)
    5bd4:	00060593          	mv	a1,a2
    5bd8:	00050413          	mv	s0,a0
    5bdc:	00070513          	mv	a0,a4
    5be0:	00005797          	auipc	a5,0x5
    5be4:	f207a423          	sw	zero,-216(a5) # ab08 <errno>
    5be8:	00112623          	sw	ra,12(sp)
    5bec:	324000ef          	jal	ra,5f10 <_fstat>
    5bf0:	fff00793          	li	a5,-1
    5bf4:	00f50a63          	beq	a0,a5,5c08 <_fstat_r+0x40>
    5bf8:	00c12083          	lw	ra,12(sp)
    5bfc:	00812403          	lw	s0,8(sp)
    5c00:	01010113          	addi	sp,sp,16
    5c04:	00008067          	ret
    5c08:	00005797          	auipc	a5,0x5
    5c0c:	f007a783          	lw	a5,-256(a5) # ab08 <errno>
    5c10:	fe0784e3          	beqz	a5,5bf8 <_fstat_r+0x30>
    5c14:	00c12083          	lw	ra,12(sp)
    5c18:	00f42023          	sw	a5,0(s0)
    5c1c:	00812403          	lw	s0,8(sp)
    5c20:	01010113          	addi	sp,sp,16
    5c24:	00008067          	ret

00005c28 <_isatty_r>:
    5c28:	ff010113          	addi	sp,sp,-16
    5c2c:	00812423          	sw	s0,8(sp)
    5c30:	00050413          	mv	s0,a0
    5c34:	00058513          	mv	a0,a1
    5c38:	00005797          	auipc	a5,0x5
    5c3c:	ec07a823          	sw	zero,-304(a5) # ab08 <errno>
    5c40:	00112623          	sw	ra,12(sp)
    5c44:	3d8000ef          	jal	ra,601c <_isatty>
    5c48:	fff00793          	li	a5,-1
    5c4c:	00f50a63          	beq	a0,a5,5c60 <_isatty_r+0x38>
    5c50:	00c12083          	lw	ra,12(sp)
    5c54:	00812403          	lw	s0,8(sp)
    5c58:	01010113          	addi	sp,sp,16
    5c5c:	00008067          	ret
    5c60:	00005797          	auipc	a5,0x5
    5c64:	ea87a783          	lw	a5,-344(a5) # ab08 <errno>
    5c68:	fe0784e3          	beqz	a5,5c50 <_isatty_r+0x28>
    5c6c:	00c12083          	lw	ra,12(sp)
    5c70:	00f42023          	sw	a5,0(s0)
    5c74:	00812403          	lw	s0,8(sp)
    5c78:	01010113          	addi	sp,sp,16
    5c7c:	00008067          	ret

00005c80 <__mulsi3>:
    5c80:	00050613          	mv	a2,a0
    5c84:	00000513          	li	a0,0
    5c88:	0015f693          	andi	a3,a1,1
    5c8c:	00068463          	beqz	a3,5c94 <__mulsi3+0x14>
    5c90:	00c50533          	add	a0,a0,a2
    5c94:	0015d593          	srli	a1,a1,0x1
    5c98:	00161613          	slli	a2,a2,0x1
    5c9c:	fe0596e3          	bnez	a1,5c88 <__mulsi3+0x8>
    5ca0:	00008067          	ret

00005ca4 <__divsi3>:
    5ca4:	06054063          	bltz	a0,5d04 <__umodsi3+0x10>
    5ca8:	0605c663          	bltz	a1,5d14 <__umodsi3+0x20>

00005cac <__hidden___udivsi3>:
    5cac:	00058613          	mv	a2,a1
    5cb0:	00050593          	mv	a1,a0
    5cb4:	fff00513          	li	a0,-1
    5cb8:	02060c63          	beqz	a2,5cf0 <__hidden___udivsi3+0x44>
    5cbc:	00100693          	li	a3,1
    5cc0:	00b67a63          	bgeu	a2,a1,5cd4 <__hidden___udivsi3+0x28>
    5cc4:	00c05863          	blez	a2,5cd4 <__hidden___udivsi3+0x28>
    5cc8:	00161613          	slli	a2,a2,0x1
    5ccc:	00169693          	slli	a3,a3,0x1
    5cd0:	feb66ae3          	bltu	a2,a1,5cc4 <__hidden___udivsi3+0x18>
    5cd4:	00000513          	li	a0,0
    5cd8:	00c5e663          	bltu	a1,a2,5ce4 <__hidden___udivsi3+0x38>
    5cdc:	40c585b3          	sub	a1,a1,a2
    5ce0:	00d56533          	or	a0,a0,a3
    5ce4:	0016d693          	srli	a3,a3,0x1
    5ce8:	00165613          	srli	a2,a2,0x1
    5cec:	fe0696e3          	bnez	a3,5cd8 <__hidden___udivsi3+0x2c>
    5cf0:	00008067          	ret

00005cf4 <__umodsi3>:
    5cf4:	00008293          	mv	t0,ra
    5cf8:	fb5ff0ef          	jal	ra,5cac <__hidden___udivsi3>
    5cfc:	00058513          	mv	a0,a1
    5d00:	00028067          	jr	t0 # 4078 <memset+0xb4>
    5d04:	40a00533          	neg	a0,a0
    5d08:	00b04863          	bgtz	a1,5d18 <__umodsi3+0x24>
    5d0c:	40b005b3          	neg	a1,a1
    5d10:	f9dff06f          	j	5cac <__hidden___udivsi3>
    5d14:	40b005b3          	neg	a1,a1
    5d18:	00008293          	mv	t0,ra
    5d1c:	f91ff0ef          	jal	ra,5cac <__hidden___udivsi3>
    5d20:	40a00533          	neg	a0,a0
    5d24:	00028067          	jr	t0

00005d28 <__modsi3>:
    5d28:	00008293          	mv	t0,ra
    5d2c:	0005ca63          	bltz	a1,5d40 <__modsi3+0x18>
    5d30:	00054c63          	bltz	a0,5d48 <__modsi3+0x20>
    5d34:	f79ff0ef          	jal	ra,5cac <__hidden___udivsi3>
    5d38:	00058513          	mv	a0,a1
    5d3c:	00028067          	jr	t0
    5d40:	40b005b3          	neg	a1,a1
    5d44:	fe0558e3          	bgez	a0,5d34 <__modsi3+0xc>
    5d48:	40a00533          	neg	a0,a0
    5d4c:	f61ff0ef          	jal	ra,5cac <__hidden___udivsi3>
    5d50:	40b00533          	neg	a0,a1
    5d54:	00028067          	jr	t0

00005d58 <alt_get_errno>:
{
    5d58:	ff010113          	addi	sp,sp,-16
    5d5c:	00112623          	sw	ra,12(sp)
    5d60:	00812423          	sw	s0,8(sp)
    5d64:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    5d68:	000097b7          	lui	a5,0x9
    5d6c:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    5d70:	00078c63          	beqz	a5,5d88 <alt_get_errno+0x30>
    5d74:	000097b7          	lui	a5,0x9
    5d78:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    5d7c:	000780e7          	jalr	a5
    5d80:	00050793          	mv	a5,a0
    5d84:	00c0006f          	j	5d90 <alt_get_errno+0x38>
    5d88:	0000b7b7          	lui	a5,0xb
    5d8c:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    5d90:	00078513          	mv	a0,a5
    5d94:	00c12083          	lw	ra,12(sp)
    5d98:	00812403          	lw	s0,8(sp)
    5d9c:	01010113          	addi	sp,sp,16
    5da0:	00008067          	ret

00005da4 <_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5da4:	fd010113          	addi	sp,sp,-48
    5da8:	02112623          	sw	ra,44(sp)
    5dac:	02812423          	sw	s0,40(sp)
    5db0:	03010413          	addi	s0,sp,48
    5db4:	fca42e23          	sw	a0,-36(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5db8:	fdc42783          	lw	a5,-36(s0)
    5dbc:	0207c463          	bltz	a5,5de4 <_close+0x40>
    5dc0:	fdc42703          	lw	a4,-36(s0)
    5dc4:	00070793          	mv	a5,a4
    5dc8:	00179793          	slli	a5,a5,0x1
    5dcc:	00e787b3          	add	a5,a5,a4
    5dd0:	00279793          	slli	a5,a5,0x2
    5dd4:	00008737          	lui	a4,0x8
    5dd8:	57c70713          	addi	a4,a4,1404 # 857c <alt_fd_list>
    5ddc:	00e787b3          	add	a5,a5,a4
    5de0:	0080006f          	j	5de8 <_close+0x44>
    5de4:	00000793          	li	a5,0
    5de8:	fef42423          	sw	a5,-24(s0)

  if (fd)
    5dec:	fe842783          	lw	a5,-24(s0)
    5df0:	06078663          	beqz	a5,5e5c <_close+0xb8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    5df4:	fe842783          	lw	a5,-24(s0)
    5df8:	0007a783          	lw	a5,0(a5)
    5dfc:	0107a783          	lw	a5,16(a5)
    5e00:	02078063          	beqz	a5,5e20 <_close+0x7c>
    5e04:	fe842783          	lw	a5,-24(s0)
    5e08:	0007a783          	lw	a5,0(a5)
    5e0c:	0107a783          	lw	a5,16(a5)
    5e10:	fe842503          	lw	a0,-24(s0)
    5e14:	000780e7          	jalr	a5
    5e18:	00050793          	mv	a5,a0
    5e1c:	0080006f          	j	5e24 <_close+0x80>
    5e20:	00000793          	li	a5,0
    5e24:	fef42623          	sw	a5,-20(s0)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5e28:	fdc42503          	lw	a0,-36(s0)
    5e2c:	c20fc0ef          	jal	ra,224c <alt_release_fd>
    if (rval < 0)
    5e30:	fec42783          	lw	a5,-20(s0)
    5e34:	0207d063          	bgez	a5,5e54 <_close+0xb0>
    {
      ALT_ERRNO = -rval;
    5e38:	f21ff0ef          	jal	ra,5d58 <alt_get_errno>
    5e3c:	00050713          	mv	a4,a0
    5e40:	fec42783          	lw	a5,-20(s0)
    5e44:	40f007b3          	neg	a5,a5
    5e48:	00f72023          	sw	a5,0(a4)
      return -1;
    5e4c:	fff00793          	li	a5,-1
    5e50:	0200006f          	j	5e70 <_close+0xcc>
    }
    return 0;
    5e54:	00000793          	li	a5,0
    5e58:	0180006f          	j	5e70 <_close+0xcc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5e5c:	efdff0ef          	jal	ra,5d58 <alt_get_errno>
    5e60:	00050713          	mv	a4,a0
    5e64:	05100793          	li	a5,81
    5e68:	00f72023          	sw	a5,0(a4)
    return -1;
    5e6c:	fff00793          	li	a5,-1
  }
}
    5e70:	00078513          	mv	a0,a5
    5e74:	02c12083          	lw	ra,44(sp)
    5e78:	02812403          	lw	s0,40(sp)
    5e7c:	03010113          	addi	sp,sp,48
    5e80:	00008067          	ret

00005e84 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5e84:	fd010113          	addi	sp,sp,-48
    5e88:	02812623          	sw	s0,44(sp)
    5e8c:	03010413          	addi	s0,sp,48
    5e90:	fca42e23          	sw	a0,-36(s0)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    5e94:	00000013          	nop
    5e98:	fdc42783          	lw	a5,-36(s0)
    5e9c:	fef42623          	sw	a5,-20(s0)
 * Routine called on exit.
 * TODO: Add support for GMON/gprof.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int a0 asm ("a0") = exit_code;
    5ea0:	fec42503          	lw	a0,-20(s0)
    "ebreak" 
    : 
    : "r"(a0), "r"(a1));

#else /* !DEBUG_STUB */
  if (a0) {
    5ea4:	00050793          	mv	a5,a0
    5ea8:	00078663          	beqz	a5,5eb4 <_exit+0x30>
    ALT_SIM_FAIL();
    5eac:	7c103013          	sltiu	zero,zero,1985
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    5eb0:	0080006f          	j	5eb8 <_exit+0x34>
    ALT_SIM_PASS();
    5eb4:	7c203013          	sltiu	zero,zero,1986
}
    5eb8:	00000013          	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5ebc:	00000013          	nop
    5ec0:	ffdff06f          	j	5ebc <_exit+0x38>

00005ec4 <alt_get_errno>:
{
    5ec4:	ff010113          	addi	sp,sp,-16
    5ec8:	00112623          	sw	ra,12(sp)
    5ecc:	00812423          	sw	s0,8(sp)
    5ed0:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    5ed4:	000097b7          	lui	a5,0x9
    5ed8:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    5edc:	00078c63          	beqz	a5,5ef4 <alt_get_errno+0x30>
    5ee0:	000097b7          	lui	a5,0x9
    5ee4:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    5ee8:	000780e7          	jalr	a5
    5eec:	00050793          	mv	a5,a0
    5ef0:	00c0006f          	j	5efc <alt_get_errno+0x38>
    5ef4:	0000b7b7          	lui	a5,0xb
    5ef8:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    5efc:	00078513          	mv	a0,a5
    5f00:	00c12083          	lw	ra,12(sp)
    5f04:	00812403          	lw	s0,8(sp)
    5f08:	01010113          	addi	sp,sp,16
    5f0c:	00008067          	ret

00005f10 <_fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    5f10:	fd010113          	addi	sp,sp,-48
    5f14:	02112623          	sw	ra,44(sp)
    5f18:	02812423          	sw	s0,40(sp)
    5f1c:	03010413          	addi	s0,sp,48
    5f20:	fca42e23          	sw	a0,-36(s0)
    5f24:	fcb42c23          	sw	a1,-40(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5f28:	fdc42783          	lw	a5,-36(s0)
    5f2c:	0207c463          	bltz	a5,5f54 <_fstat+0x44>
    5f30:	fdc42703          	lw	a4,-36(s0)
    5f34:	00070793          	mv	a5,a4
    5f38:	00179793          	slli	a5,a5,0x1
    5f3c:	00e787b3          	add	a5,a5,a4
    5f40:	00279793          	slli	a5,a5,0x2
    5f44:	00008737          	lui	a4,0x8
    5f48:	57c70713          	addi	a4,a4,1404 # 857c <alt_fd_list>
    5f4c:	00e787b3          	add	a5,a5,a4
    5f50:	0080006f          	j	5f58 <_fstat+0x48>
    5f54:	00000793          	li	a5,0
    5f58:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
    5f5c:	fec42783          	lw	a5,-20(s0)
    5f60:	04078463          	beqz	a5,5fa8 <_fstat+0x98>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    5f64:	fec42783          	lw	a5,-20(s0)
    5f68:	0007a783          	lw	a5,0(a5)
    5f6c:	0207a783          	lw	a5,32(a5)
    5f70:	02078263          	beqz	a5,5f94 <_fstat+0x84>
    {
      return fd->dev->fstat(fd, st);
    5f74:	fec42783          	lw	a5,-20(s0)
    5f78:	0007a783          	lw	a5,0(a5)
    5f7c:	0207a783          	lw	a5,32(a5)
    5f80:	fd842583          	lw	a1,-40(s0)
    5f84:	fec42503          	lw	a0,-20(s0)
    5f88:	000780e7          	jalr	a5
    5f8c:	00050793          	mv	a5,a0
    5f90:	02c0006f          	j	5fbc <_fstat+0xac>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    5f94:	fd842783          	lw	a5,-40(s0)
    5f98:	00002737          	lui	a4,0x2
    5f9c:	00e7a223          	sw	a4,4(a5)
      return 0;
    5fa0:	00000793          	li	a5,0
    5fa4:	0180006f          	j	5fbc <_fstat+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5fa8:	f1dff0ef          	jal	ra,5ec4 <alt_get_errno>
    5fac:	00050713          	mv	a4,a0
    5fb0:	05100793          	li	a5,81
    5fb4:	00f72023          	sw	a5,0(a4) # 2000 <alt_iic_isr_register+0x84>
    return -1;
    5fb8:	fff00793          	li	a5,-1
  }
}
    5fbc:	00078513          	mv	a0,a5
    5fc0:	02c12083          	lw	ra,44(sp)
    5fc4:	02812403          	lw	s0,40(sp)
    5fc8:	03010113          	addi	sp,sp,48
    5fcc:	00008067          	ret

00005fd0 <alt_get_errno>:
{
    5fd0:	ff010113          	addi	sp,sp,-16
    5fd4:	00112623          	sw	ra,12(sp)
    5fd8:	00812423          	sw	s0,8(sp)
    5fdc:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    5fe0:	000097b7          	lui	a5,0x9
    5fe4:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    5fe8:	00078c63          	beqz	a5,6000 <alt_get_errno+0x30>
    5fec:	000097b7          	lui	a5,0x9
    5ff0:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    5ff4:	000780e7          	jalr	a5
    5ff8:	00050793          	mv	a5,a0
    5ffc:	00c0006f          	j	6008 <alt_get_errno+0x38>
    6000:	0000b7b7          	lui	a5,0xb
    6004:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    6008:	00078513          	mv	a0,a5
    600c:	00c12083          	lw	ra,12(sp)
    6010:	00812403          	lw	s0,8(sp)
    6014:	01010113          	addi	sp,sp,16
    6018:	00008067          	ret

0000601c <_isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    601c:	f7010113          	addi	sp,sp,-144
    6020:	08112623          	sw	ra,140(sp)
    6024:	08812423          	sw	s0,136(sp)
    6028:	09010413          	addi	s0,sp,144
    602c:	f6a42e23          	sw	a0,-132(s0)
    6030:	0000b7b7          	lui	a5,0xb
    6034:	b0c7a703          	lw	a4,-1268(a5) # ab0c <__stack_chk_guard>
    6038:	fee42623          	sw	a4,-20(s0)
    603c:	00000713          	li	a4,0
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
    6040:	f8042a23          	sw	zero,-108(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6044:	f7c42783          	lw	a5,-132(s0)
    6048:	0207c463          	bltz	a5,6070 <_isatty+0x54>
    604c:	f7c42703          	lw	a4,-132(s0)
    6050:	00070793          	mv	a5,a4
    6054:	00179793          	slli	a5,a5,0x1
    6058:	00e787b3          	add	a5,a5,a4
    605c:	00279793          	slli	a5,a5,0x2
    6060:	00008737          	lui	a4,0x8
    6064:	57c70713          	addi	a4,a4,1404 # 857c <alt_fd_list>
    6068:	00e787b3          	add	a5,a5,a4
    606c:	0080006f          	j	6074 <_isatty+0x58>
    6070:	00000793          	li	a5,0
    6074:	f8f42623          	sw	a5,-116(s0)
  
  if (fd)
    6078:	f8c42783          	lw	a5,-116(s0)
    607c:	04078a63          	beqz	a5,60d0 <_isatty+0xb4>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    6080:	f8c42783          	lw	a5,-116(s0)
    6084:	0007a783          	lw	a5,0(a5)
    6088:	0207a783          	lw	a5,32(a5)
    608c:	00079663          	bnez	a5,6098 <_isatty+0x7c>
    {
      return 1;
    6090:	00100793          	li	a5,1
    6094:	0500006f          	j	60e4 <_isatty+0xc8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      if (fstat (file, &stat) < 0)
    6098:	f9040793          	addi	a5,s0,-112
    609c:	00078593          	mv	a1,a5
    60a0:	f7c42503          	lw	a0,-132(s0)
    60a4:	3c1000ef          	jal	ra,6c64 <fstat>
    60a8:	00050793          	mv	a5,a0
    60ac:	0007d663          	bgez	a5,60b8 <_isatty+0x9c>
        return 0;  // fstat will set ERRNO
    60b0:	00000793          	li	a5,0
    60b4:	0300006f          	j	60e4 <_isatty+0xc8>
      else
        return (stat.st_mode == _IFCHR) ? 1 : 0;
    60b8:	f9442703          	lw	a4,-108(s0)
    60bc:	ffffe7b7          	lui	a5,0xffffe
    60c0:	00f707b3          	add	a5,a4,a5
    60c4:	0017b793          	seqz	a5,a5
    60c8:	0ff7f793          	zext.b	a5,a5
    60cc:	0180006f          	j	60e4 <_isatty+0xc8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    60d0:	f01ff0ef          	jal	ra,5fd0 <alt_get_errno>
    60d4:	00050713          	mv	a4,a0
    60d8:	05100793          	li	a5,81
    60dc:	00f72023          	sw	a5,0(a4)
    return 0;
    60e0:	00000793          	li	a5,0
  }
}
    60e4:	00078713          	mv	a4,a5
    60e8:	0000b7b7          	lui	a5,0xb
    60ec:	fec42683          	lw	a3,-20(s0)
    60f0:	b0c7a783          	lw	a5,-1268(a5) # ab0c <__stack_chk_guard>
    60f4:	00f6c7b3          	xor	a5,a3,a5
    60f8:	00000693          	li	a3,0
    60fc:	00078463          	beqz	a5,6104 <_isatty+0xe8>
    6100:	2a5000ef          	jal	ra,6ba4 <__stack_chk_fail>
    6104:	00070513          	mv	a0,a4
    6108:	08c12083          	lw	ra,140(sp)
    610c:	08812403          	lw	s0,136(sp)
    6110:	09010113          	addi	sp,sp,144
    6114:	00008067          	ret

00006118 <alt_get_errno>:
{
    6118:	ff010113          	addi	sp,sp,-16
    611c:	00112623          	sw	ra,12(sp)
    6120:	00812423          	sw	s0,8(sp)
    6124:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6128:	000097b7          	lui	a5,0x9
    612c:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    6130:	00078c63          	beqz	a5,6148 <alt_get_errno+0x30>
    6134:	000097b7          	lui	a5,0x9
    6138:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    613c:	000780e7          	jalr	a5
    6140:	00050793          	mv	a5,a0
    6144:	00c0006f          	j	6150 <alt_get_errno+0x38>
    6148:	0000b7b7          	lui	a5,0xb
    614c:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    6150:	00078513          	mv	a0,a5
    6154:	00c12083          	lw	ra,12(sp)
    6158:	00812403          	lw	s0,8(sp)
    615c:	01010113          	addi	sp,sp,16
    6160:	00008067          	ret

00006164 <_lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    6164:	fd010113          	addi	sp,sp,-48
    6168:	02112623          	sw	ra,44(sp)
    616c:	02812423          	sw	s0,40(sp)
    6170:	03010413          	addi	s0,sp,48
    6174:	fca42e23          	sw	a0,-36(s0)
    6178:	fcb42c23          	sw	a1,-40(s0)
    617c:	fcc42a23          	sw	a2,-44(s0)
  alt_fd* fd;
  off_t   rc = 0; 
    6180:	fe042423          	sw	zero,-24(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6184:	fdc42783          	lw	a5,-36(s0)
    6188:	0207c463          	bltz	a5,61b0 <_lseek+0x4c>
    618c:	fdc42703          	lw	a4,-36(s0)
    6190:	00070793          	mv	a5,a4
    6194:	00179793          	slli	a5,a5,0x1
    6198:	00e787b3          	add	a5,a5,a4
    619c:	00279793          	slli	a5,a5,0x2
    61a0:	00008737          	lui	a4,0x8
    61a4:	57c70713          	addi	a4,a4,1404 # 857c <alt_fd_list>
    61a8:	00e787b3          	add	a5,a5,a4
    61ac:	0080006f          	j	61b4 <_lseek+0x50>
    61b0:	00000793          	li	a5,0
    61b4:	fef42623          	sw	a5,-20(s0)
  
  if (fd) 
    61b8:	fec42783          	lw	a5,-20(s0)
    61bc:	04078263          	beqz	a5,6200 <_lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    61c0:	fec42783          	lw	a5,-20(s0)
    61c4:	0007a783          	lw	a5,0(a5)
    61c8:	01c7a783          	lw	a5,28(a5)
    61cc:	02078463          	beqz	a5,61f4 <_lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    61d0:	fec42783          	lw	a5,-20(s0)
    61d4:	0007a783          	lw	a5,0(a5)
    61d8:	01c7a783          	lw	a5,28(a5)
    61dc:	fd442603          	lw	a2,-44(s0)
    61e0:	fd842583          	lw	a1,-40(s0)
    61e4:	fec42503          	lw	a0,-20(s0)
    61e8:	000780e7          	jalr	a5
    61ec:	fea42423          	sw	a0,-24(s0)
    61f0:	0180006f          	j	6208 <_lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    61f4:	f7a00793          	li	a5,-134
    61f8:	fef42423          	sw	a5,-24(s0)
    61fc:	00c0006f          	j	6208 <_lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    6200:	faf00793          	li	a5,-81
    6204:	fef42423          	sw	a5,-24(s0)
  }

  if (rc < 0)
    6208:	fe842783          	lw	a5,-24(s0)
    620c:	0207d063          	bgez	a5,622c <_lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    6210:	f09ff0ef          	jal	ra,6118 <alt_get_errno>
    6214:	00050713          	mv	a4,a0
    6218:	fe842783          	lw	a5,-24(s0)
    621c:	40f007b3          	neg	a5,a5
    6220:	00f72023          	sw	a5,0(a4)
    rc = -1;
    6224:	fff00793          	li	a5,-1
    6228:	fef42423          	sw	a5,-24(s0)
  }

  return rc;
    622c:	fe842783          	lw	a5,-24(s0)
}
    6230:	00078513          	mv	a0,a5
    6234:	02c12083          	lw	ra,44(sp)
    6238:	02812403          	lw	s0,40(sp)
    623c:	03010113          	addi	sp,sp,48
    6240:	00008067          	ret

00006244 <alt_get_errno>:
{
    6244:	ff010113          	addi	sp,sp,-16
    6248:	00112623          	sw	ra,12(sp)
    624c:	00812423          	sw	s0,8(sp)
    6250:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6254:	000097b7          	lui	a5,0x9
    6258:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    625c:	00078c63          	beqz	a5,6274 <alt_get_errno+0x30>
    6260:	000097b7          	lui	a5,0x9
    6264:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    6268:	000780e7          	jalr	a5
    626c:	00050793          	mv	a5,a0
    6270:	00c0006f          	j	627c <alt_get_errno+0x38>
    6274:	0000b7b7          	lui	a5,0xb
    6278:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    627c:	00078513          	mv	a0,a5
    6280:	00c12083          	lw	ra,12(sp)
    6284:	00812403          	lw	s0,8(sp)
    6288:	01010113          	addi	sp,sp,16
    628c:	00008067          	ret

00006290 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6290:	fd010113          	addi	sp,sp,-48
    6294:	02812623          	sw	s0,44(sp)
    6298:	03010413          	addi	s0,sp,48
    629c:	fca42e23          	sw	a0,-36(s0)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    62a0:	fdc42783          	lw	a5,-36(s0)
    62a4:	0087a703          	lw	a4,8(a5)
    62a8:	400007b7          	lui	a5,0x40000
    62ac:	00f76733          	or	a4,a4,a5
    62b0:	fdc42783          	lw	a5,-36(s0)
    62b4:	00e7a423          	sw	a4,8(a5) # 40000008 <__alt_data_end+0x3e000008>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    62b8:	fe042623          	sw	zero,-20(s0)
    62bc:	0980006f          	j	6354 <alt_file_locked+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    62c0:	000087b7          	lui	a5,0x8
    62c4:	57c78693          	addi	a3,a5,1404 # 857c <alt_fd_list>
    62c8:	fec42703          	lw	a4,-20(s0)
    62cc:	00070793          	mv	a5,a4
    62d0:	00179793          	slli	a5,a5,0x1
    62d4:	00e787b3          	add	a5,a5,a4
    62d8:	00279793          	slli	a5,a5,0x2
    62dc:	00f687b3          	add	a5,a3,a5
    62e0:	0007a703          	lw	a4,0(a5)
    62e4:	fdc42783          	lw	a5,-36(s0)
    62e8:	0007a783          	lw	a5,0(a5)
    62ec:	04f71e63          	bne	a4,a5,6348 <alt_file_locked+0xb8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    62f0:	000087b7          	lui	a5,0x8
    62f4:	57c78693          	addi	a3,a5,1404 # 857c <alt_fd_list>
    62f8:	fec42703          	lw	a4,-20(s0)
    62fc:	00070793          	mv	a5,a4
    6300:	00179793          	slli	a5,a5,0x1
    6304:	00e787b3          	add	a5,a5,a4
    6308:	00279793          	slli	a5,a5,0x2
    630c:	00f687b3          	add	a5,a3,a5
    6310:	0087a783          	lw	a5,8(a5)
    if ((alt_fd_list[i].dev == fd->dev) &&
    6314:	0207da63          	bgez	a5,6348 <alt_file_locked+0xb8>
        (&alt_fd_list[i] != fd))
    6318:	fec42703          	lw	a4,-20(s0)
    631c:	00070793          	mv	a5,a4
    6320:	00179793          	slli	a5,a5,0x1
    6324:	00e787b3          	add	a5,a5,a4
    6328:	00279793          	slli	a5,a5,0x2
    632c:	00008737          	lui	a4,0x8
    6330:	57c70713          	addi	a4,a4,1404 # 857c <alt_fd_list>
    6334:	00e787b3          	add	a5,a5,a4
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6338:	fdc42703          	lw	a4,-36(s0)
    633c:	00f70663          	beq	a4,a5,6348 <alt_file_locked+0xb8>
    {
      return -EACCES;
    6340:	ff300793          	li	a5,-13
    6344:	0280006f          	j	636c <alt_file_locked+0xdc>
  for (i = 0; i <= alt_max_fd; i++)
    6348:	fec42783          	lw	a5,-20(s0)
    634c:	00178793          	addi	a5,a5,1
    6350:	fef42623          	sw	a5,-20(s0)
    6354:	000097b7          	lui	a5,0x9
    6358:	f447a783          	lw	a5,-188(a5) # 8f44 <alt_max_fd>
    635c:	00078713          	mv	a4,a5
    6360:	fec42783          	lw	a5,-20(s0)
    6364:	f4f77ee3          	bgeu	a4,a5,62c0 <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    6368:	00000793          	li	a5,0
}
    636c:	00078513          	mv	a0,a5
    6370:	02c12403          	lw	s0,44(sp)
    6374:	03010113          	addi	sp,sp,48
    6378:	00008067          	ret

0000637c <_open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    637c:	fc010113          	addi	sp,sp,-64
    6380:	02112e23          	sw	ra,60(sp)
    6384:	02812c23          	sw	s0,56(sp)
    6388:	04010413          	addi	s0,sp,64
    638c:	fca42623          	sw	a0,-52(s0)
    6390:	fcb42423          	sw	a1,-56(s0)
    6394:	fcc42223          	sw	a2,-60(s0)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6398:	fff00793          	li	a5,-1
    639c:	fef42023          	sw	a5,-32(s0)
  int status = -ENODEV;
    63a0:	fed00793          	li	a5,-19
    63a4:	fef42223          	sw	a5,-28(s0)
  int isafs = 0;
    63a8:	fe042423          	sw	zero,-24(s0)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    63ac:	000097b7          	lui	a5,0x9
    63b0:	f3c78593          	addi	a1,a5,-196 # 8f3c <alt_dev_list>
    63b4:	fcc42503          	lw	a0,-52(s0)
    63b8:	4c8000ef          	jal	ra,6880 <alt_find_dev>
    63bc:	fca42e23          	sw	a0,-36(s0)
    63c0:	fdc42783          	lw	a5,-36(s0)
    63c4:	00079c63          	bnez	a5,63dc <_open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    63c8:	fcc42503          	lw	a0,-52(s0)
    63cc:	5d4000ef          	jal	ra,69a0 <alt_find_file>
    63d0:	fca42e23          	sw	a0,-36(s0)
    isafs = 1;
    63d4:	00100793          	li	a5,1
    63d8:	fef42423          	sw	a5,-24(s0)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    63dc:	fdc42783          	lw	a5,-36(s0)
    63e0:	0a078c63          	beqz	a5,6498 <_open+0x11c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    63e4:	fdc42503          	lw	a0,-36(s0)
    63e8:	6f4000ef          	jal	ra,6adc <alt_get_fd>
    63ec:	fea42023          	sw	a0,-32(s0)
    63f0:	fe042783          	lw	a5,-32(s0)
    63f4:	0007d863          	bgez	a5,6404 <_open+0x88>
    {
      status = index;
    63f8:	fe042783          	lw	a5,-32(s0)
    63fc:	fef42223          	sw	a5,-28(s0)
    6400:	0a00006f          	j	64a0 <_open+0x124>
    }
    else
    {
      fd = &alt_fd_list[index];
    6404:	fe042703          	lw	a4,-32(s0)
    6408:	00070793          	mv	a5,a4
    640c:	00179793          	slli	a5,a5,0x1
    6410:	00e787b3          	add	a5,a5,a4
    6414:	00279793          	slli	a5,a5,0x2
    6418:	00008737          	lui	a4,0x8
    641c:	57c70713          	addi	a4,a4,1404 # 857c <alt_fd_list>
    6420:	00e787b3          	add	a5,a5,a4
    6424:	fef42623          	sw	a5,-20(s0)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6428:	fc842703          	lw	a4,-56(s0)
    642c:	400007b7          	lui	a5,0x40000
    6430:	fff78793          	addi	a5,a5,-1 # 3fffffff <__alt_data_end+0x3dffffff>
    6434:	00f77733          	and	a4,a4,a5
    6438:	fec42783          	lw	a5,-20(s0)
    643c:	00e7a423          	sw	a4,8(a5)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    6440:	fe842783          	lw	a5,-24(s0)
    6444:	00079c63          	bnez	a5,645c <_open+0xe0>
    6448:	fec42503          	lw	a0,-20(s0)
    644c:	e45ff0ef          	jal	ra,6290 <alt_file_locked>
    6450:	fea42223          	sw	a0,-28(s0)
    6454:	fe442783          	lw	a5,-28(s0)
    6458:	0407c463          	bltz	a5,64a0 <_open+0x124>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    645c:	fdc42783          	lw	a5,-36(s0)
    6460:	00c7a783          	lw	a5,12(a5)
    6464:	02078463          	beqz	a5,648c <_open+0x110>
    6468:	fdc42783          	lw	a5,-36(s0)
    646c:	00c7a783          	lw	a5,12(a5)
    6470:	fc442683          	lw	a3,-60(s0)
    6474:	fc842603          	lw	a2,-56(s0)
    6478:	fcc42583          	lw	a1,-52(s0)
    647c:	fec42503          	lw	a0,-20(s0)
    6480:	000780e7          	jalr	a5
    6484:	00050793          	mv	a5,a0
    6488:	0080006f          	j	6490 <_open+0x114>
    648c:	00000793          	li	a5,0
    6490:	fef42223          	sw	a5,-28(s0)
    6494:	00c0006f          	j	64a0 <_open+0x124>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6498:	fed00793          	li	a5,-19
    649c:	fef42223          	sw	a5,-28(s0)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    64a0:	fe442783          	lw	a5,-28(s0)
    64a4:	0207d463          	bgez	a5,64cc <_open+0x150>
  {
    alt_release_fd (index);  
    64a8:	fe042503          	lw	a0,-32(s0)
    64ac:	da1fb0ef          	jal	ra,224c <alt_release_fd>
    ALT_ERRNO = -status;
    64b0:	d95ff0ef          	jal	ra,6244 <alt_get_errno>
    64b4:	00050713          	mv	a4,a0
    64b8:	fe442783          	lw	a5,-28(s0)
    64bc:	40f007b3          	neg	a5,a5
    64c0:	00f72023          	sw	a5,0(a4)
    return -1;
    64c4:	fff00793          	li	a5,-1
    64c8:	0080006f          	j	64d0 <_open+0x154>
  }
  
  /* return the reference upon success */

  return index;
    64cc:	fe042783          	lw	a5,-32(s0)
}
    64d0:	00078513          	mv	a0,a5
    64d4:	03c12083          	lw	ra,60(sp)
    64d8:	03812403          	lw	s0,56(sp)
    64dc:	04010113          	addi	sp,sp,64
    64e0:	00008067          	ret

000064e4 <alt_get_errno>:
{
    64e4:	ff010113          	addi	sp,sp,-16
    64e8:	00112623          	sw	ra,12(sp)
    64ec:	00812423          	sw	s0,8(sp)
    64f0:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    64f4:	000097b7          	lui	a5,0x9
    64f8:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    64fc:	00078c63          	beqz	a5,6514 <alt_get_errno+0x30>
    6500:	000097b7          	lui	a5,0x9
    6504:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    6508:	000780e7          	jalr	a5
    650c:	00050793          	mv	a5,a0
    6510:	00c0006f          	j	651c <alt_get_errno+0x38>
    6514:	0000b7b7          	lui	a5,0xb
    6518:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    651c:	00078513          	mv	a0,a5
    6520:	00c12083          	lw	ra,12(sp)
    6524:	00812403          	lw	s0,8(sp)
    6528:	01010113          	addi	sp,sp,16
    652c:	00008067          	ret

00006530 <_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    6530:	fd010113          	addi	sp,sp,-48
    6534:	02112623          	sw	ra,44(sp)
    6538:	02812423          	sw	s0,40(sp)
    653c:	03010413          	addi	s0,sp,48
    6540:	fca42e23          	sw	a0,-36(s0)
    6544:	fcb42c23          	sw	a1,-40(s0)
    6548:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    654c:	fdc42783          	lw	a5,-36(s0)
    6550:	0207c463          	bltz	a5,6578 <_read+0x48>
    6554:	fdc42703          	lw	a4,-36(s0)
    6558:	00070793          	mv	a5,a4
    655c:	00179793          	slli	a5,a5,0x1
    6560:	00e787b3          	add	a5,a5,a4
    6564:	00279793          	slli	a5,a5,0x2
    6568:	00008737          	lui	a4,0x8
    656c:	57c70713          	addi	a4,a4,1404 # 857c <alt_fd_list>
    6570:	00e787b3          	add	a5,a5,a4
    6574:	0080006f          	j	657c <_read+0x4c>
    6578:	00000793          	li	a5,0
    657c:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    6580:	fe842783          	lw	a5,-24(s0)
    6584:	08078663          	beqz	a5,6610 <_read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    6588:	fe842783          	lw	a5,-24(s0)
    658c:	0087a783          	lw	a5,8(a5)
    6590:	0037f713          	andi	a4,a5,3
    6594:	00100793          	li	a5,1
    6598:	06f70263          	beq	a4,a5,65fc <_read+0xcc>
        (fd->dev->read))
    659c:	fe842783          	lw	a5,-24(s0)
    65a0:	0007a783          	lw	a5,0(a5)
    65a4:	0147a783          	lw	a5,20(a5)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    65a8:	04078a63          	beqz	a5,65fc <_read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    65ac:	fe842783          	lw	a5,-24(s0)
    65b0:	0007a783          	lw	a5,0(a5)
    65b4:	0147a783          	lw	a5,20(a5)
    65b8:	fd442703          	lw	a4,-44(s0)
    65bc:	00070613          	mv	a2,a4
    65c0:	fd842583          	lw	a1,-40(s0)
    65c4:	fe842503          	lw	a0,-24(s0)
    65c8:	000780e7          	jalr	a5
    65cc:	fea42623          	sw	a0,-20(s0)
    65d0:	fec42783          	lw	a5,-20(s0)
    65d4:	0207d063          	bgez	a5,65f4 <_read+0xc4>
        {
          ALT_ERRNO = -rval;
    65d8:	f0dff0ef          	jal	ra,64e4 <alt_get_errno>
    65dc:	00050713          	mv	a4,a0
    65e0:	fec42783          	lw	a5,-20(s0)
    65e4:	40f007b3          	neg	a5,a5
    65e8:	00f72023          	sw	a5,0(a4)
          return -1;
    65ec:	fff00793          	li	a5,-1
    65f0:	0340006f          	j	6624 <_read+0xf4>
        }
        return rval;
    65f4:	fec42783          	lw	a5,-20(s0)
    65f8:	02c0006f          	j	6624 <_read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    65fc:	ee9ff0ef          	jal	ra,64e4 <alt_get_errno>
    6600:	00050713          	mv	a4,a0
    6604:	00d00793          	li	a5,13
    6608:	00f72023          	sw	a5,0(a4)
    660c:	0140006f          	j	6620 <_read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    6610:	ed5ff0ef          	jal	ra,64e4 <alt_get_errno>
    6614:	00050713          	mv	a4,a0
    6618:	05100793          	li	a5,81
    661c:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    6620:	fff00793          	li	a5,-1
}
    6624:	00078513          	mv	a0,a5
    6628:	02c12083          	lw	ra,44(sp)
    662c:	02812403          	lw	s0,40(sp)
    6630:	03010113          	addi	sp,sp,48
    6634:	00008067          	ret

00006638 <_sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    6638:	fc010113          	addi	sp,sp,-64
    663c:	02812e23          	sw	s0,60(sp)
    6640:	04010413          	addi	s0,sp,64
    6644:	fca42623          	sw	a0,-52(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    6648:	00800793          	li	a5,8
    664c:	3007b7f3          	csrrc	a5,mstatus,a5
    6650:	fcf42e23          	sw	a5,-36(s0)
    return context;
    6654:	fdc42783          	lw	a5,-36(s0)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    6658:	fcf42a23          	sw	a5,-44(s0)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    665c:	8341a783          	lw	a5,-1996(gp) # 8f64 <heap_end>
    6660:	00378793          	addi	a5,a5,3
    6664:	ffc7f793          	andi	a5,a5,-4
    6668:	00078713          	mv	a4,a5
    666c:	82e1aa23          	sw	a4,-1996(gp) # 8f64 <heap_end>
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    6670:	8341a703          	lw	a4,-1996(gp) # 8f64 <heap_end>
    6674:	fcc42783          	lw	a5,-52(s0)
    6678:	00f70733          	add	a4,a4,a5
    667c:	020007b7          	lui	a5,0x2000
    6680:	00078793          	mv	a5,a5
    6684:	02e7f263          	bgeu	a5,a4,66a8 <_sbrk+0x70>
    6688:	fd442783          	lw	a5,-44(s0)
    668c:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    6690:	fe042783          	lw	a5,-32(s0)
    6694:	0087f793          	andi	a5,a5,8
    6698:	3007a073          	csrs	mstatus,a5
}
    669c:	00000013          	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    66a0:	fff00793          	li	a5,-1
    66a4:	07c0006f          	j	6720 <_sbrk+0xe8>
  }
#endif

  prev_heap_end = heap_end; 
    66a8:	8341a783          	lw	a5,-1996(gp) # 8f64 <heap_end>
    66ac:	fcf42c23          	sw	a5,-40(s0)
  heap_end += incr; 
    66b0:	8341a703          	lw	a4,-1996(gp) # 8f64 <heap_end>
    66b4:	fcc42783          	lw	a5,-52(s0)
    66b8:	00f70733          	add	a4,a4,a5
    66bc:	82e1aa23          	sw	a4,-1996(gp) # 8f64 <heap_end>
 * limit register.
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  return alt_stack_limit_value; 
    66c0:	000097b7          	lui	a5,0x9
    66c4:	f307a783          	lw	a5,-208(a5) # 8f30 <alt_stack_limit_value>
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
    66c8:	fd842703          	lw	a4,-40(s0)
    66cc:	02f71c63          	bne	a4,a5,6704 <_sbrk+0xcc>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
    char * pointer;
    NIOSV_READ_SP(pointer);
    66d0:	00010793          	mv	a5,sp
    66d4:	fef42223          	sw	a5,-28(s0)

    return pointer; 
    66d8:	fe442703          	lw	a4,-28(s0)
  {
    if (alt_stack_pointer() <= heap_end)
    66dc:	8341a783          	lw	a5,-1996(gp) # 8f64 <heap_end>
    66e0:	00e7e663          	bltu	a5,a4,66ec <_sbrk+0xb4>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
    NIOSV_REPORT_STACK_OVERFLOW();
    66e4:	00100073          	ebreak
}
    66e8:	00000013          	nop
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
    66ec:	8341a783          	lw	a5,-1996(gp) # 8f64 <heap_end>
    66f0:	fef42423          	sw	a5,-24(s0)
    alt_stack_limit_value = limit;
    66f4:	000097b7          	lui	a5,0x9
    66f8:	fe842703          	lw	a4,-24(s0)
    66fc:	f2e7a823          	sw	a4,-208(a5) # 8f30 <alt_stack_limit_value>
}
    6700:	00000013          	nop
    6704:	fd442783          	lw	a5,-44(s0)
    6708:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    670c:	fec42783          	lw	a5,-20(s0)
    6710:	0087f793          	andi	a5,a5,8
    6714:	3007a073          	csrs	mstatus,a5
}
    6718:	00000013          	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    671c:	fd842783          	lw	a5,-40(s0)
}
    6720:	00078513          	mv	a0,a5
    6724:	03c12403          	lw	s0,60(sp)
    6728:	04010113          	addi	sp,sp,64
    672c:	00008067          	ret

00006730 <alt_get_errno>:
{
    6730:	ff010113          	addi	sp,sp,-16
    6734:	00112623          	sw	ra,12(sp)
    6738:	00812423          	sw	s0,8(sp)
    673c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6740:	000097b7          	lui	a5,0x9
    6744:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    6748:	00078c63          	beqz	a5,6760 <alt_get_errno+0x30>
    674c:	000097b7          	lui	a5,0x9
    6750:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    6754:	000780e7          	jalr	a5
    6758:	00050793          	mv	a5,a0
    675c:	00c0006f          	j	6768 <alt_get_errno+0x38>
    6760:	0000b7b7          	lui	a5,0xb
    6764:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    6768:	00078513          	mv	a0,a5
    676c:	00c12083          	lw	ra,12(sp)
    6770:	00812403          	lw	s0,8(sp)
    6774:	01010113          	addi	sp,sp,16
    6778:	00008067          	ret

0000677c <_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    677c:	fd010113          	addi	sp,sp,-48
    6780:	02112623          	sw	ra,44(sp)
    6784:	02812423          	sw	s0,40(sp)
    6788:	03010413          	addi	s0,sp,48
    678c:	fca42e23          	sw	a0,-36(s0)
    6790:	fcb42c23          	sw	a1,-40(s0)
    6794:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6798:	fdc42783          	lw	a5,-36(s0)
    679c:	0207c463          	bltz	a5,67c4 <_write+0x48>
    67a0:	fdc42703          	lw	a4,-36(s0)
    67a4:	00070793          	mv	a5,a4
    67a8:	00179793          	slli	a5,a5,0x1
    67ac:	00e787b3          	add	a5,a5,a4
    67b0:	00279793          	slli	a5,a5,0x2
    67b4:	00008737          	lui	a4,0x8
    67b8:	57c70713          	addi	a4,a4,1404 # 857c <alt_fd_list>
    67bc:	00e787b3          	add	a5,a5,a4
    67c0:	0080006f          	j	67c8 <_write+0x4c>
    67c4:	00000793          	li	a5,0
    67c8:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    67cc:	fe842783          	lw	a5,-24(s0)
    67d0:	08078463          	beqz	a5,6858 <_write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    67d4:	fe842783          	lw	a5,-24(s0)
    67d8:	0087a783          	lw	a5,8(a5)
    67dc:	0037f793          	andi	a5,a5,3
    67e0:	06078263          	beqz	a5,6844 <_write+0xc8>
    67e4:	fe842783          	lw	a5,-24(s0)
    67e8:	0007a783          	lw	a5,0(a5)
    67ec:	0187a783          	lw	a5,24(a5)
    67f0:	04078a63          	beqz	a5,6844 <_write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    67f4:	fe842783          	lw	a5,-24(s0)
    67f8:	0007a783          	lw	a5,0(a5)
    67fc:	0187a783          	lw	a5,24(a5)
    6800:	fd442703          	lw	a4,-44(s0)
    6804:	00070613          	mv	a2,a4
    6808:	fd842583          	lw	a1,-40(s0)
    680c:	fe842503          	lw	a0,-24(s0)
    6810:	000780e7          	jalr	a5
    6814:	fea42623          	sw	a0,-20(s0)
    6818:	fec42783          	lw	a5,-20(s0)
    681c:	0207d063          	bgez	a5,683c <_write+0xc0>
      {
        ALT_ERRNO = -rval;
    6820:	f11ff0ef          	jal	ra,6730 <alt_get_errno>
    6824:	00050713          	mv	a4,a0
    6828:	fec42783          	lw	a5,-20(s0)
    682c:	40f007b3          	neg	a5,a5
    6830:	00f72023          	sw	a5,0(a4)
        return -1;
    6834:	fff00793          	li	a5,-1
    6838:	0340006f          	j	686c <_write+0xf0>
      }
      return rval;
    683c:	fec42783          	lw	a5,-20(s0)
    6840:	02c0006f          	j	686c <_write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    6844:	eedff0ef          	jal	ra,6730 <alt_get_errno>
    6848:	00050713          	mv	a4,a0
    684c:	00d00793          	li	a5,13
    6850:	00f72023          	sw	a5,0(a4)
    6854:	0140006f          	j	6868 <_write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    6858:	ed9ff0ef          	jal	ra,6730 <alt_get_errno>
    685c:	00050713          	mv	a4,a0
    6860:	05100793          	li	a5,81
    6864:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    6868:	fff00793          	li	a5,-1
}
    686c:	00078513          	mv	a0,a5
    6870:	02c12083          	lw	ra,44(sp)
    6874:	02812403          	lw	s0,40(sp)
    6878:	03010113          	addi	sp,sp,48
    687c:	00008067          	ret

00006880 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    6880:	fd010113          	addi	sp,sp,-48
    6884:	02812623          	sw	s0,44(sp)
    6888:	03010413          	addi	s0,sp,48
    688c:	fca42e23          	sw	a0,-36(s0)
    6890:	fcb42c23          	sw	a1,-40(s0)
    alt_dev* next=NULL; 
    6894:	fe042223          	sw	zero,-28(s0)
    alt_32   len=0;
    6898:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    689c:	3e800793          	li	a5,1000
    68a0:	fef42623          	sw	a5,-20(s0)
    
    if (llist == NULL) { return NULL; }
    68a4:	fd842783          	lw	a5,-40(s0)
    68a8:	00079663          	bnez	a5,68b4 <alt_find_dev+0x34>
    68ac:	00000793          	li	a5,0
    68b0:	0e00006f          	j	6990 <alt_find_dev+0x110>
    next = (alt_dev*) llist->next;
    68b4:	fd842783          	lw	a5,-40(s0)
    68b8:	0007a783          	lw	a5,0(a5)
    68bc:	fef42223          	sw	a5,-28(s0)
    /*
     * Check each list entry in turn, until a match is found, or we reach the
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
    68c0:	0c00006f          	j	6980 <alt_find_dev+0x100>
    {
        len=0;
    68c4:	fe042423          	sw	zero,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    68c8:	0380006f          	j	6900 <alt_find_dev+0x80>
        {
            if (next->name[len] != name[len]) { break; }
    68cc:	fe442783          	lw	a5,-28(s0)
    68d0:	0087a703          	lw	a4,8(a5)
    68d4:	fe842783          	lw	a5,-24(s0)
    68d8:	00f707b3          	add	a5,a4,a5
    68dc:	0007c703          	lbu	a4,0(a5)
    68e0:	fe842783          	lw	a5,-24(s0)
    68e4:	fdc42683          	lw	a3,-36(s0)
    68e8:	00f687b3          	add	a5,a3,a5
    68ec:	0007c783          	lbu	a5,0(a5)
    68f0:	04f71663          	bne	a4,a5,693c <alt_find_dev+0xbc>
            len++;
    68f4:	fe842783          	lw	a5,-24(s0)
    68f8:	00178793          	addi	a5,a5,1
    68fc:	fef42423          	sw	a5,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    6900:	fe842783          	lw	a5,-24(s0)
    6904:	fdc42703          	lw	a4,-36(s0)
    6908:	00f707b3          	add	a5,a4,a5
    690c:	0007c783          	lbu	a5,0(a5)
    6910:	02078863          	beqz	a5,6940 <alt_find_dev+0xc0>
    6914:	fe442783          	lw	a5,-28(s0)
    6918:	0087a703          	lw	a4,8(a5)
    691c:	fe842783          	lw	a5,-24(s0)
    6920:	00f707b3          	add	a5,a4,a5
    6924:	0007c783          	lbu	a5,0(a5)
    6928:	00078c63          	beqz	a5,6940 <alt_find_dev+0xc0>
    692c:	fe842703          	lw	a4,-24(s0)
    6930:	fec42783          	lw	a5,-20(s0)
    6934:	f8f74ce3          	blt	a4,a5,68cc <alt_find_dev+0x4c>
    6938:	0080006f          	j	6940 <alt_find_dev+0xc0>
            if (next->name[len] != name[len]) { break; }
    693c:	00000013          	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
    6940:	fe842783          	lw	a5,-24(s0)
    6944:	fdc42703          	lw	a4,-36(s0)
    6948:	00f707b3          	add	a5,a4,a5
    694c:	0007c783          	lbu	a5,0(a5)
    6950:	02079263          	bnez	a5,6974 <alt_find_dev+0xf4>
    6954:	fe442783          	lw	a5,-28(s0)
    6958:	0087a703          	lw	a4,8(a5)
    695c:	fe842783          	lw	a5,-24(s0)
    6960:	00f707b3          	add	a5,a4,a5
    6964:	0007c783          	lbu	a5,0(a5)
    6968:	00079663          	bnez	a5,6974 <alt_find_dev+0xf4>
    696c:	fe442783          	lw	a5,-28(s0)
    6970:	0200006f          	j	6990 <alt_find_dev+0x110>

        next = (alt_dev*) next->llist.next;
    6974:	fe442783          	lw	a5,-28(s0)
    6978:	0007a783          	lw	a5,0(a5)
    697c:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) llist)
    6980:	fe442703          	lw	a4,-28(s0)
    6984:	fd842783          	lw	a5,-40(s0)
    6988:	f2f71ee3          	bne	a4,a5,68c4 <alt_find_dev+0x44>
    }
  
    /* No match found */
  
    return NULL;
    698c:	00000793          	li	a5,0
}
    6990:	00078513          	mv	a0,a5
    6994:	02c12403          	lw	s0,44(sp)
    6998:	03010113          	addi	sp,sp,48
    699c:	00008067          	ret

000069a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    69a0:	fd010113          	addi	sp,sp,-48
    69a4:	02812623          	sw	s0,44(sp)
    69a8:	03010413          	addi	s0,sp,48
    69ac:	fca42e23          	sw	a0,-36(s0)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
    69b0:	000097b7          	lui	a5,0x9
    69b4:	f3478793          	addi	a5,a5,-204 # 8f34 <alt_fs_list>
    69b8:	0007a783          	lw	a5,0(a5)
    69bc:	fef42223          	sw	a5,-28(s0)
    alt_32   len=0;
    69c0:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    69c4:	3e800793          	li	a5,1000
    69c8:	fef42623          	sw	a5,-20(s0)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
    69cc:	0ec0006f          	j	6ab8 <alt_find_file+0x118>
    {
        len=0;
    69d0:	fe042423          	sw	zero,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    69d4:	0bc0006f          	j	6a90 <alt_find_file+0xf0>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
    69d8:	fe442783          	lw	a5,-28(s0)
    69dc:	0087a703          	lw	a4,8(a5)
    69e0:	fe842783          	lw	a5,-24(s0)
    69e4:	00f707b3          	add	a5,a4,a5
    69e8:	0007c703          	lbu	a4,0(a5)
    69ec:	02f00793          	li	a5,47
    69f0:	02f71063          	bne	a4,a5,6a10 <alt_find_file+0x70>
    69f4:	fe442783          	lw	a5,-28(s0)
    69f8:	0087a703          	lw	a4,8(a5)
    69fc:	fe842783          	lw	a5,-24(s0)
    6a00:	00178793          	addi	a5,a5,1
    6a04:	00f707b3          	add	a5,a4,a5
    6a08:	0007c783          	lbu	a5,0(a5)
    6a0c:	00078e63          	beqz	a5,6a28 <alt_find_file+0x88>
    6a10:	fe442783          	lw	a5,-28(s0)
    6a14:	0087a703          	lw	a4,8(a5)
    6a18:	fe842783          	lw	a5,-24(s0)
    6a1c:	00f707b3          	add	a5,a4,a5
    6a20:	0007c783          	lbu	a5,0(a5)
    6a24:	02079c63          	bnez	a5,6a5c <alt_find_file+0xbc>
            { 
                if ((name[len]== '/') || (name[len] == 0))
    6a28:	fe842783          	lw	a5,-24(s0)
    6a2c:	fdc42703          	lw	a4,-36(s0)
    6a30:	00f707b3          	add	a5,a4,a5
    6a34:	0007c703          	lbu	a4,0(a5)
    6a38:	02f00793          	li	a5,47
    6a3c:	00f70c63          	beq	a4,a5,6a54 <alt_find_file+0xb4>
    6a40:	fe842783          	lw	a5,-24(s0)
    6a44:	fdc42703          	lw	a4,-36(s0)
    6a48:	00f707b3          	add	a5,a4,a5
    6a4c:	0007c783          	lbu	a5,0(a5)
    6a50:	04079863          	bnez	a5,6aa0 <alt_find_file+0x100>
                {
                    return next;
    6a54:	fe442783          	lw	a5,-28(s0)
    6a58:	0740006f          	j	6acc <alt_find_file+0x12c>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
    6a5c:	fe442783          	lw	a5,-28(s0)
    6a60:	0087a703          	lw	a4,8(a5)
    6a64:	fe842783          	lw	a5,-24(s0)
    6a68:	00f707b3          	add	a5,a4,a5
    6a6c:	0007c703          	lbu	a4,0(a5)
    6a70:	fe842783          	lw	a5,-24(s0)
    6a74:	fdc42683          	lw	a3,-36(s0)
    6a78:	00f687b3          	add	a5,a3,a5
    6a7c:	0007c783          	lbu	a5,0(a5)
    6a80:	02f71463          	bne	a4,a5,6aa8 <alt_find_file+0x108>
            len++;
    6a84:	fe842783          	lw	a5,-24(s0)
    6a88:	00178793          	addi	a5,a5,1
    6a8c:	fef42423          	sw	a5,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    6a90:	fe842703          	lw	a4,-24(s0)
    6a94:	fec42783          	lw	a5,-20(s0)
    6a98:	f4f740e3          	blt	a4,a5,69d8 <alt_find_file+0x38>
    6a9c:	0100006f          	j	6aac <alt_find_file+0x10c>
                break;
    6aa0:	00000013          	nop
    6aa4:	0080006f          	j	6aac <alt_find_file+0x10c>
            if (next->name[len]!=name[len]) { break; }
    6aa8:	00000013          	nop
        }  
        
        next = (alt_dev*) next->llist.next;
    6aac:	fe442783          	lw	a5,-28(s0)
    6ab0:	0007a783          	lw	a5,0(a5)
    6ab4:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) &alt_fs_list)
    6ab8:	fe442703          	lw	a4,-28(s0)
    6abc:	000097b7          	lui	a5,0x9
    6ac0:	f3478793          	addi	a5,a5,-204 # 8f34 <alt_fs_list>
    6ac4:	f0f716e3          	bne	a4,a5,69d0 <alt_find_file+0x30>
    }
  
    /* No match found */
  
    return NULL;     
    6ac8:	00000793          	li	a5,0
}
    6acc:	00078513          	mv	a0,a5
    6ad0:	02c12403          	lw	s0,44(sp)
    6ad4:	03010113          	addi	sp,sp,48
    6ad8:	00008067          	ret

00006adc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6adc:	fd010113          	addi	sp,sp,-48
    6ae0:	02812623          	sw	s0,44(sp)
    6ae4:	03010413          	addi	s0,sp,48
    6ae8:	fca42e23          	sw	a0,-36(s0)
  alt_32 i;
  int rc = -EMFILE;
    6aec:	fe800793          	li	a5,-24
    6af0:	fef42623          	sw	a5,-20(s0)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6af4:	fe042423          	sw	zero,-24(s0)
    6af8:	0880006f          	j	6b80 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
    6afc:	000087b7          	lui	a5,0x8
    6b00:	57c78693          	addi	a3,a5,1404 # 857c <alt_fd_list>
    6b04:	fe842703          	lw	a4,-24(s0)
    6b08:	00070793          	mv	a5,a4
    6b0c:	00179793          	slli	a5,a5,0x1
    6b10:	00e787b3          	add	a5,a5,a4
    6b14:	00279793          	slli	a5,a5,0x2
    6b18:	00f687b3          	add	a5,a3,a5
    6b1c:	0007a783          	lw	a5,0(a5)
    6b20:	04079a63          	bnez	a5,6b74 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
    6b24:	000087b7          	lui	a5,0x8
    6b28:	57c78693          	addi	a3,a5,1404 # 857c <alt_fd_list>
    6b2c:	fe842703          	lw	a4,-24(s0)
    6b30:	00070793          	mv	a5,a4
    6b34:	00179793          	slli	a5,a5,0x1
    6b38:	00e787b3          	add	a5,a5,a4
    6b3c:	00279793          	slli	a5,a5,0x2
    6b40:	00f687b3          	add	a5,a3,a5
    6b44:	fdc42703          	lw	a4,-36(s0)
    6b48:	00e7a023          	sw	a4,0(a5)
      if (i > alt_max_fd)
    6b4c:	000097b7          	lui	a5,0x9
    6b50:	f447a783          	lw	a5,-188(a5) # 8f44 <alt_max_fd>
    6b54:	fe842703          	lw	a4,-24(s0)
    6b58:	00e7d863          	bge	a5,a4,6b68 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
    6b5c:	000097b7          	lui	a5,0x9
    6b60:	fe842703          	lw	a4,-24(s0)
    6b64:	f4e7a223          	sw	a4,-188(a5) # 8f44 <alt_max_fd>
      }
      rc = i;
    6b68:	fe842783          	lw	a5,-24(s0)
    6b6c:	fef42623          	sw	a5,-20(s0)
      goto alt_get_fd_exit;
    6b70:	0200006f          	j	6b90 <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
    6b74:	fe842783          	lw	a5,-24(s0)
    6b78:	00178793          	addi	a5,a5,1
    6b7c:	fef42423          	sw	a5,-24(s0)
    6b80:	fe842703          	lw	a4,-24(s0)
    6b84:	01f00793          	li	a5,31
    6b88:	f6e7dae3          	bge	a5,a4,6afc <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    6b8c:	00000013          	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6b90:	fec42783          	lw	a5,-20(s0)
}
    6b94:	00078513          	mv	a0,a5
    6b98:	02c12403          	lw	s0,44(sp)
    6b9c:	03010113          	addi	sp,sp,48
    6ba0:	00008067          	ret

00006ba4 <__stack_chk_fail>:
    6ba4:	00001797          	auipc	a5,0x1
    6ba8:	85878793          	addi	a5,a5,-1960 # 73fc <__fini_array_end+0x8c>
    6bac:	0007af83          	lw	t6,0(a5)
    6bb0:	0047af03          	lw	t5,4(a5)
    6bb4:	0087ae83          	lw	t4,8(a5)
    6bb8:	00c7ae03          	lw	t3,12(a5)
    6bbc:	0107a303          	lw	t1,16(a5)
    6bc0:	0147a883          	lw	a7,20(a5)
    6bc4:	0187a803          	lw	a6,24(a5)
    6bc8:	0247a683          	lw	a3,36(a5)
    6bcc:	0287a703          	lw	a4,40(a5)
    6bd0:	01c7a583          	lw	a1,28(a5)
    6bd4:	0207a603          	lw	a2,32(a5)
    6bd8:	02c7c783          	lbu	a5,44(a5)
    6bdc:	fc010113          	addi	sp,sp,-64
    6be0:	00010513          	mv	a0,sp
    6be4:	02112e23          	sw	ra,60(sp)
    6be8:	01f12023          	sw	t6,0(sp)
    6bec:	01e12223          	sw	t5,4(sp)
    6bf0:	01d12423          	sw	t4,8(sp)
    6bf4:	01c12623          	sw	t3,12(sp)
    6bf8:	00612823          	sw	t1,16(sp)
    6bfc:	01112a23          	sw	a7,20(sp)
    6c00:	01012c23          	sw	a6,24(sp)
    6c04:	02d12223          	sw	a3,36(sp)
    6c08:	02e12423          	sw	a4,40(sp)
    6c0c:	02f10623          	sb	a5,44(sp)
    6c10:	00b12e23          	sw	a1,28(sp)
    6c14:	02c12023          	sw	a2,32(sp)
    6c18:	94dfd0ef          	jal	ra,4564 <strlen>
    6c1c:	00050613          	mv	a2,a0
    6c20:	00010593          	mv	a1,sp
    6c24:	00200513          	li	a0,2
    6c28:	04c000ef          	jal	ra,6c74 <write>
    6c2c:	00600513          	li	a0,6
    6c30:	2e8000ef          	jal	ra,6f18 <raise>
    6c34:	07f00513          	li	a0,127
    6c38:	a4cff0ef          	jal	ra,5e84 <_exit>

00006c3c <__stack_chk_fail_local>:
    6c3c:	ff010113          	addi	sp,sp,-16
    6c40:	00112623          	sw	ra,12(sp)
    6c44:	f61ff0ef          	jal	ra,6ba4 <__stack_chk_fail>

00006c48 <__stack_chk_init>:
    6c48:	00004797          	auipc	a5,0x4
    6c4c:	ec478793          	addi	a5,a5,-316 # ab0c <__stack_chk_guard>
    6c50:	0007a703          	lw	a4,0(a5)
    6c54:	00071663          	bnez	a4,6c60 <__stack_chk_init+0x18>
    6c58:	ff0a0737          	lui	a4,0xff0a0
    6c5c:	00e7a023          	sw	a4,0(a5)
    6c60:	00008067          	ret

00006c64 <fstat>:
    6c64:	00058613          	mv	a2,a1
    6c68:	00050593          	mv	a1,a0
    6c6c:	8241a503          	lw	a0,-2012(gp) # 8f54 <_impure_ptr>
    6c70:	f59fe06f          	j	5bc8 <_fstat_r>

00006c74 <write>:
    6c74:	00060693          	mv	a3,a2
    6c78:	00058613          	mv	a2,a1
    6c7c:	00050593          	mv	a1,a0
    6c80:	8241a503          	lw	a0,-2012(gp) # 8f54 <_impure_ptr>
    6c84:	9c1fd06f          	j	4644 <_write_r>

00006c88 <_init_signal_r>:
    6c88:	2dc52783          	lw	a5,732(a0)
    6c8c:	00078663          	beqz	a5,6c98 <_init_signal_r+0x10>
    6c90:	00000513          	li	a0,0
    6c94:	00008067          	ret
    6c98:	ff010113          	addi	sp,sp,-16
    6c9c:	08000593          	li	a1,128
    6ca0:	00812423          	sw	s0,8(sp)
    6ca4:	00112623          	sw	ra,12(sp)
    6ca8:	00050413          	mv	s0,a0
    6cac:	9d5fc0ef          	jal	ra,3680 <_malloc_r>
    6cb0:	2ca42e23          	sw	a0,732(s0)
    6cb4:	02050463          	beqz	a0,6cdc <_init_signal_r+0x54>
    6cb8:	08050793          	addi	a5,a0,128
    6cbc:	00052023          	sw	zero,0(a0)
    6cc0:	00450513          	addi	a0,a0,4
    6cc4:	fef51ce3          	bne	a0,a5,6cbc <_init_signal_r+0x34>
    6cc8:	00000513          	li	a0,0
    6ccc:	00c12083          	lw	ra,12(sp)
    6cd0:	00812403          	lw	s0,8(sp)
    6cd4:	01010113          	addi	sp,sp,16
    6cd8:	00008067          	ret
    6cdc:	fff00513          	li	a0,-1
    6ce0:	fedff06f          	j	6ccc <_init_signal_r+0x44>

00006ce4 <_signal_r>:
    6ce4:	fe010113          	addi	sp,sp,-32
    6ce8:	00912a23          	sw	s1,20(sp)
    6cec:	00112e23          	sw	ra,28(sp)
    6cf0:	00812c23          	sw	s0,24(sp)
    6cf4:	01f00793          	li	a5,31
    6cf8:	00050493          	mv	s1,a0
    6cfc:	02b7ea63          	bltu	a5,a1,6d30 <_signal_r+0x4c>
    6d00:	2dc52783          	lw	a5,732(a0)
    6d04:	00058413          	mv	s0,a1
    6d08:	02078c63          	beqz	a5,6d40 <_signal_r+0x5c>
    6d0c:	00241413          	slli	s0,s0,0x2
    6d10:	008787b3          	add	a5,a5,s0
    6d14:	0007a503          	lw	a0,0(a5)
    6d18:	00c7a023          	sw	a2,0(a5)
    6d1c:	01c12083          	lw	ra,28(sp)
    6d20:	01812403          	lw	s0,24(sp)
    6d24:	01412483          	lw	s1,20(sp)
    6d28:	02010113          	addi	sp,sp,32
    6d2c:	00008067          	ret
    6d30:	01600793          	li	a5,22
    6d34:	00f52023          	sw	a5,0(a0)
    6d38:	fff00513          	li	a0,-1
    6d3c:	fe1ff06f          	j	6d1c <_signal_r+0x38>
    6d40:	08000593          	li	a1,128
    6d44:	00c12623          	sw	a2,12(sp)
    6d48:	939fc0ef          	jal	ra,3680 <_malloc_r>
    6d4c:	2ca4ae23          	sw	a0,732(s1)
    6d50:	00c12603          	lw	a2,12(sp)
    6d54:	00050793          	mv	a5,a0
    6d58:	00050713          	mv	a4,a0
    6d5c:	08050693          	addi	a3,a0,128
    6d60:	fc050ce3          	beqz	a0,6d38 <_signal_r+0x54>
    6d64:	00072023          	sw	zero,0(a4) # ff0a0000 <__alt_data_end+0xfd0a0000>
    6d68:	00470713          	addi	a4,a4,4
    6d6c:	fed71ce3          	bne	a4,a3,6d64 <_signal_r+0x80>
    6d70:	f9dff06f          	j	6d0c <_signal_r+0x28>

00006d74 <_raise_r>:
    6d74:	ff010113          	addi	sp,sp,-16
    6d78:	00912223          	sw	s1,4(sp)
    6d7c:	00112623          	sw	ra,12(sp)
    6d80:	00812423          	sw	s0,8(sp)
    6d84:	01f00793          	li	a5,31
    6d88:	00050493          	mv	s1,a0
    6d8c:	08b7ee63          	bltu	a5,a1,6e28 <_raise_r+0xb4>
    6d90:	2dc52783          	lw	a5,732(a0)
    6d94:	00058413          	mv	s0,a1
    6d98:	04078463          	beqz	a5,6de0 <_raise_r+0x6c>
    6d9c:	00259713          	slli	a4,a1,0x2
    6da0:	00e787b3          	add	a5,a5,a4
    6da4:	0007a703          	lw	a4,0(a5)
    6da8:	02070c63          	beqz	a4,6de0 <_raise_r+0x6c>
    6dac:	00100693          	li	a3,1
    6db0:	00d70c63          	beq	a4,a3,6dc8 <_raise_r+0x54>
    6db4:	fff00693          	li	a3,-1
    6db8:	04d70863          	beq	a4,a3,6e08 <_raise_r+0x94>
    6dbc:	0007a023          	sw	zero,0(a5)
    6dc0:	00058513          	mv	a0,a1
    6dc4:	000700e7          	jalr	a4
    6dc8:	00000513          	li	a0,0
    6dcc:	00c12083          	lw	ra,12(sp)
    6dd0:	00812403          	lw	s0,8(sp)
    6dd4:	00412483          	lw	s1,4(sp)
    6dd8:	01010113          	addi	sp,sp,16
    6ddc:	00008067          	ret
    6de0:	00048513          	mv	a0,s1
    6de4:	420000ef          	jal	ra,7204 <_getpid_r>
    6de8:	00040613          	mv	a2,s0
    6dec:	00812403          	lw	s0,8(sp)
    6df0:	00c12083          	lw	ra,12(sp)
    6df4:	00050593          	mv	a1,a0
    6df8:	00048513          	mv	a0,s1
    6dfc:	00412483          	lw	s1,4(sp)
    6e00:	01010113          	addi	sp,sp,16
    6e04:	3a00006f          	j	71a4 <_kill_r>
    6e08:	00c12083          	lw	ra,12(sp)
    6e0c:	00812403          	lw	s0,8(sp)
    6e10:	01600793          	li	a5,22
    6e14:	00f52023          	sw	a5,0(a0)
    6e18:	00412483          	lw	s1,4(sp)
    6e1c:	00100513          	li	a0,1
    6e20:	01010113          	addi	sp,sp,16
    6e24:	00008067          	ret
    6e28:	01600793          	li	a5,22
    6e2c:	00f52023          	sw	a5,0(a0)
    6e30:	fff00513          	li	a0,-1
    6e34:	f99ff06f          	j	6dcc <_raise_r+0x58>

00006e38 <__sigtramp_r>:
    6e38:	01f00793          	li	a5,31
    6e3c:	0cb7ea63          	bltu	a5,a1,6f10 <__sigtramp_r+0xd8>
    6e40:	2dc52783          	lw	a5,732(a0)
    6e44:	ff010113          	addi	sp,sp,-16
    6e48:	00812423          	sw	s0,8(sp)
    6e4c:	00912223          	sw	s1,4(sp)
    6e50:	00112623          	sw	ra,12(sp)
    6e54:	00058413          	mv	s0,a1
    6e58:	00050493          	mv	s1,a0
    6e5c:	08078063          	beqz	a5,6edc <__sigtramp_r+0xa4>
    6e60:	00241713          	slli	a4,s0,0x2
    6e64:	00e787b3          	add	a5,a5,a4
    6e68:	0007a703          	lw	a4,0(a5)
    6e6c:	02070c63          	beqz	a4,6ea4 <__sigtramp_r+0x6c>
    6e70:	fff00693          	li	a3,-1
    6e74:	06d70063          	beq	a4,a3,6ed4 <__sigtramp_r+0x9c>
    6e78:	00100693          	li	a3,1
    6e7c:	04d70063          	beq	a4,a3,6ebc <__sigtramp_r+0x84>
    6e80:	00040513          	mv	a0,s0
    6e84:	0007a023          	sw	zero,0(a5)
    6e88:	000700e7          	jalr	a4
    6e8c:	00000513          	li	a0,0
    6e90:	00c12083          	lw	ra,12(sp)
    6e94:	00812403          	lw	s0,8(sp)
    6e98:	00412483          	lw	s1,4(sp)
    6e9c:	01010113          	addi	sp,sp,16
    6ea0:	00008067          	ret
    6ea4:	00c12083          	lw	ra,12(sp)
    6ea8:	00812403          	lw	s0,8(sp)
    6eac:	00412483          	lw	s1,4(sp)
    6eb0:	00100513          	li	a0,1
    6eb4:	01010113          	addi	sp,sp,16
    6eb8:	00008067          	ret
    6ebc:	00c12083          	lw	ra,12(sp)
    6ec0:	00812403          	lw	s0,8(sp)
    6ec4:	00412483          	lw	s1,4(sp)
    6ec8:	00300513          	li	a0,3
    6ecc:	01010113          	addi	sp,sp,16
    6ed0:	00008067          	ret
    6ed4:	00200513          	li	a0,2
    6ed8:	fb9ff06f          	j	6e90 <__sigtramp_r+0x58>
    6edc:	08000593          	li	a1,128
    6ee0:	fa0fc0ef          	jal	ra,3680 <_malloc_r>
    6ee4:	2ca4ae23          	sw	a0,732(s1)
    6ee8:	00050793          	mv	a5,a0
    6eec:	00050e63          	beqz	a0,6f08 <__sigtramp_r+0xd0>
    6ef0:	00050713          	mv	a4,a0
    6ef4:	08050693          	addi	a3,a0,128
    6ef8:	00072023          	sw	zero,0(a4)
    6efc:	00470713          	addi	a4,a4,4
    6f00:	fee69ce3          	bne	a3,a4,6ef8 <__sigtramp_r+0xc0>
    6f04:	f5dff06f          	j	6e60 <__sigtramp_r+0x28>
    6f08:	fff00513          	li	a0,-1
    6f0c:	f85ff06f          	j	6e90 <__sigtramp_r+0x58>
    6f10:	fff00513          	li	a0,-1
    6f14:	00008067          	ret

00006f18 <raise>:
    6f18:	ff010113          	addi	sp,sp,-16
    6f1c:	00912223          	sw	s1,4(sp)
    6f20:	00112623          	sw	ra,12(sp)
    6f24:	00812423          	sw	s0,8(sp)
    6f28:	01f00793          	li	a5,31
    6f2c:	8241a483          	lw	s1,-2012(gp) # 8f54 <_impure_ptr>
    6f30:	08a7ec63          	bltu	a5,a0,6fc8 <raise+0xb0>
    6f34:	2dc4a783          	lw	a5,732(s1)
    6f38:	00050413          	mv	s0,a0
    6f3c:	04078263          	beqz	a5,6f80 <raise+0x68>
    6f40:	00251713          	slli	a4,a0,0x2
    6f44:	00e787b3          	add	a5,a5,a4
    6f48:	0007a703          	lw	a4,0(a5)
    6f4c:	02070a63          	beqz	a4,6f80 <raise+0x68>
    6f50:	00100693          	li	a3,1
    6f54:	00d70a63          	beq	a4,a3,6f68 <raise+0x50>
    6f58:	fff00693          	li	a3,-1
    6f5c:	04d70663          	beq	a4,a3,6fa8 <raise+0x90>
    6f60:	0007a023          	sw	zero,0(a5)
    6f64:	000700e7          	jalr	a4
    6f68:	00000513          	li	a0,0
    6f6c:	00c12083          	lw	ra,12(sp)
    6f70:	00812403          	lw	s0,8(sp)
    6f74:	00412483          	lw	s1,4(sp)
    6f78:	01010113          	addi	sp,sp,16
    6f7c:	00008067          	ret
    6f80:	00048513          	mv	a0,s1
    6f84:	280000ef          	jal	ra,7204 <_getpid_r>
    6f88:	00040613          	mv	a2,s0
    6f8c:	00812403          	lw	s0,8(sp)
    6f90:	00c12083          	lw	ra,12(sp)
    6f94:	00050593          	mv	a1,a0
    6f98:	00048513          	mv	a0,s1
    6f9c:	00412483          	lw	s1,4(sp)
    6fa0:	01010113          	addi	sp,sp,16
    6fa4:	2000006f          	j	71a4 <_kill_r>
    6fa8:	00c12083          	lw	ra,12(sp)
    6fac:	00812403          	lw	s0,8(sp)
    6fb0:	01600793          	li	a5,22
    6fb4:	00f4a023          	sw	a5,0(s1)
    6fb8:	00100513          	li	a0,1
    6fbc:	00412483          	lw	s1,4(sp)
    6fc0:	01010113          	addi	sp,sp,16
    6fc4:	00008067          	ret
    6fc8:	01600793          	li	a5,22
    6fcc:	00f4a023          	sw	a5,0(s1)
    6fd0:	fff00513          	li	a0,-1
    6fd4:	f99ff06f          	j	6f6c <raise+0x54>

00006fd8 <signal>:
    6fd8:	ff010113          	addi	sp,sp,-16
    6fdc:	01212023          	sw	s2,0(sp)
    6fe0:	00112623          	sw	ra,12(sp)
    6fe4:	00812423          	sw	s0,8(sp)
    6fe8:	00912223          	sw	s1,4(sp)
    6fec:	01f00793          	li	a5,31
    6ff0:	8241a903          	lw	s2,-2012(gp) # 8f54 <_impure_ptr>
    6ff4:	02a7ee63          	bltu	a5,a0,7030 <signal+0x58>
    6ff8:	00050413          	mv	s0,a0
    6ffc:	2dc92503          	lw	a0,732(s2)
    7000:	00058493          	mv	s1,a1
    7004:	02050e63          	beqz	a0,7040 <signal+0x68>
    7008:	00241413          	slli	s0,s0,0x2
    700c:	008507b3          	add	a5,a0,s0
    7010:	0007a503          	lw	a0,0(a5)
    7014:	0097a023          	sw	s1,0(a5)
    7018:	00c12083          	lw	ra,12(sp)
    701c:	00812403          	lw	s0,8(sp)
    7020:	00412483          	lw	s1,4(sp)
    7024:	00012903          	lw	s2,0(sp)
    7028:	01010113          	addi	sp,sp,16
    702c:	00008067          	ret
    7030:	01600793          	li	a5,22
    7034:	00f92023          	sw	a5,0(s2)
    7038:	fff00513          	li	a0,-1
    703c:	fddff06f          	j	7018 <signal+0x40>
    7040:	08000593          	li	a1,128
    7044:	00090513          	mv	a0,s2
    7048:	e38fc0ef          	jal	ra,3680 <_malloc_r>
    704c:	2ca92e23          	sw	a0,732(s2)
    7050:	00050793          	mv	a5,a0
    7054:	08050713          	addi	a4,a0,128
    7058:	fe0500e3          	beqz	a0,7038 <signal+0x60>
    705c:	0007a023          	sw	zero,0(a5)
    7060:	00478793          	addi	a5,a5,4
    7064:	fee79ce3          	bne	a5,a4,705c <signal+0x84>
    7068:	fa1ff06f          	j	7008 <signal+0x30>

0000706c <_init_signal>:
    706c:	ff010113          	addi	sp,sp,-16
    7070:	00812423          	sw	s0,8(sp)
    7074:	8241a403          	lw	s0,-2012(gp) # 8f54 <_impure_ptr>
    7078:	2dc42783          	lw	a5,732(s0)
    707c:	00112623          	sw	ra,12(sp)
    7080:	00078c63          	beqz	a5,7098 <_init_signal+0x2c>
    7084:	00000513          	li	a0,0
    7088:	00c12083          	lw	ra,12(sp)
    708c:	00812403          	lw	s0,8(sp)
    7090:	01010113          	addi	sp,sp,16
    7094:	00008067          	ret
    7098:	08000593          	li	a1,128
    709c:	00040513          	mv	a0,s0
    70a0:	de0fc0ef          	jal	ra,3680 <_malloc_r>
    70a4:	2ca42e23          	sw	a0,732(s0)
    70a8:	00050c63          	beqz	a0,70c0 <_init_signal+0x54>
    70ac:	08050793          	addi	a5,a0,128
    70b0:	00052023          	sw	zero,0(a0)
    70b4:	00450513          	addi	a0,a0,4
    70b8:	fef51ce3          	bne	a0,a5,70b0 <_init_signal+0x44>
    70bc:	fc9ff06f          	j	7084 <_init_signal+0x18>
    70c0:	fff00513          	li	a0,-1
    70c4:	fc5ff06f          	j	7088 <_init_signal+0x1c>

000070c8 <__sigtramp>:
    70c8:	ff010113          	addi	sp,sp,-16
    70cc:	00912223          	sw	s1,4(sp)
    70d0:	00112623          	sw	ra,12(sp)
    70d4:	00812423          	sw	s0,8(sp)
    70d8:	01f00793          	li	a5,31
    70dc:	8241a483          	lw	s1,-2012(gp) # 8f54 <_impure_ptr>
    70e0:	0aa7ee63          	bltu	a5,a0,719c <__sigtramp+0xd4>
    70e4:	2dc4a783          	lw	a5,732(s1)
    70e8:	00050413          	mv	s0,a0
    70ec:	08078063          	beqz	a5,716c <__sigtramp+0xa4>
    70f0:	00241713          	slli	a4,s0,0x2
    70f4:	00e787b3          	add	a5,a5,a4
    70f8:	0007a703          	lw	a4,0(a5)
    70fc:	02070c63          	beqz	a4,7134 <__sigtramp+0x6c>
    7100:	fff00693          	li	a3,-1
    7104:	06d70063          	beq	a4,a3,7164 <__sigtramp+0x9c>
    7108:	00100693          	li	a3,1
    710c:	04d70063          	beq	a4,a3,714c <__sigtramp+0x84>
    7110:	00040513          	mv	a0,s0
    7114:	0007a023          	sw	zero,0(a5)
    7118:	000700e7          	jalr	a4
    711c:	00000513          	li	a0,0
    7120:	00c12083          	lw	ra,12(sp)
    7124:	00812403          	lw	s0,8(sp)
    7128:	00412483          	lw	s1,4(sp)
    712c:	01010113          	addi	sp,sp,16
    7130:	00008067          	ret
    7134:	00c12083          	lw	ra,12(sp)
    7138:	00812403          	lw	s0,8(sp)
    713c:	00412483          	lw	s1,4(sp)
    7140:	00100513          	li	a0,1
    7144:	01010113          	addi	sp,sp,16
    7148:	00008067          	ret
    714c:	00c12083          	lw	ra,12(sp)
    7150:	00812403          	lw	s0,8(sp)
    7154:	00412483          	lw	s1,4(sp)
    7158:	00300513          	li	a0,3
    715c:	01010113          	addi	sp,sp,16
    7160:	00008067          	ret
    7164:	00200513          	li	a0,2
    7168:	fb9ff06f          	j	7120 <__sigtramp+0x58>
    716c:	08000593          	li	a1,128
    7170:	00048513          	mv	a0,s1
    7174:	d0cfc0ef          	jal	ra,3680 <_malloc_r>
    7178:	2ca4ae23          	sw	a0,732(s1)
    717c:	00050793          	mv	a5,a0
    7180:	00050e63          	beqz	a0,719c <__sigtramp+0xd4>
    7184:	00050713          	mv	a4,a0
    7188:	08050693          	addi	a3,a0,128
    718c:	00072023          	sw	zero,0(a4)
    7190:	00470713          	addi	a4,a4,4
    7194:	fee69ce3          	bne	a3,a4,718c <__sigtramp+0xc4>
    7198:	f59ff06f          	j	70f0 <__sigtramp+0x28>
    719c:	fff00513          	li	a0,-1
    71a0:	f81ff06f          	j	7120 <__sigtramp+0x58>

000071a4 <_kill_r>:
    71a4:	ff010113          	addi	sp,sp,-16
    71a8:	00058713          	mv	a4,a1
    71ac:	00812423          	sw	s0,8(sp)
    71b0:	00060593          	mv	a1,a2
    71b4:	00050413          	mv	s0,a0
    71b8:	00070513          	mv	a0,a4
    71bc:	00004797          	auipc	a5,0x4
    71c0:	9407a623          	sw	zero,-1716(a5) # ab08 <errno>
    71c4:	00112623          	sw	ra,12(sp)
    71c8:	0ac000ef          	jal	ra,7274 <_kill>
    71cc:	fff00793          	li	a5,-1
    71d0:	00f50a63          	beq	a0,a5,71e4 <_kill_r+0x40>
    71d4:	00c12083          	lw	ra,12(sp)
    71d8:	00812403          	lw	s0,8(sp)
    71dc:	01010113          	addi	sp,sp,16
    71e0:	00008067          	ret
    71e4:	00004797          	auipc	a5,0x4
    71e8:	9247a783          	lw	a5,-1756(a5) # ab08 <errno>
    71ec:	fe0784e3          	beqz	a5,71d4 <_kill_r+0x30>
    71f0:	00c12083          	lw	ra,12(sp)
    71f4:	00f42023          	sw	a5,0(s0)
    71f8:	00812403          	lw	s0,8(sp)
    71fc:	01010113          	addi	sp,sp,16
    7200:	00008067          	ret

00007204 <_getpid_r>:
    7204:	0040006f          	j	7208 <_getpid>

00007208 <_getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
    7208:	ff010113          	addi	sp,sp,-16
    720c:	00812623          	sw	s0,12(sp)
    7210:	01010413          	addi	s0,sp,16
  return 0;
    7214:	00000793          	li	a5,0
}
    7218:	00078513          	mv	a0,a5
    721c:	00c12403          	lw	s0,12(sp)
    7220:	01010113          	addi	sp,sp,16
    7224:	00008067          	ret

00007228 <alt_get_errno>:
{
    7228:	ff010113          	addi	sp,sp,-16
    722c:	00112623          	sw	ra,12(sp)
    7230:	00812423          	sw	s0,8(sp)
    7234:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    7238:	000097b7          	lui	a5,0x9
    723c:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    7240:	00078c63          	beqz	a5,7258 <alt_get_errno+0x30>
    7244:	000097b7          	lui	a5,0x9
    7248:	f487a783          	lw	a5,-184(a5) # 8f48 <alt_errno>
    724c:	000780e7          	jalr	a5
    7250:	00050793          	mv	a5,a0
    7254:	00c0006f          	j	7260 <alt_get_errno+0x38>
    7258:	0000b7b7          	lui	a5,0xb
    725c:	b0878793          	addi	a5,a5,-1272 # ab08 <errno>
}
    7260:	00078513          	mv	a0,a5
    7264:	00c12083          	lw	ra,12(sp)
    7268:	00812403          	lw	s0,8(sp)
    726c:	01010113          	addi	sp,sp,16
    7270:	00008067          	ret

00007274 <_kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    7274:	fd010113          	addi	sp,sp,-48
    7278:	02112623          	sw	ra,44(sp)
    727c:	02812423          	sw	s0,40(sp)
    7280:	03010413          	addi	s0,sp,48
    7284:	fca42e23          	sw	a0,-36(s0)
    7288:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
    728c:	fe042623          	sw	zero,-20(s0)

  if (pid <= 0)
    7290:	fdc42783          	lw	a5,-36(s0)
    7294:	06f04e63          	bgtz	a5,7310 <_kill+0x9c>
  {
    switch (sig)
    7298:	fd842783          	lw	a5,-40(s0)
    729c:	08078463          	beqz	a5,7324 <_kill+0xb0>
    72a0:	fd842783          	lw	a5,-40(s0)
    72a4:	0607c063          	bltz	a5,7304 <_kill+0x90>
    72a8:	fd842703          	lw	a4,-40(s0)
    72ac:	01f00793          	li	a5,31
    72b0:	04e7ca63          	blt	a5,a4,7304 <_kill+0x90>
    72b4:	fd842703          	lw	a4,-40(s0)
    72b8:	00300793          	li	a5,3
    72bc:	04f74463          	blt	a4,a5,7304 <_kill+0x90>
    72c0:	fd842783          	lw	a5,-40(s0)
    72c4:	00100713          	li	a4,1
    72c8:	00f717b3          	sll	a5,a4,a5
    72cc:	cf810737          	lui	a4,0xcf810
    72d0:	f7870713          	addi	a4,a4,-136 # cf80ff78 <__alt_data_end+0xcd80ff78>
    72d4:	00e7f733          	and	a4,a5,a4
    72d8:	00e03733          	snez	a4,a4
    72dc:	0ff77713          	zext.b	a4,a4
    72e0:	00071e63          	bnez	a4,72fc <_kill+0x88>
    72e4:	00110737          	lui	a4,0x110
    72e8:	00e7f7b3          	and	a5,a5,a4
    72ec:	00f037b3          	snez	a5,a5
    72f0:	0ff7f793          	zext.b	a5,a5
    72f4:	02079c63          	bnez	a5,732c <_kill+0xb8>
    72f8:	00c0006f          	j	7304 <_kill+0x90>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    72fc:	00000513          	li	a0,0
    7300:	b85fe0ef          	jal	ra,5e84 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
    7304:	01600793          	li	a5,22
    7308:	fef42623          	sw	a5,-20(s0)
    730c:	0240006f          	j	7330 <_kill+0xbc>
    }
  }

  else if (pid > 0)
    7310:	fdc42783          	lw	a5,-36(s0)
    7314:	00f05e63          	blez	a5,7330 <_kill+0xbc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    7318:	00300793          	li	a5,3
    731c:	fef42623          	sw	a5,-20(s0)
    7320:	0100006f          	j	7330 <_kill+0xbc>
      break;
    7324:	00000013          	nop
    7328:	0080006f          	j	7330 <_kill+0xbc>
      break;
    732c:	00000013          	nop
  }

  if (status)
    7330:	fec42783          	lw	a5,-20(s0)
    7334:	00078e63          	beqz	a5,7350 <_kill+0xdc>
  {
    ALT_ERRNO = status;
    7338:	ef1ff0ef          	jal	ra,7228 <alt_get_errno>
    733c:	00050713          	mv	a4,a0
    7340:	fec42783          	lw	a5,-20(s0)
    7344:	00f72023          	sw	a5,0(a4) # 110000 <__alt_heap_start+0x105448>
    return -1;
    7348:	fff00793          	li	a5,-1
    734c:	0080006f          	j	7354 <_kill+0xe0>
  }

  return 0;
    7350:	00000793          	li	a5,0
}
    7354:	00078513          	mv	a0,a5
    7358:	02c12083          	lw	ra,44(sp)
    735c:	02812403          	lw	s0,40(sp)
    7360:	03010113          	addi	sp,sp,48
    7364:	00008067          	ret
    7368:	48cc                	.2byte	0x48cc
    736a:	0000                	.2byte	0x0
    736c:	6c48                	.2byte	0x6c48
	...
