// NIOSV_SOC_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.1 993

`timescale 1 ps / 1 ps
module NIOSV_SOC_mm_interconnect_0 (
		input  wire [31:0] NIOSV_M_CPU_data_manager_awaddr,                               //                                NIOSV_M_CPU_data_manager.awaddr
		input  wire [2:0]  NIOSV_M_CPU_data_manager_awprot,                               //                                                        .awprot
		input  wire        NIOSV_M_CPU_data_manager_awvalid,                              //                                                        .awvalid
		output wire        NIOSV_M_CPU_data_manager_awready,                              //                                                        .awready
		input  wire [31:0] NIOSV_M_CPU_data_manager_wdata,                                //                                                        .wdata
		input  wire [3:0]  NIOSV_M_CPU_data_manager_wstrb,                                //                                                        .wstrb
		input  wire        NIOSV_M_CPU_data_manager_wvalid,                               //                                                        .wvalid
		output wire        NIOSV_M_CPU_data_manager_wready,                               //                                                        .wready
		output wire [1:0]  NIOSV_M_CPU_data_manager_bresp,                                //                                                        .bresp
		output wire        NIOSV_M_CPU_data_manager_bvalid,                               //                                                        .bvalid
		input  wire        NIOSV_M_CPU_data_manager_bready,                               //                                                        .bready
		input  wire [31:0] NIOSV_M_CPU_data_manager_araddr,                               //                                                        .araddr
		input  wire [2:0]  NIOSV_M_CPU_data_manager_arprot,                               //                                                        .arprot
		input  wire        NIOSV_M_CPU_data_manager_arvalid,                              //                                                        .arvalid
		output wire        NIOSV_M_CPU_data_manager_arready,                              //                                                        .arready
		output wire [31:0] NIOSV_M_CPU_data_manager_rdata,                                //                                                        .rdata
		output wire [1:0]  NIOSV_M_CPU_data_manager_rresp,                                //                                                        .rresp
		output wire        NIOSV_M_CPU_data_manager_rvalid,                               //                                                        .rvalid
		input  wire        NIOSV_M_CPU_data_manager_rready,                               //                                                        .rready
		input  wire [31:0] NIOSV_M_CPU_instruction_manager_awaddr,                        //                         NIOSV_M_CPU_instruction_manager.awaddr
		input  wire [2:0]  NIOSV_M_CPU_instruction_manager_awprot,                        //                                                        .awprot
		input  wire        NIOSV_M_CPU_instruction_manager_awvalid,                       //                                                        .awvalid
		output wire        NIOSV_M_CPU_instruction_manager_awready,                       //                                                        .awready
		input  wire [31:0] NIOSV_M_CPU_instruction_manager_wdata,                         //                                                        .wdata
		input  wire [3:0]  NIOSV_M_CPU_instruction_manager_wstrb,                         //                                                        .wstrb
		input  wire        NIOSV_M_CPU_instruction_manager_wvalid,                        //                                                        .wvalid
		output wire        NIOSV_M_CPU_instruction_manager_wready,                        //                                                        .wready
		output wire [1:0]  NIOSV_M_CPU_instruction_manager_bresp,                         //                                                        .bresp
		output wire        NIOSV_M_CPU_instruction_manager_bvalid,                        //                                                        .bvalid
		input  wire        NIOSV_M_CPU_instruction_manager_bready,                        //                                                        .bready
		input  wire [31:0] NIOSV_M_CPU_instruction_manager_araddr,                        //                                                        .araddr
		input  wire [2:0]  NIOSV_M_CPU_instruction_manager_arprot,                        //                                                        .arprot
		input  wire        NIOSV_M_CPU_instruction_manager_arvalid,                       //                                                        .arvalid
		output wire        NIOSV_M_CPU_instruction_manager_arready,                       //                                                        .arready
		output wire [31:0] NIOSV_M_CPU_instruction_manager_rdata,                         //                                                        .rdata
		output wire [1:0]  NIOSV_M_CPU_instruction_manager_rresp,                         //                                                        .rresp
		output wire        NIOSV_M_CPU_instruction_manager_rvalid,                        //                                                        .rvalid
		input  wire        NIOSV_M_CPU_instruction_manager_rready,                        //                                                        .rready
		input  wire        ALTPLL_CLKS_c0_clk,                                            //                                          ALTPLL_CLKS_c0.clk
		input  wire        ALTPLL_CLKS_c2_clk,                                            //                                          ALTPLL_CLKS_c2.clk
		input  wire        IN_CLOCK_BRIDGE_out_clk_clk,                                   //                                 IN_CLOCK_BRIDGE_out_clk.clk
		input  wire        ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset, // ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire        EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset,       //       EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset.reset
		input  wire        NIOSV_M_CPU_reset_reset_bridge_in_reset_reset,                 //                 NIOSV_M_CPU_reset_reset_bridge_in_reset.reset
		output wire [1:0]  ALTPLL_CLKS_pll_slave_address,                                 //                                   ALTPLL_CLKS_pll_slave.address
		output wire        ALTPLL_CLKS_pll_slave_write,                                   //                                                        .write
		output wire        ALTPLL_CLKS_pll_slave_read,                                    //                                                        .read
		input  wire [31:0] ALTPLL_CLKS_pll_slave_readdata,                                //                                                        .readdata
		output wire [31:0] ALTPLL_CLKS_pll_slave_writedata,                               //                                                        .writedata
		output wire [2:0]  EPCS_FLASH_CONTROLLER_avl_csr_address,                         //                           EPCS_FLASH_CONTROLLER_avl_csr.address
		output wire        EPCS_FLASH_CONTROLLER_avl_csr_write,                           //                                                        .write
		output wire        EPCS_FLASH_CONTROLLER_avl_csr_read,                            //                                                        .read
		input  wire [31:0] EPCS_FLASH_CONTROLLER_avl_csr_readdata,                        //                                                        .readdata
		output wire [31:0] EPCS_FLASH_CONTROLLER_avl_csr_writedata,                       //                                                        .writedata
		input  wire        EPCS_FLASH_CONTROLLER_avl_csr_readdatavalid,                   //                                                        .readdatavalid
		input  wire        EPCS_FLASH_CONTROLLER_avl_csr_waitrequest,                     //                                                        .waitrequest
		output wire [20:0] EPCS_FLASH_CONTROLLER_avl_mem_address,                         //                           EPCS_FLASH_CONTROLLER_avl_mem.address
		output wire        EPCS_FLASH_CONTROLLER_avl_mem_write,                           //                                                        .write
		output wire        EPCS_FLASH_CONTROLLER_avl_mem_read,                            //                                                        .read
		input  wire [31:0] EPCS_FLASH_CONTROLLER_avl_mem_readdata,                        //                                                        .readdata
		output wire [31:0] EPCS_FLASH_CONTROLLER_avl_mem_writedata,                       //                                                        .writedata
		output wire [6:0]  EPCS_FLASH_CONTROLLER_avl_mem_burstcount,                      //                                                        .burstcount
		output wire [3:0]  EPCS_FLASH_CONTROLLER_avl_mem_byteenable,                      //                                                        .byteenable
		input  wire        EPCS_FLASH_CONTROLLER_avl_mem_readdatavalid,                   //                                                        .readdatavalid
		input  wire        EPCS_FLASH_CONTROLLER_avl_mem_waitrequest,                     //                                                        .waitrequest
		output wire [23:0] EXT_SDRAM_PROGMEM_s1_address,                                  //                                    EXT_SDRAM_PROGMEM_s1.address
		output wire        EXT_SDRAM_PROGMEM_s1_write,                                    //                                                        .write
		output wire        EXT_SDRAM_PROGMEM_s1_read,                                     //                                                        .read
		input  wire [15:0] EXT_SDRAM_PROGMEM_s1_readdata,                                 //                                                        .readdata
		output wire [15:0] EXT_SDRAM_PROGMEM_s1_writedata,                                //                                                        .writedata
		output wire [1:0]  EXT_SDRAM_PROGMEM_s1_byteenable,                               //                                                        .byteenable
		input  wire        EXT_SDRAM_PROGMEM_s1_readdatavalid,                            //                                                        .readdatavalid
		input  wire        EXT_SDRAM_PROGMEM_s1_waitrequest,                              //                                                        .waitrequest
		output wire        EXT_SDRAM_PROGMEM_s1_chipselect,                               //                                                        .chipselect
		output wire [1:0]  GPI0_BUTN_s1_address,                                          //                                            GPI0_BUTN_s1.address
		output wire        GPI0_BUTN_s1_write,                                            //                                                        .write
		input  wire [31:0] GPI0_BUTN_s1_readdata,                                         //                                                        .readdata
		output wire [31:0] GPI0_BUTN_s1_writedata,                                        //                                                        .writedata
		output wire        GPI0_BUTN_s1_chipselect,                                       //                                                        .chipselect
		output wire [1:0]  GPI1_DIPSW_s1_address,                                         //                                           GPI1_DIPSW_s1.address
		output wire        GPI1_DIPSW_s1_write,                                           //                                                        .write
		input  wire [31:0] GPI1_DIPSW_s1_readdata,                                        //                                                        .readdata
		output wire [31:0] GPI1_DIPSW_s1_writedata,                                       //                                                        .writedata
		output wire        GPI1_DIPSW_s1_chipselect,                                      //                                                        .chipselect
		output wire [2:0]  GPO2_LEDG_s1_address,                                          //                                            GPO2_LEDG_s1.address
		output wire        GPO2_LEDG_s1_write,                                            //                                                        .write
		input  wire [31:0] GPO2_LEDG_s1_readdata,                                         //                                                        .readdata
		output wire [31:0] GPO2_LEDG_s1_writedata,                                        //                                                        .writedata
		output wire        GPO2_LEDG_s1_chipselect,                                       //                                                        .chipselect
		output wire [0:0]  JTAG_UART_DBG_avalon_jtag_slave_address,                       //                         JTAG_UART_DBG_avalon_jtag_slave.address
		output wire        JTAG_UART_DBG_avalon_jtag_slave_write,                         //                                                        .write
		output wire        JTAG_UART_DBG_avalon_jtag_slave_read,                          //                                                        .read
		input  wire [31:0] JTAG_UART_DBG_avalon_jtag_slave_readdata,                      //                                                        .readdata
		output wire [31:0] JTAG_UART_DBG_avalon_jtag_slave_writedata,                     //                                                        .writedata
		input  wire        JTAG_UART_DBG_avalon_jtag_slave_waitrequest,                   //                                                        .waitrequest
		output wire        JTAG_UART_DBG_avalon_jtag_slave_chipselect,                    //                                                        .chipselect
		output wire [15:0] NIOSV_M_CPU_dm_agent_address,                                  //                                    NIOSV_M_CPU_dm_agent.address
		output wire        NIOSV_M_CPU_dm_agent_write,                                    //                                                        .write
		output wire        NIOSV_M_CPU_dm_agent_read,                                     //                                                        .read
		input  wire [31:0] NIOSV_M_CPU_dm_agent_readdata,                                 //                                                        .readdata
		output wire [31:0] NIOSV_M_CPU_dm_agent_writedata,                                //                                                        .writedata
		input  wire        NIOSV_M_CPU_dm_agent_readdatavalid,                            //                                                        .readdatavalid
		input  wire        NIOSV_M_CPU_dm_agent_waitrequest,                              //                                                        .waitrequest
		output wire [5:0]  NIOSV_M_CPU_timer_sw_agent_address,                            //                              NIOSV_M_CPU_timer_sw_agent.address
		output wire        NIOSV_M_CPU_timer_sw_agent_write,                              //                                                        .write
		output wire        NIOSV_M_CPU_timer_sw_agent_read,                               //                                                        .read
		input  wire [31:0] NIOSV_M_CPU_timer_sw_agent_readdata,                           //                                                        .readdata
		output wire [31:0] NIOSV_M_CPU_timer_sw_agent_writedata,                          //                                                        .writedata
		output wire [3:0]  NIOSV_M_CPU_timer_sw_agent_byteenable,                         //                                                        .byteenable
		input  wire        NIOSV_M_CPU_timer_sw_agent_readdatavalid,                      //                                                        .readdatavalid
		input  wire        NIOSV_M_CPU_timer_sw_agent_waitrequest,                        //                                                        .waitrequest
		output wire [0:0]  SOC_SYSID_control_slave_address,                               //                                 SOC_SYSID_control_slave.address
		input  wire [31:0] SOC_SYSID_control_slave_readdata,                              //                                                        .readdata
		output wire [2:0]  UART_SERIAL_COM_s1_address,                                    //                                      UART_SERIAL_COM_s1.address
		output wire        UART_SERIAL_COM_s1_write,                                      //                                                        .write
		output wire        UART_SERIAL_COM_s1_read,                                       //                                                        .read
		input  wire [15:0] UART_SERIAL_COM_s1_readdata,                                   //                                                        .readdata
		output wire [15:0] UART_SERIAL_COM_s1_writedata,                                  //                                                        .writedata
		output wire        UART_SERIAL_COM_s1_begintransfer,                              //                                                        .begintransfer
		output wire        UART_SERIAL_COM_s1_chipselect                                  //                                                        .chipselect
	);

	wire          rsp_mux_src_valid;                                                // rsp_mux:src_valid -> NIOSV_M_CPU_data_manager_agent:write_rp_valid
	wire  [121:0] rsp_mux_src_data;                                                 // rsp_mux:src_data -> NIOSV_M_CPU_data_manager_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                // NIOSV_M_CPU_data_manager_agent:write_rp_ready -> rsp_mux:src_ready
	wire   [11:0] rsp_mux_src_channel;                                              // rsp_mux:src_channel -> NIOSV_M_CPU_data_manager_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                        // rsp_mux:src_startofpacket -> NIOSV_M_CPU_data_manager_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                          // rsp_mux:src_endofpacket -> NIOSV_M_CPU_data_manager_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                            // rsp_mux_001:src_valid -> NIOSV_M_CPU_data_manager_agent:read_rp_valid
	wire  [121:0] rsp_mux_001_src_data;                                             // rsp_mux_001:src_data -> NIOSV_M_CPU_data_manager_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                            // NIOSV_M_CPU_data_manager_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire   [11:0] rsp_mux_001_src_channel;                                          // rsp_mux_001:src_channel -> NIOSV_M_CPU_data_manager_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                    // rsp_mux_001:src_startofpacket -> NIOSV_M_CPU_data_manager_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                      // rsp_mux_001:src_endofpacket -> NIOSV_M_CPU_data_manager_agent:read_rp_endofpacket
	wire   [31:0] jtag_uart_dbg_avalon_jtag_slave_agent_m0_readdata;                // JTAG_UART_DBG_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_DBG_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_m0_waitrequest;             // JTAG_UART_DBG_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_DBG_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_m0_debugaccess;             // JTAG_UART_DBG_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_DBG_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_dbg_avalon_jtag_slave_agent_m0_address;                 // JTAG_UART_DBG_avalon_jtag_slave_agent:m0_address -> JTAG_UART_DBG_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_dbg_avalon_jtag_slave_agent_m0_byteenable;              // JTAG_UART_DBG_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_DBG_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_m0_read;                    // JTAG_UART_DBG_avalon_jtag_slave_agent:m0_read -> JTAG_UART_DBG_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_m0_readdatavalid;           // JTAG_UART_DBG_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_DBG_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_m0_lock;                    // JTAG_UART_DBG_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_DBG_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_dbg_avalon_jtag_slave_agent_m0_writedata;               // JTAG_UART_DBG_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_DBG_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_m0_write;                   // JTAG_UART_DBG_avalon_jtag_slave_agent:m0_write -> JTAG_UART_DBG_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_dbg_avalon_jtag_slave_agent_m0_burstcount;              // JTAG_UART_DBG_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_DBG_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_valid;            // JTAG_UART_DBG_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_DBG_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [122:0] jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_data;             // JTAG_UART_DBG_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_DBG_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_ready;            // JTAG_UART_DBG_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_DBG_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_startofpacket;    // JTAG_UART_DBG_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_DBG_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_endofpacket;      // JTAG_UART_DBG_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_DBG_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_valid;         // JTAG_UART_DBG_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_DBG_avalon_jtag_slave_agent:rf_sink_valid
	wire  [122:0] jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_data;          // JTAG_UART_DBG_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_DBG_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_ready;         // JTAG_UART_DBG_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_DBG_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket; // JTAG_UART_DBG_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_DBG_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;   // JTAG_UART_DBG_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_DBG_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_src_valid;       // JTAG_UART_DBG_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_DBG_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_src_data;        // JTAG_UART_DBG_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_DBG_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_src_ready;       // JTAG_UART_DBG_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_DBG_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                // cmd_mux:src_valid -> JTAG_UART_DBG_avalon_jtag_slave_agent:cp_valid
	wire  [121:0] cmd_mux_src_data;                                                 // cmd_mux:src_data -> JTAG_UART_DBG_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                // JTAG_UART_DBG_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [11:0] cmd_mux_src_channel;                                              // cmd_mux:src_channel -> JTAG_UART_DBG_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                        // cmd_mux:src_startofpacket -> JTAG_UART_DBG_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                          // cmd_mux:src_endofpacket -> JTAG_UART_DBG_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] epcs_flash_controller_avl_csr_agent_m0_readdata;                  // EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_readdata -> EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_readdata
	wire          epcs_flash_controller_avl_csr_agent_m0_waitrequest;               // EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_waitrequest -> EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_waitrequest
	wire          epcs_flash_controller_avl_csr_agent_m0_debugaccess;               // EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_debugaccess -> EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_debugaccess
	wire   [31:0] epcs_flash_controller_avl_csr_agent_m0_address;                   // EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_address -> EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_address
	wire    [3:0] epcs_flash_controller_avl_csr_agent_m0_byteenable;                // EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_byteenable -> EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_byteenable
	wire          epcs_flash_controller_avl_csr_agent_m0_read;                      // EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_read -> EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_read
	wire          epcs_flash_controller_avl_csr_agent_m0_readdatavalid;             // EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_readdatavalid -> EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_readdatavalid
	wire          epcs_flash_controller_avl_csr_agent_m0_lock;                      // EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_lock -> EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_lock
	wire   [31:0] epcs_flash_controller_avl_csr_agent_m0_writedata;                 // EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_writedata -> EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_writedata
	wire          epcs_flash_controller_avl_csr_agent_m0_write;                     // EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_write -> EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_write
	wire    [2:0] epcs_flash_controller_avl_csr_agent_m0_burstcount;                // EPCS_FLASH_CONTROLLER_avl_csr_agent:m0_burstcount -> EPCS_FLASH_CONTROLLER_avl_csr_translator:uav_burstcount
	wire          epcs_flash_controller_avl_csr_agent_rf_source_valid;              // EPCS_FLASH_CONTROLLER_avl_csr_agent:rf_source_valid -> EPCS_FLASH_CONTROLLER_avl_csr_agent_rsp_fifo:in_valid
	wire  [122:0] epcs_flash_controller_avl_csr_agent_rf_source_data;               // EPCS_FLASH_CONTROLLER_avl_csr_agent:rf_source_data -> EPCS_FLASH_CONTROLLER_avl_csr_agent_rsp_fifo:in_data
	wire          epcs_flash_controller_avl_csr_agent_rf_source_ready;              // EPCS_FLASH_CONTROLLER_avl_csr_agent_rsp_fifo:in_ready -> EPCS_FLASH_CONTROLLER_avl_csr_agent:rf_source_ready
	wire          epcs_flash_controller_avl_csr_agent_rf_source_startofpacket;      // EPCS_FLASH_CONTROLLER_avl_csr_agent:rf_source_startofpacket -> EPCS_FLASH_CONTROLLER_avl_csr_agent_rsp_fifo:in_startofpacket
	wire          epcs_flash_controller_avl_csr_agent_rf_source_endofpacket;        // EPCS_FLASH_CONTROLLER_avl_csr_agent:rf_source_endofpacket -> EPCS_FLASH_CONTROLLER_avl_csr_agent_rsp_fifo:in_endofpacket
	wire          epcs_flash_controller_avl_csr_agent_rsp_fifo_out_valid;           // EPCS_FLASH_CONTROLLER_avl_csr_agent_rsp_fifo:out_valid -> EPCS_FLASH_CONTROLLER_avl_csr_agent:rf_sink_valid
	wire  [122:0] epcs_flash_controller_avl_csr_agent_rsp_fifo_out_data;            // EPCS_FLASH_CONTROLLER_avl_csr_agent_rsp_fifo:out_data -> EPCS_FLASH_CONTROLLER_avl_csr_agent:rf_sink_data
	wire          epcs_flash_controller_avl_csr_agent_rsp_fifo_out_ready;           // EPCS_FLASH_CONTROLLER_avl_csr_agent:rf_sink_ready -> EPCS_FLASH_CONTROLLER_avl_csr_agent_rsp_fifo:out_ready
	wire          epcs_flash_controller_avl_csr_agent_rsp_fifo_out_startofpacket;   // EPCS_FLASH_CONTROLLER_avl_csr_agent_rsp_fifo:out_startofpacket -> EPCS_FLASH_CONTROLLER_avl_csr_agent:rf_sink_startofpacket
	wire          epcs_flash_controller_avl_csr_agent_rsp_fifo_out_endofpacket;     // EPCS_FLASH_CONTROLLER_avl_csr_agent_rsp_fifo:out_endofpacket -> EPCS_FLASH_CONTROLLER_avl_csr_agent:rf_sink_endofpacket
	wire          epcs_flash_controller_avl_csr_agent_rdata_fifo_src_valid;         // EPCS_FLASH_CONTROLLER_avl_csr_agent:rdata_fifo_src_valid -> EPCS_FLASH_CONTROLLER_avl_csr_agent_rdata_fifo:in_valid
	wire   [33:0] epcs_flash_controller_avl_csr_agent_rdata_fifo_src_data;          // EPCS_FLASH_CONTROLLER_avl_csr_agent:rdata_fifo_src_data -> EPCS_FLASH_CONTROLLER_avl_csr_agent_rdata_fifo:in_data
	wire          epcs_flash_controller_avl_csr_agent_rdata_fifo_src_ready;         // EPCS_FLASH_CONTROLLER_avl_csr_agent_rdata_fifo:in_ready -> EPCS_FLASH_CONTROLLER_avl_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                            // cmd_mux_001:src_valid -> EPCS_FLASH_CONTROLLER_avl_csr_agent:cp_valid
	wire  [121:0] cmd_mux_001_src_data;                                             // cmd_mux_001:src_data -> EPCS_FLASH_CONTROLLER_avl_csr_agent:cp_data
	wire          cmd_mux_001_src_ready;                                            // EPCS_FLASH_CONTROLLER_avl_csr_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [11:0] cmd_mux_001_src_channel;                                          // cmd_mux_001:src_channel -> EPCS_FLASH_CONTROLLER_avl_csr_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                    // cmd_mux_001:src_startofpacket -> EPCS_FLASH_CONTROLLER_avl_csr_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                      // cmd_mux_001:src_endofpacket -> EPCS_FLASH_CONTROLLER_avl_csr_agent:cp_endofpacket
	wire   [31:0] epcs_flash_controller_avl_mem_agent_m0_readdata;                  // EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_readdata -> EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_readdata
	wire          epcs_flash_controller_avl_mem_agent_m0_waitrequest;               // EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_waitrequest -> EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_waitrequest
	wire          epcs_flash_controller_avl_mem_agent_m0_debugaccess;               // EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_debugaccess -> EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_debugaccess
	wire   [31:0] epcs_flash_controller_avl_mem_agent_m0_address;                   // EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_address -> EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_address
	wire    [3:0] epcs_flash_controller_avl_mem_agent_m0_byteenable;                // EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_byteenable -> EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_byteenable
	wire          epcs_flash_controller_avl_mem_agent_m0_read;                      // EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_read -> EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_read
	wire          epcs_flash_controller_avl_mem_agent_m0_readdatavalid;             // EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_readdatavalid -> EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_readdatavalid
	wire          epcs_flash_controller_avl_mem_agent_m0_lock;                      // EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_lock -> EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_lock
	wire   [31:0] epcs_flash_controller_avl_mem_agent_m0_writedata;                 // EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_writedata -> EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_writedata
	wire          epcs_flash_controller_avl_mem_agent_m0_write;                     // EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_write -> EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_write
	wire    [8:0] epcs_flash_controller_avl_mem_agent_m0_burstcount;                // EPCS_FLASH_CONTROLLER_avl_mem_agent:m0_burstcount -> EPCS_FLASH_CONTROLLER_avl_mem_translator:uav_burstcount
	wire          epcs_flash_controller_avl_mem_agent_rf_source_valid;              // EPCS_FLASH_CONTROLLER_avl_mem_agent:rf_source_valid -> EPCS_FLASH_CONTROLLER_avl_mem_agent_rsp_fifo:in_valid
	wire  [122:0] epcs_flash_controller_avl_mem_agent_rf_source_data;               // EPCS_FLASH_CONTROLLER_avl_mem_agent:rf_source_data -> EPCS_FLASH_CONTROLLER_avl_mem_agent_rsp_fifo:in_data
	wire          epcs_flash_controller_avl_mem_agent_rf_source_ready;              // EPCS_FLASH_CONTROLLER_avl_mem_agent_rsp_fifo:in_ready -> EPCS_FLASH_CONTROLLER_avl_mem_agent:rf_source_ready
	wire          epcs_flash_controller_avl_mem_agent_rf_source_startofpacket;      // EPCS_FLASH_CONTROLLER_avl_mem_agent:rf_source_startofpacket -> EPCS_FLASH_CONTROLLER_avl_mem_agent_rsp_fifo:in_startofpacket
	wire          epcs_flash_controller_avl_mem_agent_rf_source_endofpacket;        // EPCS_FLASH_CONTROLLER_avl_mem_agent:rf_source_endofpacket -> EPCS_FLASH_CONTROLLER_avl_mem_agent_rsp_fifo:in_endofpacket
	wire          epcs_flash_controller_avl_mem_agent_rsp_fifo_out_valid;           // EPCS_FLASH_CONTROLLER_avl_mem_agent_rsp_fifo:out_valid -> EPCS_FLASH_CONTROLLER_avl_mem_agent:rf_sink_valid
	wire  [122:0] epcs_flash_controller_avl_mem_agent_rsp_fifo_out_data;            // EPCS_FLASH_CONTROLLER_avl_mem_agent_rsp_fifo:out_data -> EPCS_FLASH_CONTROLLER_avl_mem_agent:rf_sink_data
	wire          epcs_flash_controller_avl_mem_agent_rsp_fifo_out_ready;           // EPCS_FLASH_CONTROLLER_avl_mem_agent:rf_sink_ready -> EPCS_FLASH_CONTROLLER_avl_mem_agent_rsp_fifo:out_ready
	wire          epcs_flash_controller_avl_mem_agent_rsp_fifo_out_startofpacket;   // EPCS_FLASH_CONTROLLER_avl_mem_agent_rsp_fifo:out_startofpacket -> EPCS_FLASH_CONTROLLER_avl_mem_agent:rf_sink_startofpacket
	wire          epcs_flash_controller_avl_mem_agent_rsp_fifo_out_endofpacket;     // EPCS_FLASH_CONTROLLER_avl_mem_agent_rsp_fifo:out_endofpacket -> EPCS_FLASH_CONTROLLER_avl_mem_agent:rf_sink_endofpacket
	wire          epcs_flash_controller_avl_mem_agent_rdata_fifo_src_valid;         // EPCS_FLASH_CONTROLLER_avl_mem_agent:rdata_fifo_src_valid -> EPCS_FLASH_CONTROLLER_avl_mem_agent_rdata_fifo:in_valid
	wire   [33:0] epcs_flash_controller_avl_mem_agent_rdata_fifo_src_data;          // EPCS_FLASH_CONTROLLER_avl_mem_agent:rdata_fifo_src_data -> EPCS_FLASH_CONTROLLER_avl_mem_agent_rdata_fifo:in_data
	wire          epcs_flash_controller_avl_mem_agent_rdata_fifo_src_ready;         // EPCS_FLASH_CONTROLLER_avl_mem_agent_rdata_fifo:in_ready -> EPCS_FLASH_CONTROLLER_avl_mem_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                            // cmd_mux_002:src_valid -> EPCS_FLASH_CONTROLLER_avl_mem_agent:cp_valid
	wire  [121:0] cmd_mux_002_src_data;                                             // cmd_mux_002:src_data -> EPCS_FLASH_CONTROLLER_avl_mem_agent:cp_data
	wire          cmd_mux_002_src_ready;                                            // EPCS_FLASH_CONTROLLER_avl_mem_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [11:0] cmd_mux_002_src_channel;                                          // cmd_mux_002:src_channel -> EPCS_FLASH_CONTROLLER_avl_mem_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                    // cmd_mux_002:src_startofpacket -> EPCS_FLASH_CONTROLLER_avl_mem_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                      // cmd_mux_002:src_endofpacket -> EPCS_FLASH_CONTROLLER_avl_mem_agent:cp_endofpacket
	wire   [31:0] soc_sysid_control_slave_agent_m0_readdata;                        // SOC_SYSID_control_slave_translator:uav_readdata -> SOC_SYSID_control_slave_agent:m0_readdata
	wire          soc_sysid_control_slave_agent_m0_waitrequest;                     // SOC_SYSID_control_slave_translator:uav_waitrequest -> SOC_SYSID_control_slave_agent:m0_waitrequest
	wire          soc_sysid_control_slave_agent_m0_debugaccess;                     // SOC_SYSID_control_slave_agent:m0_debugaccess -> SOC_SYSID_control_slave_translator:uav_debugaccess
	wire   [31:0] soc_sysid_control_slave_agent_m0_address;                         // SOC_SYSID_control_slave_agent:m0_address -> SOC_SYSID_control_slave_translator:uav_address
	wire    [3:0] soc_sysid_control_slave_agent_m0_byteenable;                      // SOC_SYSID_control_slave_agent:m0_byteenable -> SOC_SYSID_control_slave_translator:uav_byteenable
	wire          soc_sysid_control_slave_agent_m0_read;                            // SOC_SYSID_control_slave_agent:m0_read -> SOC_SYSID_control_slave_translator:uav_read
	wire          soc_sysid_control_slave_agent_m0_readdatavalid;                   // SOC_SYSID_control_slave_translator:uav_readdatavalid -> SOC_SYSID_control_slave_agent:m0_readdatavalid
	wire          soc_sysid_control_slave_agent_m0_lock;                            // SOC_SYSID_control_slave_agent:m0_lock -> SOC_SYSID_control_slave_translator:uav_lock
	wire   [31:0] soc_sysid_control_slave_agent_m0_writedata;                       // SOC_SYSID_control_slave_agent:m0_writedata -> SOC_SYSID_control_slave_translator:uav_writedata
	wire          soc_sysid_control_slave_agent_m0_write;                           // SOC_SYSID_control_slave_agent:m0_write -> SOC_SYSID_control_slave_translator:uav_write
	wire    [2:0] soc_sysid_control_slave_agent_m0_burstcount;                      // SOC_SYSID_control_slave_agent:m0_burstcount -> SOC_SYSID_control_slave_translator:uav_burstcount
	wire          soc_sysid_control_slave_agent_rf_source_valid;                    // SOC_SYSID_control_slave_agent:rf_source_valid -> SOC_SYSID_control_slave_agent_rsp_fifo:in_valid
	wire  [122:0] soc_sysid_control_slave_agent_rf_source_data;                     // SOC_SYSID_control_slave_agent:rf_source_data -> SOC_SYSID_control_slave_agent_rsp_fifo:in_data
	wire          soc_sysid_control_slave_agent_rf_source_ready;                    // SOC_SYSID_control_slave_agent_rsp_fifo:in_ready -> SOC_SYSID_control_slave_agent:rf_source_ready
	wire          soc_sysid_control_slave_agent_rf_source_startofpacket;            // SOC_SYSID_control_slave_agent:rf_source_startofpacket -> SOC_SYSID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          soc_sysid_control_slave_agent_rf_source_endofpacket;              // SOC_SYSID_control_slave_agent:rf_source_endofpacket -> SOC_SYSID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          soc_sysid_control_slave_agent_rsp_fifo_out_valid;                 // SOC_SYSID_control_slave_agent_rsp_fifo:out_valid -> SOC_SYSID_control_slave_agent:rf_sink_valid
	wire  [122:0] soc_sysid_control_slave_agent_rsp_fifo_out_data;                  // SOC_SYSID_control_slave_agent_rsp_fifo:out_data -> SOC_SYSID_control_slave_agent:rf_sink_data
	wire          soc_sysid_control_slave_agent_rsp_fifo_out_ready;                 // SOC_SYSID_control_slave_agent:rf_sink_ready -> SOC_SYSID_control_slave_agent_rsp_fifo:out_ready
	wire          soc_sysid_control_slave_agent_rsp_fifo_out_startofpacket;         // SOC_SYSID_control_slave_agent_rsp_fifo:out_startofpacket -> SOC_SYSID_control_slave_agent:rf_sink_startofpacket
	wire          soc_sysid_control_slave_agent_rsp_fifo_out_endofpacket;           // SOC_SYSID_control_slave_agent_rsp_fifo:out_endofpacket -> SOC_SYSID_control_slave_agent:rf_sink_endofpacket
	wire          soc_sysid_control_slave_agent_rdata_fifo_src_valid;               // SOC_SYSID_control_slave_agent:rdata_fifo_src_valid -> SOC_SYSID_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] soc_sysid_control_slave_agent_rdata_fifo_src_data;                // SOC_SYSID_control_slave_agent:rdata_fifo_src_data -> SOC_SYSID_control_slave_agent_rdata_fifo:in_data
	wire          soc_sysid_control_slave_agent_rdata_fifo_src_ready;               // SOC_SYSID_control_slave_agent_rdata_fifo:in_ready -> SOC_SYSID_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                            // cmd_mux_003:src_valid -> SOC_SYSID_control_slave_agent:cp_valid
	wire  [121:0] cmd_mux_003_src_data;                                             // cmd_mux_003:src_data -> SOC_SYSID_control_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                            // SOC_SYSID_control_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [11:0] cmd_mux_003_src_channel;                                          // cmd_mux_003:src_channel -> SOC_SYSID_control_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                    // cmd_mux_003:src_startofpacket -> SOC_SYSID_control_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                      // cmd_mux_003:src_endofpacket -> SOC_SYSID_control_slave_agent:cp_endofpacket
	wire   [31:0] niosv_m_cpu_dm_agent_agent_m0_readdata;                           // NIOSV_M_CPU_dm_agent_translator:uav_readdata -> NIOSV_M_CPU_dm_agent_agent:m0_readdata
	wire          niosv_m_cpu_dm_agent_agent_m0_waitrequest;                        // NIOSV_M_CPU_dm_agent_translator:uav_waitrequest -> NIOSV_M_CPU_dm_agent_agent:m0_waitrequest
	wire          niosv_m_cpu_dm_agent_agent_m0_debugaccess;                        // NIOSV_M_CPU_dm_agent_agent:m0_debugaccess -> NIOSV_M_CPU_dm_agent_translator:uav_debugaccess
	wire   [31:0] niosv_m_cpu_dm_agent_agent_m0_address;                            // NIOSV_M_CPU_dm_agent_agent:m0_address -> NIOSV_M_CPU_dm_agent_translator:uav_address
	wire    [3:0] niosv_m_cpu_dm_agent_agent_m0_byteenable;                         // NIOSV_M_CPU_dm_agent_agent:m0_byteenable -> NIOSV_M_CPU_dm_agent_translator:uav_byteenable
	wire          niosv_m_cpu_dm_agent_agent_m0_read;                               // NIOSV_M_CPU_dm_agent_agent:m0_read -> NIOSV_M_CPU_dm_agent_translator:uav_read
	wire          niosv_m_cpu_dm_agent_agent_m0_readdatavalid;                      // NIOSV_M_CPU_dm_agent_translator:uav_readdatavalid -> NIOSV_M_CPU_dm_agent_agent:m0_readdatavalid
	wire          niosv_m_cpu_dm_agent_agent_m0_lock;                               // NIOSV_M_CPU_dm_agent_agent:m0_lock -> NIOSV_M_CPU_dm_agent_translator:uav_lock
	wire   [31:0] niosv_m_cpu_dm_agent_agent_m0_writedata;                          // NIOSV_M_CPU_dm_agent_agent:m0_writedata -> NIOSV_M_CPU_dm_agent_translator:uav_writedata
	wire          niosv_m_cpu_dm_agent_agent_m0_write;                              // NIOSV_M_CPU_dm_agent_agent:m0_write -> NIOSV_M_CPU_dm_agent_translator:uav_write
	wire    [2:0] niosv_m_cpu_dm_agent_agent_m0_burstcount;                         // NIOSV_M_CPU_dm_agent_agent:m0_burstcount -> NIOSV_M_CPU_dm_agent_translator:uav_burstcount
	wire          niosv_m_cpu_dm_agent_agent_rf_source_valid;                       // NIOSV_M_CPU_dm_agent_agent:rf_source_valid -> NIOSV_M_CPU_dm_agent_agent_rsp_fifo:in_valid
	wire  [122:0] niosv_m_cpu_dm_agent_agent_rf_source_data;                        // NIOSV_M_CPU_dm_agent_agent:rf_source_data -> NIOSV_M_CPU_dm_agent_agent_rsp_fifo:in_data
	wire          niosv_m_cpu_dm_agent_agent_rf_source_ready;                       // NIOSV_M_CPU_dm_agent_agent_rsp_fifo:in_ready -> NIOSV_M_CPU_dm_agent_agent:rf_source_ready
	wire          niosv_m_cpu_dm_agent_agent_rf_source_startofpacket;               // NIOSV_M_CPU_dm_agent_agent:rf_source_startofpacket -> NIOSV_M_CPU_dm_agent_agent_rsp_fifo:in_startofpacket
	wire          niosv_m_cpu_dm_agent_agent_rf_source_endofpacket;                 // NIOSV_M_CPU_dm_agent_agent:rf_source_endofpacket -> NIOSV_M_CPU_dm_agent_agent_rsp_fifo:in_endofpacket
	wire          niosv_m_cpu_dm_agent_agent_rsp_fifo_out_valid;                    // NIOSV_M_CPU_dm_agent_agent_rsp_fifo:out_valid -> NIOSV_M_CPU_dm_agent_agent:rf_sink_valid
	wire  [122:0] niosv_m_cpu_dm_agent_agent_rsp_fifo_out_data;                     // NIOSV_M_CPU_dm_agent_agent_rsp_fifo:out_data -> NIOSV_M_CPU_dm_agent_agent:rf_sink_data
	wire          niosv_m_cpu_dm_agent_agent_rsp_fifo_out_ready;                    // NIOSV_M_CPU_dm_agent_agent:rf_sink_ready -> NIOSV_M_CPU_dm_agent_agent_rsp_fifo:out_ready
	wire          niosv_m_cpu_dm_agent_agent_rsp_fifo_out_startofpacket;            // NIOSV_M_CPU_dm_agent_agent_rsp_fifo:out_startofpacket -> NIOSV_M_CPU_dm_agent_agent:rf_sink_startofpacket
	wire          niosv_m_cpu_dm_agent_agent_rsp_fifo_out_endofpacket;              // NIOSV_M_CPU_dm_agent_agent_rsp_fifo:out_endofpacket -> NIOSV_M_CPU_dm_agent_agent:rf_sink_endofpacket
	wire          niosv_m_cpu_dm_agent_agent_rdata_fifo_src_valid;                  // NIOSV_M_CPU_dm_agent_agent:rdata_fifo_src_valid -> NIOSV_M_CPU_dm_agent_agent_rdata_fifo:in_valid
	wire   [33:0] niosv_m_cpu_dm_agent_agent_rdata_fifo_src_data;                   // NIOSV_M_CPU_dm_agent_agent:rdata_fifo_src_data -> NIOSV_M_CPU_dm_agent_agent_rdata_fifo:in_data
	wire          niosv_m_cpu_dm_agent_agent_rdata_fifo_src_ready;                  // NIOSV_M_CPU_dm_agent_agent_rdata_fifo:in_ready -> NIOSV_M_CPU_dm_agent_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                            // cmd_mux_004:src_valid -> NIOSV_M_CPU_dm_agent_agent:cp_valid
	wire  [121:0] cmd_mux_004_src_data;                                             // cmd_mux_004:src_data -> NIOSV_M_CPU_dm_agent_agent:cp_data
	wire          cmd_mux_004_src_ready;                                            // NIOSV_M_CPU_dm_agent_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [11:0] cmd_mux_004_src_channel;                                          // cmd_mux_004:src_channel -> NIOSV_M_CPU_dm_agent_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                    // cmd_mux_004:src_startofpacket -> NIOSV_M_CPU_dm_agent_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                      // cmd_mux_004:src_endofpacket -> NIOSV_M_CPU_dm_agent_agent:cp_endofpacket
	wire   [31:0] altpll_clks_pll_slave_agent_m0_readdata;                          // ALTPLL_CLKS_pll_slave_translator:uav_readdata -> ALTPLL_CLKS_pll_slave_agent:m0_readdata
	wire          altpll_clks_pll_slave_agent_m0_waitrequest;                       // ALTPLL_CLKS_pll_slave_translator:uav_waitrequest -> ALTPLL_CLKS_pll_slave_agent:m0_waitrequest
	wire          altpll_clks_pll_slave_agent_m0_debugaccess;                       // ALTPLL_CLKS_pll_slave_agent:m0_debugaccess -> ALTPLL_CLKS_pll_slave_translator:uav_debugaccess
	wire   [31:0] altpll_clks_pll_slave_agent_m0_address;                           // ALTPLL_CLKS_pll_slave_agent:m0_address -> ALTPLL_CLKS_pll_slave_translator:uav_address
	wire    [3:0] altpll_clks_pll_slave_agent_m0_byteenable;                        // ALTPLL_CLKS_pll_slave_agent:m0_byteenable -> ALTPLL_CLKS_pll_slave_translator:uav_byteenable
	wire          altpll_clks_pll_slave_agent_m0_read;                              // ALTPLL_CLKS_pll_slave_agent:m0_read -> ALTPLL_CLKS_pll_slave_translator:uav_read
	wire          altpll_clks_pll_slave_agent_m0_readdatavalid;                     // ALTPLL_CLKS_pll_slave_translator:uav_readdatavalid -> ALTPLL_CLKS_pll_slave_agent:m0_readdatavalid
	wire          altpll_clks_pll_slave_agent_m0_lock;                              // ALTPLL_CLKS_pll_slave_agent:m0_lock -> ALTPLL_CLKS_pll_slave_translator:uav_lock
	wire   [31:0] altpll_clks_pll_slave_agent_m0_writedata;                         // ALTPLL_CLKS_pll_slave_agent:m0_writedata -> ALTPLL_CLKS_pll_slave_translator:uav_writedata
	wire          altpll_clks_pll_slave_agent_m0_write;                             // ALTPLL_CLKS_pll_slave_agent:m0_write -> ALTPLL_CLKS_pll_slave_translator:uav_write
	wire    [2:0] altpll_clks_pll_slave_agent_m0_burstcount;                        // ALTPLL_CLKS_pll_slave_agent:m0_burstcount -> ALTPLL_CLKS_pll_slave_translator:uav_burstcount
	wire          altpll_clks_pll_slave_agent_rf_source_valid;                      // ALTPLL_CLKS_pll_slave_agent:rf_source_valid -> ALTPLL_CLKS_pll_slave_agent_rsp_fifo:in_valid
	wire  [122:0] altpll_clks_pll_slave_agent_rf_source_data;                       // ALTPLL_CLKS_pll_slave_agent:rf_source_data -> ALTPLL_CLKS_pll_slave_agent_rsp_fifo:in_data
	wire          altpll_clks_pll_slave_agent_rf_source_ready;                      // ALTPLL_CLKS_pll_slave_agent_rsp_fifo:in_ready -> ALTPLL_CLKS_pll_slave_agent:rf_source_ready
	wire          altpll_clks_pll_slave_agent_rf_source_startofpacket;              // ALTPLL_CLKS_pll_slave_agent:rf_source_startofpacket -> ALTPLL_CLKS_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          altpll_clks_pll_slave_agent_rf_source_endofpacket;                // ALTPLL_CLKS_pll_slave_agent:rf_source_endofpacket -> ALTPLL_CLKS_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          altpll_clks_pll_slave_agent_rsp_fifo_out_valid;                   // ALTPLL_CLKS_pll_slave_agent_rsp_fifo:out_valid -> ALTPLL_CLKS_pll_slave_agent:rf_sink_valid
	wire  [122:0] altpll_clks_pll_slave_agent_rsp_fifo_out_data;                    // ALTPLL_CLKS_pll_slave_agent_rsp_fifo:out_data -> ALTPLL_CLKS_pll_slave_agent:rf_sink_data
	wire          altpll_clks_pll_slave_agent_rsp_fifo_out_ready;                   // ALTPLL_CLKS_pll_slave_agent:rf_sink_ready -> ALTPLL_CLKS_pll_slave_agent_rsp_fifo:out_ready
	wire          altpll_clks_pll_slave_agent_rsp_fifo_out_startofpacket;           // ALTPLL_CLKS_pll_slave_agent_rsp_fifo:out_startofpacket -> ALTPLL_CLKS_pll_slave_agent:rf_sink_startofpacket
	wire          altpll_clks_pll_slave_agent_rsp_fifo_out_endofpacket;             // ALTPLL_CLKS_pll_slave_agent_rsp_fifo:out_endofpacket -> ALTPLL_CLKS_pll_slave_agent:rf_sink_endofpacket
	wire          altpll_clks_pll_slave_agent_rdata_fifo_src_valid;                 // ALTPLL_CLKS_pll_slave_agent:rdata_fifo_src_valid -> ALTPLL_CLKS_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] altpll_clks_pll_slave_agent_rdata_fifo_src_data;                  // ALTPLL_CLKS_pll_slave_agent:rdata_fifo_src_data -> ALTPLL_CLKS_pll_slave_agent_rdata_fifo:in_data
	wire          altpll_clks_pll_slave_agent_rdata_fifo_src_ready;                 // ALTPLL_CLKS_pll_slave_agent_rdata_fifo:in_ready -> ALTPLL_CLKS_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                            // cmd_mux_005:src_valid -> ALTPLL_CLKS_pll_slave_agent:cp_valid
	wire  [121:0] cmd_mux_005_src_data;                                             // cmd_mux_005:src_data -> ALTPLL_CLKS_pll_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                            // ALTPLL_CLKS_pll_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [11:0] cmd_mux_005_src_channel;                                          // cmd_mux_005:src_channel -> ALTPLL_CLKS_pll_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                    // cmd_mux_005:src_startofpacket -> ALTPLL_CLKS_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                      // cmd_mux_005:src_endofpacket -> ALTPLL_CLKS_pll_slave_agent:cp_endofpacket
	wire   [31:0] uart_serial_com_s1_agent_m0_readdata;                             // UART_SERIAL_COM_s1_translator:uav_readdata -> UART_SERIAL_COM_s1_agent:m0_readdata
	wire          uart_serial_com_s1_agent_m0_waitrequest;                          // UART_SERIAL_COM_s1_translator:uav_waitrequest -> UART_SERIAL_COM_s1_agent:m0_waitrequest
	wire          uart_serial_com_s1_agent_m0_debugaccess;                          // UART_SERIAL_COM_s1_agent:m0_debugaccess -> UART_SERIAL_COM_s1_translator:uav_debugaccess
	wire   [31:0] uart_serial_com_s1_agent_m0_address;                              // UART_SERIAL_COM_s1_agent:m0_address -> UART_SERIAL_COM_s1_translator:uav_address
	wire    [3:0] uart_serial_com_s1_agent_m0_byteenable;                           // UART_SERIAL_COM_s1_agent:m0_byteenable -> UART_SERIAL_COM_s1_translator:uav_byteenable
	wire          uart_serial_com_s1_agent_m0_read;                                 // UART_SERIAL_COM_s1_agent:m0_read -> UART_SERIAL_COM_s1_translator:uav_read
	wire          uart_serial_com_s1_agent_m0_readdatavalid;                        // UART_SERIAL_COM_s1_translator:uav_readdatavalid -> UART_SERIAL_COM_s1_agent:m0_readdatavalid
	wire          uart_serial_com_s1_agent_m0_lock;                                 // UART_SERIAL_COM_s1_agent:m0_lock -> UART_SERIAL_COM_s1_translator:uav_lock
	wire   [31:0] uart_serial_com_s1_agent_m0_writedata;                            // UART_SERIAL_COM_s1_agent:m0_writedata -> UART_SERIAL_COM_s1_translator:uav_writedata
	wire          uart_serial_com_s1_agent_m0_write;                                // UART_SERIAL_COM_s1_agent:m0_write -> UART_SERIAL_COM_s1_translator:uav_write
	wire    [2:0] uart_serial_com_s1_agent_m0_burstcount;                           // UART_SERIAL_COM_s1_agent:m0_burstcount -> UART_SERIAL_COM_s1_translator:uav_burstcount
	wire          uart_serial_com_s1_agent_rf_source_valid;                         // UART_SERIAL_COM_s1_agent:rf_source_valid -> UART_SERIAL_COM_s1_agent_rsp_fifo:in_valid
	wire  [122:0] uart_serial_com_s1_agent_rf_source_data;                          // UART_SERIAL_COM_s1_agent:rf_source_data -> UART_SERIAL_COM_s1_agent_rsp_fifo:in_data
	wire          uart_serial_com_s1_agent_rf_source_ready;                         // UART_SERIAL_COM_s1_agent_rsp_fifo:in_ready -> UART_SERIAL_COM_s1_agent:rf_source_ready
	wire          uart_serial_com_s1_agent_rf_source_startofpacket;                 // UART_SERIAL_COM_s1_agent:rf_source_startofpacket -> UART_SERIAL_COM_s1_agent_rsp_fifo:in_startofpacket
	wire          uart_serial_com_s1_agent_rf_source_endofpacket;                   // UART_SERIAL_COM_s1_agent:rf_source_endofpacket -> UART_SERIAL_COM_s1_agent_rsp_fifo:in_endofpacket
	wire          uart_serial_com_s1_agent_rsp_fifo_out_valid;                      // UART_SERIAL_COM_s1_agent_rsp_fifo:out_valid -> UART_SERIAL_COM_s1_agent:rf_sink_valid
	wire  [122:0] uart_serial_com_s1_agent_rsp_fifo_out_data;                       // UART_SERIAL_COM_s1_agent_rsp_fifo:out_data -> UART_SERIAL_COM_s1_agent:rf_sink_data
	wire          uart_serial_com_s1_agent_rsp_fifo_out_ready;                      // UART_SERIAL_COM_s1_agent:rf_sink_ready -> UART_SERIAL_COM_s1_agent_rsp_fifo:out_ready
	wire          uart_serial_com_s1_agent_rsp_fifo_out_startofpacket;              // UART_SERIAL_COM_s1_agent_rsp_fifo:out_startofpacket -> UART_SERIAL_COM_s1_agent:rf_sink_startofpacket
	wire          uart_serial_com_s1_agent_rsp_fifo_out_endofpacket;                // UART_SERIAL_COM_s1_agent_rsp_fifo:out_endofpacket -> UART_SERIAL_COM_s1_agent:rf_sink_endofpacket
	wire          uart_serial_com_s1_agent_rdata_fifo_src_valid;                    // UART_SERIAL_COM_s1_agent:rdata_fifo_src_valid -> UART_SERIAL_COM_s1_agent_rdata_fifo:in_valid
	wire   [33:0] uart_serial_com_s1_agent_rdata_fifo_src_data;                     // UART_SERIAL_COM_s1_agent:rdata_fifo_src_data -> UART_SERIAL_COM_s1_agent_rdata_fifo:in_data
	wire          uart_serial_com_s1_agent_rdata_fifo_src_ready;                    // UART_SERIAL_COM_s1_agent_rdata_fifo:in_ready -> UART_SERIAL_COM_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                            // cmd_mux_006:src_valid -> UART_SERIAL_COM_s1_agent:cp_valid
	wire  [121:0] cmd_mux_006_src_data;                                             // cmd_mux_006:src_data -> UART_SERIAL_COM_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                            // UART_SERIAL_COM_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [11:0] cmd_mux_006_src_channel;                                          // cmd_mux_006:src_channel -> UART_SERIAL_COM_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                    // cmd_mux_006:src_startofpacket -> UART_SERIAL_COM_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                      // cmd_mux_006:src_endofpacket -> UART_SERIAL_COM_s1_agent:cp_endofpacket
	wire   [31:0] gpi0_butn_s1_agent_m0_readdata;                                   // GPI0_BUTN_s1_translator:uav_readdata -> GPI0_BUTN_s1_agent:m0_readdata
	wire          gpi0_butn_s1_agent_m0_waitrequest;                                // GPI0_BUTN_s1_translator:uav_waitrequest -> GPI0_BUTN_s1_agent:m0_waitrequest
	wire          gpi0_butn_s1_agent_m0_debugaccess;                                // GPI0_BUTN_s1_agent:m0_debugaccess -> GPI0_BUTN_s1_translator:uav_debugaccess
	wire   [31:0] gpi0_butn_s1_agent_m0_address;                                    // GPI0_BUTN_s1_agent:m0_address -> GPI0_BUTN_s1_translator:uav_address
	wire    [3:0] gpi0_butn_s1_agent_m0_byteenable;                                 // GPI0_BUTN_s1_agent:m0_byteenable -> GPI0_BUTN_s1_translator:uav_byteenable
	wire          gpi0_butn_s1_agent_m0_read;                                       // GPI0_BUTN_s1_agent:m0_read -> GPI0_BUTN_s1_translator:uav_read
	wire          gpi0_butn_s1_agent_m0_readdatavalid;                              // GPI0_BUTN_s1_translator:uav_readdatavalid -> GPI0_BUTN_s1_agent:m0_readdatavalid
	wire          gpi0_butn_s1_agent_m0_lock;                                       // GPI0_BUTN_s1_agent:m0_lock -> GPI0_BUTN_s1_translator:uav_lock
	wire   [31:0] gpi0_butn_s1_agent_m0_writedata;                                  // GPI0_BUTN_s1_agent:m0_writedata -> GPI0_BUTN_s1_translator:uav_writedata
	wire          gpi0_butn_s1_agent_m0_write;                                      // GPI0_BUTN_s1_agent:m0_write -> GPI0_BUTN_s1_translator:uav_write
	wire    [2:0] gpi0_butn_s1_agent_m0_burstcount;                                 // GPI0_BUTN_s1_agent:m0_burstcount -> GPI0_BUTN_s1_translator:uav_burstcount
	wire          gpi0_butn_s1_agent_rf_source_valid;                               // GPI0_BUTN_s1_agent:rf_source_valid -> GPI0_BUTN_s1_agent_rsp_fifo:in_valid
	wire  [122:0] gpi0_butn_s1_agent_rf_source_data;                                // GPI0_BUTN_s1_agent:rf_source_data -> GPI0_BUTN_s1_agent_rsp_fifo:in_data
	wire          gpi0_butn_s1_agent_rf_source_ready;                               // GPI0_BUTN_s1_agent_rsp_fifo:in_ready -> GPI0_BUTN_s1_agent:rf_source_ready
	wire          gpi0_butn_s1_agent_rf_source_startofpacket;                       // GPI0_BUTN_s1_agent:rf_source_startofpacket -> GPI0_BUTN_s1_agent_rsp_fifo:in_startofpacket
	wire          gpi0_butn_s1_agent_rf_source_endofpacket;                         // GPI0_BUTN_s1_agent:rf_source_endofpacket -> GPI0_BUTN_s1_agent_rsp_fifo:in_endofpacket
	wire          gpi0_butn_s1_agent_rsp_fifo_out_valid;                            // GPI0_BUTN_s1_agent_rsp_fifo:out_valid -> GPI0_BUTN_s1_agent:rf_sink_valid
	wire  [122:0] gpi0_butn_s1_agent_rsp_fifo_out_data;                             // GPI0_BUTN_s1_agent_rsp_fifo:out_data -> GPI0_BUTN_s1_agent:rf_sink_data
	wire          gpi0_butn_s1_agent_rsp_fifo_out_ready;                            // GPI0_BUTN_s1_agent:rf_sink_ready -> GPI0_BUTN_s1_agent_rsp_fifo:out_ready
	wire          gpi0_butn_s1_agent_rsp_fifo_out_startofpacket;                    // GPI0_BUTN_s1_agent_rsp_fifo:out_startofpacket -> GPI0_BUTN_s1_agent:rf_sink_startofpacket
	wire          gpi0_butn_s1_agent_rsp_fifo_out_endofpacket;                      // GPI0_BUTN_s1_agent_rsp_fifo:out_endofpacket -> GPI0_BUTN_s1_agent:rf_sink_endofpacket
	wire          gpi0_butn_s1_agent_rdata_fifo_src_valid;                          // GPI0_BUTN_s1_agent:rdata_fifo_src_valid -> GPI0_BUTN_s1_agent_rdata_fifo:in_valid
	wire   [33:0] gpi0_butn_s1_agent_rdata_fifo_src_data;                           // GPI0_BUTN_s1_agent:rdata_fifo_src_data -> GPI0_BUTN_s1_agent_rdata_fifo:in_data
	wire          gpi0_butn_s1_agent_rdata_fifo_src_ready;                          // GPI0_BUTN_s1_agent_rdata_fifo:in_ready -> GPI0_BUTN_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                            // cmd_mux_007:src_valid -> GPI0_BUTN_s1_agent:cp_valid
	wire  [121:0] cmd_mux_007_src_data;                                             // cmd_mux_007:src_data -> GPI0_BUTN_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                            // GPI0_BUTN_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [11:0] cmd_mux_007_src_channel;                                          // cmd_mux_007:src_channel -> GPI0_BUTN_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                    // cmd_mux_007:src_startofpacket -> GPI0_BUTN_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                      // cmd_mux_007:src_endofpacket -> GPI0_BUTN_s1_agent:cp_endofpacket
	wire   [31:0] gpi1_dipsw_s1_agent_m0_readdata;                                  // GPI1_DIPSW_s1_translator:uav_readdata -> GPI1_DIPSW_s1_agent:m0_readdata
	wire          gpi1_dipsw_s1_agent_m0_waitrequest;                               // GPI1_DIPSW_s1_translator:uav_waitrequest -> GPI1_DIPSW_s1_agent:m0_waitrequest
	wire          gpi1_dipsw_s1_agent_m0_debugaccess;                               // GPI1_DIPSW_s1_agent:m0_debugaccess -> GPI1_DIPSW_s1_translator:uav_debugaccess
	wire   [31:0] gpi1_dipsw_s1_agent_m0_address;                                   // GPI1_DIPSW_s1_agent:m0_address -> GPI1_DIPSW_s1_translator:uav_address
	wire    [3:0] gpi1_dipsw_s1_agent_m0_byteenable;                                // GPI1_DIPSW_s1_agent:m0_byteenable -> GPI1_DIPSW_s1_translator:uav_byteenable
	wire          gpi1_dipsw_s1_agent_m0_read;                                      // GPI1_DIPSW_s1_agent:m0_read -> GPI1_DIPSW_s1_translator:uav_read
	wire          gpi1_dipsw_s1_agent_m0_readdatavalid;                             // GPI1_DIPSW_s1_translator:uav_readdatavalid -> GPI1_DIPSW_s1_agent:m0_readdatavalid
	wire          gpi1_dipsw_s1_agent_m0_lock;                                      // GPI1_DIPSW_s1_agent:m0_lock -> GPI1_DIPSW_s1_translator:uav_lock
	wire   [31:0] gpi1_dipsw_s1_agent_m0_writedata;                                 // GPI1_DIPSW_s1_agent:m0_writedata -> GPI1_DIPSW_s1_translator:uav_writedata
	wire          gpi1_dipsw_s1_agent_m0_write;                                     // GPI1_DIPSW_s1_agent:m0_write -> GPI1_DIPSW_s1_translator:uav_write
	wire    [2:0] gpi1_dipsw_s1_agent_m0_burstcount;                                // GPI1_DIPSW_s1_agent:m0_burstcount -> GPI1_DIPSW_s1_translator:uav_burstcount
	wire          gpi1_dipsw_s1_agent_rf_source_valid;                              // GPI1_DIPSW_s1_agent:rf_source_valid -> GPI1_DIPSW_s1_agent_rsp_fifo:in_valid
	wire  [122:0] gpi1_dipsw_s1_agent_rf_source_data;                               // GPI1_DIPSW_s1_agent:rf_source_data -> GPI1_DIPSW_s1_agent_rsp_fifo:in_data
	wire          gpi1_dipsw_s1_agent_rf_source_ready;                              // GPI1_DIPSW_s1_agent_rsp_fifo:in_ready -> GPI1_DIPSW_s1_agent:rf_source_ready
	wire          gpi1_dipsw_s1_agent_rf_source_startofpacket;                      // GPI1_DIPSW_s1_agent:rf_source_startofpacket -> GPI1_DIPSW_s1_agent_rsp_fifo:in_startofpacket
	wire          gpi1_dipsw_s1_agent_rf_source_endofpacket;                        // GPI1_DIPSW_s1_agent:rf_source_endofpacket -> GPI1_DIPSW_s1_agent_rsp_fifo:in_endofpacket
	wire          gpi1_dipsw_s1_agent_rsp_fifo_out_valid;                           // GPI1_DIPSW_s1_agent_rsp_fifo:out_valid -> GPI1_DIPSW_s1_agent:rf_sink_valid
	wire  [122:0] gpi1_dipsw_s1_agent_rsp_fifo_out_data;                            // GPI1_DIPSW_s1_agent_rsp_fifo:out_data -> GPI1_DIPSW_s1_agent:rf_sink_data
	wire          gpi1_dipsw_s1_agent_rsp_fifo_out_ready;                           // GPI1_DIPSW_s1_agent:rf_sink_ready -> GPI1_DIPSW_s1_agent_rsp_fifo:out_ready
	wire          gpi1_dipsw_s1_agent_rsp_fifo_out_startofpacket;                   // GPI1_DIPSW_s1_agent_rsp_fifo:out_startofpacket -> GPI1_DIPSW_s1_agent:rf_sink_startofpacket
	wire          gpi1_dipsw_s1_agent_rsp_fifo_out_endofpacket;                     // GPI1_DIPSW_s1_agent_rsp_fifo:out_endofpacket -> GPI1_DIPSW_s1_agent:rf_sink_endofpacket
	wire          gpi1_dipsw_s1_agent_rdata_fifo_src_valid;                         // GPI1_DIPSW_s1_agent:rdata_fifo_src_valid -> GPI1_DIPSW_s1_agent_rdata_fifo:in_valid
	wire   [33:0] gpi1_dipsw_s1_agent_rdata_fifo_src_data;                          // GPI1_DIPSW_s1_agent:rdata_fifo_src_data -> GPI1_DIPSW_s1_agent_rdata_fifo:in_data
	wire          gpi1_dipsw_s1_agent_rdata_fifo_src_ready;                         // GPI1_DIPSW_s1_agent_rdata_fifo:in_ready -> GPI1_DIPSW_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_valid;                                            // cmd_mux_008:src_valid -> GPI1_DIPSW_s1_agent:cp_valid
	wire  [121:0] cmd_mux_008_src_data;                                             // cmd_mux_008:src_data -> GPI1_DIPSW_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                            // GPI1_DIPSW_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [11:0] cmd_mux_008_src_channel;                                          // cmd_mux_008:src_channel -> GPI1_DIPSW_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                    // cmd_mux_008:src_startofpacket -> GPI1_DIPSW_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                      // cmd_mux_008:src_endofpacket -> GPI1_DIPSW_s1_agent:cp_endofpacket
	wire   [31:0] gpo2_ledg_s1_agent_m0_readdata;                                   // GPO2_LEDG_s1_translator:uav_readdata -> GPO2_LEDG_s1_agent:m0_readdata
	wire          gpo2_ledg_s1_agent_m0_waitrequest;                                // GPO2_LEDG_s1_translator:uav_waitrequest -> GPO2_LEDG_s1_agent:m0_waitrequest
	wire          gpo2_ledg_s1_agent_m0_debugaccess;                                // GPO2_LEDG_s1_agent:m0_debugaccess -> GPO2_LEDG_s1_translator:uav_debugaccess
	wire   [31:0] gpo2_ledg_s1_agent_m0_address;                                    // GPO2_LEDG_s1_agent:m0_address -> GPO2_LEDG_s1_translator:uav_address
	wire    [3:0] gpo2_ledg_s1_agent_m0_byteenable;                                 // GPO2_LEDG_s1_agent:m0_byteenable -> GPO2_LEDG_s1_translator:uav_byteenable
	wire          gpo2_ledg_s1_agent_m0_read;                                       // GPO2_LEDG_s1_agent:m0_read -> GPO2_LEDG_s1_translator:uav_read
	wire          gpo2_ledg_s1_agent_m0_readdatavalid;                              // GPO2_LEDG_s1_translator:uav_readdatavalid -> GPO2_LEDG_s1_agent:m0_readdatavalid
	wire          gpo2_ledg_s1_agent_m0_lock;                                       // GPO2_LEDG_s1_agent:m0_lock -> GPO2_LEDG_s1_translator:uav_lock
	wire   [31:0] gpo2_ledg_s1_agent_m0_writedata;                                  // GPO2_LEDG_s1_agent:m0_writedata -> GPO2_LEDG_s1_translator:uav_writedata
	wire          gpo2_ledg_s1_agent_m0_write;                                      // GPO2_LEDG_s1_agent:m0_write -> GPO2_LEDG_s1_translator:uav_write
	wire    [2:0] gpo2_ledg_s1_agent_m0_burstcount;                                 // GPO2_LEDG_s1_agent:m0_burstcount -> GPO2_LEDG_s1_translator:uav_burstcount
	wire          gpo2_ledg_s1_agent_rf_source_valid;                               // GPO2_LEDG_s1_agent:rf_source_valid -> GPO2_LEDG_s1_agent_rsp_fifo:in_valid
	wire  [122:0] gpo2_ledg_s1_agent_rf_source_data;                                // GPO2_LEDG_s1_agent:rf_source_data -> GPO2_LEDG_s1_agent_rsp_fifo:in_data
	wire          gpo2_ledg_s1_agent_rf_source_ready;                               // GPO2_LEDG_s1_agent_rsp_fifo:in_ready -> GPO2_LEDG_s1_agent:rf_source_ready
	wire          gpo2_ledg_s1_agent_rf_source_startofpacket;                       // GPO2_LEDG_s1_agent:rf_source_startofpacket -> GPO2_LEDG_s1_agent_rsp_fifo:in_startofpacket
	wire          gpo2_ledg_s1_agent_rf_source_endofpacket;                         // GPO2_LEDG_s1_agent:rf_source_endofpacket -> GPO2_LEDG_s1_agent_rsp_fifo:in_endofpacket
	wire          gpo2_ledg_s1_agent_rsp_fifo_out_valid;                            // GPO2_LEDG_s1_agent_rsp_fifo:out_valid -> GPO2_LEDG_s1_agent:rf_sink_valid
	wire  [122:0] gpo2_ledg_s1_agent_rsp_fifo_out_data;                             // GPO2_LEDG_s1_agent_rsp_fifo:out_data -> GPO2_LEDG_s1_agent:rf_sink_data
	wire          gpo2_ledg_s1_agent_rsp_fifo_out_ready;                            // GPO2_LEDG_s1_agent:rf_sink_ready -> GPO2_LEDG_s1_agent_rsp_fifo:out_ready
	wire          gpo2_ledg_s1_agent_rsp_fifo_out_startofpacket;                    // GPO2_LEDG_s1_agent_rsp_fifo:out_startofpacket -> GPO2_LEDG_s1_agent:rf_sink_startofpacket
	wire          gpo2_ledg_s1_agent_rsp_fifo_out_endofpacket;                      // GPO2_LEDG_s1_agent_rsp_fifo:out_endofpacket -> GPO2_LEDG_s1_agent:rf_sink_endofpacket
	wire          gpo2_ledg_s1_agent_rdata_fifo_src_valid;                          // GPO2_LEDG_s1_agent:rdata_fifo_src_valid -> GPO2_LEDG_s1_agent_rdata_fifo:in_valid
	wire   [33:0] gpo2_ledg_s1_agent_rdata_fifo_src_data;                           // GPO2_LEDG_s1_agent:rdata_fifo_src_data -> GPO2_LEDG_s1_agent_rdata_fifo:in_data
	wire          gpo2_ledg_s1_agent_rdata_fifo_src_ready;                          // GPO2_LEDG_s1_agent_rdata_fifo:in_ready -> GPO2_LEDG_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                            // cmd_mux_009:src_valid -> GPO2_LEDG_s1_agent:cp_valid
	wire  [121:0] cmd_mux_009_src_data;                                             // cmd_mux_009:src_data -> GPO2_LEDG_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                            // GPO2_LEDG_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [11:0] cmd_mux_009_src_channel;                                          // cmd_mux_009:src_channel -> GPO2_LEDG_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                    // cmd_mux_009:src_startofpacket -> GPO2_LEDG_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                      // cmd_mux_009:src_endofpacket -> GPO2_LEDG_s1_agent:cp_endofpacket
	wire   [15:0] ext_sdram_progmem_s1_agent_m0_readdata;                           // EXT_SDRAM_PROGMEM_s1_translator:uav_readdata -> EXT_SDRAM_PROGMEM_s1_agent:m0_readdata
	wire          ext_sdram_progmem_s1_agent_m0_waitrequest;                        // EXT_SDRAM_PROGMEM_s1_translator:uav_waitrequest -> EXT_SDRAM_PROGMEM_s1_agent:m0_waitrequest
	wire          ext_sdram_progmem_s1_agent_m0_debugaccess;                        // EXT_SDRAM_PROGMEM_s1_agent:m0_debugaccess -> EXT_SDRAM_PROGMEM_s1_translator:uav_debugaccess
	wire   [31:0] ext_sdram_progmem_s1_agent_m0_address;                            // EXT_SDRAM_PROGMEM_s1_agent:m0_address -> EXT_SDRAM_PROGMEM_s1_translator:uav_address
	wire    [1:0] ext_sdram_progmem_s1_agent_m0_byteenable;                         // EXT_SDRAM_PROGMEM_s1_agent:m0_byteenable -> EXT_SDRAM_PROGMEM_s1_translator:uav_byteenable
	wire          ext_sdram_progmem_s1_agent_m0_read;                               // EXT_SDRAM_PROGMEM_s1_agent:m0_read -> EXT_SDRAM_PROGMEM_s1_translator:uav_read
	wire          ext_sdram_progmem_s1_agent_m0_readdatavalid;                      // EXT_SDRAM_PROGMEM_s1_translator:uav_readdatavalid -> EXT_SDRAM_PROGMEM_s1_agent:m0_readdatavalid
	wire          ext_sdram_progmem_s1_agent_m0_lock;                               // EXT_SDRAM_PROGMEM_s1_agent:m0_lock -> EXT_SDRAM_PROGMEM_s1_translator:uav_lock
	wire   [15:0] ext_sdram_progmem_s1_agent_m0_writedata;                          // EXT_SDRAM_PROGMEM_s1_agent:m0_writedata -> EXT_SDRAM_PROGMEM_s1_translator:uav_writedata
	wire          ext_sdram_progmem_s1_agent_m0_write;                              // EXT_SDRAM_PROGMEM_s1_agent:m0_write -> EXT_SDRAM_PROGMEM_s1_translator:uav_write
	wire    [1:0] ext_sdram_progmem_s1_agent_m0_burstcount;                         // EXT_SDRAM_PROGMEM_s1_agent:m0_burstcount -> EXT_SDRAM_PROGMEM_s1_translator:uav_burstcount
	wire          ext_sdram_progmem_s1_agent_rf_source_valid;                       // EXT_SDRAM_PROGMEM_s1_agent:rf_source_valid -> EXT_SDRAM_PROGMEM_s1_agent_rsp_fifo:in_valid
	wire  [104:0] ext_sdram_progmem_s1_agent_rf_source_data;                        // EXT_SDRAM_PROGMEM_s1_agent:rf_source_data -> EXT_SDRAM_PROGMEM_s1_agent_rsp_fifo:in_data
	wire          ext_sdram_progmem_s1_agent_rf_source_ready;                       // EXT_SDRAM_PROGMEM_s1_agent_rsp_fifo:in_ready -> EXT_SDRAM_PROGMEM_s1_agent:rf_source_ready
	wire          ext_sdram_progmem_s1_agent_rf_source_startofpacket;               // EXT_SDRAM_PROGMEM_s1_agent:rf_source_startofpacket -> EXT_SDRAM_PROGMEM_s1_agent_rsp_fifo:in_startofpacket
	wire          ext_sdram_progmem_s1_agent_rf_source_endofpacket;                 // EXT_SDRAM_PROGMEM_s1_agent:rf_source_endofpacket -> EXT_SDRAM_PROGMEM_s1_agent_rsp_fifo:in_endofpacket
	wire          ext_sdram_progmem_s1_agent_rsp_fifo_out_valid;                    // EXT_SDRAM_PROGMEM_s1_agent_rsp_fifo:out_valid -> EXT_SDRAM_PROGMEM_s1_agent:rf_sink_valid
	wire  [104:0] ext_sdram_progmem_s1_agent_rsp_fifo_out_data;                     // EXT_SDRAM_PROGMEM_s1_agent_rsp_fifo:out_data -> EXT_SDRAM_PROGMEM_s1_agent:rf_sink_data
	wire          ext_sdram_progmem_s1_agent_rsp_fifo_out_ready;                    // EXT_SDRAM_PROGMEM_s1_agent:rf_sink_ready -> EXT_SDRAM_PROGMEM_s1_agent_rsp_fifo:out_ready
	wire          ext_sdram_progmem_s1_agent_rsp_fifo_out_startofpacket;            // EXT_SDRAM_PROGMEM_s1_agent_rsp_fifo:out_startofpacket -> EXT_SDRAM_PROGMEM_s1_agent:rf_sink_startofpacket
	wire          ext_sdram_progmem_s1_agent_rsp_fifo_out_endofpacket;              // EXT_SDRAM_PROGMEM_s1_agent_rsp_fifo:out_endofpacket -> EXT_SDRAM_PROGMEM_s1_agent:rf_sink_endofpacket
	wire          ext_sdram_progmem_s1_agent_rdata_fifo_src_valid;                  // EXT_SDRAM_PROGMEM_s1_agent:rdata_fifo_src_valid -> EXT_SDRAM_PROGMEM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] ext_sdram_progmem_s1_agent_rdata_fifo_src_data;                   // EXT_SDRAM_PROGMEM_s1_agent:rdata_fifo_src_data -> EXT_SDRAM_PROGMEM_s1_agent_rdata_fifo:in_data
	wire          ext_sdram_progmem_s1_agent_rdata_fifo_src_ready;                  // EXT_SDRAM_PROGMEM_s1_agent_rdata_fifo:in_ready -> EXT_SDRAM_PROGMEM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] niosv_m_cpu_timer_sw_agent_agent_m0_readdata;                     // NIOSV_M_CPU_timer_sw_agent_translator:uav_readdata -> NIOSV_M_CPU_timer_sw_agent_agent:m0_readdata
	wire          niosv_m_cpu_timer_sw_agent_agent_m0_waitrequest;                  // NIOSV_M_CPU_timer_sw_agent_translator:uav_waitrequest -> NIOSV_M_CPU_timer_sw_agent_agent:m0_waitrequest
	wire          niosv_m_cpu_timer_sw_agent_agent_m0_debugaccess;                  // NIOSV_M_CPU_timer_sw_agent_agent:m0_debugaccess -> NIOSV_M_CPU_timer_sw_agent_translator:uav_debugaccess
	wire   [31:0] niosv_m_cpu_timer_sw_agent_agent_m0_address;                      // NIOSV_M_CPU_timer_sw_agent_agent:m0_address -> NIOSV_M_CPU_timer_sw_agent_translator:uav_address
	wire    [3:0] niosv_m_cpu_timer_sw_agent_agent_m0_byteenable;                   // NIOSV_M_CPU_timer_sw_agent_agent:m0_byteenable -> NIOSV_M_CPU_timer_sw_agent_translator:uav_byteenable
	wire          niosv_m_cpu_timer_sw_agent_agent_m0_read;                         // NIOSV_M_CPU_timer_sw_agent_agent:m0_read -> NIOSV_M_CPU_timer_sw_agent_translator:uav_read
	wire          niosv_m_cpu_timer_sw_agent_agent_m0_readdatavalid;                // NIOSV_M_CPU_timer_sw_agent_translator:uav_readdatavalid -> NIOSV_M_CPU_timer_sw_agent_agent:m0_readdatavalid
	wire          niosv_m_cpu_timer_sw_agent_agent_m0_lock;                         // NIOSV_M_CPU_timer_sw_agent_agent:m0_lock -> NIOSV_M_CPU_timer_sw_agent_translator:uav_lock
	wire   [31:0] niosv_m_cpu_timer_sw_agent_agent_m0_writedata;                    // NIOSV_M_CPU_timer_sw_agent_agent:m0_writedata -> NIOSV_M_CPU_timer_sw_agent_translator:uav_writedata
	wire          niosv_m_cpu_timer_sw_agent_agent_m0_write;                        // NIOSV_M_CPU_timer_sw_agent_agent:m0_write -> NIOSV_M_CPU_timer_sw_agent_translator:uav_write
	wire    [2:0] niosv_m_cpu_timer_sw_agent_agent_m0_burstcount;                   // NIOSV_M_CPU_timer_sw_agent_agent:m0_burstcount -> NIOSV_M_CPU_timer_sw_agent_translator:uav_burstcount
	wire          niosv_m_cpu_timer_sw_agent_agent_rf_source_valid;                 // NIOSV_M_CPU_timer_sw_agent_agent:rf_source_valid -> NIOSV_M_CPU_timer_sw_agent_agent_rsp_fifo:in_valid
	wire  [122:0] niosv_m_cpu_timer_sw_agent_agent_rf_source_data;                  // NIOSV_M_CPU_timer_sw_agent_agent:rf_source_data -> NIOSV_M_CPU_timer_sw_agent_agent_rsp_fifo:in_data
	wire          niosv_m_cpu_timer_sw_agent_agent_rf_source_ready;                 // NIOSV_M_CPU_timer_sw_agent_agent_rsp_fifo:in_ready -> NIOSV_M_CPU_timer_sw_agent_agent:rf_source_ready
	wire          niosv_m_cpu_timer_sw_agent_agent_rf_source_startofpacket;         // NIOSV_M_CPU_timer_sw_agent_agent:rf_source_startofpacket -> NIOSV_M_CPU_timer_sw_agent_agent_rsp_fifo:in_startofpacket
	wire          niosv_m_cpu_timer_sw_agent_agent_rf_source_endofpacket;           // NIOSV_M_CPU_timer_sw_agent_agent:rf_source_endofpacket -> NIOSV_M_CPU_timer_sw_agent_agent_rsp_fifo:in_endofpacket
	wire          niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_valid;              // NIOSV_M_CPU_timer_sw_agent_agent_rsp_fifo:out_valid -> NIOSV_M_CPU_timer_sw_agent_agent:rf_sink_valid
	wire  [122:0] niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_data;               // NIOSV_M_CPU_timer_sw_agent_agent_rsp_fifo:out_data -> NIOSV_M_CPU_timer_sw_agent_agent:rf_sink_data
	wire          niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_ready;              // NIOSV_M_CPU_timer_sw_agent_agent:rf_sink_ready -> NIOSV_M_CPU_timer_sw_agent_agent_rsp_fifo:out_ready
	wire          niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_startofpacket;      // NIOSV_M_CPU_timer_sw_agent_agent_rsp_fifo:out_startofpacket -> NIOSV_M_CPU_timer_sw_agent_agent:rf_sink_startofpacket
	wire          niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_endofpacket;        // NIOSV_M_CPU_timer_sw_agent_agent_rsp_fifo:out_endofpacket -> NIOSV_M_CPU_timer_sw_agent_agent:rf_sink_endofpacket
	wire          niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_src_valid;            // NIOSV_M_CPU_timer_sw_agent_agent:rdata_fifo_src_valid -> NIOSV_M_CPU_timer_sw_agent_agent_rdata_fifo:in_valid
	wire   [33:0] niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_src_data;             // NIOSV_M_CPU_timer_sw_agent_agent:rdata_fifo_src_data -> NIOSV_M_CPU_timer_sw_agent_agent_rdata_fifo:in_data
	wire          niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_src_ready;            // NIOSV_M_CPU_timer_sw_agent_agent_rdata_fifo:in_ready -> NIOSV_M_CPU_timer_sw_agent_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_valid;                                            // cmd_mux_011:src_valid -> NIOSV_M_CPU_timer_sw_agent_agent:cp_valid
	wire  [121:0] cmd_mux_011_src_data;                                             // cmd_mux_011:src_data -> NIOSV_M_CPU_timer_sw_agent_agent:cp_data
	wire          cmd_mux_011_src_ready;                                            // NIOSV_M_CPU_timer_sw_agent_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [11:0] cmd_mux_011_src_channel;                                          // cmd_mux_011:src_channel -> NIOSV_M_CPU_timer_sw_agent_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                    // cmd_mux_011:src_startofpacket -> NIOSV_M_CPU_timer_sw_agent_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                      // cmd_mux_011:src_endofpacket -> NIOSV_M_CPU_timer_sw_agent_agent:cp_endofpacket
	wire          niosv_m_cpu_data_manager_agent_write_cp_valid;                    // NIOSV_M_CPU_data_manager_agent:write_cp_valid -> router:sink_valid
	wire  [121:0] niosv_m_cpu_data_manager_agent_write_cp_data;                     // NIOSV_M_CPU_data_manager_agent:write_cp_data -> router:sink_data
	wire          niosv_m_cpu_data_manager_agent_write_cp_ready;                    // router:sink_ready -> NIOSV_M_CPU_data_manager_agent:write_cp_ready
	wire          niosv_m_cpu_data_manager_agent_write_cp_startofpacket;            // NIOSV_M_CPU_data_manager_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          niosv_m_cpu_data_manager_agent_write_cp_endofpacket;              // NIOSV_M_CPU_data_manager_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [121:0] router_src_data;                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                 // cmd_demux:sink_ready -> router:src_ready
	wire   [11:0] router_src_channel;                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          niosv_m_cpu_data_manager_agent_read_cp_valid;                     // NIOSV_M_CPU_data_manager_agent:read_cp_valid -> router_001:sink_valid
	wire  [121:0] niosv_m_cpu_data_manager_agent_read_cp_data;                      // NIOSV_M_CPU_data_manager_agent:read_cp_data -> router_001:sink_data
	wire          niosv_m_cpu_data_manager_agent_read_cp_ready;                     // router_001:sink_ready -> NIOSV_M_CPU_data_manager_agent:read_cp_ready
	wire          niosv_m_cpu_data_manager_agent_read_cp_startofpacket;             // NIOSV_M_CPU_data_manager_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          niosv_m_cpu_data_manager_agent_read_cp_endofpacket;               // NIOSV_M_CPU_data_manager_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                             // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [121:0] router_001_src_data;                                              // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                             // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [11:0] router_001_src_channel;                                           // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                     // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                       // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          niosv_m_cpu_instruction_manager_agent_write_cp_valid;             // NIOSV_M_CPU_instruction_manager_agent:write_cp_valid -> router_002:sink_valid
	wire  [121:0] niosv_m_cpu_instruction_manager_agent_write_cp_data;              // NIOSV_M_CPU_instruction_manager_agent:write_cp_data -> router_002:sink_data
	wire          niosv_m_cpu_instruction_manager_agent_write_cp_ready;             // router_002:sink_ready -> NIOSV_M_CPU_instruction_manager_agent:write_cp_ready
	wire          niosv_m_cpu_instruction_manager_agent_write_cp_startofpacket;     // NIOSV_M_CPU_instruction_manager_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          niosv_m_cpu_instruction_manager_agent_write_cp_endofpacket;       // NIOSV_M_CPU_instruction_manager_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          niosv_m_cpu_instruction_manager_agent_read_cp_valid;              // NIOSV_M_CPU_instruction_manager_agent:read_cp_valid -> router_003:sink_valid
	wire  [121:0] niosv_m_cpu_instruction_manager_agent_read_cp_data;               // NIOSV_M_CPU_instruction_manager_agent:read_cp_data -> router_003:sink_data
	wire          niosv_m_cpu_instruction_manager_agent_read_cp_ready;              // router_003:sink_ready -> NIOSV_M_CPU_instruction_manager_agent:read_cp_ready
	wire          niosv_m_cpu_instruction_manager_agent_read_cp_startofpacket;      // NIOSV_M_CPU_instruction_manager_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          niosv_m_cpu_instruction_manager_agent_read_cp_endofpacket;        // NIOSV_M_CPU_instruction_manager_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rp_valid;                   // JTAG_UART_DBG_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	wire  [121:0] jtag_uart_dbg_avalon_jtag_slave_agent_rp_data;                    // JTAG_UART_DBG_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rp_ready;                   // router_004:sink_ready -> JTAG_UART_DBG_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rp_startofpacket;           // JTAG_UART_DBG_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rp_endofpacket;             // JTAG_UART_DBG_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                             // router_004:src_valid -> rsp_demux:sink_valid
	wire  [121:0] router_004_src_data;                                              // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                             // rsp_demux:sink_ready -> router_004:src_ready
	wire   [11:0] router_004_src_channel;                                           // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                     // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                       // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          epcs_flash_controller_avl_csr_agent_rp_valid;                     // EPCS_FLASH_CONTROLLER_avl_csr_agent:rp_valid -> router_005:sink_valid
	wire  [121:0] epcs_flash_controller_avl_csr_agent_rp_data;                      // EPCS_FLASH_CONTROLLER_avl_csr_agent:rp_data -> router_005:sink_data
	wire          epcs_flash_controller_avl_csr_agent_rp_ready;                     // router_005:sink_ready -> EPCS_FLASH_CONTROLLER_avl_csr_agent:rp_ready
	wire          epcs_flash_controller_avl_csr_agent_rp_startofpacket;             // EPCS_FLASH_CONTROLLER_avl_csr_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          epcs_flash_controller_avl_csr_agent_rp_endofpacket;               // EPCS_FLASH_CONTROLLER_avl_csr_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                             // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [121:0] router_005_src_data;                                              // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                             // rsp_demux_001:sink_ready -> router_005:src_ready
	wire   [11:0] router_005_src_channel;                                           // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                     // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                       // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          epcs_flash_controller_avl_mem_agent_rp_valid;                     // EPCS_FLASH_CONTROLLER_avl_mem_agent:rp_valid -> router_006:sink_valid
	wire  [121:0] epcs_flash_controller_avl_mem_agent_rp_data;                      // EPCS_FLASH_CONTROLLER_avl_mem_agent:rp_data -> router_006:sink_data
	wire          epcs_flash_controller_avl_mem_agent_rp_ready;                     // router_006:sink_ready -> EPCS_FLASH_CONTROLLER_avl_mem_agent:rp_ready
	wire          epcs_flash_controller_avl_mem_agent_rp_startofpacket;             // EPCS_FLASH_CONTROLLER_avl_mem_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          epcs_flash_controller_avl_mem_agent_rp_endofpacket;               // EPCS_FLASH_CONTROLLER_avl_mem_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                             // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [121:0] router_006_src_data;                                              // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                             // rsp_demux_002:sink_ready -> router_006:src_ready
	wire   [11:0] router_006_src_channel;                                           // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                     // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                       // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          soc_sysid_control_slave_agent_rp_valid;                           // SOC_SYSID_control_slave_agent:rp_valid -> router_007:sink_valid
	wire  [121:0] soc_sysid_control_slave_agent_rp_data;                            // SOC_SYSID_control_slave_agent:rp_data -> router_007:sink_data
	wire          soc_sysid_control_slave_agent_rp_ready;                           // router_007:sink_ready -> SOC_SYSID_control_slave_agent:rp_ready
	wire          soc_sysid_control_slave_agent_rp_startofpacket;                   // SOC_SYSID_control_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          soc_sysid_control_slave_agent_rp_endofpacket;                     // SOC_SYSID_control_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                             // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [121:0] router_007_src_data;                                              // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                             // rsp_demux_003:sink_ready -> router_007:src_ready
	wire   [11:0] router_007_src_channel;                                           // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                     // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                       // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          niosv_m_cpu_dm_agent_agent_rp_valid;                              // NIOSV_M_CPU_dm_agent_agent:rp_valid -> router_008:sink_valid
	wire  [121:0] niosv_m_cpu_dm_agent_agent_rp_data;                               // NIOSV_M_CPU_dm_agent_agent:rp_data -> router_008:sink_data
	wire          niosv_m_cpu_dm_agent_agent_rp_ready;                              // router_008:sink_ready -> NIOSV_M_CPU_dm_agent_agent:rp_ready
	wire          niosv_m_cpu_dm_agent_agent_rp_startofpacket;                      // NIOSV_M_CPU_dm_agent_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          niosv_m_cpu_dm_agent_agent_rp_endofpacket;                        // NIOSV_M_CPU_dm_agent_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                             // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [121:0] router_008_src_data;                                              // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                             // rsp_demux_004:sink_ready -> router_008:src_ready
	wire   [11:0] router_008_src_channel;                                           // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                     // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                       // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          altpll_clks_pll_slave_agent_rp_valid;                             // ALTPLL_CLKS_pll_slave_agent:rp_valid -> router_009:sink_valid
	wire  [121:0] altpll_clks_pll_slave_agent_rp_data;                              // ALTPLL_CLKS_pll_slave_agent:rp_data -> router_009:sink_data
	wire          altpll_clks_pll_slave_agent_rp_ready;                             // router_009:sink_ready -> ALTPLL_CLKS_pll_slave_agent:rp_ready
	wire          altpll_clks_pll_slave_agent_rp_startofpacket;                     // ALTPLL_CLKS_pll_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          altpll_clks_pll_slave_agent_rp_endofpacket;                       // ALTPLL_CLKS_pll_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                             // router_009:src_valid -> rsp_demux_005:sink_valid
	wire  [121:0] router_009_src_data;                                              // router_009:src_data -> rsp_demux_005:sink_data
	wire          router_009_src_ready;                                             // rsp_demux_005:sink_ready -> router_009:src_ready
	wire   [11:0] router_009_src_channel;                                           // router_009:src_channel -> rsp_demux_005:sink_channel
	wire          router_009_src_startofpacket;                                     // router_009:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_009_src_endofpacket;                                       // router_009:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          uart_serial_com_s1_agent_rp_valid;                                // UART_SERIAL_COM_s1_agent:rp_valid -> router_010:sink_valid
	wire  [121:0] uart_serial_com_s1_agent_rp_data;                                 // UART_SERIAL_COM_s1_agent:rp_data -> router_010:sink_data
	wire          uart_serial_com_s1_agent_rp_ready;                                // router_010:sink_ready -> UART_SERIAL_COM_s1_agent:rp_ready
	wire          uart_serial_com_s1_agent_rp_startofpacket;                        // UART_SERIAL_COM_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          uart_serial_com_s1_agent_rp_endofpacket;                          // UART_SERIAL_COM_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                             // router_010:src_valid -> rsp_demux_006:sink_valid
	wire  [121:0] router_010_src_data;                                              // router_010:src_data -> rsp_demux_006:sink_data
	wire          router_010_src_ready;                                             // rsp_demux_006:sink_ready -> router_010:src_ready
	wire   [11:0] router_010_src_channel;                                           // router_010:src_channel -> rsp_demux_006:sink_channel
	wire          router_010_src_startofpacket;                                     // router_010:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_010_src_endofpacket;                                       // router_010:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          gpi0_butn_s1_agent_rp_valid;                                      // GPI0_BUTN_s1_agent:rp_valid -> router_011:sink_valid
	wire  [121:0] gpi0_butn_s1_agent_rp_data;                                       // GPI0_BUTN_s1_agent:rp_data -> router_011:sink_data
	wire          gpi0_butn_s1_agent_rp_ready;                                      // router_011:sink_ready -> GPI0_BUTN_s1_agent:rp_ready
	wire          gpi0_butn_s1_agent_rp_startofpacket;                              // GPI0_BUTN_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          gpi0_butn_s1_agent_rp_endofpacket;                                // GPI0_BUTN_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                             // router_011:src_valid -> rsp_demux_007:sink_valid
	wire  [121:0] router_011_src_data;                                              // router_011:src_data -> rsp_demux_007:sink_data
	wire          router_011_src_ready;                                             // rsp_demux_007:sink_ready -> router_011:src_ready
	wire   [11:0] router_011_src_channel;                                           // router_011:src_channel -> rsp_demux_007:sink_channel
	wire          router_011_src_startofpacket;                                     // router_011:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_011_src_endofpacket;                                       // router_011:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          gpi1_dipsw_s1_agent_rp_valid;                                     // GPI1_DIPSW_s1_agent:rp_valid -> router_012:sink_valid
	wire  [121:0] gpi1_dipsw_s1_agent_rp_data;                                      // GPI1_DIPSW_s1_agent:rp_data -> router_012:sink_data
	wire          gpi1_dipsw_s1_agent_rp_ready;                                     // router_012:sink_ready -> GPI1_DIPSW_s1_agent:rp_ready
	wire          gpi1_dipsw_s1_agent_rp_startofpacket;                             // GPI1_DIPSW_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          gpi1_dipsw_s1_agent_rp_endofpacket;                               // GPI1_DIPSW_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                             // router_012:src_valid -> rsp_demux_008:sink_valid
	wire  [121:0] router_012_src_data;                                              // router_012:src_data -> rsp_demux_008:sink_data
	wire          router_012_src_ready;                                             // rsp_demux_008:sink_ready -> router_012:src_ready
	wire   [11:0] router_012_src_channel;                                           // router_012:src_channel -> rsp_demux_008:sink_channel
	wire          router_012_src_startofpacket;                                     // router_012:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_012_src_endofpacket;                                       // router_012:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          gpo2_ledg_s1_agent_rp_valid;                                      // GPO2_LEDG_s1_agent:rp_valid -> router_013:sink_valid
	wire  [121:0] gpo2_ledg_s1_agent_rp_data;                                       // GPO2_LEDG_s1_agent:rp_data -> router_013:sink_data
	wire          gpo2_ledg_s1_agent_rp_ready;                                      // router_013:sink_ready -> GPO2_LEDG_s1_agent:rp_ready
	wire          gpo2_ledg_s1_agent_rp_startofpacket;                              // GPO2_LEDG_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          gpo2_ledg_s1_agent_rp_endofpacket;                                // GPO2_LEDG_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                             // router_013:src_valid -> rsp_demux_009:sink_valid
	wire  [121:0] router_013_src_data;                                              // router_013:src_data -> rsp_demux_009:sink_data
	wire          router_013_src_ready;                                             // rsp_demux_009:sink_ready -> router_013:src_ready
	wire   [11:0] router_013_src_channel;                                           // router_013:src_channel -> rsp_demux_009:sink_channel
	wire          router_013_src_startofpacket;                                     // router_013:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_013_src_endofpacket;                                       // router_013:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          ext_sdram_progmem_s1_agent_rp_valid;                              // EXT_SDRAM_PROGMEM_s1_agent:rp_valid -> router_014:sink_valid
	wire  [103:0] ext_sdram_progmem_s1_agent_rp_data;                               // EXT_SDRAM_PROGMEM_s1_agent:rp_data -> router_014:sink_data
	wire          ext_sdram_progmem_s1_agent_rp_ready;                              // router_014:sink_ready -> EXT_SDRAM_PROGMEM_s1_agent:rp_ready
	wire          ext_sdram_progmem_s1_agent_rp_startofpacket;                      // EXT_SDRAM_PROGMEM_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          ext_sdram_progmem_s1_agent_rp_endofpacket;                        // EXT_SDRAM_PROGMEM_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          niosv_m_cpu_timer_sw_agent_agent_rp_valid;                        // NIOSV_M_CPU_timer_sw_agent_agent:rp_valid -> router_015:sink_valid
	wire  [121:0] niosv_m_cpu_timer_sw_agent_agent_rp_data;                         // NIOSV_M_CPU_timer_sw_agent_agent:rp_data -> router_015:sink_data
	wire          niosv_m_cpu_timer_sw_agent_agent_rp_ready;                        // router_015:sink_ready -> NIOSV_M_CPU_timer_sw_agent_agent:rp_ready
	wire          niosv_m_cpu_timer_sw_agent_agent_rp_startofpacket;                // NIOSV_M_CPU_timer_sw_agent_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          niosv_m_cpu_timer_sw_agent_agent_rp_endofpacket;                  // NIOSV_M_CPU_timer_sw_agent_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                             // router_015:src_valid -> rsp_demux_011:sink_valid
	wire  [121:0] router_015_src_data;                                              // router_015:src_data -> rsp_demux_011:sink_data
	wire          router_015_src_ready;                                             // rsp_demux_011:sink_ready -> router_015:src_ready
	wire   [11:0] router_015_src_channel;                                           // router_015:src_channel -> rsp_demux_011:sink_channel
	wire          router_015_src_startofpacket;                                     // router_015:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_015_src_endofpacket;                                       // router_015:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_002_src_valid;                                             // router_002:src_valid -> NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_sink_valid
	wire  [121:0] router_002_src_data;                                              // router_002:src_data -> NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_sink_data
	wire          router_002_src_ready;                                             // NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [11:0] router_002_src_channel;                                           // router_002:src_channel -> NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                     // router_002:src_startofpacket -> NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                       // router_002:src_endofpacket -> NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_sink_endofpacket
	wire  [121:0] niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_data;          // NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_ready;         // cmd_demux_002:sink_ready -> NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_src_ready
	wire   [11:0] niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_channel;       // NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_startofpacket; // NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_endofpacket;   // NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                            // rsp_mux_002:src_valid -> NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_sink_valid
	wire  [121:0] rsp_mux_002_src_data;                                             // rsp_mux_002:src_data -> NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                            // NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [11:0] rsp_mux_002_src_channel;                                          // rsp_mux_002:src_channel -> NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                    // rsp_mux_002:src_startofpacket -> NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                      // rsp_mux_002:src_endofpacket -> NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_sink_endofpacket
	wire          niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_valid;         // NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_src_valid -> NIOSV_M_CPU_instruction_manager_agent:write_rp_valid
	wire  [121:0] niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_data;          // NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_src_data -> NIOSV_M_CPU_instruction_manager_agent:write_rp_data
	wire          niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_ready;         // NIOSV_M_CPU_instruction_manager_agent:write_rp_ready -> NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_src_ready
	wire   [11:0] niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_channel;       // NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_src_channel -> NIOSV_M_CPU_instruction_manager_agent:write_rp_channel
	wire          niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_startofpacket; // NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_src_startofpacket -> NIOSV_M_CPU_instruction_manager_agent:write_rp_startofpacket
	wire          niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_endofpacket;   // NIOSV_M_CPU_instruction_manager_wr_limiter:rsp_src_endofpacket -> NIOSV_M_CPU_instruction_manager_agent:write_rp_endofpacket
	wire          router_003_src_valid;                                             // router_003:src_valid -> NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_sink_valid
	wire  [121:0] router_003_src_data;                                              // router_003:src_data -> NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_sink_data
	wire          router_003_src_ready;                                             // NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [11:0] router_003_src_channel;                                           // router_003:src_channel -> NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                     // router_003:src_startofpacket -> NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                       // router_003:src_endofpacket -> NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_sink_endofpacket
	wire  [121:0] niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_data;          // NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_ready;         // cmd_demux_003:sink_ready -> NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_src_ready
	wire   [11:0] niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_channel;       // NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_startofpacket; // NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_endofpacket;   // NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                            // rsp_mux_003:src_valid -> NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_sink_valid
	wire  [121:0] rsp_mux_003_src_data;                                             // rsp_mux_003:src_data -> NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                            // NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [11:0] rsp_mux_003_src_channel;                                          // rsp_mux_003:src_channel -> NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                    // rsp_mux_003:src_startofpacket -> NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                      // rsp_mux_003:src_endofpacket -> NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_sink_endofpacket
	wire          niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_valid;         // NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_src_valid -> NIOSV_M_CPU_instruction_manager_agent:read_rp_valid
	wire  [121:0] niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_data;          // NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_src_data -> NIOSV_M_CPU_instruction_manager_agent:read_rp_data
	wire          niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_ready;         // NIOSV_M_CPU_instruction_manager_agent:read_rp_ready -> NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_src_ready
	wire   [11:0] niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_channel;       // NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_src_channel -> NIOSV_M_CPU_instruction_manager_agent:read_rp_channel
	wire          niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_startofpacket; // NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_src_startofpacket -> NIOSV_M_CPU_instruction_manager_agent:read_rp_startofpacket
	wire          niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_endofpacket;   // NIOSV_M_CPU_instruction_manager_rd_limiter:rsp_src_endofpacket -> NIOSV_M_CPU_instruction_manager_agent:read_rp_endofpacket
	wire          ext_sdram_progmem_s1_burst_adapter_source0_valid;                 // EXT_SDRAM_PROGMEM_s1_burst_adapter:source0_valid -> EXT_SDRAM_PROGMEM_s1_agent:cp_valid
	wire  [103:0] ext_sdram_progmem_s1_burst_adapter_source0_data;                  // EXT_SDRAM_PROGMEM_s1_burst_adapter:source0_data -> EXT_SDRAM_PROGMEM_s1_agent:cp_data
	wire          ext_sdram_progmem_s1_burst_adapter_source0_ready;                 // EXT_SDRAM_PROGMEM_s1_agent:cp_ready -> EXT_SDRAM_PROGMEM_s1_burst_adapter:source0_ready
	wire   [11:0] ext_sdram_progmem_s1_burst_adapter_source0_channel;               // EXT_SDRAM_PROGMEM_s1_burst_adapter:source0_channel -> EXT_SDRAM_PROGMEM_s1_agent:cp_channel
	wire          ext_sdram_progmem_s1_burst_adapter_source0_startofpacket;         // EXT_SDRAM_PROGMEM_s1_burst_adapter:source0_startofpacket -> EXT_SDRAM_PROGMEM_s1_agent:cp_startofpacket
	wire          ext_sdram_progmem_s1_burst_adapter_source0_endofpacket;           // EXT_SDRAM_PROGMEM_s1_burst_adapter:source0_endofpacket -> EXT_SDRAM_PROGMEM_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [121:0] cmd_demux_src0_data;                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [11:0] cmd_demux_src0_channel;                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [121:0] cmd_demux_src3_data;                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [11:0] cmd_demux_src3_channel;                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [121:0] cmd_demux_src4_data;                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [11:0] cmd_demux_src4_channel;                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                             // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [121:0] cmd_demux_src6_data;                                              // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                             // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [11:0] cmd_demux_src6_channel;                                           // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                     // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                       // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                             // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [121:0] cmd_demux_src7_data;                                              // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                             // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [11:0] cmd_demux_src7_channel;                                           // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                     // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                       // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                             // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [121:0] cmd_demux_src8_data;                                              // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                             // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [11:0] cmd_demux_src8_channel;                                           // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                     // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                       // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                             // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [121:0] cmd_demux_src9_data;                                              // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                             // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [11:0] cmd_demux_src9_channel;                                           // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                     // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                       // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                            // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [121:0] cmd_demux_src10_data;                                             // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                            // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [11:0] cmd_demux_src10_channel;                                          // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                    // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                      // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                            // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [121:0] cmd_demux_src11_data;                                             // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                            // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [11:0] cmd_demux_src11_channel;                                          // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                    // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                      // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                         // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [121:0] cmd_demux_001_src0_data;                                          // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                         // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [11:0] cmd_demux_001_src0_channel;                                       // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                 // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                   // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                         // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [121:0] cmd_demux_001_src3_data;                                          // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                         // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [11:0] cmd_demux_001_src3_channel;                                       // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                 // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                   // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                         // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [121:0] cmd_demux_001_src4_data;                                          // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                         // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [11:0] cmd_demux_001_src4_channel;                                       // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                 // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                   // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                         // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [121:0] cmd_demux_001_src6_data;                                          // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                         // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [11:0] cmd_demux_001_src6_channel;                                       // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                 // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                   // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                         // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [121:0] cmd_demux_001_src7_data;                                          // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                         // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [11:0] cmd_demux_001_src7_channel;                                       // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                 // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                   // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                         // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [121:0] cmd_demux_001_src8_data;                                          // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                         // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [11:0] cmd_demux_001_src8_channel;                                       // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                 // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                   // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                         // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [121:0] cmd_demux_001_src9_data;                                          // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                         // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [11:0] cmd_demux_001_src9_channel;                                       // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                 // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                   // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                        // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [121:0] cmd_demux_001_src10_data;                                         // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                        // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [11:0] cmd_demux_001_src10_channel;                                      // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                  // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                        // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [121:0] cmd_demux_001_src11_data;                                         // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src11_ready;                                        // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire   [11:0] cmd_demux_001_src11_channel;                                      // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                  // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                         // cmd_demux_002:src1_valid -> cmd_mux_004:sink2_valid
	wire  [121:0] cmd_demux_002_src1_data;                                          // cmd_demux_002:src1_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_002_src1_ready;                                         // cmd_mux_004:sink2_ready -> cmd_demux_002:src1_ready
	wire   [11:0] cmd_demux_002_src1_channel;                                       // cmd_demux_002:src1_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                 // cmd_demux_002:src1_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                   // cmd_demux_002:src1_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                         // cmd_demux_002:src2_valid -> cmd_mux_010:sink2_valid
	wire  [121:0] cmd_demux_002_src2_data;                                          // cmd_demux_002:src2_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_002_src2_ready;                                         // cmd_mux_010:sink2_ready -> cmd_demux_002:src2_ready
	wire   [11:0] cmd_demux_002_src2_channel;                                       // cmd_demux_002:src2_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_002_src2_startofpacket;                                 // cmd_demux_002:src2_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                   // cmd_demux_002:src2_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          cmd_demux_003_src1_valid;                                         // cmd_demux_003:src1_valid -> cmd_mux_004:sink3_valid
	wire  [121:0] cmd_demux_003_src1_data;                                          // cmd_demux_003:src1_data -> cmd_mux_004:sink3_data
	wire          cmd_demux_003_src1_ready;                                         // cmd_mux_004:sink3_ready -> cmd_demux_003:src1_ready
	wire   [11:0] cmd_demux_003_src1_channel;                                       // cmd_demux_003:src1_channel -> cmd_mux_004:sink3_channel
	wire          cmd_demux_003_src1_startofpacket;                                 // cmd_demux_003:src1_startofpacket -> cmd_mux_004:sink3_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                   // cmd_demux_003:src1_endofpacket -> cmd_mux_004:sink3_endofpacket
	wire          cmd_demux_003_src2_valid;                                         // cmd_demux_003:src2_valid -> cmd_mux_010:sink3_valid
	wire  [121:0] cmd_demux_003_src2_data;                                          // cmd_demux_003:src2_data -> cmd_mux_010:sink3_data
	wire          cmd_demux_003_src2_ready;                                         // cmd_mux_010:sink3_ready -> cmd_demux_003:src2_ready
	wire   [11:0] cmd_demux_003_src2_channel;                                       // cmd_demux_003:src2_channel -> cmd_mux_010:sink3_channel
	wire          cmd_demux_003_src2_startofpacket;                                 // cmd_demux_003:src2_startofpacket -> cmd_mux_010:sink3_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                   // cmd_demux_003:src2_endofpacket -> cmd_mux_010:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [121:0] rsp_demux_src0_data;                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [11:0] rsp_demux_src0_channel;                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                             // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [121:0] rsp_demux_src1_data;                                              // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                             // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [11:0] rsp_demux_src1_channel;                                           // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                     // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                       // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [121:0] rsp_demux_003_src0_data;                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [11:0] rsp_demux_003_src0_channel;                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                         // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [121:0] rsp_demux_003_src1_data;                                          // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                         // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [11:0] rsp_demux_003_src1_channel;                                       // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                 // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                   // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [121:0] rsp_demux_004_src0_data;                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [11:0] rsp_demux_004_src0_channel;                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                         // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [121:0] rsp_demux_004_src1_data;                                          // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                         // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [11:0] rsp_demux_004_src1_channel;                                       // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                 // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                   // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src2_valid;                                         // rsp_demux_004:src2_valid -> rsp_mux_002:sink1_valid
	wire  [121:0] rsp_demux_004_src2_data;                                          // rsp_demux_004:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_004_src2_ready;                                         // rsp_mux_002:sink1_ready -> rsp_demux_004:src2_ready
	wire   [11:0] rsp_demux_004_src2_channel;                                       // rsp_demux_004:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_004_src2_startofpacket;                                 // rsp_demux_004:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                   // rsp_demux_004:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_004_src3_valid;                                         // rsp_demux_004:src3_valid -> rsp_mux_003:sink1_valid
	wire  [121:0] rsp_demux_004_src3_data;                                          // rsp_demux_004:src3_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_004_src3_ready;                                         // rsp_mux_003:sink1_ready -> rsp_demux_004:src3_ready
	wire   [11:0] rsp_demux_004_src3_channel;                                       // rsp_demux_004:src3_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_004_src3_startofpacket;                                 // rsp_demux_004:src3_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_004_src3_endofpacket;                                   // rsp_demux_004:src3_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_006_src0_valid;                                         // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [121:0] rsp_demux_006_src0_data;                                          // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                         // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [11:0] rsp_demux_006_src0_channel;                                       // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                 // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                   // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                         // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [121:0] rsp_demux_006_src1_data;                                          // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                         // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [11:0] rsp_demux_006_src1_channel;                                       // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                 // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                   // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                         // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [121:0] rsp_demux_007_src0_data;                                          // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                         // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [11:0] rsp_demux_007_src0_channel;                                       // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                 // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                   // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                         // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [121:0] rsp_demux_007_src1_data;                                          // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                         // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [11:0] rsp_demux_007_src1_channel;                                       // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                 // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                   // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                         // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [121:0] rsp_demux_008_src0_data;                                          // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                         // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [11:0] rsp_demux_008_src0_channel;                                       // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                 // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                   // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                         // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [121:0] rsp_demux_008_src1_data;                                          // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                         // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [11:0] rsp_demux_008_src1_channel;                                       // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                 // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                   // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                         // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [121:0] rsp_demux_009_src0_data;                                          // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                         // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [11:0] rsp_demux_009_src0_channel;                                       // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                 // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                   // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                         // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [121:0] rsp_demux_009_src1_data;                                          // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                         // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [11:0] rsp_demux_009_src1_channel;                                       // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                 // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                   // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                         // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [121:0] rsp_demux_010_src0_data;                                          // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                         // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [11:0] rsp_demux_010_src0_channel;                                       // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                 // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                   // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                         // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [121:0] rsp_demux_010_src1_data;                                          // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                         // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [11:0] rsp_demux_010_src1_channel;                                       // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                 // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                   // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_010_src2_valid;                                         // rsp_demux_010:src2_valid -> rsp_mux_002:sink2_valid
	wire  [121:0] rsp_demux_010_src2_data;                                          // rsp_demux_010:src2_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_010_src2_ready;                                         // rsp_mux_002:sink2_ready -> rsp_demux_010:src2_ready
	wire   [11:0] rsp_demux_010_src2_channel;                                       // rsp_demux_010:src2_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_010_src2_startofpacket;                                 // rsp_demux_010:src2_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                   // rsp_demux_010:src2_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_010_src3_valid;                                         // rsp_demux_010:src3_valid -> rsp_mux_003:sink2_valid
	wire  [121:0] rsp_demux_010_src3_data;                                          // rsp_demux_010:src3_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_010_src3_ready;                                         // rsp_mux_003:sink2_ready -> rsp_demux_010:src3_ready
	wire   [11:0] rsp_demux_010_src3_channel;                                       // rsp_demux_010:src3_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_010_src3_startofpacket;                                 // rsp_demux_010:src3_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_010_src3_endofpacket;                                   // rsp_demux_010:src3_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_011_src0_valid;                                         // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [121:0] rsp_demux_011_src0_data;                                          // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                         // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [11:0] rsp_demux_011_src0_channel;                                       // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                 // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                   // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                         // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [121:0] rsp_demux_011_src1_data;                                          // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src1_ready;                                         // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire   [11:0] rsp_demux_011_src1_channel;                                       // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                                 // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                   // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          router_014_src_valid;                                             // router_014:src_valid -> EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:in_valid
	wire  [103:0] router_014_src_data;                                              // router_014:src_data -> EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:in_data
	wire          router_014_src_ready;                                             // EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:in_ready -> router_014:src_ready
	wire   [11:0] router_014_src_channel;                                           // router_014:src_channel -> EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:in_channel
	wire          router_014_src_startofpacket;                                     // router_014:src_startofpacket -> EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:in_startofpacket
	wire          router_014_src_endofpacket;                                       // router_014:src_endofpacket -> EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:in_endofpacket
	wire          ext_sdram_progmem_s1_rsp_width_adapter_src_valid;                 // EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:out_valid -> rsp_demux_010:sink_valid
	wire  [121:0] ext_sdram_progmem_s1_rsp_width_adapter_src_data;                  // EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:out_data -> rsp_demux_010:sink_data
	wire          ext_sdram_progmem_s1_rsp_width_adapter_src_ready;                 // rsp_demux_010:sink_ready -> EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:out_ready
	wire   [11:0] ext_sdram_progmem_s1_rsp_width_adapter_src_channel;               // EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:out_channel -> rsp_demux_010:sink_channel
	wire          ext_sdram_progmem_s1_rsp_width_adapter_src_startofpacket;         // EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          ext_sdram_progmem_s1_rsp_width_adapter_src_endofpacket;           // EXT_SDRAM_PROGMEM_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          cmd_mux_010_src_valid;                                            // cmd_mux_010:src_valid -> EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:in_valid
	wire  [121:0] cmd_mux_010_src_data;                                             // cmd_mux_010:src_data -> EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:in_data
	wire          cmd_mux_010_src_ready;                                            // EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:in_ready -> cmd_mux_010:src_ready
	wire   [11:0] cmd_mux_010_src_channel;                                          // cmd_mux_010:src_channel -> EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_010_src_startofpacket;                                    // cmd_mux_010:src_startofpacket -> EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                      // cmd_mux_010:src_endofpacket -> EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:in_endofpacket
	wire          ext_sdram_progmem_s1_cmd_width_adapter_src_valid;                 // EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:out_valid -> EXT_SDRAM_PROGMEM_s1_burst_adapter:sink0_valid
	wire  [103:0] ext_sdram_progmem_s1_cmd_width_adapter_src_data;                  // EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:out_data -> EXT_SDRAM_PROGMEM_s1_burst_adapter:sink0_data
	wire          ext_sdram_progmem_s1_cmd_width_adapter_src_ready;                 // EXT_SDRAM_PROGMEM_s1_burst_adapter:sink0_ready -> EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:out_ready
	wire   [11:0] ext_sdram_progmem_s1_cmd_width_adapter_src_channel;               // EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:out_channel -> EXT_SDRAM_PROGMEM_s1_burst_adapter:sink0_channel
	wire          ext_sdram_progmem_s1_cmd_width_adapter_src_startofpacket;         // EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:out_startofpacket -> EXT_SDRAM_PROGMEM_s1_burst_adapter:sink0_startofpacket
	wire          ext_sdram_progmem_s1_cmd_width_adapter_src_endofpacket;           // EXT_SDRAM_PROGMEM_s1_cmd_width_adapter:out_endofpacket -> EXT_SDRAM_PROGMEM_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                             // cmd_demux:src1_valid -> crosser:in_valid
	wire  [121:0] cmd_demux_src1_data;                                              // cmd_demux:src1_data -> crosser:in_data
	wire          cmd_demux_src1_ready;                                             // crosser:in_ready -> cmd_demux:src1_ready
	wire   [11:0] cmd_demux_src1_channel;                                           // cmd_demux:src1_channel -> crosser:in_channel
	wire          cmd_demux_src1_startofpacket;                                     // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                       // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire  [121:0] crosser_out_data;                                                 // crosser:out_data -> cmd_mux_001:sink0_data
	wire          crosser_out_ready;                                                // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire   [11:0] crosser_out_channel;                                              // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_out_startofpacket;                                        // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_out_endofpacket;                                          // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                             // cmd_demux:src2_valid -> crosser_001:in_valid
	wire  [121:0] cmd_demux_src2_data;                                              // cmd_demux:src2_data -> crosser_001:in_data
	wire          cmd_demux_src2_ready;                                             // crosser_001:in_ready -> cmd_demux:src2_ready
	wire   [11:0] cmd_demux_src2_channel;                                           // cmd_demux:src2_channel -> crosser_001:in_channel
	wire          cmd_demux_src2_startofpacket;                                     // cmd_demux:src2_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                       // cmd_demux:src2_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                            // crosser_001:out_valid -> cmd_mux_002:sink0_valid
	wire  [121:0] crosser_001_out_data;                                             // crosser_001:out_data -> cmd_mux_002:sink0_data
	wire          crosser_001_out_ready;                                            // cmd_mux_002:sink0_ready -> crosser_001:out_ready
	wire   [11:0] crosser_001_out_channel;                                          // crosser_001:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_001_out_startofpacket;                                    // crosser_001:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                      // crosser_001:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                             // cmd_demux:src5_valid -> crosser_002:in_valid
	wire  [121:0] cmd_demux_src5_data;                                              // cmd_demux:src5_data -> crosser_002:in_data
	wire          cmd_demux_src5_ready;                                             // crosser_002:in_ready -> cmd_demux:src5_ready
	wire   [11:0] cmd_demux_src5_channel;                                           // cmd_demux:src5_channel -> crosser_002:in_channel
	wire          cmd_demux_src5_startofpacket;                                     // cmd_demux:src5_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                       // cmd_demux:src5_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                            // crosser_002:out_valid -> cmd_mux_005:sink0_valid
	wire  [121:0] crosser_002_out_data;                                             // crosser_002:out_data -> cmd_mux_005:sink0_data
	wire          crosser_002_out_ready;                                            // cmd_mux_005:sink0_ready -> crosser_002:out_ready
	wire   [11:0] crosser_002_out_channel;                                          // crosser_002:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_002_out_startofpacket;                                    // crosser_002:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                      // crosser_002:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                         // cmd_demux_001:src1_valid -> crosser_003:in_valid
	wire  [121:0] cmd_demux_001_src1_data;                                          // cmd_demux_001:src1_data -> crosser_003:in_data
	wire          cmd_demux_001_src1_ready;                                         // crosser_003:in_ready -> cmd_demux_001:src1_ready
	wire   [11:0] cmd_demux_001_src1_channel;                                       // cmd_demux_001:src1_channel -> crosser_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                 // cmd_demux_001:src1_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                   // cmd_demux_001:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                            // crosser_003:out_valid -> cmd_mux_001:sink1_valid
	wire  [121:0] crosser_003_out_data;                                             // crosser_003:out_data -> cmd_mux_001:sink1_data
	wire          crosser_003_out_ready;                                            // cmd_mux_001:sink1_ready -> crosser_003:out_ready
	wire   [11:0] crosser_003_out_channel;                                          // crosser_003:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_003_out_startofpacket;                                    // crosser_003:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                      // crosser_003:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                         // cmd_demux_001:src2_valid -> crosser_004:in_valid
	wire  [121:0] cmd_demux_001_src2_data;                                          // cmd_demux_001:src2_data -> crosser_004:in_data
	wire          cmd_demux_001_src2_ready;                                         // crosser_004:in_ready -> cmd_demux_001:src2_ready
	wire   [11:0] cmd_demux_001_src2_channel;                                       // cmd_demux_001:src2_channel -> crosser_004:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                 // cmd_demux_001:src2_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                   // cmd_demux_001:src2_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                            // crosser_004:out_valid -> cmd_mux_002:sink1_valid
	wire  [121:0] crosser_004_out_data;                                             // crosser_004:out_data -> cmd_mux_002:sink1_data
	wire          crosser_004_out_ready;                                            // cmd_mux_002:sink1_ready -> crosser_004:out_ready
	wire   [11:0] crosser_004_out_channel;                                          // crosser_004:out_channel -> cmd_mux_002:sink1_channel
	wire          crosser_004_out_startofpacket;                                    // crosser_004:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          crosser_004_out_endofpacket;                                      // crosser_004:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                         // cmd_demux_001:src5_valid -> crosser_005:in_valid
	wire  [121:0] cmd_demux_001_src5_data;                                          // cmd_demux_001:src5_data -> crosser_005:in_data
	wire          cmd_demux_001_src5_ready;                                         // crosser_005:in_ready -> cmd_demux_001:src5_ready
	wire   [11:0] cmd_demux_001_src5_channel;                                       // cmd_demux_001:src5_channel -> crosser_005:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                 // cmd_demux_001:src5_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                   // cmd_demux_001:src5_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                            // crosser_005:out_valid -> cmd_mux_005:sink1_valid
	wire  [121:0] crosser_005_out_data;                                             // crosser_005:out_data -> cmd_mux_005:sink1_data
	wire          crosser_005_out_ready;                                            // cmd_mux_005:sink1_ready -> crosser_005:out_ready
	wire   [11:0] crosser_005_out_channel;                                          // crosser_005:out_channel -> cmd_mux_005:sink1_channel
	wire          crosser_005_out_startofpacket;                                    // crosser_005:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          crosser_005_out_endofpacket;                                      // crosser_005:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                         // cmd_demux_002:src0_valid -> crosser_006:in_valid
	wire  [121:0] cmd_demux_002_src0_data;                                          // cmd_demux_002:src0_data -> crosser_006:in_data
	wire          cmd_demux_002_src0_ready;                                         // crosser_006:in_ready -> cmd_demux_002:src0_ready
	wire   [11:0] cmd_demux_002_src0_channel;                                       // cmd_demux_002:src0_channel -> crosser_006:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                 // cmd_demux_002:src0_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                   // cmd_demux_002:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                            // crosser_006:out_valid -> cmd_mux_002:sink2_valid
	wire  [121:0] crosser_006_out_data;                                             // crosser_006:out_data -> cmd_mux_002:sink2_data
	wire          crosser_006_out_ready;                                            // cmd_mux_002:sink2_ready -> crosser_006:out_ready
	wire   [11:0] crosser_006_out_channel;                                          // crosser_006:out_channel -> cmd_mux_002:sink2_channel
	wire          crosser_006_out_startofpacket;                                    // crosser_006:out_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          crosser_006_out_endofpacket;                                      // crosser_006:out_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                         // cmd_demux_003:src0_valid -> crosser_007:in_valid
	wire  [121:0] cmd_demux_003_src0_data;                                          // cmd_demux_003:src0_data -> crosser_007:in_data
	wire          cmd_demux_003_src0_ready;                                         // crosser_007:in_ready -> cmd_demux_003:src0_ready
	wire   [11:0] cmd_demux_003_src0_channel;                                       // cmd_demux_003:src0_channel -> crosser_007:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                 // cmd_demux_003:src0_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                   // cmd_demux_003:src0_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                            // crosser_007:out_valid -> cmd_mux_002:sink3_valid
	wire  [121:0] crosser_007_out_data;                                             // crosser_007:out_data -> cmd_mux_002:sink3_data
	wire          crosser_007_out_ready;                                            // cmd_mux_002:sink3_ready -> crosser_007:out_ready
	wire   [11:0] crosser_007_out_channel;                                          // crosser_007:out_channel -> cmd_mux_002:sink3_channel
	wire          crosser_007_out_startofpacket;                                    // crosser_007:out_startofpacket -> cmd_mux_002:sink3_startofpacket
	wire          crosser_007_out_endofpacket;                                      // crosser_007:out_endofpacket -> cmd_mux_002:sink3_endofpacket
	wire          rsp_demux_001_src0_valid;                                         // rsp_demux_001:src0_valid -> crosser_008:in_valid
	wire  [121:0] rsp_demux_001_src0_data;                                          // rsp_demux_001:src0_data -> crosser_008:in_data
	wire          rsp_demux_001_src0_ready;                                         // crosser_008:in_ready -> rsp_demux_001:src0_ready
	wire   [11:0] rsp_demux_001_src0_channel;                                       // rsp_demux_001:src0_channel -> crosser_008:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                 // rsp_demux_001:src0_startofpacket -> crosser_008:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                   // rsp_demux_001:src0_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                            // crosser_008:out_valid -> rsp_mux:sink1_valid
	wire  [121:0] crosser_008_out_data;                                             // crosser_008:out_data -> rsp_mux:sink1_data
	wire          crosser_008_out_ready;                                            // rsp_mux:sink1_ready -> crosser_008:out_ready
	wire   [11:0] crosser_008_out_channel;                                          // crosser_008:out_channel -> rsp_mux:sink1_channel
	wire          crosser_008_out_startofpacket;                                    // crosser_008:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_008_out_endofpacket;                                      // crosser_008:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                         // rsp_demux_001:src1_valid -> crosser_009:in_valid
	wire  [121:0] rsp_demux_001_src1_data;                                          // rsp_demux_001:src1_data -> crosser_009:in_data
	wire          rsp_demux_001_src1_ready;                                         // crosser_009:in_ready -> rsp_demux_001:src1_ready
	wire   [11:0] rsp_demux_001_src1_channel;                                       // rsp_demux_001:src1_channel -> crosser_009:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                 // rsp_demux_001:src1_startofpacket -> crosser_009:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                   // rsp_demux_001:src1_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                            // crosser_009:out_valid -> rsp_mux_001:sink1_valid
	wire  [121:0] crosser_009_out_data;                                             // crosser_009:out_data -> rsp_mux_001:sink1_data
	wire          crosser_009_out_ready;                                            // rsp_mux_001:sink1_ready -> crosser_009:out_ready
	wire   [11:0] crosser_009_out_channel;                                          // crosser_009:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_009_out_startofpacket;                                    // crosser_009:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_009_out_endofpacket;                                      // crosser_009:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                         // rsp_demux_002:src0_valid -> crosser_010:in_valid
	wire  [121:0] rsp_demux_002_src0_data;                                          // rsp_demux_002:src0_data -> crosser_010:in_data
	wire          rsp_demux_002_src0_ready;                                         // crosser_010:in_ready -> rsp_demux_002:src0_ready
	wire   [11:0] rsp_demux_002_src0_channel;                                       // rsp_demux_002:src0_channel -> crosser_010:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                 // rsp_demux_002:src0_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                   // rsp_demux_002:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                            // crosser_010:out_valid -> rsp_mux:sink2_valid
	wire  [121:0] crosser_010_out_data;                                             // crosser_010:out_data -> rsp_mux:sink2_data
	wire          crosser_010_out_ready;                                            // rsp_mux:sink2_ready -> crosser_010:out_ready
	wire   [11:0] crosser_010_out_channel;                                          // crosser_010:out_channel -> rsp_mux:sink2_channel
	wire          crosser_010_out_startofpacket;                                    // crosser_010:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_010_out_endofpacket;                                      // crosser_010:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                         // rsp_demux_002:src1_valid -> crosser_011:in_valid
	wire  [121:0] rsp_demux_002_src1_data;                                          // rsp_demux_002:src1_data -> crosser_011:in_data
	wire          rsp_demux_002_src1_ready;                                         // crosser_011:in_ready -> rsp_demux_002:src1_ready
	wire   [11:0] rsp_demux_002_src1_channel;                                       // rsp_demux_002:src1_channel -> crosser_011:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                 // rsp_demux_002:src1_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                   // rsp_demux_002:src1_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                            // crosser_011:out_valid -> rsp_mux_001:sink2_valid
	wire  [121:0] crosser_011_out_data;                                             // crosser_011:out_data -> rsp_mux_001:sink2_data
	wire          crosser_011_out_ready;                                            // rsp_mux_001:sink2_ready -> crosser_011:out_ready
	wire   [11:0] crosser_011_out_channel;                                          // crosser_011:out_channel -> rsp_mux_001:sink2_channel
	wire          crosser_011_out_startofpacket;                                    // crosser_011:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          crosser_011_out_endofpacket;                                      // crosser_011:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src2_valid;                                         // rsp_demux_002:src2_valid -> crosser_012:in_valid
	wire  [121:0] rsp_demux_002_src2_data;                                          // rsp_demux_002:src2_data -> crosser_012:in_data
	wire          rsp_demux_002_src2_ready;                                         // crosser_012:in_ready -> rsp_demux_002:src2_ready
	wire   [11:0] rsp_demux_002_src2_channel;                                       // rsp_demux_002:src2_channel -> crosser_012:in_channel
	wire          rsp_demux_002_src2_startofpacket;                                 // rsp_demux_002:src2_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                   // rsp_demux_002:src2_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                            // crosser_012:out_valid -> rsp_mux_002:sink0_valid
	wire  [121:0] crosser_012_out_data;                                             // crosser_012:out_data -> rsp_mux_002:sink0_data
	wire          crosser_012_out_ready;                                            // rsp_mux_002:sink0_ready -> crosser_012:out_ready
	wire   [11:0] crosser_012_out_channel;                                          // crosser_012:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_012_out_startofpacket;                                    // crosser_012:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_012_out_endofpacket;                                      // crosser_012:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_002_src3_valid;                                         // rsp_demux_002:src3_valid -> crosser_013:in_valid
	wire  [121:0] rsp_demux_002_src3_data;                                          // rsp_demux_002:src3_data -> crosser_013:in_data
	wire          rsp_demux_002_src3_ready;                                         // crosser_013:in_ready -> rsp_demux_002:src3_ready
	wire   [11:0] rsp_demux_002_src3_channel;                                       // rsp_demux_002:src3_channel -> crosser_013:in_channel
	wire          rsp_demux_002_src3_startofpacket;                                 // rsp_demux_002:src3_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_002_src3_endofpacket;                                   // rsp_demux_002:src3_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                            // crosser_013:out_valid -> rsp_mux_003:sink0_valid
	wire  [121:0] crosser_013_out_data;                                             // crosser_013:out_data -> rsp_mux_003:sink0_data
	wire          crosser_013_out_ready;                                            // rsp_mux_003:sink0_ready -> crosser_013:out_ready
	wire   [11:0] crosser_013_out_channel;                                          // crosser_013:out_channel -> rsp_mux_003:sink0_channel
	wire          crosser_013_out_startofpacket;                                    // crosser_013:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                                      // crosser_013:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                         // rsp_demux_005:src0_valid -> crosser_014:in_valid
	wire  [121:0] rsp_demux_005_src0_data;                                          // rsp_demux_005:src0_data -> crosser_014:in_data
	wire          rsp_demux_005_src0_ready;                                         // crosser_014:in_ready -> rsp_demux_005:src0_ready
	wire   [11:0] rsp_demux_005_src0_channel;                                       // rsp_demux_005:src0_channel -> crosser_014:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                 // rsp_demux_005:src0_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                   // rsp_demux_005:src0_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                            // crosser_014:out_valid -> rsp_mux:sink5_valid
	wire  [121:0] crosser_014_out_data;                                             // crosser_014:out_data -> rsp_mux:sink5_data
	wire          crosser_014_out_ready;                                            // rsp_mux:sink5_ready -> crosser_014:out_ready
	wire   [11:0] crosser_014_out_channel;                                          // crosser_014:out_channel -> rsp_mux:sink5_channel
	wire          crosser_014_out_startofpacket;                                    // crosser_014:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_014_out_endofpacket;                                      // crosser_014:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                         // rsp_demux_005:src1_valid -> crosser_015:in_valid
	wire  [121:0] rsp_demux_005_src1_data;                                          // rsp_demux_005:src1_data -> crosser_015:in_data
	wire          rsp_demux_005_src1_ready;                                         // crosser_015:in_ready -> rsp_demux_005:src1_ready
	wire   [11:0] rsp_demux_005_src1_channel;                                       // rsp_demux_005:src1_channel -> crosser_015:in_channel
	wire          rsp_demux_005_src1_startofpacket;                                 // rsp_demux_005:src1_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                   // rsp_demux_005:src1_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                            // crosser_015:out_valid -> rsp_mux_001:sink5_valid
	wire  [121:0] crosser_015_out_data;                                             // crosser_015:out_data -> rsp_mux_001:sink5_data
	wire          crosser_015_out_ready;                                            // rsp_mux_001:sink5_ready -> crosser_015:out_ready
	wire   [11:0] crosser_015_out_channel;                                          // crosser_015:out_channel -> rsp_mux_001:sink5_channel
	wire          crosser_015_out_startofpacket;                                    // crosser_015:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          crosser_015_out_endofpacket;                                      // crosser_015:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire   [11:0] niosv_m_cpu_instruction_manager_wr_limiter_cmd_valid_data;        // NIOSV_M_CPU_instruction_manager_wr_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire   [11:0] niosv_m_cpu_instruction_manager_rd_limiter_cmd_valid_data;        // NIOSV_M_CPU_instruction_manager_rd_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_out_valid;       // JTAG_UART_DBG_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_out_data;        // JTAG_UART_DBG_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_out_ready;       // avalon_st_adapter:in_0_ready -> JTAG_UART_DBG_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                    // avalon_st_adapter:out_0_valid -> JTAG_UART_DBG_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                     // avalon_st_adapter:out_0_data -> JTAG_UART_DBG_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                    // JTAG_UART_DBG_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                    // avalon_st_adapter:out_0_error -> JTAG_UART_DBG_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          epcs_flash_controller_avl_csr_agent_rdata_fifo_out_valid;         // EPCS_FLASH_CONTROLLER_avl_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] epcs_flash_controller_avl_csr_agent_rdata_fifo_out_data;          // EPCS_FLASH_CONTROLLER_avl_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          epcs_flash_controller_avl_csr_agent_rdata_fifo_out_ready;         // avalon_st_adapter_001:in_0_ready -> EPCS_FLASH_CONTROLLER_avl_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                // avalon_st_adapter_001:out_0_valid -> EPCS_FLASH_CONTROLLER_avl_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                 // avalon_st_adapter_001:out_0_data -> EPCS_FLASH_CONTROLLER_avl_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                // EPCS_FLASH_CONTROLLER_avl_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                // avalon_st_adapter_001:out_0_error -> EPCS_FLASH_CONTROLLER_avl_csr_agent:rdata_fifo_sink_error
	wire          epcs_flash_controller_avl_mem_agent_rdata_fifo_out_valid;         // EPCS_FLASH_CONTROLLER_avl_mem_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] epcs_flash_controller_avl_mem_agent_rdata_fifo_out_data;          // EPCS_FLASH_CONTROLLER_avl_mem_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          epcs_flash_controller_avl_mem_agent_rdata_fifo_out_ready;         // avalon_st_adapter_002:in_0_ready -> EPCS_FLASH_CONTROLLER_avl_mem_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                // avalon_st_adapter_002:out_0_valid -> EPCS_FLASH_CONTROLLER_avl_mem_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                 // avalon_st_adapter_002:out_0_data -> EPCS_FLASH_CONTROLLER_avl_mem_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                // EPCS_FLASH_CONTROLLER_avl_mem_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                // avalon_st_adapter_002:out_0_error -> EPCS_FLASH_CONTROLLER_avl_mem_agent:rdata_fifo_sink_error
	wire          soc_sysid_control_slave_agent_rdata_fifo_out_valid;               // SOC_SYSID_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] soc_sysid_control_slave_agent_rdata_fifo_out_data;                // SOC_SYSID_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          soc_sysid_control_slave_agent_rdata_fifo_out_ready;               // avalon_st_adapter_003:in_0_ready -> SOC_SYSID_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                // avalon_st_adapter_003:out_0_valid -> SOC_SYSID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                 // avalon_st_adapter_003:out_0_data -> SOC_SYSID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                // SOC_SYSID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                // avalon_st_adapter_003:out_0_error -> SOC_SYSID_control_slave_agent:rdata_fifo_sink_error
	wire          niosv_m_cpu_dm_agent_agent_rdata_fifo_out_valid;                  // NIOSV_M_CPU_dm_agent_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] niosv_m_cpu_dm_agent_agent_rdata_fifo_out_data;                   // NIOSV_M_CPU_dm_agent_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          niosv_m_cpu_dm_agent_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_004:in_0_ready -> NIOSV_M_CPU_dm_agent_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                // avalon_st_adapter_004:out_0_valid -> NIOSV_M_CPU_dm_agent_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                 // avalon_st_adapter_004:out_0_data -> NIOSV_M_CPU_dm_agent_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                // NIOSV_M_CPU_dm_agent_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                // avalon_st_adapter_004:out_0_error -> NIOSV_M_CPU_dm_agent_agent:rdata_fifo_sink_error
	wire          altpll_clks_pll_slave_agent_rdata_fifo_out_valid;                 // ALTPLL_CLKS_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] altpll_clks_pll_slave_agent_rdata_fifo_out_data;                  // ALTPLL_CLKS_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          altpll_clks_pll_slave_agent_rdata_fifo_out_ready;                 // avalon_st_adapter_005:in_0_ready -> ALTPLL_CLKS_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                // avalon_st_adapter_005:out_0_valid -> ALTPLL_CLKS_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                 // avalon_st_adapter_005:out_0_data -> ALTPLL_CLKS_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                // ALTPLL_CLKS_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                // avalon_st_adapter_005:out_0_error -> ALTPLL_CLKS_pll_slave_agent:rdata_fifo_sink_error
	wire          uart_serial_com_s1_agent_rdata_fifo_out_valid;                    // UART_SERIAL_COM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] uart_serial_com_s1_agent_rdata_fifo_out_data;                     // UART_SERIAL_COM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          uart_serial_com_s1_agent_rdata_fifo_out_ready;                    // avalon_st_adapter_006:in_0_ready -> UART_SERIAL_COM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                // avalon_st_adapter_006:out_0_valid -> UART_SERIAL_COM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                 // avalon_st_adapter_006:out_0_data -> UART_SERIAL_COM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                // UART_SERIAL_COM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                // avalon_st_adapter_006:out_0_error -> UART_SERIAL_COM_s1_agent:rdata_fifo_sink_error
	wire          gpi0_butn_s1_agent_rdata_fifo_out_valid;                          // GPI0_BUTN_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] gpi0_butn_s1_agent_rdata_fifo_out_data;                           // GPI0_BUTN_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          gpi0_butn_s1_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_007:in_0_ready -> GPI0_BUTN_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                // avalon_st_adapter_007:out_0_valid -> GPI0_BUTN_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                 // avalon_st_adapter_007:out_0_data -> GPI0_BUTN_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                // GPI0_BUTN_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                // avalon_st_adapter_007:out_0_error -> GPI0_BUTN_s1_agent:rdata_fifo_sink_error
	wire          gpi1_dipsw_s1_agent_rdata_fifo_out_valid;                         // GPI1_DIPSW_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] gpi1_dipsw_s1_agent_rdata_fifo_out_data;                          // GPI1_DIPSW_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          gpi1_dipsw_s1_agent_rdata_fifo_out_ready;                         // avalon_st_adapter_008:in_0_ready -> GPI1_DIPSW_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                // avalon_st_adapter_008:out_0_valid -> GPI1_DIPSW_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                 // avalon_st_adapter_008:out_0_data -> GPI1_DIPSW_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                // GPI1_DIPSW_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                // avalon_st_adapter_008:out_0_error -> GPI1_DIPSW_s1_agent:rdata_fifo_sink_error
	wire          gpo2_ledg_s1_agent_rdata_fifo_out_valid;                          // GPO2_LEDG_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] gpo2_ledg_s1_agent_rdata_fifo_out_data;                           // GPO2_LEDG_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          gpo2_ledg_s1_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_009:in_0_ready -> GPO2_LEDG_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                // avalon_st_adapter_009:out_0_valid -> GPO2_LEDG_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                 // avalon_st_adapter_009:out_0_data -> GPO2_LEDG_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                // GPO2_LEDG_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                // avalon_st_adapter_009:out_0_error -> GPO2_LEDG_s1_agent:rdata_fifo_sink_error
	wire          ext_sdram_progmem_s1_agent_rdata_fifo_out_valid;                  // EXT_SDRAM_PROGMEM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [17:0] ext_sdram_progmem_s1_agent_rdata_fifo_out_data;                   // EXT_SDRAM_PROGMEM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          ext_sdram_progmem_s1_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_010:in_0_ready -> EXT_SDRAM_PROGMEM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                // avalon_st_adapter_010:out_0_valid -> EXT_SDRAM_PROGMEM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_010_out_0_data;                                 // avalon_st_adapter_010:out_0_data -> EXT_SDRAM_PROGMEM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                // EXT_SDRAM_PROGMEM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                // avalon_st_adapter_010:out_0_error -> EXT_SDRAM_PROGMEM_s1_agent:rdata_fifo_sink_error
	wire          niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_out_valid;            // NIOSV_M_CPU_timer_sw_agent_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_out_data;             // NIOSV_M_CPU_timer_sw_agent_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_out_ready;            // avalon_st_adapter_011:in_0_ready -> NIOSV_M_CPU_timer_sw_agent_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                // avalon_st_adapter_011:out_0_valid -> NIOSV_M_CPU_timer_sw_agent_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                 // avalon_st_adapter_011:out_0_data -> NIOSV_M_CPU_timer_sw_agent_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                // NIOSV_M_CPU_timer_sw_agent_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                // avalon_st_adapter_011:out_0_error -> NIOSV_M_CPU_timer_sw_agent_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_dbg_avalon_jtag_slave_translator (
		.clk                    (ALTPLL_CLKS_c0_clk),                                     //                      clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (jtag_uart_dbg_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_dbg_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_dbg_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_dbg_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_dbg_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_dbg_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_dbg_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_dbg_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_dbg_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_dbg_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_dbg_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_DBG_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_DBG_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_DBG_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_DBG_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_DBG_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_DBG_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_DBG_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) epcs_flash_controller_avl_csr_translator (
		.clk                    (ALTPLL_CLKS_c2_clk),                                      //                      clk.clk
		.reset                  (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (epcs_flash_controller_avl_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (epcs_flash_controller_avl_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (epcs_flash_controller_avl_csr_agent_m0_read),             //                         .read
		.uav_write              (epcs_flash_controller_avl_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (epcs_flash_controller_avl_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (epcs_flash_controller_avl_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (epcs_flash_controller_avl_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (epcs_flash_controller_avl_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (epcs_flash_controller_avl_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (epcs_flash_controller_avl_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (epcs_flash_controller_avl_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (EPCS_FLASH_CONTROLLER_avl_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (EPCS_FLASH_CONTROLLER_avl_csr_write),                     //                         .write
		.av_read                (EPCS_FLASH_CONTROLLER_avl_csr_read),                      //                         .read
		.av_readdata            (EPCS_FLASH_CONTROLLER_avl_csr_readdata),                  //                         .readdata
		.av_writedata           (EPCS_FLASH_CONTROLLER_avl_csr_writedata),                 //                         .writedata
		.av_readdatavalid       (EPCS_FLASH_CONTROLLER_avl_csr_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (EPCS_FLASH_CONTROLLER_avl_csr_waitrequest),               //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (21),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (1),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) epcs_flash_controller_avl_mem_translator (
		.clk                    (ALTPLL_CLKS_c2_clk),                                      //                      clk.clk
		.reset                  (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (epcs_flash_controller_avl_mem_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (epcs_flash_controller_avl_mem_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (epcs_flash_controller_avl_mem_agent_m0_read),             //                         .read
		.uav_write              (epcs_flash_controller_avl_mem_agent_m0_write),            //                         .write
		.uav_waitrequest        (epcs_flash_controller_avl_mem_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (epcs_flash_controller_avl_mem_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (epcs_flash_controller_avl_mem_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (epcs_flash_controller_avl_mem_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (epcs_flash_controller_avl_mem_agent_m0_writedata),        //                         .writedata
		.uav_lock               (epcs_flash_controller_avl_mem_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (epcs_flash_controller_avl_mem_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (EPCS_FLASH_CONTROLLER_avl_mem_address),                   //      avalon_anti_slave_0.address
		.av_write               (EPCS_FLASH_CONTROLLER_avl_mem_write),                     //                         .write
		.av_read                (EPCS_FLASH_CONTROLLER_avl_mem_read),                      //                         .read
		.av_readdata            (EPCS_FLASH_CONTROLLER_avl_mem_readdata),                  //                         .readdata
		.av_writedata           (EPCS_FLASH_CONTROLLER_avl_mem_writedata),                 //                         .writedata
		.av_burstcount          (EPCS_FLASH_CONTROLLER_avl_mem_burstcount),                //                         .burstcount
		.av_byteenable          (EPCS_FLASH_CONTROLLER_avl_mem_byteenable),                //                         .byteenable
		.av_readdatavalid       (EPCS_FLASH_CONTROLLER_avl_mem_readdatavalid),             //                         .readdatavalid
		.av_waitrequest         (EPCS_FLASH_CONTROLLER_avl_mem_waitrequest),               //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) soc_sysid_control_slave_translator (
		.clk                    (ALTPLL_CLKS_c0_clk),                             //                      clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (soc_sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (soc_sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (soc_sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (soc_sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (soc_sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (soc_sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (soc_sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (soc_sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (soc_sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (soc_sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (soc_sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SOC_SYSID_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (SOC_SYSID_control_slave_readdata),               //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) niosv_m_cpu_dm_agent_translator (
		.clk                    (ALTPLL_CLKS_c0_clk),                            //                      clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (niosv_m_cpu_dm_agent_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (niosv_m_cpu_dm_agent_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (niosv_m_cpu_dm_agent_agent_m0_read),            //                         .read
		.uav_write              (niosv_m_cpu_dm_agent_agent_m0_write),           //                         .write
		.uav_waitrequest        (niosv_m_cpu_dm_agent_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (niosv_m_cpu_dm_agent_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (niosv_m_cpu_dm_agent_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (niosv_m_cpu_dm_agent_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (niosv_m_cpu_dm_agent_agent_m0_writedata),       //                         .writedata
		.uav_lock               (niosv_m_cpu_dm_agent_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (niosv_m_cpu_dm_agent_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (NIOSV_M_CPU_dm_agent_address),                  //      avalon_anti_slave_0.address
		.av_write               (NIOSV_M_CPU_dm_agent_write),                    //                         .write
		.av_read                (NIOSV_M_CPU_dm_agent_read),                     //                         .read
		.av_readdata            (NIOSV_M_CPU_dm_agent_readdata),                 //                         .readdata
		.av_writedata           (NIOSV_M_CPU_dm_agent_writedata),                //                         .writedata
		.av_readdatavalid       (NIOSV_M_CPU_dm_agent_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (NIOSV_M_CPU_dm_agent_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_clks_pll_slave_translator (
		.clk                    (IN_CLOCK_BRIDGE_out_clk_clk),                                   //                      clk.clk
		.reset                  (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_clks_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_clks_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (altpll_clks_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (altpll_clks_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (altpll_clks_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (altpll_clks_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (altpll_clks_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (altpll_clks_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (altpll_clks_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (altpll_clks_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (altpll_clks_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (ALTPLL_CLKS_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (ALTPLL_CLKS_pll_slave_write),                                   //                         .write
		.av_read                (ALTPLL_CLKS_pll_slave_read),                                    //                         .read
		.av_readdata            (ALTPLL_CLKS_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (ALTPLL_CLKS_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_serial_com_s1_translator (
		.clk                    (ALTPLL_CLKS_c0_clk),                            //                      clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart_serial_com_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (uart_serial_com_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (uart_serial_com_s1_agent_m0_read),              //                         .read
		.uav_write              (uart_serial_com_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (uart_serial_com_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (uart_serial_com_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (uart_serial_com_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (uart_serial_com_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (uart_serial_com_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (uart_serial_com_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (uart_serial_com_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (UART_SERIAL_COM_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (UART_SERIAL_COM_s1_write),                      //                         .write
		.av_read                (UART_SERIAL_COM_s1_read),                       //                         .read
		.av_readdata            (UART_SERIAL_COM_s1_readdata),                   //                         .readdata
		.av_writedata           (UART_SERIAL_COM_s1_writedata),                  //                         .writedata
		.av_begintransfer       (UART_SERIAL_COM_s1_begintransfer),              //                         .begintransfer
		.av_chipselect          (UART_SERIAL_COM_s1_chipselect),                 //                         .chipselect
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gpi0_butn_s1_translator (
		.clk                    (ALTPLL_CLKS_c0_clk),                            //                      clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gpi0_butn_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (gpi0_butn_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (gpi0_butn_s1_agent_m0_read),                    //                         .read
		.uav_write              (gpi0_butn_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (gpi0_butn_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (gpi0_butn_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (gpi0_butn_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (gpi0_butn_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (gpi0_butn_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (gpi0_butn_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (gpi0_butn_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (GPI0_BUTN_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (GPI0_BUTN_s1_write),                            //                         .write
		.av_readdata            (GPI0_BUTN_s1_readdata),                         //                         .readdata
		.av_writedata           (GPI0_BUTN_s1_writedata),                        //                         .writedata
		.av_chipselect          (GPI0_BUTN_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gpi1_dipsw_s1_translator (
		.clk                    (ALTPLL_CLKS_c0_clk),                            //                      clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gpi1_dipsw_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (gpi1_dipsw_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (gpi1_dipsw_s1_agent_m0_read),                   //                         .read
		.uav_write              (gpi1_dipsw_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (gpi1_dipsw_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (gpi1_dipsw_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (gpi1_dipsw_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (gpi1_dipsw_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (gpi1_dipsw_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (gpi1_dipsw_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (gpi1_dipsw_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (GPI1_DIPSW_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (GPI1_DIPSW_s1_write),                           //                         .write
		.av_readdata            (GPI1_DIPSW_s1_readdata),                        //                         .readdata
		.av_writedata           (GPI1_DIPSW_s1_writedata),                       //                         .writedata
		.av_chipselect          (GPI1_DIPSW_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gpo2_ledg_s1_translator (
		.clk                    (ALTPLL_CLKS_c0_clk),                            //                      clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gpo2_ledg_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (gpo2_ledg_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (gpo2_ledg_s1_agent_m0_read),                    //                         .read
		.uav_write              (gpo2_ledg_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (gpo2_ledg_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (gpo2_ledg_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (gpo2_ledg_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (gpo2_ledg_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (gpo2_ledg_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (gpo2_ledg_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (gpo2_ledg_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (GPO2_LEDG_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (GPO2_LEDG_s1_write),                            //                         .write
		.av_readdata            (GPO2_LEDG_s1_readdata),                         //                         .readdata
		.av_writedata           (GPO2_LEDG_s1_writedata),                        //                         .writedata
		.av_chipselect          (GPO2_LEDG_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ext_sdram_progmem_s1_translator (
		.clk                    (ALTPLL_CLKS_c0_clk),                            //                      clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ext_sdram_progmem_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (ext_sdram_progmem_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (ext_sdram_progmem_s1_agent_m0_read),            //                         .read
		.uav_write              (ext_sdram_progmem_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (ext_sdram_progmem_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (ext_sdram_progmem_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (ext_sdram_progmem_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (ext_sdram_progmem_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (ext_sdram_progmem_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (ext_sdram_progmem_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (ext_sdram_progmem_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (EXT_SDRAM_PROGMEM_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (EXT_SDRAM_PROGMEM_s1_write),                    //                         .write
		.av_read                (EXT_SDRAM_PROGMEM_s1_read),                     //                         .read
		.av_readdata            (EXT_SDRAM_PROGMEM_s1_readdata),                 //                         .readdata
		.av_writedata           (EXT_SDRAM_PROGMEM_s1_writedata),                //                         .writedata
		.av_byteenable          (EXT_SDRAM_PROGMEM_s1_byteenable),               //                         .byteenable
		.av_readdatavalid       (EXT_SDRAM_PROGMEM_s1_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (EXT_SDRAM_PROGMEM_s1_waitrequest),              //                         .waitrequest
		.av_chipselect          (EXT_SDRAM_PROGMEM_s1_chipselect),               //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) niosv_m_cpu_timer_sw_agent_translator (
		.clk                    (ALTPLL_CLKS_c0_clk),                                //                      clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (niosv_m_cpu_timer_sw_agent_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (niosv_m_cpu_timer_sw_agent_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (niosv_m_cpu_timer_sw_agent_agent_m0_read),          //                         .read
		.uav_write              (niosv_m_cpu_timer_sw_agent_agent_m0_write),         //                         .write
		.uav_waitrequest        (niosv_m_cpu_timer_sw_agent_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (niosv_m_cpu_timer_sw_agent_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (niosv_m_cpu_timer_sw_agent_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (niosv_m_cpu_timer_sw_agent_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (niosv_m_cpu_timer_sw_agent_agent_m0_writedata),     //                         .writedata
		.uav_lock               (niosv_m_cpu_timer_sw_agent_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (niosv_m_cpu_timer_sw_agent_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (NIOSV_M_CPU_timer_sw_agent_address),                //      avalon_anti_slave_0.address
		.av_write               (NIOSV_M_CPU_timer_sw_agent_write),                  //                         .write
		.av_read                (NIOSV_M_CPU_timer_sw_agent_read),                   //                         .read
		.av_readdata            (NIOSV_M_CPU_timer_sw_agent_readdata),               //                         .readdata
		.av_writedata           (NIOSV_M_CPU_timer_sw_agent_writedata),              //                         .writedata
		.av_byteenable          (NIOSV_M_CPU_timer_sw_agent_byteenable),             //                         .byteenable
		.av_readdatavalid       (NIOSV_M_CPU_timer_sw_agent_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (NIOSV_M_CPU_timer_sw_agent_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI4Lite"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (116),
		.PKT_CACHE_L               (113),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_THREAD_ID_H           (109),
		.PKT_THREAD_ID_L           (109),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (100),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (12),
		.ID                        (0)
	) niosv_m_cpu_data_manager_agent (
		.aclk                   (ALTPLL_CLKS_c0_clk),                                    //              clk.clk
		.aresetn                (~NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),        //        clk_reset.reset_n
		.write_cp_valid         (niosv_m_cpu_data_manager_agent_write_cp_valid),         //         write_cp.valid
		.write_cp_data          (niosv_m_cpu_data_manager_agent_write_cp_data),          //                 .data
		.write_cp_startofpacket (niosv_m_cpu_data_manager_agent_write_cp_startofpacket), //                 .startofpacket
		.write_cp_endofpacket   (niosv_m_cpu_data_manager_agent_write_cp_endofpacket),   //                 .endofpacket
		.write_cp_ready         (niosv_m_cpu_data_manager_agent_write_cp_ready),         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                     //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                      //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                   //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                             //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                               //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                     //                 .ready
		.read_cp_valid          (niosv_m_cpu_data_manager_agent_read_cp_valid),          //          read_cp.valid
		.read_cp_data           (niosv_m_cpu_data_manager_agent_read_cp_data),           //                 .data
		.read_cp_startofpacket  (niosv_m_cpu_data_manager_agent_read_cp_startofpacket),  //                 .startofpacket
		.read_cp_endofpacket    (niosv_m_cpu_data_manager_agent_read_cp_endofpacket),    //                 .endofpacket
		.read_cp_ready          (niosv_m_cpu_data_manager_agent_read_cp_ready),          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                 //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                  //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                               //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                         //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                           //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                 //                 .ready
		.awaddr                 (NIOSV_M_CPU_data_manager_awaddr),                       // altera_axi_slave.awaddr
		.awprot                 (NIOSV_M_CPU_data_manager_awprot),                       //                 .awprot
		.awvalid                (NIOSV_M_CPU_data_manager_awvalid),                      //                 .awvalid
		.awready                (NIOSV_M_CPU_data_manager_awready),                      //                 .awready
		.wdata                  (NIOSV_M_CPU_data_manager_wdata),                        //                 .wdata
		.wstrb                  (NIOSV_M_CPU_data_manager_wstrb),                        //                 .wstrb
		.wvalid                 (NIOSV_M_CPU_data_manager_wvalid),                       //                 .wvalid
		.wready                 (NIOSV_M_CPU_data_manager_wready),                       //                 .wready
		.bresp                  (NIOSV_M_CPU_data_manager_bresp),                        //                 .bresp
		.bvalid                 (NIOSV_M_CPU_data_manager_bvalid),                       //                 .bvalid
		.bready                 (NIOSV_M_CPU_data_manager_bready),                       //                 .bready
		.araddr                 (NIOSV_M_CPU_data_manager_araddr),                       //                 .araddr
		.arprot                 (NIOSV_M_CPU_data_manager_arprot),                       //                 .arprot
		.arvalid                (NIOSV_M_CPU_data_manager_arvalid),                      //                 .arvalid
		.arready                (NIOSV_M_CPU_data_manager_arready),                      //                 .arready
		.rdata                  (NIOSV_M_CPU_data_manager_rdata),                        //                 .rdata
		.rresp                  (NIOSV_M_CPU_data_manager_rresp),                        //                 .rresp
		.rvalid                 (NIOSV_M_CPU_data_manager_rvalid),                       //                 .rvalid
		.rready                 (NIOSV_M_CPU_data_manager_rready),                       //                 .rready
		.awid                   (1'b0),                                                  //      (terminated)
		.awlen                  (4'b0000),                                               //      (terminated)
		.awsize                 (3'b010),                                                //      (terminated)
		.awburst                (2'b01),                                                 //      (terminated)
		.awlock                 (2'b00),                                                 //      (terminated)
		.awcache                (4'b0000),                                               //      (terminated)
		.awqos                  (4'b0000),                                               //      (terminated)
		.awregion               (4'b0000),                                               //      (terminated)
		.awuser                 (1'b0),                                                  //      (terminated)
		.arid                   (1'b0),                                                  //      (terminated)
		.arlen                  (4'b0000),                                               //      (terminated)
		.arsize                 (3'b010),                                                //      (terminated)
		.arburst                (2'b01),                                                 //      (terminated)
		.arlock                 (2'b00),                                                 //      (terminated)
		.arcache                (4'b0000),                                               //      (terminated)
		.arqos                  (4'b0000),                                               //      (terminated)
		.arregion               (4'b0000),                                               //      (terminated)
		.aruser                 (1'b0),                                                  //      (terminated)
		.wid                    (1'b0),                                                  //      (terminated)
		.wlast                  (1'b1),                                                  //      (terminated)
		.wuser                  (1'b0),                                                  //      (terminated)
		.bid                    (),                                                      //      (terminated)
		.buser                  (),                                                      //      (terminated)
		.rid                    (),                                                      //      (terminated)
		.rlast                  (),                                                      //      (terminated)
		.ruser                  ()                                                       //      (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI4Lite"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (116),
		.PKT_CACHE_L               (113),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_THREAD_ID_H           (109),
		.PKT_THREAD_ID_L           (109),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (100),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (12),
		.ID                        (1)
	) niosv_m_cpu_instruction_manager_agent (
		.aclk                   (ALTPLL_CLKS_c0_clk),                                               //              clk.clk
		.aresetn                (~NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                   //        clk_reset.reset_n
		.write_cp_valid         (niosv_m_cpu_instruction_manager_agent_write_cp_valid),             //         write_cp.valid
		.write_cp_data          (niosv_m_cpu_instruction_manager_agent_write_cp_data),              //                 .data
		.write_cp_startofpacket (niosv_m_cpu_instruction_manager_agent_write_cp_startofpacket),     //                 .startofpacket
		.write_cp_endofpacket   (niosv_m_cpu_instruction_manager_agent_write_cp_endofpacket),       //                 .endofpacket
		.write_cp_ready         (niosv_m_cpu_instruction_manager_agent_write_cp_ready),             //                 .ready
		.write_rp_valid         (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_valid),         //         write_rp.valid
		.write_rp_data          (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_data),          //                 .data
		.write_rp_channel       (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_channel),       //                 .channel
		.write_rp_startofpacket (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_startofpacket), //                 .startofpacket
		.write_rp_endofpacket   (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.write_rp_ready         (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_ready),         //                 .ready
		.read_cp_valid          (niosv_m_cpu_instruction_manager_agent_read_cp_valid),              //          read_cp.valid
		.read_cp_data           (niosv_m_cpu_instruction_manager_agent_read_cp_data),               //                 .data
		.read_cp_startofpacket  (niosv_m_cpu_instruction_manager_agent_read_cp_startofpacket),      //                 .startofpacket
		.read_cp_endofpacket    (niosv_m_cpu_instruction_manager_agent_read_cp_endofpacket),        //                 .endofpacket
		.read_cp_ready          (niosv_m_cpu_instruction_manager_agent_read_cp_ready),              //                 .ready
		.read_rp_valid          (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_valid),         //          read_rp.valid
		.read_rp_data           (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_data),          //                 .data
		.read_rp_channel        (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_channel),       //                 .channel
		.read_rp_startofpacket  (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_startofpacket), //                 .startofpacket
		.read_rp_endofpacket    (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.read_rp_ready          (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_ready),         //                 .ready
		.awaddr                 (NIOSV_M_CPU_instruction_manager_awaddr),                           // altera_axi_slave.awaddr
		.awprot                 (NIOSV_M_CPU_instruction_manager_awprot),                           //                 .awprot
		.awvalid                (NIOSV_M_CPU_instruction_manager_awvalid),                          //                 .awvalid
		.awready                (NIOSV_M_CPU_instruction_manager_awready),                          //                 .awready
		.wdata                  (NIOSV_M_CPU_instruction_manager_wdata),                            //                 .wdata
		.wstrb                  (NIOSV_M_CPU_instruction_manager_wstrb),                            //                 .wstrb
		.wvalid                 (NIOSV_M_CPU_instruction_manager_wvalid),                           //                 .wvalid
		.wready                 (NIOSV_M_CPU_instruction_manager_wready),                           //                 .wready
		.bresp                  (NIOSV_M_CPU_instruction_manager_bresp),                            //                 .bresp
		.bvalid                 (NIOSV_M_CPU_instruction_manager_bvalid),                           //                 .bvalid
		.bready                 (NIOSV_M_CPU_instruction_manager_bready),                           //                 .bready
		.araddr                 (NIOSV_M_CPU_instruction_manager_araddr),                           //                 .araddr
		.arprot                 (NIOSV_M_CPU_instruction_manager_arprot),                           //                 .arprot
		.arvalid                (NIOSV_M_CPU_instruction_manager_arvalid),                          //                 .arvalid
		.arready                (NIOSV_M_CPU_instruction_manager_arready),                          //                 .arready
		.rdata                  (NIOSV_M_CPU_instruction_manager_rdata),                            //                 .rdata
		.rresp                  (NIOSV_M_CPU_instruction_manager_rresp),                            //                 .rresp
		.rvalid                 (NIOSV_M_CPU_instruction_manager_rvalid),                           //                 .rvalid
		.rready                 (NIOSV_M_CPU_instruction_manager_rready),                           //                 .rready
		.awid                   (1'b0),                                                             //      (terminated)
		.awlen                  (4'b0000),                                                          //      (terminated)
		.awsize                 (3'b010),                                                           //      (terminated)
		.awburst                (2'b01),                                                            //      (terminated)
		.awlock                 (2'b00),                                                            //      (terminated)
		.awcache                (4'b0000),                                                          //      (terminated)
		.awqos                  (4'b0000),                                                          //      (terminated)
		.awregion               (4'b0000),                                                          //      (terminated)
		.awuser                 (1'b0),                                                             //      (terminated)
		.arid                   (1'b0),                                                             //      (terminated)
		.arlen                  (4'b0000),                                                          //      (terminated)
		.arsize                 (3'b010),                                                           //      (terminated)
		.arburst                (2'b01),                                                            //      (terminated)
		.arlock                 (2'b00),                                                            //      (terminated)
		.arcache                (4'b0000),                                                          //      (terminated)
		.arqos                  (4'b0000),                                                          //      (terminated)
		.arregion               (4'b0000),                                                          //      (terminated)
		.aruser                 (1'b0),                                                             //      (terminated)
		.wid                    (1'b0),                                                             //      (terminated)
		.wlast                  (1'b1),                                                             //      (terminated)
		.wuser                  (1'b0),                                                             //      (terminated)
		.bid                    (),                                                                 //      (terminated)
		.buser                  (),                                                                 //      (terminated)
		.rid                    (),                                                                 //      (terminated)
		.rlast                  (),                                                                 //      (terminated)
		.ruser                  ()                                                                  //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_dbg_avalon_jtag_slave_agent (
		.clk                     (ALTPLL_CLKS_c0_clk),                                               //             clk.clk
		.reset                   (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (jtag_uart_dbg_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_dbg_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_dbg_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_dbg_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_dbg_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_dbg_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_dbg_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_dbg_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_dbg_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_dbg_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_dbg_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_dbg_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_dbg_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_dbg_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_dbg_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_dbg_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                              //                .channel
		.rf_sink_ready           (jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                                               //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_dbg_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_dbg_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                                         //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) epcs_flash_controller_avl_csr_agent (
		.clk                     (ALTPLL_CLKS_c2_clk),                                             //             clk.clk
		.reset                   (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (epcs_flash_controller_avl_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (epcs_flash_controller_avl_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (epcs_flash_controller_avl_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (epcs_flash_controller_avl_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (epcs_flash_controller_avl_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (epcs_flash_controller_avl_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (epcs_flash_controller_avl_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (epcs_flash_controller_avl_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (epcs_flash_controller_avl_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (epcs_flash_controller_avl_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (epcs_flash_controller_avl_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (epcs_flash_controller_avl_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (epcs_flash_controller_avl_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (epcs_flash_controller_avl_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (epcs_flash_controller_avl_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (epcs_flash_controller_avl_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                        //                .channel
		.rf_sink_ready           (epcs_flash_controller_avl_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (epcs_flash_controller_avl_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (epcs_flash_controller_avl_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (epcs_flash_controller_avl_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (epcs_flash_controller_avl_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (epcs_flash_controller_avl_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (epcs_flash_controller_avl_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (epcs_flash_controller_avl_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (epcs_flash_controller_avl_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (epcs_flash_controller_avl_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (epcs_flash_controller_avl_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (epcs_flash_controller_avl_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (epcs_flash_controller_avl_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcs_flash_controller_avl_csr_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c2_clk),                                             //       clk.clk
		.reset             (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (epcs_flash_controller_avl_csr_agent_rf_source_data),             //        in.data
		.in_valid          (epcs_flash_controller_avl_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (epcs_flash_controller_avl_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (epcs_flash_controller_avl_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (epcs_flash_controller_avl_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (epcs_flash_controller_avl_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (epcs_flash_controller_avl_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (epcs_flash_controller_avl_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (epcs_flash_controller_avl_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (epcs_flash_controller_avl_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcs_flash_controller_avl_csr_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c2_clk),                                       //       clk.clk
		.reset             (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (epcs_flash_controller_avl_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (epcs_flash_controller_avl_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (epcs_flash_controller_avl_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (epcs_flash_controller_avl_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (epcs_flash_controller_avl_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (epcs_flash_controller_avl_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) epcs_flash_controller_avl_mem_agent (
		.clk                     (ALTPLL_CLKS_c2_clk),                                             //             clk.clk
		.reset                   (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (epcs_flash_controller_avl_mem_agent_m0_address),                 //              m0.address
		.m0_burstcount           (epcs_flash_controller_avl_mem_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (epcs_flash_controller_avl_mem_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (epcs_flash_controller_avl_mem_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (epcs_flash_controller_avl_mem_agent_m0_lock),                    //                .lock
		.m0_readdata             (epcs_flash_controller_avl_mem_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (epcs_flash_controller_avl_mem_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (epcs_flash_controller_avl_mem_agent_m0_read),                    //                .read
		.m0_waitrequest          (epcs_flash_controller_avl_mem_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (epcs_flash_controller_avl_mem_agent_m0_writedata),               //                .writedata
		.m0_write                (epcs_flash_controller_avl_mem_agent_m0_write),                   //                .write
		.rp_endofpacket          (epcs_flash_controller_avl_mem_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (epcs_flash_controller_avl_mem_agent_rp_ready),                   //                .ready
		.rp_valid                (epcs_flash_controller_avl_mem_agent_rp_valid),                   //                .valid
		.rp_data                 (epcs_flash_controller_avl_mem_agent_rp_data),                    //                .data
		.rp_startofpacket        (epcs_flash_controller_avl_mem_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                        //                .channel
		.rf_sink_ready           (epcs_flash_controller_avl_mem_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (epcs_flash_controller_avl_mem_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (epcs_flash_controller_avl_mem_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (epcs_flash_controller_avl_mem_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (epcs_flash_controller_avl_mem_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (epcs_flash_controller_avl_mem_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (epcs_flash_controller_avl_mem_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (epcs_flash_controller_avl_mem_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (epcs_flash_controller_avl_mem_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (epcs_flash_controller_avl_mem_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (epcs_flash_controller_avl_mem_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (epcs_flash_controller_avl_mem_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (epcs_flash_controller_avl_mem_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcs_flash_controller_avl_mem_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c2_clk),                                             //       clk.clk
		.reset             (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (epcs_flash_controller_avl_mem_agent_rf_source_data),             //        in.data
		.in_valid          (epcs_flash_controller_avl_mem_agent_rf_source_valid),            //          .valid
		.in_ready          (epcs_flash_controller_avl_mem_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (epcs_flash_controller_avl_mem_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (epcs_flash_controller_avl_mem_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (epcs_flash_controller_avl_mem_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (epcs_flash_controller_avl_mem_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (epcs_flash_controller_avl_mem_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (epcs_flash_controller_avl_mem_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (epcs_flash_controller_avl_mem_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcs_flash_controller_avl_mem_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c2_clk),                                       //       clk.clk
		.reset             (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (epcs_flash_controller_avl_mem_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (epcs_flash_controller_avl_mem_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (epcs_flash_controller_avl_mem_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (epcs_flash_controller_avl_mem_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (epcs_flash_controller_avl_mem_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (epcs_flash_controller_avl_mem_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) soc_sysid_control_slave_agent (
		.clk                     (ALTPLL_CLKS_c0_clk),                                       //             clk.clk
		.reset                   (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (soc_sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (soc_sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (soc_sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (soc_sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (soc_sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (soc_sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (soc_sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (soc_sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (soc_sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (soc_sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (soc_sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (soc_sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (soc_sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (soc_sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (soc_sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (soc_sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                  //                .channel
		.rf_sink_ready           (soc_sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (soc_sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (soc_sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (soc_sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (soc_sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (soc_sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (soc_sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (soc_sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (soc_sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (soc_sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (soc_sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (soc_sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (soc_sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) soc_sysid_control_slave_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                                       //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (soc_sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (soc_sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (soc_sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (soc_sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (soc_sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (soc_sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (soc_sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (soc_sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (soc_sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (soc_sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) soc_sysid_control_slave_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                                 //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (soc_sysid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (soc_sysid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (soc_sysid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (soc_sysid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (soc_sysid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (soc_sysid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) niosv_m_cpu_dm_agent_agent (
		.clk                     (ALTPLL_CLKS_c0_clk),                                    //             clk.clk
		.reset                   (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (niosv_m_cpu_dm_agent_agent_m0_address),                 //              m0.address
		.m0_burstcount           (niosv_m_cpu_dm_agent_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (niosv_m_cpu_dm_agent_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (niosv_m_cpu_dm_agent_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (niosv_m_cpu_dm_agent_agent_m0_lock),                    //                .lock
		.m0_readdata             (niosv_m_cpu_dm_agent_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (niosv_m_cpu_dm_agent_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (niosv_m_cpu_dm_agent_agent_m0_read),                    //                .read
		.m0_waitrequest          (niosv_m_cpu_dm_agent_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (niosv_m_cpu_dm_agent_agent_m0_writedata),               //                .writedata
		.m0_write                (niosv_m_cpu_dm_agent_agent_m0_write),                   //                .write
		.rp_endofpacket          (niosv_m_cpu_dm_agent_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (niosv_m_cpu_dm_agent_agent_rp_ready),                   //                .ready
		.rp_valid                (niosv_m_cpu_dm_agent_agent_rp_valid),                   //                .valid
		.rp_data                 (niosv_m_cpu_dm_agent_agent_rp_data),                    //                .data
		.rp_startofpacket        (niosv_m_cpu_dm_agent_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                               //                .channel
		.rf_sink_ready           (niosv_m_cpu_dm_agent_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (niosv_m_cpu_dm_agent_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (niosv_m_cpu_dm_agent_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (niosv_m_cpu_dm_agent_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (niosv_m_cpu_dm_agent_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (niosv_m_cpu_dm_agent_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (niosv_m_cpu_dm_agent_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (niosv_m_cpu_dm_agent_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (niosv_m_cpu_dm_agent_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (niosv_m_cpu_dm_agent_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (niosv_m_cpu_dm_agent_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (niosv_m_cpu_dm_agent_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (niosv_m_cpu_dm_agent_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) niosv_m_cpu_dm_agent_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                                    //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (niosv_m_cpu_dm_agent_agent_rf_source_data),             //        in.data
		.in_valid          (niosv_m_cpu_dm_agent_agent_rf_source_valid),            //          .valid
		.in_ready          (niosv_m_cpu_dm_agent_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (niosv_m_cpu_dm_agent_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (niosv_m_cpu_dm_agent_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (niosv_m_cpu_dm_agent_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (niosv_m_cpu_dm_agent_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (niosv_m_cpu_dm_agent_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (niosv_m_cpu_dm_agent_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (niosv_m_cpu_dm_agent_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) niosv_m_cpu_dm_agent_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                              //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (niosv_m_cpu_dm_agent_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (niosv_m_cpu_dm_agent_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (niosv_m_cpu_dm_agent_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (niosv_m_cpu_dm_agent_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (niosv_m_cpu_dm_agent_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (niosv_m_cpu_dm_agent_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_clks_pll_slave_agent (
		.clk                     (IN_CLOCK_BRIDGE_out_clk_clk),                                   //             clk.clk
		.reset                   (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altpll_clks_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (altpll_clks_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (altpll_clks_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (altpll_clks_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (altpll_clks_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (altpll_clks_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (altpll_clks_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (altpll_clks_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (altpll_clks_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (altpll_clks_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (altpll_clks_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (altpll_clks_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (altpll_clks_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (altpll_clks_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (altpll_clks_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (altpll_clks_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                       //                .channel
		.rf_sink_ready           (altpll_clks_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (altpll_clks_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (altpll_clks_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (altpll_clks_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (altpll_clks_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (altpll_clks_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (altpll_clks_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (altpll_clks_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (altpll_clks_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (altpll_clks_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (altpll_clks_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_clks_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (altpll_clks_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_clks_pll_slave_agent_rsp_fifo (
		.clk               (IN_CLOCK_BRIDGE_out_clk_clk),                                   //       clk.clk
		.reset             (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_clks_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (altpll_clks_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (altpll_clks_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (altpll_clks_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (altpll_clks_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (altpll_clks_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (altpll_clks_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (altpll_clks_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (altpll_clks_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (altpll_clks_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_clks_pll_slave_agent_rdata_fifo (
		.clk               (IN_CLOCK_BRIDGE_out_clk_clk),                                   //       clk.clk
		.reset             (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_clks_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (altpll_clks_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (altpll_clks_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (altpll_clks_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (altpll_clks_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (altpll_clks_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                          // (terminated)
		.out_startofpacket (),                                                              // (terminated)
		.out_endofpacket   (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uart_serial_com_s1_agent (
		.clk                     (ALTPLL_CLKS_c0_clk),                                  //             clk.clk
		.reset                   (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (uart_serial_com_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (uart_serial_com_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (uart_serial_com_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (uart_serial_com_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (uart_serial_com_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (uart_serial_com_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (uart_serial_com_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (uart_serial_com_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (uart_serial_com_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (uart_serial_com_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (uart_serial_com_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (uart_serial_com_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (uart_serial_com_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (uart_serial_com_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (uart_serial_com_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (uart_serial_com_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                             //                .channel
		.rf_sink_ready           (uart_serial_com_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (uart_serial_com_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (uart_serial_com_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (uart_serial_com_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (uart_serial_com_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (uart_serial_com_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (uart_serial_com_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (uart_serial_com_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (uart_serial_com_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (uart_serial_com_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (uart_serial_com_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_serial_com_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (uart_serial_com_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_serial_com_s1_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                                  //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (uart_serial_com_s1_agent_rf_source_data),             //        in.data
		.in_valid          (uart_serial_com_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (uart_serial_com_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (uart_serial_com_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (uart_serial_com_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (uart_serial_com_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (uart_serial_com_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (uart_serial_com_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (uart_serial_com_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (uart_serial_com_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_serial_com_s1_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_serial_com_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (uart_serial_com_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (uart_serial_com_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (uart_serial_com_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (uart_serial_com_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (uart_serial_com_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gpi0_butn_s1_agent (
		.clk                     (ALTPLL_CLKS_c0_clk),                            //             clk.clk
		.reset                   (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (gpi0_butn_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (gpi0_butn_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (gpi0_butn_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (gpi0_butn_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (gpi0_butn_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (gpi0_butn_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (gpi0_butn_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (gpi0_butn_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (gpi0_butn_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (gpi0_butn_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (gpi0_butn_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (gpi0_butn_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (gpi0_butn_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (gpi0_butn_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (gpi0_butn_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (gpi0_butn_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_007_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                       //                .channel
		.rf_sink_ready           (gpi0_butn_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (gpi0_butn_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (gpi0_butn_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (gpi0_butn_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (gpi0_butn_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (gpi0_butn_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (gpi0_butn_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (gpi0_butn_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (gpi0_butn_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (gpi0_butn_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),             //                .error
		.rdata_fifo_src_ready    (gpi0_butn_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gpi0_butn_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (gpi0_butn_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpi0_butn_s1_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpi0_butn_s1_agent_rf_source_data),             //        in.data
		.in_valid          (gpi0_butn_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (gpi0_butn_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (gpi0_butn_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (gpi0_butn_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (gpi0_butn_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (gpi0_butn_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (gpi0_butn_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (gpi0_butn_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (gpi0_butn_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpi0_butn_s1_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpi0_butn_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (gpi0_butn_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (gpi0_butn_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (gpi0_butn_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (gpi0_butn_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (gpi0_butn_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gpi1_dipsw_s1_agent (
		.clk                     (ALTPLL_CLKS_c0_clk),                             //             clk.clk
		.reset                   (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (gpi1_dipsw_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (gpi1_dipsw_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (gpi1_dipsw_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (gpi1_dipsw_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (gpi1_dipsw_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (gpi1_dipsw_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (gpi1_dipsw_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (gpi1_dipsw_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (gpi1_dipsw_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (gpi1_dipsw_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (gpi1_dipsw_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (gpi1_dipsw_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (gpi1_dipsw_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (gpi1_dipsw_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (gpi1_dipsw_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (gpi1_dipsw_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_008_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                        //                .channel
		.rf_sink_ready           (gpi1_dipsw_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (gpi1_dipsw_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (gpi1_dipsw_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (gpi1_dipsw_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (gpi1_dipsw_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (gpi1_dipsw_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (gpi1_dipsw_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (gpi1_dipsw_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (gpi1_dipsw_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (gpi1_dipsw_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),              //                .error
		.rdata_fifo_src_ready    (gpi1_dipsw_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gpi1_dipsw_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (gpi1_dipsw_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpi1_dipsw_s1_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                             //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (gpi1_dipsw_s1_agent_rf_source_data),             //        in.data
		.in_valid          (gpi1_dipsw_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (gpi1_dipsw_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (gpi1_dipsw_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (gpi1_dipsw_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (gpi1_dipsw_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (gpi1_dipsw_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (gpi1_dipsw_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (gpi1_dipsw_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (gpi1_dipsw_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpi1_dipsw_s1_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpi1_dipsw_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (gpi1_dipsw_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (gpi1_dipsw_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (gpi1_dipsw_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (gpi1_dipsw_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (gpi1_dipsw_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gpo2_ledg_s1_agent (
		.clk                     (ALTPLL_CLKS_c0_clk),                            //             clk.clk
		.reset                   (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (gpo2_ledg_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (gpo2_ledg_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (gpo2_ledg_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (gpo2_ledg_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (gpo2_ledg_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (gpo2_ledg_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (gpo2_ledg_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (gpo2_ledg_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (gpo2_ledg_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (gpo2_ledg_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (gpo2_ledg_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (gpo2_ledg_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (gpo2_ledg_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (gpo2_ledg_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (gpo2_ledg_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (gpo2_ledg_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_009_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                       //                .channel
		.rf_sink_ready           (gpo2_ledg_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (gpo2_ledg_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (gpo2_ledg_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (gpo2_ledg_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (gpo2_ledg_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (gpo2_ledg_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (gpo2_ledg_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (gpo2_ledg_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (gpo2_ledg_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (gpo2_ledg_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),             //                .error
		.rdata_fifo_src_ready    (gpo2_ledg_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gpo2_ledg_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (gpo2_ledg_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpo2_ledg_s1_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpo2_ledg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (gpo2_ledg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (gpo2_ledg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (gpo2_ledg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (gpo2_ledg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (gpo2_ledg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (gpo2_ledg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (gpo2_ledg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (gpo2_ledg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (gpo2_ledg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpo2_ledg_s1_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpo2_ledg_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (gpo2_ledg_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (gpo2_ledg_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (gpo2_ledg_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (gpo2_ledg_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (gpo2_ledg_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ext_sdram_progmem_s1_agent (
		.clk                     (ALTPLL_CLKS_c0_clk),                                       //             clk.clk
		.reset                   (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (ext_sdram_progmem_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ext_sdram_progmem_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ext_sdram_progmem_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ext_sdram_progmem_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ext_sdram_progmem_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (ext_sdram_progmem_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ext_sdram_progmem_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ext_sdram_progmem_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (ext_sdram_progmem_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ext_sdram_progmem_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (ext_sdram_progmem_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (ext_sdram_progmem_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ext_sdram_progmem_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (ext_sdram_progmem_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (ext_sdram_progmem_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (ext_sdram_progmem_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ext_sdram_progmem_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ext_sdram_progmem_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ext_sdram_progmem_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ext_sdram_progmem_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ext_sdram_progmem_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ext_sdram_progmem_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ext_sdram_progmem_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ext_sdram_progmem_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ext_sdram_progmem_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ext_sdram_progmem_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ext_sdram_progmem_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ext_sdram_progmem_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ext_sdram_progmem_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ext_sdram_progmem_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ext_sdram_progmem_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ext_sdram_progmem_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (ext_sdram_progmem_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ext_sdram_progmem_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ext_sdram_progmem_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_sdram_progmem_s1_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                                    //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (ext_sdram_progmem_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ext_sdram_progmem_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ext_sdram_progmem_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ext_sdram_progmem_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ext_sdram_progmem_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ext_sdram_progmem_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ext_sdram_progmem_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ext_sdram_progmem_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ext_sdram_progmem_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ext_sdram_progmem_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_sdram_progmem_s1_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                              //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ext_sdram_progmem_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (ext_sdram_progmem_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (ext_sdram_progmem_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (ext_sdram_progmem_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (ext_sdram_progmem_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (ext_sdram_progmem_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (121),
		.PKT_ORI_BURST_SIZE_L      (119),
		.PKT_RESPONSE_STATUS_H     (118),
		.PKT_RESPONSE_STATUS_L     (117),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (112),
		.PKT_PROTECTION_L          (110),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) niosv_m_cpu_timer_sw_agent_agent (
		.clk                     (ALTPLL_CLKS_c0_clk),                                          //             clk.clk
		.reset                   (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (niosv_m_cpu_timer_sw_agent_agent_m0_address),                 //              m0.address
		.m0_burstcount           (niosv_m_cpu_timer_sw_agent_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (niosv_m_cpu_timer_sw_agent_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (niosv_m_cpu_timer_sw_agent_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (niosv_m_cpu_timer_sw_agent_agent_m0_lock),                    //                .lock
		.m0_readdata             (niosv_m_cpu_timer_sw_agent_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (niosv_m_cpu_timer_sw_agent_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (niosv_m_cpu_timer_sw_agent_agent_m0_read),                    //                .read
		.m0_waitrequest          (niosv_m_cpu_timer_sw_agent_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (niosv_m_cpu_timer_sw_agent_agent_m0_writedata),               //                .writedata
		.m0_write                (niosv_m_cpu_timer_sw_agent_agent_m0_write),                   //                .write
		.rp_endofpacket          (niosv_m_cpu_timer_sw_agent_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (niosv_m_cpu_timer_sw_agent_agent_rp_ready),                   //                .ready
		.rp_valid                (niosv_m_cpu_timer_sw_agent_agent_rp_valid),                   //                .valid
		.rp_data                 (niosv_m_cpu_timer_sw_agent_agent_rp_data),                    //                .data
		.rp_startofpacket        (niosv_m_cpu_timer_sw_agent_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                     //                .channel
		.rf_sink_ready           (niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (niosv_m_cpu_timer_sw_agent_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (niosv_m_cpu_timer_sw_agent_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (niosv_m_cpu_timer_sw_agent_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (niosv_m_cpu_timer_sw_agent_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (niosv_m_cpu_timer_sw_agent_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) niosv_m_cpu_timer_sw_agent_agent_rsp_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                                          //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (niosv_m_cpu_timer_sw_agent_agent_rf_source_data),             //        in.data
		.in_valid          (niosv_m_cpu_timer_sw_agent_agent_rf_source_valid),            //          .valid
		.in_ready          (niosv_m_cpu_timer_sw_agent_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (niosv_m_cpu_timer_sw_agent_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (niosv_m_cpu_timer_sw_agent_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (niosv_m_cpu_timer_sw_agent_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) niosv_m_cpu_timer_sw_agent_agent_rdata_fifo (
		.clk               (ALTPLL_CLKS_c0_clk),                                    //       clk.clk
		.reset             (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	NIOSV_SOC_mm_interconnect_0_router router (
		.sink_ready         (niosv_m_cpu_data_manager_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (niosv_m_cpu_data_manager_agent_write_cp_valid),         //          .valid
		.sink_data          (niosv_m_cpu_data_manager_agent_write_cp_data),          //          .data
		.sink_startofpacket (niosv_m_cpu_data_manager_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosv_m_cpu_data_manager_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                                    //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_src_ready),                                      //       src.ready
		.src_valid          (router_src_valid),                                      //          .valid
		.src_data           (router_src_data),                                       //          .data
		.src_channel        (router_src_channel),                                    //          .channel
		.src_startofpacket  (router_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router router_001 (
		.sink_ready         (niosv_m_cpu_data_manager_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (niosv_m_cpu_data_manager_agent_read_cp_valid),         //          .valid
		.sink_data          (niosv_m_cpu_data_manager_agent_read_cp_data),          //          .data
		.sink_startofpacket (niosv_m_cpu_data_manager_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosv_m_cpu_data_manager_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                                   //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_001_src_ready),                                 //       src.ready
		.src_valid          (router_001_src_valid),                                 //          .valid
		.src_data           (router_001_src_data),                                  //          .data
		.src_channel        (router_001_src_channel),                               //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                            //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (niosv_m_cpu_instruction_manager_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (niosv_m_cpu_instruction_manager_agent_write_cp_valid),         //          .valid
		.sink_data          (niosv_m_cpu_instruction_manager_agent_write_cp_data),          //          .data
		.sink_startofpacket (niosv_m_cpu_instruction_manager_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosv_m_cpu_instruction_manager_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                                           //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_002_src_ready),                                         //       src.ready
		.src_valid          (router_002_src_valid),                                         //          .valid
		.src_data           (router_002_src_data),                                          //          .data
		.src_channel        (router_002_src_channel),                                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                    //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (niosv_m_cpu_instruction_manager_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (niosv_m_cpu_instruction_manager_agent_read_cp_valid),         //          .valid
		.sink_data          (niosv_m_cpu_instruction_manager_agent_read_cp_data),          //          .data
		.sink_startofpacket (niosv_m_cpu_instruction_manager_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosv_m_cpu_instruction_manager_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                                          //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_003_src_ready),                                        //       src.ready
		.src_valid          (router_003_src_valid),                                        //          .valid
		.src_data           (router_003_src_data),                                         //          .data
		.src_channel        (router_003_src_channel),                                      //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                   //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (jtag_uart_dbg_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_dbg_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_dbg_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_dbg_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_dbg_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                                     //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_004_src_ready),                                   //       src.ready
		.src_valid          (router_004_src_valid),                                   //          .valid
		.src_data           (router_004_src_data),                                    //          .data
		.src_channel        (router_004_src_channel),                                 //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                              //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (epcs_flash_controller_avl_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (epcs_flash_controller_avl_csr_agent_rp_valid),            //          .valid
		.sink_data          (epcs_flash_controller_avl_csr_agent_rp_data),             //          .data
		.sink_startofpacket (epcs_flash_controller_avl_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (epcs_flash_controller_avl_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (ALTPLL_CLKS_c2_clk),                                      //       clk.clk
		.reset              (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                    //       src.ready
		.src_valid          (router_005_src_valid),                                    //          .valid
		.src_data           (router_005_src_data),                                     //          .data
		.src_channel        (router_005_src_channel),                                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                               //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (epcs_flash_controller_avl_mem_agent_rp_ready),            //      sink.ready
		.sink_valid         (epcs_flash_controller_avl_mem_agent_rp_valid),            //          .valid
		.sink_data          (epcs_flash_controller_avl_mem_agent_rp_data),             //          .data
		.sink_startofpacket (epcs_flash_controller_avl_mem_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (epcs_flash_controller_avl_mem_agent_rp_endofpacket),      //          .endofpacket
		.clk                (ALTPLL_CLKS_c2_clk),                                      //       clk.clk
		.reset              (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                    //       src.ready
		.src_valid          (router_006_src_valid),                                    //          .valid
		.src_data           (router_006_src_data),                                     //          .data
		.src_channel        (router_006_src_channel),                                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                               //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (soc_sysid_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (soc_sysid_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (soc_sysid_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (soc_sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (soc_sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                             //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_006 router_008 (
		.sink_ready         (niosv_m_cpu_dm_agent_agent_rp_ready),           //      sink.ready
		.sink_valid         (niosv_m_cpu_dm_agent_agent_rp_valid),           //          .valid
		.sink_data          (niosv_m_cpu_dm_agent_agent_rp_data),            //          .data
		.sink_startofpacket (niosv_m_cpu_dm_agent_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (niosv_m_cpu_dm_agent_agent_rp_endofpacket),     //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                          //       src.ready
		.src_valid          (router_008_src_valid),                          //          .valid
		.src_data           (router_008_src_data),                           //          .data
		.src_channel        (router_008_src_channel),                        //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                     //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_004 router_009 (
		.sink_ready         (altpll_clks_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (altpll_clks_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (altpll_clks_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (altpll_clks_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (altpll_clks_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (IN_CLOCK_BRIDGE_out_clk_clk),                                   //       clk.clk
		.reset              (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                          //       src.ready
		.src_valid          (router_009_src_valid),                                          //          .valid
		.src_data           (router_009_src_data),                                           //          .data
		.src_channel        (router_009_src_channel),                                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                     //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_004 router_010 (
		.sink_ready         (uart_serial_com_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (uart_serial_com_s1_agent_rp_valid),             //          .valid
		.sink_data          (uart_serial_com_s1_agent_rp_data),              //          .data
		.sink_startofpacket (uart_serial_com_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (uart_serial_com_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                          //       src.ready
		.src_valid          (router_010_src_valid),                          //          .valid
		.src_data           (router_010_src_data),                           //          .data
		.src_channel        (router_010_src_channel),                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                     //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_004 router_011 (
		.sink_ready         (gpi0_butn_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (gpi0_butn_s1_agent_rp_valid),                   //          .valid
		.sink_data          (gpi0_butn_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (gpi0_butn_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (gpi0_butn_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                          //       src.ready
		.src_valid          (router_011_src_valid),                          //          .valid
		.src_data           (router_011_src_data),                           //          .data
		.src_channel        (router_011_src_channel),                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_004 router_012 (
		.sink_ready         (gpi1_dipsw_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (gpi1_dipsw_s1_agent_rp_valid),                  //          .valid
		.sink_data          (gpi1_dipsw_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (gpi1_dipsw_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (gpi1_dipsw_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                          //       src.ready
		.src_valid          (router_012_src_valid),                          //          .valid
		.src_data           (router_012_src_data),                           //          .data
		.src_channel        (router_012_src_channel),                        //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                     //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_004 router_013 (
		.sink_ready         (gpo2_ledg_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (gpo2_ledg_s1_agent_rp_valid),                   //          .valid
		.sink_data          (gpo2_ledg_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (gpo2_ledg_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (gpo2_ledg_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                          //       src.ready
		.src_valid          (router_013_src_valid),                          //          .valid
		.src_data           (router_013_src_data),                           //          .data
		.src_channel        (router_013_src_channel),                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_014 router_014 (
		.sink_ready         (ext_sdram_progmem_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (ext_sdram_progmem_s1_agent_rp_valid),           //          .valid
		.sink_data          (ext_sdram_progmem_s1_agent_rp_data),            //          .data
		.sink_startofpacket (ext_sdram_progmem_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (ext_sdram_progmem_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                          //       src.ready
		.src_valid          (router_014_src_valid),                          //          .valid
		.src_data           (router_014_src_data),                           //          .data
		.src_channel        (router_014_src_channel),                        //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                     //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_router_004 router_015 (
		.sink_ready         (niosv_m_cpu_timer_sw_agent_agent_rp_ready),         //      sink.ready
		.sink_valid         (niosv_m_cpu_timer_sw_agent_agent_rp_valid),         //          .valid
		.sink_data          (niosv_m_cpu_timer_sw_agent_agent_rp_data),          //          .data
		.sink_startofpacket (niosv_m_cpu_timer_sw_agent_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosv_m_cpu_timer_sw_agent_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ALTPLL_CLKS_c0_clk),                                //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_015_src_ready),                              //       src.ready
		.src_valid          (router_015_src_valid),                              //          .valid
		.src_data           (router_015_src_data),                               //          .data
		.src_channel        (router_015_src_channel),                            //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                         //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) niosv_m_cpu_instruction_manager_wr_limiter (
		.clk                    (ALTPLL_CLKS_c0_clk),                                               //       clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                             //          .valid
		.cmd_sink_data          (router_002_src_data),                                              //          .data
		.cmd_sink_channel       (router_002_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (niosv_m_cpu_instruction_manager_wr_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (niosv_m_cpu_instruction_manager_wr_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (108),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) niosv_m_cpu_instruction_manager_rd_limiter (
		.clk                    (ALTPLL_CLKS_c0_clk),                                               //       clk.clk
		.reset                  (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                             //          .valid
		.cmd_sink_data          (router_003_src_data),                                              //          .data
		.cmd_sink_channel       (router_003_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (niosv_m_cpu_instruction_manager_rd_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (niosv_m_cpu_instruction_manager_rd_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (81),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (73),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ext_sdram_progmem_s1_burst_adapter (
		.clk                   (ALTPLL_CLKS_c0_clk),                                       //       cr0.clk
		.reset                 (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (ext_sdram_progmem_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (ext_sdram_progmem_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (ext_sdram_progmem_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (ext_sdram_progmem_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (ext_sdram_progmem_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (ext_sdram_progmem_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (ext_sdram_progmem_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ext_sdram_progmem_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ext_sdram_progmem_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ext_sdram_progmem_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ext_sdram_progmem_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ext_sdram_progmem_s1_burst_adapter_source0_ready)          //          .ready
	);

	NIOSV_SOC_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                              //      sink.ready
		.sink_channel        (router_src_channel),                            //          .channel
		.sink_data           (router_src_data),                               //          .data
		.sink_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                        //          .endofpacket
		.sink_valid          (router_src_valid),                              //          .valid
		.src0_ready          (cmd_demux_src0_ready),                          //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                          //          .valid
		.src0_data           (cmd_demux_src0_data),                           //          .data
		.src0_channel        (cmd_demux_src0_channel),                        //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                    //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                          //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                          //          .valid
		.src1_data           (cmd_demux_src1_data),                           //          .data
		.src1_channel        (cmd_demux_src1_channel),                        //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                    //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                          //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                          //          .valid
		.src2_data           (cmd_demux_src2_data),                           //          .data
		.src2_channel        (cmd_demux_src2_channel),                        //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                    //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                          //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                          //          .valid
		.src3_data           (cmd_demux_src3_data),                           //          .data
		.src3_channel        (cmd_demux_src3_channel),                        //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                  //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                    //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                          //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                          //          .valid
		.src4_data           (cmd_demux_src4_data),                           //          .data
		.src4_channel        (cmd_demux_src4_channel),                        //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                  //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                    //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                          //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                          //          .valid
		.src5_data           (cmd_demux_src5_data),                           //          .data
		.src5_channel        (cmd_demux_src5_channel),                        //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                  //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                    //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                          //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                          //          .valid
		.src6_data           (cmd_demux_src6_data),                           //          .data
		.src6_channel        (cmd_demux_src6_channel),                        //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                  //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                    //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                          //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                          //          .valid
		.src7_data           (cmd_demux_src7_data),                           //          .data
		.src7_channel        (cmd_demux_src7_channel),                        //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                  //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                    //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                          //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                          //          .valid
		.src8_data           (cmd_demux_src8_data),                           //          .data
		.src8_channel        (cmd_demux_src8_channel),                        //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                  //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                    //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                          //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                          //          .valid
		.src9_data           (cmd_demux_src9_data),                           //          .data
		.src9_channel        (cmd_demux_src9_channel),                        //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                  //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                    //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                         //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                         //          .valid
		.src10_data          (cmd_demux_src10_data),                          //          .data
		.src10_channel       (cmd_demux_src10_channel),                       //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                 //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                   //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                         //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                         //          .valid
		.src11_data          (cmd_demux_src11_data),                          //          .data
		.src11_channel       (cmd_demux_src11_channel),                       //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                 //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket)                    //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_001_src_ready),                          //      sink.ready
		.sink_channel        (router_001_src_channel),                        //          .channel
		.sink_data           (router_001_src_data),                           //          .data
		.sink_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket    (router_001_src_endofpacket),                    //          .endofpacket
		.sink_valid          (router_001_src_valid),                          //          .valid
		.src0_ready          (cmd_demux_001_src0_ready),                      //      src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                      //          .valid
		.src0_data           (cmd_demux_001_src0_data),                       //          .data
		.src0_channel        (cmd_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                //          .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                      //      src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                      //          .valid
		.src1_data           (cmd_demux_001_src1_data),                       //          .data
		.src1_channel        (cmd_demux_001_src1_channel),                    //          .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                //          .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                      //      src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                      //          .valid
		.src2_data           (cmd_demux_001_src2_data),                       //          .data
		.src2_channel        (cmd_demux_001_src2_channel),                    //          .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                //          .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                      //      src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                      //          .valid
		.src3_data           (cmd_demux_001_src3_data),                       //          .data
		.src3_channel        (cmd_demux_001_src3_channel),                    //          .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                //          .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                      //      src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                      //          .valid
		.src4_data           (cmd_demux_001_src4_data),                       //          .data
		.src4_channel        (cmd_demux_001_src4_channel),                    //          .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),              //          .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                //          .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                      //      src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                      //          .valid
		.src5_data           (cmd_demux_001_src5_data),                       //          .data
		.src5_channel        (cmd_demux_001_src5_channel),                    //          .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),              //          .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                //          .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                      //      src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                      //          .valid
		.src6_data           (cmd_demux_001_src6_data),                       //          .data
		.src6_channel        (cmd_demux_001_src6_channel),                    //          .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),              //          .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                //          .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                      //      src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                      //          .valid
		.src7_data           (cmd_demux_001_src7_data),                       //          .data
		.src7_channel        (cmd_demux_001_src7_channel),                    //          .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),              //          .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                //          .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                      //      src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                      //          .valid
		.src8_data           (cmd_demux_001_src8_data),                       //          .data
		.src8_channel        (cmd_demux_001_src8_channel),                    //          .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),              //          .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                //          .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                      //      src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                      //          .valid
		.src9_data           (cmd_demux_001_src9_data),                       //          .data
		.src9_channel        (cmd_demux_001_src9_channel),                    //          .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),              //          .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                //          .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                     //     src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                     //          .valid
		.src10_data          (cmd_demux_001_src10_data),                      //          .data
		.src10_channel       (cmd_demux_001_src10_channel),                   //          .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),             //          .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),               //          .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                     //     src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                     //          .valid
		.src11_data          (cmd_demux_001_src11_data),                      //          .data
		.src11_channel       (cmd_demux_001_src11_channel),                   //          .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),             //          .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket)                //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (ALTPLL_CLKS_c0_clk),                                               //        clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                    //  clk_reset.reset
		.sink_ready         (niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_channel),       //           .channel
		.sink_data          (niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (niosv_m_cpu_instruction_manager_wr_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (niosv_m_cpu_instruction_manager_wr_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                         //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                          //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                         //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                          //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                                   //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                                         //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                                         //           .valid
		.src2_data          (cmd_demux_002_src2_data),                                          //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                                       //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket)                                    //           .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                (ALTPLL_CLKS_c0_clk),                                               //        clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                    //  clk_reset.reset
		.sink_ready         (niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_channel),       //           .channel
		.sink_data          (niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (niosv_m_cpu_instruction_manager_rd_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (niosv_m_cpu_instruction_manager_rd_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                         //           .valid
		.src0_data          (cmd_demux_003_src0_data),                                          //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                         //           .valid
		.src1_data          (cmd_demux_003_src1_data),                                          //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket),                                   //           .endofpacket
		.src2_ready         (cmd_demux_003_src2_ready),                                         //       src2.ready
		.src2_valid         (cmd_demux_003_src2_valid),                                         //           .valid
		.src2_data          (cmd_demux_003_src2_data),                                          //           .data
		.src2_channel       (cmd_demux_003_src2_channel),                                       //           .channel
		.src2_startofpacket (cmd_demux_003_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket   (cmd_demux_003_src2_endofpacket)                                    //           .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (ALTPLL_CLKS_c2_clk),                                      //       clk.clk
		.reset               (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                   //          .valid
		.src_data            (cmd_mux_001_src_data),                                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                       //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                       //          .valid
		.sink0_channel       (crosser_out_channel),                                     //          .channel
		.sink0_data          (crosser_out_data),                                        //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                 //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                                   //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                                   //          .valid
		.sink1_channel       (crosser_003_out_channel),                                 //          .channel
		.sink1_data          (crosser_003_out_data),                                    //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket)                              //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (ALTPLL_CLKS_c2_clk),                                      //       clk.clk
		.reset               (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                   //          .valid
		.src_data            (cmd_mux_002_src_data),                                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                   //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                   //          .valid
		.sink0_channel       (crosser_001_out_channel),                                 //          .channel
		.sink0_data          (crosser_001_out_data),                                    //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                             //          .endofpacket
		.sink1_ready         (crosser_004_out_ready),                                   //     sink1.ready
		.sink1_valid         (crosser_004_out_valid),                                   //          .valid
		.sink1_channel       (crosser_004_out_channel),                                 //          .channel
		.sink1_data          (crosser_004_out_data),                                    //          .data
		.sink1_startofpacket (crosser_004_out_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (crosser_004_out_endofpacket),                             //          .endofpacket
		.sink2_ready         (crosser_006_out_ready),                                   //     sink2.ready
		.sink2_valid         (crosser_006_out_valid),                                   //          .valid
		.sink2_channel       (crosser_006_out_channel),                                 //          .channel
		.sink2_data          (crosser_006_out_data),                                    //          .data
		.sink2_startofpacket (crosser_006_out_startofpacket),                           //          .startofpacket
		.sink2_endofpacket   (crosser_006_out_endofpacket),                             //          .endofpacket
		.sink3_ready         (crosser_007_out_ready),                                   //     sink3.ready
		.sink3_valid         (crosser_007_out_valid),                                   //          .valid
		.sink3_channel       (crosser_007_out_channel),                                 //          .channel
		.sink3_data          (crosser_007_out_data),                                    //          .data
		.sink3_startofpacket (crosser_007_out_startofpacket),                           //          .startofpacket
		.sink3_endofpacket   (crosser_007_out_endofpacket)                              //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                         //          .valid
		.src_data            (cmd_mux_003_src_data),                          //          .data
		.src_channel         (cmd_mux_003_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                        //          .channel
		.sink0_data          (cmd_demux_src3_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                         //          .valid
		.src_data            (cmd_mux_004_src_data),                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                        //          .channel
		.sink0_data          (cmd_demux_src4_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                      //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                      //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                    //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                       //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket),                //          .endofpacket
		.sink3_ready         (cmd_demux_003_src1_ready),                      //     sink3.ready
		.sink3_valid         (cmd_demux_003_src1_valid),                      //          .valid
		.sink3_channel       (cmd_demux_003_src1_channel),                    //          .channel
		.sink3_data          (cmd_demux_003_src1_data),                       //          .data
		.sink3_startofpacket (cmd_demux_003_src1_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src1_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (IN_CLOCK_BRIDGE_out_clk_clk),                                   //       clk.clk
		.reset               (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                         //          .valid
		.src_data            (cmd_mux_005_src_data),                                          //          .data
		.src_channel         (cmd_mux_005_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                         //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                         //          .valid
		.sink0_channel       (crosser_002_out_channel),                                       //          .channel
		.sink0_data          (crosser_002_out_data),                                          //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                                   //          .endofpacket
		.sink1_ready         (crosser_005_out_ready),                                         //     sink1.ready
		.sink1_valid         (crosser_005_out_valid),                                         //          .valid
		.sink1_channel       (crosser_005_out_channel),                                       //          .channel
		.sink1_data          (crosser_005_out_data),                                          //          .data
		.sink1_startofpacket (crosser_005_out_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (crosser_005_out_endofpacket)                                    //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                        //          .channel
		.sink0_data          (cmd_demux_src6_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                         //          .valid
		.src_data            (cmd_mux_007_src_data),                          //          .data
		.src_channel         (cmd_mux_007_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                        //          .channel
		.sink0_data          (cmd_demux_src7_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                         //          .valid
		.src_data            (cmd_mux_008_src_data),                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                        //          .channel
		.sink0_data          (cmd_demux_src8_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                         //          .valid
		.src_data            (cmd_mux_009_src_data),                          //          .data
		.src_channel         (cmd_mux_009_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                        //          .channel
		.sink0_data          (cmd_demux_src9_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux_002 cmd_mux_010 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                         //          .valid
		.src_data            (cmd_mux_010_src_data),                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                       //          .channel
		.sink0_data          (cmd_demux_src10_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src2_ready),                      //     sink2.ready
		.sink2_valid         (cmd_demux_002_src2_valid),                      //          .valid
		.sink2_channel       (cmd_demux_002_src2_channel),                    //          .channel
		.sink2_data          (cmd_demux_002_src2_data),                       //          .data
		.sink2_startofpacket (cmd_demux_002_src2_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src2_endofpacket),                //          .endofpacket
		.sink3_ready         (cmd_demux_003_src2_ready),                      //     sink3.ready
		.sink3_valid         (cmd_demux_003_src2_valid),                      //          .valid
		.sink3_channel       (cmd_demux_003_src2_channel),                    //          .channel
		.sink3_data          (cmd_demux_003_src2_data),                       //          .data
		.sink3_startofpacket (cmd_demux_003_src2_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src2_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                         //          .valid
		.src_data            (cmd_mux_011_src_data),                          //          .data
		.src_channel         (cmd_mux_011_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                       //          .channel
		.sink0_data          (cmd_demux_src11_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)                //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                          //      sink.ready
		.sink_channel       (router_004_src_channel),                        //          .channel
		.sink_data          (router_004_src_data),                           //          .data
		.sink_startofpacket (router_004_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_004_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_src1_data),                           //          .data
		.src1_channel       (rsp_demux_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                     //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (ALTPLL_CLKS_c2_clk),                                      //       clk.clk
		.reset              (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                    //      sink.ready
		.sink_channel       (router_005_src_channel),                                  //          .channel
		.sink_data          (router_005_src_data),                                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_005_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                           //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (ALTPLL_CLKS_c2_clk),                                      //       clk.clk
		.reset              (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                    //      sink.ready
		.sink_channel       (router_006_src_channel),                                  //          .channel
		.sink_data          (router_006_src_data),                                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_006_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                          //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                                //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                                //          .valid
		.src2_data          (rsp_demux_002_src2_data),                                 //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                              //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),                        //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket),                          //          .endofpacket
		.src3_ready         (rsp_demux_002_src3_ready),                                //      src3.ready
		.src3_valid         (rsp_demux_002_src3_valid),                                //          .valid
		.src3_data          (rsp_demux_002_src3_data),                                 //          .data
		.src3_channel       (rsp_demux_002_src3_channel),                              //          .channel
		.src3_startofpacket (rsp_demux_002_src3_startofpacket),                        //          .startofpacket
		.src3_endofpacket   (rsp_demux_002_src3_endofpacket)                           //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //      sink.ready
		.sink_channel       (router_007_src_channel),                        //          .channel
		.sink_data          (router_007_src_data),                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_003_src1_data),                       //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_004_src1_data),                       //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_004_src2_data),                       //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket),                //          .endofpacket
		.src3_ready         (rsp_demux_004_src3_ready),                      //      src3.ready
		.src3_valid         (rsp_demux_004_src3_valid),                      //          .valid
		.src3_data          (rsp_demux_004_src3_data),                       //          .data
		.src3_channel       (rsp_demux_004_src3_channel),                    //          .channel
		.src3_startofpacket (rsp_demux_004_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket   (rsp_demux_004_src3_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (IN_CLOCK_BRIDGE_out_clk_clk),                                   //       clk.clk
		.reset              (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                          //      sink.ready
		.sink_channel       (router_009_src_channel),                                        //          .channel
		.sink_data          (router_009_src_data),                                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_005_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                          //      sink.ready
		.sink_channel       (router_010_src_channel),                        //          .channel
		.sink_data          (router_010_src_data),                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_006_src1_data),                       //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_007_src1_data),                       //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                          //      sink.ready
		.sink_channel       (router_012_src_channel),                        //          .channel
		.sink_data          (router_012_src_data),                           //          .data
		.sink_startofpacket (router_012_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_012_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_008_src1_data),                       //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                          //      sink.ready
		.sink_channel       (router_013_src_channel),                        //          .channel
		.sink_data          (router_013_src_data),                           //          .data
		.sink_startofpacket (router_013_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_013_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_009_src0_data),                       //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_009_src1_data),                       //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux_004 rsp_demux_010 (
		.clk                (ALTPLL_CLKS_c0_clk),                                       //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.sink_ready         (ext_sdram_progmem_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ext_sdram_progmem_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (ext_sdram_progmem_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (ext_sdram_progmem_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ext_sdram_progmem_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ext_sdram_progmem_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                           //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                                 //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                                 //          .valid
		.src1_data          (rsp_demux_010_src1_data),                                  //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                               //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),                           //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                                 //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                                 //          .valid
		.src2_data          (rsp_demux_010_src2_data),                                  //          .data
		.src2_channel       (rsp_demux_010_src2_channel),                               //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),                         //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket),                           //          .endofpacket
		.src3_ready         (rsp_demux_010_src3_ready),                                 //      src3.ready
		.src3_valid         (rsp_demux_010_src3_valid),                                 //          .valid
		.src3_data          (rsp_demux_010_src3_data),                                  //          .data
		.src3_channel       (rsp_demux_010_src3_channel),                               //          .channel
		.src3_startofpacket (rsp_demux_010_src3_startofpacket),                         //          .startofpacket
		.src3_endofpacket   (rsp_demux_010_src3_endofpacket)                            //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset              (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                          //      sink.ready
		.sink_channel       (router_015_src_channel),                        //          .channel
		.sink_data          (router_015_src_data),                           //          .data
		.sink_startofpacket (router_015_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_015_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_011_src0_data),                       //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_011_src1_data),                       //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset                (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                             //       src.ready
		.src_valid            (rsp_mux_src_valid),                             //          .valid
		.src_data             (rsp_mux_src_data),                              //          .data
		.src_channel          (rsp_mux_src_channel),                           //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                          //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                          //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                        //          .channel
		.sink0_data           (rsp_demux_src0_data),                           //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.sink1_ready          (crosser_008_out_ready),                         //     sink1.ready
		.sink1_valid          (crosser_008_out_valid),                         //          .valid
		.sink1_channel        (crosser_008_out_channel),                       //          .channel
		.sink1_data           (crosser_008_out_data),                          //          .data
		.sink1_startofpacket  (crosser_008_out_startofpacket),                 //          .startofpacket
		.sink1_endofpacket    (crosser_008_out_endofpacket),                   //          .endofpacket
		.sink2_ready          (crosser_010_out_ready),                         //     sink2.ready
		.sink2_valid          (crosser_010_out_valid),                         //          .valid
		.sink2_channel        (crosser_010_out_channel),                       //          .channel
		.sink2_data           (crosser_010_out_data),                          //          .data
		.sink2_startofpacket  (crosser_010_out_startofpacket),                 //          .startofpacket
		.sink2_endofpacket    (crosser_010_out_endofpacket),                   //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                      //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                      //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                    //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                       //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                      //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                      //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                    //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                       //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                //          .endofpacket
		.sink5_ready          (crosser_014_out_ready),                         //     sink5.ready
		.sink5_valid          (crosser_014_out_valid),                         //          .valid
		.sink5_channel        (crosser_014_out_channel),                       //          .channel
		.sink5_data           (crosser_014_out_data),                          //          .data
		.sink5_startofpacket  (crosser_014_out_startofpacket),                 //          .startofpacket
		.sink5_endofpacket    (crosser_014_out_endofpacket),                   //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                      //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                      //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                    //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                       //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                      //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                      //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                    //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                       //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                      //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                      //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                    //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                       //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                      //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                      //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                    //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                       //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),              //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                      //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                      //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                    //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                       //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),              //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                      //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                      //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                    //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                       //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),              //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                  (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset                (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                         //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                         //          .valid
		.src_data             (rsp_mux_001_src_data),                          //          .data
		.src_channel          (rsp_mux_001_src_channel),                       //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                          //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                          //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                        //          .channel
		.sink0_data           (rsp_demux_src1_data),                           //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                    //          .endofpacket
		.sink1_ready          (crosser_009_out_ready),                         //     sink1.ready
		.sink1_valid          (crosser_009_out_valid),                         //          .valid
		.sink1_channel        (crosser_009_out_channel),                       //          .channel
		.sink1_data           (crosser_009_out_data),                          //          .data
		.sink1_startofpacket  (crosser_009_out_startofpacket),                 //          .startofpacket
		.sink1_endofpacket    (crosser_009_out_endofpacket),                   //          .endofpacket
		.sink2_ready          (crosser_011_out_ready),                         //     sink2.ready
		.sink2_valid          (crosser_011_out_valid),                         //          .valid
		.sink2_channel        (crosser_011_out_channel),                       //          .channel
		.sink2_data           (crosser_011_out_data),                          //          .data
		.sink2_startofpacket  (crosser_011_out_startofpacket),                 //          .startofpacket
		.sink2_endofpacket    (crosser_011_out_endofpacket),                   //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                      //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                      //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                    //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                       //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),              //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                      //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                      //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                    //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                       //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),              //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                //          .endofpacket
		.sink5_ready          (crosser_015_out_ready),                         //     sink5.ready
		.sink5_valid          (crosser_015_out_valid),                         //          .valid
		.sink5_channel        (crosser_015_out_channel),                       //          .channel
		.sink5_data           (crosser_015_out_data),                          //          .data
		.sink5_startofpacket  (crosser_015_out_startofpacket),                 //          .startofpacket
		.sink5_endofpacket    (crosser_015_out_endofpacket),                   //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                      //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                      //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                    //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                       //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),              //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                      //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                      //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                    //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                       //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),              //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                      //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                      //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                    //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                       //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),              //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                      //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                      //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                    //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                       //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),              //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                      //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                      //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                    //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                       //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),              //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                      //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                      //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                    //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                       //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),              //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                         //          .valid
		.src_data            (rsp_mux_002_src_data),                          //          .data
		.src_channel         (rsp_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_012_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_012_out_valid),                         //          .valid
		.sink0_channel       (crosser_012_out_channel),                       //          .channel
		.sink0_data          (crosser_012_out_data),                          //          .data
		.sink0_startofpacket (crosser_012_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_012_out_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_004_src2_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_004_src2_valid),                      //          .valid
		.sink1_channel       (rsp_demux_004_src2_channel),                    //          .channel
		.sink1_data          (rsp_demux_004_src2_data),                       //          .data
		.sink1_startofpacket (rsp_demux_004_src2_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src2_endofpacket),                //          .endofpacket
		.sink2_ready         (rsp_demux_010_src2_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_010_src2_valid),                      //          .valid
		.sink2_channel       (rsp_demux_010_src2_channel),                    //          .channel
		.sink2_data          (rsp_demux_010_src2_data),                       //          .data
		.sink2_startofpacket (rsp_demux_010_src2_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_010_src2_endofpacket)                 //          .endofpacket
	);

	NIOSV_SOC_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                 (ALTPLL_CLKS_c0_clk),                            //       clk.clk
		.reset               (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                         //          .valid
		.src_data            (rsp_mux_003_src_data),                          //          .data
		.src_channel         (rsp_mux_003_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_013_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_013_out_valid),                         //          .valid
		.sink0_channel       (crosser_013_out_channel),                       //          .channel
		.sink0_data          (crosser_013_out_data),                          //          .data
		.sink0_startofpacket (crosser_013_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_013_out_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_004_src3_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_004_src3_valid),                      //          .valid
		.sink1_channel       (rsp_demux_004_src3_channel),                    //          .channel
		.sink1_data          (rsp_demux_004_src3_data),                       //          .data
		.sink1_startofpacket (rsp_demux_004_src3_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src3_endofpacket),                //          .endofpacket
		.sink2_ready         (rsp_demux_010_src3_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_010_src3_valid),                      //          .valid
		.sink2_channel       (rsp_demux_010_src3_channel),                    //          .channel
		.sink2_data          (rsp_demux_010_src3_data),                       //          .data
		.sink2_startofpacket (rsp_demux_010_src3_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_010_src3_endofpacket)                 //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (100),
		.IN_PKT_RESPONSE_STATUS_L      (99),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (101),
		.IN_PKT_ORI_BURST_SIZE_H       (103),
		.IN_ST_DATA_W                  (104),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (118),
		.OUT_PKT_RESPONSE_STATUS_L     (117),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (119),
		.OUT_PKT_ORI_BURST_SIZE_H      (121),
		.OUT_ST_DATA_W                 (122),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ext_sdram_progmem_s1_rsp_width_adapter (
		.clk                  (ALTPLL_CLKS_c0_clk),                                       //       clk.clk
		.reset                (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (router_014_src_valid),                                     //      sink.valid
		.in_channel           (router_014_src_channel),                                   //          .channel
		.in_startofpacket     (router_014_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (router_014_src_endofpacket),                               //          .endofpacket
		.in_ready             (router_014_src_ready),                                     //          .ready
		.in_data              (router_014_src_data),                                      //          .data
		.out_endofpacket      (ext_sdram_progmem_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ext_sdram_progmem_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ext_sdram_progmem_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ext_sdram_progmem_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ext_sdram_progmem_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ext_sdram_progmem_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (118),
		.IN_PKT_RESPONSE_STATUS_L      (117),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (119),
		.IN_PKT_ORI_BURST_SIZE_H       (121),
		.IN_ST_DATA_W                  (122),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (100),
		.OUT_PKT_RESPONSE_STATUS_L     (99),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (101),
		.OUT_PKT_ORI_BURST_SIZE_H      (103),
		.OUT_ST_DATA_W                 (104),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ext_sdram_progmem_s1_cmd_width_adapter (
		.clk                  (ALTPLL_CLKS_c0_clk),                                       //       clk.clk
		.reset                (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (cmd_mux_010_src_valid),                                    //      sink.valid
		.in_channel           (cmd_mux_010_src_channel),                                  //          .channel
		.in_startofpacket     (cmd_mux_010_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (cmd_mux_010_src_endofpacket),                              //          .endofpacket
		.in_ready             (cmd_mux_010_src_ready),                                    //          .ready
		.in_data              (cmd_mux_010_src_data),                                     //          .data
		.out_endofpacket      (ext_sdram_progmem_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ext_sdram_progmem_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ext_sdram_progmem_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ext_sdram_progmem_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ext_sdram_progmem_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ext_sdram_progmem_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                    // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (ALTPLL_CLKS_c0_clk),                                      //        in_clk.clk
		.in_reset          (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c2_clk),                                      //       out_clk.clk
		.out_reset         (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                    //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                  //              .channel
		.in_data           (cmd_demux_src1_data),                                     //              .data
		.out_ready         (crosser_out_ready),                                       //           out.ready
		.out_valid         (crosser_out_valid),                                       //              .valid
		.out_startofpacket (crosser_out_startofpacket),                               //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                 //              .endofpacket
		.out_channel       (crosser_out_channel),                                     //              .channel
		.out_data          (crosser_out_data),                                        //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (ALTPLL_CLKS_c0_clk),                                      //        in_clk.clk
		.in_reset          (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c2_clk),                                      //       out_clk.clk
		.out_reset         (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                    //            in.ready
		.in_valid          (cmd_demux_src2_valid),                                    //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                            //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                              //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                                  //              .channel
		.in_data           (cmd_demux_src2_data),                                     //              .data
		.out_ready         (crosser_001_out_ready),                                   //           out.ready
		.out_valid         (crosser_001_out_valid),                                   //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                 //              .channel
		.out_data          (crosser_001_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (ALTPLL_CLKS_c0_clk),                                            //        in_clk.clk
		.in_reset          (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                 //  in_clk_reset.reset
		.out_clk           (IN_CLOCK_BRIDGE_out_clk_clk),                                   //       out_clk.clk
		.out_reset         (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                          //            in.ready
		.in_valid          (cmd_demux_src5_valid),                                          //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                                  //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                                    //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                                        //              .channel
		.in_data           (cmd_demux_src5_data),                                           //              .data
		.out_ready         (crosser_002_out_ready),                                         //           out.ready
		.out_valid         (crosser_002_out_valid),                                         //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                       //              .channel
		.out_data          (crosser_002_out_data),                                          //              .data
		.in_empty          (1'b0),                                                          //   (terminated)
		.in_error          (1'b0),                                                          //   (terminated)
		.out_empty         (),                                                              //   (terminated)
		.out_error         ()                                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (ALTPLL_CLKS_c0_clk),                                      //        in_clk.clk
		.in_reset          (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c2_clk),                                      //       out_clk.clk
		.out_reset         (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                              //              .channel
		.in_data           (cmd_demux_001_src1_data),                                 //              .data
		.out_ready         (crosser_003_out_ready),                                   //           out.ready
		.out_valid         (crosser_003_out_valid),                                   //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                 //              .channel
		.out_data          (crosser_003_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (ALTPLL_CLKS_c0_clk),                                      //        in_clk.clk
		.in_reset          (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c2_clk),                                      //       out_clk.clk
		.out_reset         (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                //            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                              //              .channel
		.in_data           (cmd_demux_001_src2_data),                                 //              .data
		.out_ready         (crosser_004_out_ready),                                   //           out.ready
		.out_valid         (crosser_004_out_valid),                                   //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                 //              .channel
		.out_data          (crosser_004_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (ALTPLL_CLKS_c0_clk),                                            //        in_clk.clk
		.in_reset          (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                 //  in_clk_reset.reset
		.out_clk           (IN_CLOCK_BRIDGE_out_clk_clk),                                   //       out_clk.clk
		.out_reset         (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src5_ready),                                      //            in.ready
		.in_valid          (cmd_demux_001_src5_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_001_src5_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src5_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_001_src5_channel),                                    //              .channel
		.in_data           (cmd_demux_001_src5_data),                                       //              .data
		.out_ready         (crosser_005_out_ready),                                         //           out.ready
		.out_valid         (crosser_005_out_valid),                                         //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                       //              .channel
		.out_data          (crosser_005_out_data),                                          //              .data
		.in_empty          (1'b0),                                                          //   (terminated)
		.in_error          (1'b0),                                                          //   (terminated)
		.out_empty         (),                                                              //   (terminated)
		.out_error         ()                                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (ALTPLL_CLKS_c0_clk),                                      //        in_clk.clk
		.in_reset          (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c2_clk),                                      //       out_clk.clk
		.out_reset         (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                              //              .channel
		.in_data           (cmd_demux_002_src0_data),                                 //              .data
		.out_ready         (crosser_006_out_ready),                                   //           out.ready
		.out_valid         (crosser_006_out_valid),                                   //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                 //              .channel
		.out_data          (crosser_006_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (ALTPLL_CLKS_c0_clk),                                      //        in_clk.clk
		.in_reset          (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c2_clk),                                      //       out_clk.clk
		.out_reset         (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src0_ready),                                //            in.ready
		.in_valid          (cmd_demux_003_src0_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_003_src0_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src0_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_003_src0_channel),                              //              .channel
		.in_data           (cmd_demux_003_src0_data),                                 //              .data
		.out_ready         (crosser_007_out_ready),                                   //           out.ready
		.out_valid         (crosser_007_out_valid),                                   //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                 //              .channel
		.out_data          (crosser_007_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (ALTPLL_CLKS_c2_clk),                                      //        in_clk.clk
		.in_reset          (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c0_clk),                                      //       out_clk.clk
		.out_reset         (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                              //              .channel
		.in_data           (rsp_demux_001_src0_data),                                 //              .data
		.out_ready         (crosser_008_out_ready),                                   //           out.ready
		.out_valid         (crosser_008_out_valid),                                   //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                 //              .channel
		.out_data          (crosser_008_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (ALTPLL_CLKS_c2_clk),                                      //        in_clk.clk
		.in_reset          (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c0_clk),                                      //       out_clk.clk
		.out_reset         (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                              //              .channel
		.in_data           (rsp_demux_001_src1_data),                                 //              .data
		.out_ready         (crosser_009_out_ready),                                   //           out.ready
		.out_valid         (crosser_009_out_valid),                                   //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                 //              .channel
		.out_data          (crosser_009_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (ALTPLL_CLKS_c2_clk),                                      //        in_clk.clk
		.in_reset          (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c0_clk),                                      //       out_clk.clk
		.out_reset         (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                              //              .channel
		.in_data           (rsp_demux_002_src0_data),                                 //              .data
		.out_ready         (crosser_010_out_ready),                                   //           out.ready
		.out_valid         (crosser_010_out_valid),                                   //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                 //              .channel
		.out_data          (crosser_010_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (ALTPLL_CLKS_c2_clk),                                      //        in_clk.clk
		.in_reset          (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c0_clk),                                      //       out_clk.clk
		.out_reset         (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                                //            in.ready
		.in_valid          (rsp_demux_002_src1_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_002_src1_channel),                              //              .channel
		.in_data           (rsp_demux_002_src1_data),                                 //              .data
		.out_ready         (crosser_011_out_ready),                                   //           out.ready
		.out_valid         (crosser_011_out_valid),                                   //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                 //              .channel
		.out_data          (crosser_011_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (ALTPLL_CLKS_c2_clk),                                      //        in_clk.clk
		.in_reset          (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c0_clk),                                      //       out_clk.clk
		.out_reset         (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src2_ready),                                //            in.ready
		.in_valid          (rsp_demux_002_src2_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_002_src2_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src2_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_002_src2_channel),                              //              .channel
		.in_data           (rsp_demux_002_src2_data),                                 //              .data
		.out_ready         (crosser_012_out_ready),                                   //           out.ready
		.out_valid         (crosser_012_out_valid),                                   //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                 //              .channel
		.out_data          (crosser_012_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (ALTPLL_CLKS_c2_clk),                                      //        in_clk.clk
		.in_reset          (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c0_clk),                                      //       out_clk.clk
		.out_reset         (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src3_ready),                                //            in.ready
		.in_valid          (rsp_demux_002_src3_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_002_src3_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src3_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_002_src3_channel),                              //              .channel
		.in_data           (rsp_demux_002_src3_data),                                 //              .data
		.out_ready         (crosser_013_out_ready),                                   //           out.ready
		.out_valid         (crosser_013_out_valid),                                   //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_013_out_channel),                                 //              .channel
		.out_data          (crosser_013_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (IN_CLOCK_BRIDGE_out_clk_clk),                                   //        in_clk.clk
		.in_reset          (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c0_clk),                                            //       out_clk.clk
		.out_reset         (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                 // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                      //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                                    //              .channel
		.in_data           (rsp_demux_005_src0_data),                                       //              .data
		.out_ready         (crosser_014_out_ready),                                         //           out.ready
		.out_valid         (crosser_014_out_valid),                                         //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_014_out_channel),                                       //              .channel
		.out_data          (crosser_014_out_data),                                          //              .data
		.in_empty          (1'b0),                                                          //   (terminated)
		.in_error          (1'b0),                                                          //   (terminated)
		.out_empty         (),                                                              //   (terminated)
		.out_error         ()                                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (12),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (IN_CLOCK_BRIDGE_out_clk_clk),                                   //        in_clk.clk
		.in_reset          (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (ALTPLL_CLKS_c0_clk),                                            //       out_clk.clk
		.out_reset         (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),                 // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src1_ready),                                      //            in.ready
		.in_valid          (rsp_demux_005_src1_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_005_src1_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src1_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_005_src1_channel),                                    //              .channel
		.in_data           (rsp_demux_005_src1_data),                                       //              .data
		.out_ready         (crosser_015_out_ready),                                         //           out.ready
		.out_valid         (crosser_015_out_valid),                                         //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                       //              .channel
		.out_data          (crosser_015_out_data),                                          //              .data
		.in_empty          (1'b0),                                                          //   (terminated)
		.in_error          (1'b0),                                                          //   (terminated)
		.out_empty         (),                                                              //   (terminated)
		.out_error         ()                                                               //   (terminated)
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (ALTPLL_CLKS_c0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_dbg_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                               //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (ALTPLL_CLKS_c2_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (epcs_flash_controller_avl_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (epcs_flash_controller_avl_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (epcs_flash_controller_avl_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                         //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (ALTPLL_CLKS_c2_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (EPCS_FLASH_CONTROLLER_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (epcs_flash_controller_avl_mem_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (epcs_flash_controller_avl_mem_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (epcs_flash_controller_avl_mem_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                         //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (ALTPLL_CLKS_c0_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (soc_sysid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (soc_sysid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (soc_sysid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                   //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (ALTPLL_CLKS_c0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (niosv_m_cpu_dm_agent_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (niosv_m_cpu_dm_agent_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (niosv_m_cpu_dm_agent_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (IN_CLOCK_BRIDGE_out_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (ALTPLL_CLKS_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (altpll_clks_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (altpll_clks_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (altpll_clks_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                              //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (ALTPLL_CLKS_c0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uart_serial_com_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (uart_serial_com_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (uart_serial_com_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)              //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (ALTPLL_CLKS_c0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gpi0_butn_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (gpi0_butn_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (gpi0_butn_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (ALTPLL_CLKS_c0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gpi1_dipsw_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (gpi1_dipsw_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (gpi1_dipsw_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)              //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (ALTPLL_CLKS_c0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gpo2_ledg_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (gpo2_ledg_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (gpo2_ledg_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)              //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter_010 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (ALTPLL_CLKS_c0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (ext_sdram_progmem_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (ext_sdram_progmem_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (ext_sdram_progmem_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                //         .error
	);

	NIOSV_SOC_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (ALTPLL_CLKS_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (NIOSV_M_CPU_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (niosv_m_cpu_timer_sw_agent_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                      //         .error
	);

endmodule
