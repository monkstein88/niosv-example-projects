
app.elf:     file format elf32-littleriscv
app.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02100308

Program Header:
0x70000003 off    0x0000aec6 vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000025 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x02100000 paddr 0x02100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00002000 vaddr 0x00000000 paddr 0x02100020 align 2**12
         filesz 0x00000284 memsz 0x00000284 flags r-x
    LOAD off    0x000022a4 vaddr 0x021002a4 paddr 0x021002a4 align 2**12
         filesz 0x00006ef8 memsz 0x00006ef8 flags r-x
    LOAD off    0x00009284 vaddr 0x00000284 paddr 0x0210719c align 2**12
         filesz 0x00001c30 memsz 0x00001d44 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02100000  02100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000284  00000000  02100020  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006ef8  021002a4  021002a4  000022a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000fc  00000284  0210719c  00009284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b34  00000380  02107298  00009380  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000110  00001eb8  02108dd0  0000aeb4  2**3
                  ALLOC
  6 .EXT_SDRAM_PROGMEM 00000000  00001fc8  00001fc8  0000aeb4  2**0
                  CONTENTS
  7 .EPCS_FLASH_CONTROLLER_avl_mem 00000000  02108dcc  02108dcc  0000aeb4  2**0
                  CONTENTS
  8 .comment      00000012  00000000  00000000  0000aeb4  2**0
                  CONTENTS, READONLY
  9 .riscv.attributes 00000025  00000000  00000000  0000aec6  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000628  00000000  00000000  0000aef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   000084c4  00000000  00000000  0000b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003552  00000000  00000000  000139dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00003e73  00000000  00000000  00016f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00000ee8  00000000  00000000  0001ada4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00001392  00000000  00000000  0001bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 000016ac  00000000  00000000  0001d01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  0001e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000070  00000000  00000000  0001e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
02100000 l    d  .entry	00000000 .entry
00000000 l    d  .exceptions	00000000 .exceptions
021002a4 l    d  .text	00000000 .text
00000284 l    d  .rodata	00000000 .rodata
00000380 l    d  .rwdata	00000000 .rwdata
00001eb8 l    d  .bss	00000000 .bss
00001fc8 l    d  .EXT_SDRAM_PROGMEM	00000000 .EXT_SDRAM_PROGMEM
02108dcc l    d  .EPCS_FLASH_CONTROLLER_avl_mem	00000000 .EPCS_FLASH_CONTROLLER_avl_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.S.obj
02100390 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 machine_trap.S.obj
00000000 l       .exceptions	00000000 save_registers
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
02100394 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000380 l     O .rwdata	00001060 JTAG_UART_DBG
000013e0 l     O .rwdata	000000c4 UART_SERIAL_COM
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02100818 l     F .text	00000238 altera_avalon_jtag_uart_irq
02100a50 l     F .text	000000b8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
021012ac l     F .text	000000a8 altera_avalon_uart_irq
02101354 l     F .text	000000e8 altera_avalon_uart_rxirq
0210143c l     F .text	00000158 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
021015ec l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
02101820 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
02101c24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02101c8c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02102020 l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 intel_niosv_irq.c
00000000 l    df *ABS*	00000000 mtimer.c
00000000 l    df *ABS*	00000000 lib_a-atexit.o
00000000 l    df *ABS*	00000000 lib_a-exit.o
00000000 l    df *ABS*	00000000 lib_a-fflush.o
00000000 l    df *ABS*	00000000 lib_a-findfp.o
02102b24 l     F .text	00000040 __fp_lock
02102b64 l     F .text	00000040 __fp_unlock
00000000 l    df *ABS*	00000000 lib_a-freer.o
00000000 l    df *ABS*	00000000 lib_a-fwalk.o
00000000 l    df *ABS*	00000000 lib_a-impure.o
00001650 l     O .rwdata	00000428 impure_data
00000000 l    df *ABS*	00000000 lib_a-lock.o
00000000 l    df *ABS*	00000000 lib_a-mallocr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 lib_a-mlock.o
00000000 l    df *ABS*	00000000 lib_a-puts.o
00000000 l    df *ABS*	00000000 lib_a-reent.o
00000000 l    df *ABS*	00000000 lib_a-sbrkr.o
00000000 l    df *ABS*	00000000 lib_a-stdio.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-sysclose.o
00000000 l    df *ABS*	00000000 lib_a-sysopen.o
00000000 l    df *ABS*	00000000 lib_a-writer.o
00000000 l    df *ABS*	00000000 lib_a-__atexit.o
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
02104780 l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 lib_a-closer.o
00000000 l    df *ABS*	00000000 lib_a-fclose.o
00000000 l    df *ABS*	00000000 lib_a-fini.o
00000000 l    df *ABS*	00000000 lib_a-fvwrite.o
00000000 l    df *ABS*	00000000 lib_a-lseekr.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memmove-stub.o
00000000 l    df *ABS*	00000000 lib_a-openr.o
00000000 l    df *ABS*	00000000 lib_a-readr.o
00000000 l    df *ABS*	00000000 lib_a-reallocr.o
00000000 l    df *ABS*	00000000 lib_a-wsetup.o
00000000 l    df *ABS*	00000000 lib_a-makebuf.o
00000000 l    df *ABS*	00000000 lib_a-fstatr.o
00000000 l    df *ABS*	00000000 lib_a-isattyr.o
00000000 l    df *ABS*	00000000 muldi3.o
00000000 l    df *ABS*	00000000 div.o
00000000 l    df *ABS*	00000000 alt_close.c
02105be4 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02105d4c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02105e54 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
02105f90 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
021060b8 l     F .text	00000048 alt_get_errno
02106100 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
02106354 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001eb0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02106558 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 lib_a-stack_protector.o
00000000 l    df *ABS*	00000000 lib_a-sysfstat.o
00000000 l    df *ABS*	00000000 lib_a-syswrite.o
00000000 l    df *ABS*	00000000 lib_a-signal.o
00000000 l    df *ABS*	00000000 lib_a-signalr.o
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
02107058 l     F .text	00000048 alt_get_errno
02106a60 g     F .text	0000000c .hidden __stack_chk_fail_local
02105abc g     F .text	00000050 _isatty_r
02100460 g     F .text	00000070 alt_main
021040b0 g     F .text	00000094 cleanup_glue
02107038 g     F .text	00000020 _getpid
02103f74 g     F .text	0000012c _puts_r
00001f20 g     O .bss	00000080 alt_irq
02104e6c g     F .text	0000005c _lseek_r
02107298 g       *ABS*	00000000 __flash_rwdata_start
00001fc8 g       *ABS*	00000000 __alt_heap_start
02106fdc g     F .text	00000058 _kill_r
00002680 g       *ABS*	00000000 __global_pointer$
00001f00 g     O .bss	00000001 __lock___atexit_recursive_mutex
02106b0c g     F .text	00000090 _signal_r
021043a0 g     F .text	00000078 __sseek
02102c2c g     F .text	000001a8 __sinit
02102ba4 g     F .text	00000078 __sfmoreglue
00000380 g       *ABS*	00000000 __tls_base
02103f6c g     F .text	00000008 __malloc_unlock
00001ee8 g     O .bss	00000001 __lock___arc4random_mutex
02104f8c g     F .text	0000011c memmove
02102c1c g     F .text	00000010 _cleanup
00001f1c g     O .bss	00000004 __stack_chk_guard
00001eac g     O .rwdata	00000004 __atexit_recursive_mutex
02103530 g     F .text	00000004 __retarget_lock_close
02100000 g     F .entry	00000004 __reset
02100020 g       *ABS*	00000000 __flash_exceptions_start
02105a64 g     F .text	00000058 _fstat_r
00001f18 g     O .bss	00000004 errno
02104310 g     F .text	00000008 __seofread
00001ec4 g     O .bss	00000004 alt_argv
021004d0 g     F .text	00000034 usleep
000014cc g     O .rwdata	00000180 alt_fd_list
021066a4 g     F .text	00000120 alt_find_dev
02103ce4 g     F .text	000001a4 memcpy
02102b18 g     F .text	0000000c _cleanup_r
021025f8 g     F .text	000000ac alt_niosv_timer_sc_isr
021020fc g     F .text	00000078 alt_io_redirect
021040a0 g     F .text	00000010 puts
0210719c g       *ABS*	00000000 __fini_array_end
02105b38 g     F .text	00000048 .hidden __hidden___udivsi3
02100c74 g     F .text	0000022c altera_avalon_jtag_uart_read
02105b38 g     F .text	00000048 .hidden __udivsi3
02106b9c g     F .text	000000c4 _raise_r
02105d94 g     F .text	000000c0 _fstat
0000018c g     F .exceptions	000000f8 handle_trap
00001f14 g     O .bss	00000004 __malloc_top_pad
02107034 g     F .text	00000004 _getpid_r
00001ecc g     O .bss	00000004 __dso_handle
021049cc g     F .text	000004a0 __sfvwrite_r
02106c60 g     F .text	000000e0 __sigtramp_r
02104264 g     F .text	00000050 _sbrk_r
02105104 g     F .text	0000005c _read_r
00001e90 g     O .rwdata	00000004 alt_max_fd
021047e8 g     F .text	00000178 _fclose_r
02102a50 g     F .text	000000c8 fflush
00001f10 g     O .bss	00000004 __malloc_max_sbrked_mem
02106a6c g     F .text	00000018 __stack_chk_init
00001ef4 g     O .bss	00000001 __lock___env_recursive_mutex
02105e9c g     F .text	000000f4 _isatty
00001f08 g     O .bss	00000001 __lock___sinit_recursive_mutex
0000037c g     O .rodata	00000004 _global_impure_ptr
02105160 g     F .text	00000558 _realloc_r
00001fc8 g       *ABS*	00000000 __bss_end
02101eac g     F .text	00000174 alt_iic_isr_register
02102280 g     F .text	00000154 alt_tick
021061ec g     F .text	00000168 _open
021064a4 g     F .text	000000b4 _sbrk
021069c8 g     F .text	00000098 __stack_chk_fail
021011f8 g     F .text	000000b4 altera_avalon_uart_init
00000380 g       *ABS*	00000000 __tbss_start
021026a4 g     F .text	0000003c alt_niosv_mtimecmp_interrupt_init
02102f40 g     F .text	0000002c __fp_lock_all
021021e8 g     F .text	00000098 alt_alarm_stop
000000a0 g     F .exceptions	000000ec alt_irq_handler
000014a4 g     O .rwdata	00000028 alt_dev_null
02104970 g     F .text	0000005c __libc_fini_array
021024ac g     F .text	00000084 alt_niosv_mtime_get
02104144 g     F .text	00000120 _reclaim_reent
02101c08 g     F .text	0000001c alt_dcache_flush_all
00001ef8 g     O .bss	00000001 __lock___malloc_recursive_mutex
00001eb4 g       *ABS*	00000000 __ram_rwdata_end
00001e88 g     O .rwdata	00000008 alt_dev_list
02106a98 g     F .text	00000018 write
02102488 g     F .text	00000024 alt_timestamp_freq
00000380 g       *ABS*	00000000 __ram_rodata_end
02106a84 g     F .text	00000014 fstat
02105b80 g     F .text	00000010 .hidden __umodsi3
00001fc8 g       *ABS*	00000000 end
02101c50 g     F .text	0000003c alt_dev_reg
02103554 g     F .text	00000004 __retarget_lock_release_recursive
02101868 g     F .text	000001b4 altera_avalon_uart_write
02103548 g     F .text	00000008 __retarget_lock_try_acquire_recursive
0210075c g     F .text	000000bc altera_avalon_jtag_uart_init
02000000 g       *ABS*	00000000 __alt_stack_pointer
02101140 g     F .text	00000064 altera_avalon_uart_write_fd
021011a4 g     F .text	00000054 altera_avalon_uart_close_fd
02100ea0 g     F .text	0000023c altera_avalon_jtag_uart_write
02102f20 g     F .text	00000008 __sfp_lock_acquire
02104ec8 g     F .text	000000c4 memchr
021030cc g     F .text	00000304 _free_r
02104648 g     F .text	00000138 __call_exitprocs
00001ea4 g     O .rwdata	00000004 __malloc_sbrk_base
02100308 g     F .text	0000008c _start
00001ed0 g     O .bss	00000004 _alt_tick_rate
02103540 g     F .text	00000008 __retarget_lock_try_acquire
02105fd8 g     F .text	000000e0 _lseek
00001ed8 g     O .bss	00000008 _alt_nticks
02106e04 g     F .text	00000098 signal
0210258c g     F .text	0000006c alt_niosv_mtimecmp_get
0210053c g     F .text	000000ac alt_sys_init
021050a8 g     F .text	0000005c _open_r
00000380 g       *ABS*	00000000 __tdata_source
02104564 g     F .text	000000e4 __register_exitproc
00000000 g       *ABS*	00000000 __alt_mem_EXT_SDRAM_PROGMEM
02100b08 g     F .text	0000006c altera_avalon_jtag_uart_close
02105b0c g     F .text	00000024 .hidden __mulsi3
00000380 g       *ABS*	00000000 __ram_rwdata_start
00000284 g       *ABS*	00000000 __ram_rodata_start
00001fa0 g     O .bss	00000028 __malloc_current_mallinfo
00001ee0 g     O .bss	00000008 alt_niosv_timestamp_offset
00001ebc g     O .bss	00000004 alt_niosv_timer_interrupt_handler
021005e8 g     F .text	00000064 altera_avalon_jtag_uart_read_fd
02106900 g     F .text	000000c8 alt_get_fd
02101b80 g     F .text	00000088 alt_busy_sleep
02104798 g     F .text	00000050 _close_r
021006b0 g     F .text	00000054 altera_avalon_jtag_uart_close_fd
00001fc8 g       *ABS*	00000000 __alt_stack_base
02100704 g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
02103534 g     F .text	00000004 __retarget_lock_close_recursive
021056b8 g     F .text	00000144 __swsetup_r
02102dd4 g     F .text	0000014c __sfp
00001a78 g     O .rwdata	00000408 __malloc_av_
02102f38 g     F .text	00000008 __sinit_lock_release
021042b4 g     F .text	0000005c __sread
021067c4 g     F .text	0000013c alt_find_file
02101cd4 g     F .text	000000a8 alt_dev_llist_insert
02103f64 g     F .text	00000008 __malloc_lock
0210719c g       *ABS*	00000000 __fini_array_start
02102970 g     F .text	000000e0 _fflush_r
0210353c g     F .text	00000004 __retarget_lock_acquire_recursive
00001eb8 g       *ABS*	00000000 __bss_start
00000380 g       *ABS*	00000000 __tdata_start
00000380 g       *ABS*	00000000 __tdata_end
02103e88 g     F .text	000000dc memset
021002a4 g     F .text	00000064 main
00001ec8 g     O .bss	00000004 alt_envp
00001f0c g     O .bss	00000004 __malloc_max_total_mem
0210064c g     F .text	00000064 altera_avalon_jtag_uart_write_fd
0210352c g     F .text	00000004 __retarget_lock_init_recursive
02104418 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
02104960 g     F .text	00000010 fclose
021023f8 g     F .text	0000003c alt_timestamp_start
0210719c g       *ABS*	00000000 __init_array_end
02103558 g     F .text	0000078c _malloc_r
00001e94 g     O .rwdata	00000004 alt_errno
02106e9c g     F .text	00000060 _init_signal
021033d0 g     F .text	000000a4 _fwalk
02105b30 g     F .text	00000084 .hidden __divsi3
02102f98 g     F .text	00000134 _malloc_trim_r
0210719c g       *ABS*	00000000 __flash_rodata_start
02103528 g     F .text	00000004 __retarget_lock_init
02100504 g     F .text	00000038 alt_irq_init
02102174 g     F .text	00000074 alt_release_fd
021026e0 g     F .text	00000014 atexit
02104508 g     F .text	0000005c _write_r
00001ea0 g     O .rwdata	00000004 _impure_ptr
00001ec0 g     O .bss	00000004 alt_argc
02102724 g     F .text	0000024c __sflush_r
02101ddc g     F .text	00000060 _do_dtors
02102f6c g     F .text	0000002c __fp_unlock_all
00001e80 g     O .rwdata	00000008 alt_fs_list
00000000 g       *ABS*	00000000 __ram_exceptions_start
02102434 g     F .text	00000054 alt_timestamp
0210598c g     F .text	000000d8 __swhatbuf_r
02101e58 g     F .text	00000054 alt_ic_isr_register
00000000 g       .exceptions	00000000 trap_vector
021065a0 g     F .text	00000104 _write
00001eb4 g       *ABS*	00000000 _edata
021010dc g     F .text	00000064 altera_avalon_uart_read_fd
00001fc8 g       *ABS*	00000000 _end
00000284 g       *ABS*	00000000 __ram_exceptions_end
00001efc g     O .bss	00000001 __lock___at_quick_exit_mutex
02100b74 g     F .text	00000100 altera_avalon_jtag_uart_ioctl
021023d4 g     F .text	00000024 intel_niosv_irq_init
02104318 g     F .text	00000088 __swrite
00001ea8 g     O .rwdata	00000004 __malloc_trim_threshold
021026f4 g     F .text	00000030 exit
02103474 g     F .text	000000b4 _fwalk_reent
02105bb4 g     F .text	00000030 .hidden __modsi3
021070a0 g     F .text	000000f4 _kill
02000000 g       *ABS*	00000000 __alt_data_end
00000380 g       *ABS*	00000000 __tbss_end
02102f28 g     F .text	00000008 __sfp_lock_release
0210639c g     F .text	00000108 _read
02107194 g       *ABS*	00000000 __init_array_start
02103538 g     F .text	00000004 __retarget_lock_acquire
02103550 g     F .text	00000004 __retarget_lock_release
02101594 g     F .text	00000058 altera_avalon_uart_close
02105d0c g     F .text	00000040 _exit
02101a1c g     F .text	00000164 alt_alarm_start
00001eec g     O .bss	00000001 __lock___dd_hash_mutex
021057fc g     F .text	00000190 __smakebuf_r
00001ef0 g     O .bss	00000001 __lock___tz_mutex
02104420 g     F .text	0000008c strlen
02106ab0 g     F .text	0000005c _init_signal_r
021044bc g     F .text	0000004c open
02101e3c g     F .text	0000001c alt_icache_flush_all
02102530 g     F .text	0000005c alt_niosv_mtimecmp_set
02101634 g     F .text	000001ec altera_avalon_uart_read
00001e98 g     O .rwdata	00000008 alt_alarm_list
02101d7c g     F .text	00000060 _do_ctors
02106efc g     F .text	000000e0 __sigtramp
021044ac g     F .text	00000010 close
021003f8 g     F .text	00000068 alt_load
00001eb8 g     O .bss	00000004 alt_niosv_software_interrupt_handler
00001f04 g     O .bss	00000001 __lock___sfp_recursive_mutex
02106d40 g     F .text	000000c4 raise
02105c2c g     F .text	000000e0 _close
02000000 g       *ABS*	00000000 __alt_mem_EPCS_FLASH_CONTROLLER_avl_mem
02102f30 g     F .text	00000008 __sinit_lock_acquire



Disassembly of section .entry:

02100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */

    /* Jump to the _start entry point in the .text section. */
    tail _start
 2100000:	3080006f          	j	2100308 <_start>
	...

Disassembly of section .exceptions:

00000000 <trap_vector>:
    /* Save caller-saved registers on the stack */

#if __riscv_flen == 32 // rv32if
    addi sp, sp, -36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
    addi sp, sp, -16 * 4
   0:	fc010113          	addi	sp,sp,-64
#else // rv32e (16-bit)
    addi sp, sp, -10 * 4
#endif

    /* rv32e (16-bit), rv32i and rv32if */
    sw ra,  0 * 4(sp)
   4:	00112023          	sw	ra,0(sp)
    sw t0,  1 * 4(sp)
   8:	00512223          	sw	t0,4(sp)
    sw t1,  2 * 4(sp)
   c:	00612423          	sw	t1,8(sp)
    sw t2,  3 * 4(sp)
  10:	00712623          	sw	t2,12(sp)
    sw a0,  4 * 4(sp)
  14:	00a12823          	sw	a0,16(sp)
    sw a1,  5 * 4(sp)
  18:	00b12a23          	sw	a1,20(sp)
    sw a2,  6 * 4(sp)
  1c:	00c12c23          	sw	a2,24(sp)
    sw a3,  7 * 4(sp)
  20:	00d12e23          	sw	a3,28(sp)
    sw a4,  8 * 4(sp)
  24:	02e12023          	sw	a4,32(sp)
    sw a5,  9 * 4(sp)
  28:	02f12223          	sw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32 
    sw a6, 10 * 4(sp)
  2c:	03012423          	sw	a6,40(sp)
    sw a7, 11 * 4(sp)
  30:	03112623          	sw	a7,44(sp)
    sw t3, 12 * 4(sp)
  34:	03c12823          	sw	t3,48(sp)
    sw t4, 13 * 4(sp)
  38:	03d12a23          	sw	t4,52(sp)
    sw t5, 14 * 4(sp)
  3c:	03e12c23          	sw	t5,56(sp)
    sw t6, 15 * 4(sp)
  40:	03f12e23          	sw	t6,60(sp)
    fsw fa6, 34 * 4(sp)
    fsw fa7, 35 * 4(sp)
#endif
    
    /* Call handle_trap to dispatch the correct handler, if available */
    csrr a0, mcause
  44:	34202573          	csrr	a0,mcause
    csrr a1, mepc
  48:	341025f3          	csrr	a1,mepc
    csrr a2, mtval
  4c:	34302673          	csrr	a2,mtval
    jal handle_trap
  50:	13c000ef          	jal	ra,18c <handle_trap>
    csrw mepc, a0
  54:	34151073          	csrw	mepc,a0

    /* Restore caller-saved registers */

    /* rv32e (16-bit), rv32i and rv32if */
    lw ra,  0 * 4(sp)
  58:	00012083          	lw	ra,0(sp)
    lw t0,  1 * 4(sp)
  5c:	00412283          	lw	t0,4(sp)
    lw t1,  2 * 4(sp)
  60:	00812303          	lw	t1,8(sp)
    lw t2,  3 * 4(sp)
  64:	00c12383          	lw	t2,12(sp)
    lw a0,  4 * 4(sp)
  68:	01012503          	lw	a0,16(sp)
    lw a1,  5 * 4(sp)
  6c:	01412583          	lw	a1,20(sp)
    lw a2,  6 * 4(sp)
  70:	01812603          	lw	a2,24(sp)
    lw a3,  7 * 4(sp)
  74:	01c12683          	lw	a3,28(sp)
    lw a4,  8 * 4(sp)
  78:	02012703          	lw	a4,32(sp)
    lw a5,  9 * 4(sp)
  7c:	02412783          	lw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32	
    lw a6, 10 * 4(sp)
  80:	02812803          	lw	a6,40(sp)
    lw a7, 11 * 4(sp)
  84:	02c12883          	lw	a7,44(sp)
    lw t3, 12 * 4(sp)
  88:	03012e03          	lw	t3,48(sp)
    lw t4, 13 * 4(sp)
  8c:	03412e83          	lw	t4,52(sp)
    lw t5, 14 * 4(sp)
  90:	03812f03          	lw	t5,56(sp)
    lw t6, 15 * 4(sp)
  94:	03c12f83          	lw	t6,60(sp)
#endif

#if __riscv_flen == 32 // rv32if
    addi sp, sp, 36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
	addi sp, sp, 16 * 4
  98:	04010113          	addi	sp,sp,64
    lw s0, 0(sp)
    lw s1, 4(sp)
    addi sp, sp, 8
#endif

    mret
  9c:	30200073          	mret

000000a0 <alt_irq_handler>:
 * This means that if there is never a call to alt_irq_register() then
 * this function will not get linked in to the executable. This is acceptable
 * since if no handler is ever registered, then an interrupt can never occur.
 */
void alt_irq_handler (void)
{
  a0:	fd010113          	addi	sp,sp,-48
  a4:	02112623          	sw	ra,44(sp)
  a8:	02812423          	sw	s0,40(sp)
  ac:	03010413          	addi	s0,sp,48
    alt_u32 i;

    /*
     * Notify the operating system that we are at interrupt level.
     */  
    ALT_OS_INT_ENTER();
  b0:	00000013          	nop
{
#if ALT_HAS_IRQ_SUPPORT
    alt_u32 active;
    alt_u32 enabled;

    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
  b4:	344027f3          	csrr	a5,mip
  b8:	fef42023          	sw	a5,-32(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
  bc:	304027f3          	csrr	a5,mie
  c0:	fef42223          	sw	a5,-28(s0)

    // Since this is used by alt_irq_handler, we want to only process the upper 16-bits
    // --> the interrupt lines connected via Platform Designer...
    return (active & enabled) >> 16;
  c4:	fe042703          	lw	a4,-32(s0)
  c8:	fe442783          	lw	a5,-28(s0)
  cc:	00f777b3          	and	a5,a4,a5
  d0:	0107d793          	srli	a5,a5,0x10
     * reduced by finding out which interrupts are pending as late as possible.
     * Consider the case where the high priority interupt is asserted during
     * the interrupt entry sequence for a lower priority interrupt to see why
     * this is the case.
     */
    active = alt_irq_pending();
  d4:	fcf42a23          	sw	a5,-44(s0)

    do
    {
        i = 0;
  d8:	fc042e23          	sw	zero,-36(s0)
        mask = 1;
  dc:	00100793          	li	a5,1
  e0:	fcf42c23          	sw	a5,-40(s0)
         * called to clear the interrupt condition.
         */

        do
        {
            if (active & mask)
  e4:	fd442703          	lw	a4,-44(s0)
  e8:	fd842783          	lw	a5,-40(s0)
  ec:	00f777b3          	and	a5,a4,a5
  f0:	04078e63          	beqz	a5,14c <alt_irq_handler+0xac>
            {
                alt_irq[i].handler(alt_irq[i].context); 
  f4:	8a018713          	addi	a4,gp,-1888 # 1f20 <alt_irq>
  f8:	fdc42783          	lw	a5,-36(s0)
  fc:	00379793          	slli	a5,a5,0x3
 100:	00f707b3          	add	a5,a4,a5
 104:	0007a703          	lw	a4,0(a5)
 108:	8a018693          	addi	a3,gp,-1888 # 1f20 <alt_irq>
 10c:	fdc42783          	lw	a5,-36(s0)
 110:	00379793          	slli	a5,a5,0x3
 114:	00f687b3          	add	a5,a3,a5
 118:	0047a783          	lw	a5,4(a5)
 11c:	00078513          	mv	a0,a5
 120:	000700e7          	jalr	a4
                break;
 124:	00000013          	nop
    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
 128:	344027f3          	csrr	a5,mip
 12c:	fef42423          	sw	a5,-24(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
 130:	304027f3          	csrr	a5,mie
 134:	fef42623          	sw	a5,-20(s0)
    return (active & enabled) >> 16;
 138:	fe842703          	lw	a4,-24(s0)
 13c:	fec42783          	lw	a5,-20(s0)
 140:	00f777b3          	and	a5,a4,a5
 144:	0107d793          	srli	a5,a5,0x10
 148:	0200006f          	j	168 <alt_irq_handler+0xc8>
            }
            
            mask <<= 1;
 14c:	fd842783          	lw	a5,-40(s0)
 150:	00179793          	slli	a5,a5,0x1
 154:	fcf42c23          	sw	a5,-40(s0)
            i++;
 158:	fdc42783          	lw	a5,-36(s0)
 15c:	00178793          	addi	a5,a5,1
 160:	fcf42e23          	sw	a5,-36(s0)
            if (active & mask)
 164:	f81ff06f          	j	e4 <alt_irq_handler+0x44>
            
        } while (1);

        active = alt_irq_pending();
 168:	fcf42a23          	sw	a5,-44(s0)
    
    } while (active);
 16c:	fd442783          	lw	a5,-44(s0)
 170:	f60794e3          	bnez	a5,d8 <alt_irq_handler+0x38>

    /*
     * Notify the operating system that interrupt processing is complete.
     */ 

    ALT_OS_INT_EXIT();
 174:	00000013          	nop
}
 178:	00000013          	nop
 17c:	02c12083          	lw	ra,44(sp)
 180:	02812403          	lw	s0,40(sp)
 184:	03010113          	addi	sp,sp,48
 188:	00008067          	ret

0000018c <handle_trap>:
{
 18c:	fd010113          	addi	sp,sp,-48
 190:	02112623          	sw	ra,44(sp)
 194:	02812423          	sw	s0,40(sp)
 198:	03010413          	addi	s0,sp,48
 19c:	fca42e23          	sw	a0,-36(s0)
 1a0:	fcb42c23          	sw	a1,-40(s0)
 1a4:	fcc42a23          	sw	a2,-44(s0)
    is_irq = (cause & NIOSV_MCAUSE_INTERRUPT_MASK);
 1a8:	fdc42703          	lw	a4,-36(s0)
 1ac:	800007b7          	lui	a5,0x80000
 1b0:	00f777b3          	and	a5,a4,a5
 1b4:	fef42423          	sw	a5,-24(s0)
    exception_code = (cause & ~NIOSV_MCAUSE_INTERRUPT_MASK);
 1b8:	fdc42703          	lw	a4,-36(s0)
 1bc:	800007b7          	lui	a5,0x80000
 1c0:	fff7c793          	not	a5,a5
 1c4:	00f777b3          	and	a5,a4,a5
 1c8:	fef42623          	sw	a5,-20(s0)
    if (is_irq) {
 1cc:	fe842783          	lw	a5,-24(s0)
 1d0:	08078063          	beqz	a5,250 <handle_trap+0xc4>
        switch (exception_code) {
 1d4:	fec42703          	lw	a4,-20(s0)
 1d8:	00300793          	li	a5,3
 1dc:	02f70c63          	beq	a4,a5,214 <handle_trap+0x88>
 1e0:	fec42703          	lw	a4,-20(s0)
 1e4:	00700793          	li	a5,7
 1e8:	04f71a63          	bne	a4,a5,23c <handle_trap+0xb0>
                if (alt_niosv_timer_interrupt_handler) {
 1ec:	83c1a783          	lw	a5,-1988(gp) # 1ebc <alt_niosv_timer_interrupt_handler>
 1f0:	06078463          	beqz	a5,258 <handle_trap+0xcc>
                    ALT_OS_INT_ENTER();
 1f4:	00000013          	nop
                    alt_niosv_timer_interrupt_handler(cause, epc, tval);
 1f8:	83c1a783          	lw	a5,-1988(gp) # 1ebc <alt_niosv_timer_interrupt_handler>
 1fc:	fd442603          	lw	a2,-44(s0)
 200:	fd842583          	lw	a1,-40(s0)
 204:	fdc42503          	lw	a0,-36(s0)
 208:	000780e7          	jalr	a5 # 80000000 <__flash_rwdata_start+0x7def8d68>
                    ALT_OS_INT_EXIT();
 20c:	00000013          	nop
                break;
 210:	0480006f          	j	258 <handle_trap+0xcc>
                if (alt_niosv_software_interrupt_handler) {
 214:	8381a783          	lw	a5,-1992(gp) # 1eb8 <alt_niosv_software_interrupt_handler>
 218:	04078463          	beqz	a5,260 <handle_trap+0xd4>
                    ALT_OS_INT_ENTER();
 21c:	00000013          	nop
                    alt_niosv_software_interrupt_handler(cause, epc, tval);
 220:	8381a783          	lw	a5,-1992(gp) # 1eb8 <alt_niosv_software_interrupt_handler>
 224:	fd442603          	lw	a2,-44(s0)
 228:	fd842583          	lw	a1,-40(s0)
 22c:	fdc42503          	lw	a0,-36(s0)
 230:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 234:	00000013          	nop
                break;
 238:	0280006f          	j	260 <handle_trap+0xd4>
                if (exception_code >= 16) {
 23c:	fec42703          	lw	a4,-20(s0)
 240:	00f00793          	li	a5,15
 244:	02e7f263          	bgeu	a5,a4,268 <handle_trap+0xdc>
                    alt_irq_handler();
 248:	e59ff0ef          	jal	ra,a0 <alt_irq_handler>
                break;
 24c:	01c0006f          	j	268 <handle_trap+0xdc>
            NIOSV_EBREAK();
 250:	00100073          	ebreak
 254:	0180006f          	j	26c <handle_trap+0xe0>
                break;
 258:	00000013          	nop
 25c:	0100006f          	j	26c <handle_trap+0xe0>
                break;
 260:	00000013          	nop
 264:	0080006f          	j	26c <handle_trap+0xe0>
                break;
 268:	00000013          	nop
    return epc;
 26c:	fd842783          	lw	a5,-40(s0)
}
 270:	00078513          	mv	a0,a5
 274:	02c12083          	lw	ra,44(sp)
 278:	02812403          	lw	s0,40(sp)
 27c:	03010113          	addi	sp,sp,48
 280:	00008067          	ret

Disassembly of section .text:

021002a4 <main>:
#include <altera_avalon_pio_regs.h>



int main(void)
{
 21002a4:	fe010113          	addi	sp,sp,-32
 21002a8:	00112e23          	sw	ra,28(sp)
 21002ac:	00812c23          	sw	s0,24(sp)
 21002b0:	02010413          	addi	s0,sp,32

    printf("\nHello from NIOS-V on DE0-NANO: booting and running from EPCS. Variables, data and exceptions stored in external SDRAM!\n");
 21002b4:	28400513          	li	a0,644
 21002b8:	5e9030ef          	jal	ra,21040a0 <puts>
    fflush(stdout);
 21002bc:	000027b7          	lui	a5,0x2
 21002c0:	ea07a783          	lw	a5,-352(a5) # 1ea0 <_impure_ptr>
 21002c4:	0087a783          	lw	a5,8(a5)
 21002c8:	00078513          	mv	a0,a5
 21002cc:	784020ef          	jal	ra,2102a50 <fflush>
	uint8_t count = 0;
 21002d0:	fe0405a3          	sb	zero,-21(s0)
    while(1)
    {
    	IOWR_ALTERA_AVALON_PIO_DATA(GPO2_LEDG_BASE, count++);
 21002d4:	feb44783          	lbu	a5,-21(s0)
 21002d8:	00178713          	addi	a4,a5,1
 21002dc:	fee405a3          	sb	a4,-21(s0)
 21002e0:	fef42623          	sw	a5,-20(s0)
 21002e4:	028107b7          	lui	a5,0x2810
 21002e8:	04078793          	addi	a5,a5,64 # 2810040 <__flash_rwdata_start+0x708da8>
 21002ec:	fec42703          	lw	a4,-20(s0)
 21002f0:	00e7a023          	sw	a4,0(a5)
        usleep(100000);
 21002f4:	000187b7          	lui	a5,0x18
 21002f8:	6a078513          	addi	a0,a5,1696 # 186a0 <__global_pointer$+0x16020>
 21002fc:	1d4000ef          	jal	ra,21004d0 <usleep>
    	IOWR_ALTERA_AVALON_PIO_DATA(GPO2_LEDG_BASE, count++);
 2100300:	00000013          	nop
 2100304:	fd1ff06f          	j	21002d4 <main+0x30>

02100308 <_start>:
    .type _start, @function
_start:
#if ALT_CPU_HAS_CSR_SUPPORT
    /* assume that we are in machine mode on startup */
    /* setup trap to catch anything that goes wrong early in the boot process */
    la t0, trap_vector
 2100308:	fdf00297          	auipc	t0,0xfdf00
 210030c:	cf828293          	addi	t0,t0,-776 # 0 <__alt_mem_EXT_SDRAM_PROGMEM>
    csrw mtvec, t0
 2100310:	30529073          	csrw	mtvec,t0

    /* disable all interrupt */
    li t0, 0x88
 2100314:	08800293          	li	t0,136
    csrc mstatus, t0
 2100318:	3002b073          	csrc	mstatus,t0
    csrw mie, zero
 210031c:	30401073          	csrw	mie,zero
    csrw mip, zero
 2100320:	34401073          	csrw	mip,zero
#endif /* Initialize Data Cache */
#endif /* ALT_SIM_OPTIMIZE */

    .option push
    .option norelax
    la gp, __global_pointer$
 2100324:	fdf02197          	auipc	gp,0xfdf02
 2100328:	35c18193          	addi	gp,gp,860 # 2680 <__global_pointer$>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    la sp, __alt_stack_pointer
 210032c:	fff00117          	auipc	sp,0xfff00
 2100330:	cd410113          	addi	sp,sp,-812 # 2000000 <__alt_data_end>
    /* Log that the BSS is about to be cleared. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_bss)
#endif /* ALT_LOG_ENABLE */

    la t1, __bss_start
 2100334:	83818313          	addi	t1,gp,-1992 # 1eb8 <alt_niosv_software_interrupt_handler>
    la t2, __bss_end
 2100338:	94818393          	addi	t2,gp,-1720 # 1fc8 <__alt_heap_start>
0:
    sw zero, (t1)
 210033c:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
 2100340:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
 2100344:	fe736ce3          	bltu	t1,t2,210033c <_start+0x34>
/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD
    call alt_load
 2100348:	0b0000ef          	jal	ra,21003f8 <alt_load>
 */
#ifndef ALT_SIM_OPTIMIZE
.globl __tbss_start
.globl __tbss_end

    la t1, __tbss_start
 210034c:	38000313          	li	t1,896
    la t2, __tbss_end
 2100350:	38000393          	li	t2,896
    
    // Check if we need to skip this (if .tbss is empty)
    bgeu t1, t2, 1f
 2100354:	00737863          	bgeu	t1,t2,2100364 <_start+0x5c>
0:
    sw zero, (t1)
 2100358:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
 210035c:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
 2100360:	fe736ce3          	bltu	t1,t2,2100358 <_start+0x50>
// Copy tdata to tdata golden source location
.globl __tdata_start
.globl __tdata_end
.globl __tdata_source

    la t0, __tdata_start
 2100364:	38000293          	li	t0,896
    la t1, __tdata_end
 2100368:	38000313          	li	t1,896
    la t2, __tdata_source
 210036c:	38000393          	li	t2,896

    // Check if we need to skip this (if .tdata is empty)
    bgeu t0, t1, 1f
 2100370:	0062fc63          	bgeu	t0,t1,2100388 <_start+0x80>
0:
    lw s1, (t0)
 2100374:	0002a483          	lw	s1,0(t0)
    sw s1, (t2)
 2100378:	0093a023          	sw	s1,0(t2)
    addi t0, t0, 4
 210037c:	00428293          	addi	t0,t0,4
    addi t2, t2, 4
 2100380:	00438393          	addi	t2,t2,4
    bltu t0, t1, 0b
 2100384:	fe62e8e3          	bltu	t0,t1,2100374 <_start+0x6c>
1:

// Assign thread pointer register (tp) to main thread tls base
.globl __tls_base
    la tp, __tls_base
 2100388:	38000213          	li	tp,896
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_alt_main)
#endif /* ALT_LOG_ENABLE */

    /* Call the C entry point. It should never return. */
    call alt_main
 210038c:	0d4000ef          	jal	ra,2100460 <alt_main>

02100390 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    j alt_after_alt_main
 2100390:	0000006f          	j	2100390 <alt_after_alt_main>

02100394 <alt_load_section>:
 2100394:	fe010113          	addi	sp,sp,-32
 2100398:	00812e23          	sw	s0,28(sp)
 210039c:	02010413          	addi	s0,sp,32
 21003a0:	fea42623          	sw	a0,-20(s0)
 21003a4:	feb42423          	sw	a1,-24(s0)
 21003a8:	fec42223          	sw	a2,-28(s0)
 21003ac:	fe842703          	lw	a4,-24(s0)
 21003b0:	fec42783          	lw	a5,-20(s0)
 21003b4:	02f70a63          	beq	a4,a5,21003e8 <alt_load_section+0x54>
 21003b8:	0240006f          	j	21003dc <alt_load_section+0x48>
{
  if (to != from)
  {
    while( to != end )
    {
      *to++ = *from++;
 21003bc:	fec42703          	lw	a4,-20(s0)
 21003c0:	00470793          	addi	a5,a4,4
 21003c4:	fef42623          	sw	a5,-20(s0)
 21003c8:	fe842783          	lw	a5,-24(s0)
 21003cc:	00478693          	addi	a3,a5,4
 21003d0:	fed42423          	sw	a3,-24(s0)
 21003d4:	00072703          	lw	a4,0(a4)
 21003d8:	00e7a023          	sw	a4,0(a5)
    while( to != end )
 21003dc:	fe842703          	lw	a4,-24(s0)
 21003e0:	fe442783          	lw	a5,-28(s0)
 21003e4:	fcf71ce3          	bne	a4,a5,21003bc <alt_load_section+0x28>
    }
  }
}
 21003e8:	00000013          	nop
 21003ec:	01c12403          	lw	s0,28(sp)
 21003f0:	02010113          	addi	sp,sp,32
 21003f4:	00008067          	ret

021003f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 21003f8:	ff010113          	addi	sp,sp,-16
 21003fc:	00112623          	sw	ra,12(sp)
 2100400:	00812423          	sw	s0,8(sp)
 2100404:	01010413          	addi	s0,sp,16
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2100408:	83418613          	addi	a2,gp,-1996 # 1eb4 <__ram_rwdata_end>
 210040c:	38000593          	li	a1,896
 2100410:	021077b7          	lui	a5,0x2107
 2100414:	29878513          	addi	a0,a5,664 # 2107298 <__flash_rwdata_start>
 2100418:	f7dff0ef          	jal	ra,2100394 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 210041c:	28400613          	li	a2,644
 2100420:	00000593          	li	a1,0
 2100424:	021007b7          	lui	a5,0x2100
 2100428:	02078513          	addi	a0,a5,32 # 2100020 <__flash_exceptions_start>
 210042c:	f69ff0ef          	jal	ra,2100394 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2100430:	38000613          	li	a2,896
 2100434:	28400593          	li	a1,644
 2100438:	021077b7          	lui	a5,0x2107
 210043c:	19c78513          	addi	a0,a5,412 # 210719c <__fini_array_end>
 2100440:	f55ff0ef          	jal	ra,2100394 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2100444:	7c4010ef          	jal	ra,2101c08 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2100448:	1f5010ef          	jal	ra,2101e3c <alt_icache_flush_all>
}
 210044c:	00000013          	nop
 2100450:	00c12083          	lw	ra,12(sp)
 2100454:	00812403          	lw	s0,8(sp)
 2100458:	01010113          	addi	sp,sp,16
 210045c:	00008067          	ret

02100460 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2100460:	fe010113          	addi	sp,sp,-32
 2100464:	00112e23          	sw	ra,28(sp)
 2100468:	00812c23          	sw	s0,24(sp)
 210046c:	02010413          	addi	s0,sp,32
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2100470:	00000513          	li	a0,0
 2100474:	090000ef          	jal	ra,2100504 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2100478:	00000013          	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 210047c:	0c0000ef          	jal	ra,210053c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2100480:	2fc00613          	li	a2,764
 2100484:	2fc00593          	li	a1,764
 2100488:	2fc00513          	li	a0,764
 210048c:	471010ef          	jal	ra,21020fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2100490:	0ed010ef          	jal	ra,2101d7c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2100494:	021027b7          	lui	a5,0x2102
 2100498:	ddc78513          	addi	a0,a5,-548 # 2101ddc <_do_dtors>
 210049c:	244020ef          	jal	ra,21026e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 21004a0:	8401a703          	lw	a4,-1984(gp) # 1ec0 <alt_argc>
 21004a4:	8441a683          	lw	a3,-1980(gp) # 1ec4 <alt_argv>
 21004a8:	8481a783          	lw	a5,-1976(gp) # 1ec8 <alt_envp>
 21004ac:	00078613          	mv	a2,a5
 21004b0:	00068593          	mv	a1,a3
 21004b4:	00070513          	mv	a0,a4
 21004b8:	dedff0ef          	jal	ra,21002a4 <main>
 21004bc:	fea42623          	sw	a0,-20(s0)
  close(STDOUT_FILENO);
 21004c0:	00100513          	li	a0,1
 21004c4:	7e9030ef          	jal	ra,21044ac <close>
  exit (result);
 21004c8:	fec42503          	lw	a0,-20(s0)
 21004cc:	228020ef          	jal	ra,21026f4 <exit>

021004d0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 21004d0:	fe010113          	addi	sp,sp,-32
 21004d4:	00112e23          	sw	ra,28(sp)
 21004d8:	00812c23          	sw	s0,24(sp)
 21004dc:	02010413          	addi	s0,sp,32
 21004e0:	fea42623          	sw	a0,-20(s0)
  return alt_busy_sleep(us);
 21004e4:	fec42503          	lw	a0,-20(s0)
 21004e8:	698010ef          	jal	ra,2101b80 <alt_busy_sleep>
 21004ec:	00050793          	mv	a5,a0
}
 21004f0:	00078513          	mv	a0,a5
 21004f4:	01c12083          	lw	ra,28(sp)
 21004f8:	01812403          	lw	s0,24(sp)
 21004fc:	02010113          	addi	sp,sp,32
 2100500:	00008067          	ret

02100504 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2100504:	fe010113          	addi	sp,sp,-32
 2100508:	00112e23          	sw	ra,28(sp)
 210050c:	00812c23          	sw	s0,24(sp)
 2100510:	02010413          	addi	s0,sp,32
 2100514:	fea42623          	sw	a0,-20(s0)
    INTEL_NIOSV_M_IRQ_INIT ( NIOSV_M_CPU, NIOSV_M_CPU);
 2100518:	6bd010ef          	jal	ra,21023d4 <intel_niosv_irq_init>
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, NIOSV_MSTATUS_MIE_MASK);
 210051c:	00800793          	li	a5,8
 2100520:	3007a073          	csrs	mstatus,a5
}
 2100524:	00000013          	nop
    alt_irq_cpu_enable_interrupts();
}
 2100528:	00000013          	nop
 210052c:	01c12083          	lw	ra,28(sp)
 2100530:	01812403          	lw	s0,24(sp)
 2100534:	02010113          	addi	sp,sp,32
 2100538:	00008067          	ret

0210053c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 210053c:	fe010113          	addi	sp,sp,-32
 2100540:	00112e23          	sw	ra,28(sp)
 2100544:	00812c23          	sw	s0,24(sp)
 2100548:	02010413          	addi	s0,sp,32
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_DBG, JTAG_UART_DBG);
 210054c:	00100613          	li	a2,1
 2100550:	00000593          	li	a1,0
 2100554:	3a800513          	li	a0,936
 2100558:	204000ef          	jal	ra,210075c <altera_avalon_jtag_uart_init>
 210055c:	38000513          	li	a0,896
 2100560:	6f0010ef          	jal	ra,2101c50 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SOC_SYSID, SOC_SYSID);
 2100564:	00000013          	nop
    ALTERA_AVALON_UART_INIT ( UART_SERIAL_COM, UART_SERIAL_COM);
 2100568:	00200613          	li	a2,2
 210056c:	00000593          	li	a1,0
 2100570:	000017b7          	lui	a5,0x1
 2100574:	40878513          	addi	a0,a5,1032 # 1408 <UART_SERIAL_COM+0x28>
 2100578:	481000ef          	jal	ra,21011f8 <altera_avalon_uart_init>
 210057c:	000017b7          	lui	a5,0x1
 2100580:	3e078513          	addi	a0,a5,992 # 13e0 <UART_SERIAL_COM>
 2100584:	6cc010ef          	jal	ra,2101c50 <alt_dev_reg>
 2100588:	3e800793          	li	a5,1000
 210058c:	fef42623          	sw	a5,-20(s0)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2100590:	8501a783          	lw	a5,-1968(gp) # 1ed0 <_alt_tick_rate>
 2100594:	00079863          	bnez	a5,21005a4 <alt_sys_init+0x68>
  {
    _alt_tick_rate = nticks;
 2100598:	fec42703          	lw	a4,-20(s0)
 210059c:	84e1a823          	sw	a4,-1968(gp) # 1ed0 <_alt_tick_rate>
    return 0;
 21005a0:	0080006f          	j	21005a8 <alt_sys_init+0x6c>
  }
  else
  {
    return -1;
 21005a4:	00000013          	nop
 21005a8:	021027b7          	lui	a5,0x2102
 21005ac:	5f878793          	addi	a5,a5,1528 # 21025f8 <alt_niosv_timer_sc_isr>
 21005b0:	fef42423          	sw	a5,-24(s0)
alt_u64 alt_niosv_mtimecmp_get();
void alt_niosv_mtimecmp_interrupt_init();
extern alt_niosv_timer_isr_t alt_niosv_timer_interrupt_handler;

static ALT_INLINE void ALT_ALWAYS_INLINE alt_niosv_register_mtimecmp_interrupt_handle(alt_niosv_timer_isr_t handle) {
    alt_niosv_timer_interrupt_handler = handle;
 21005b4:	fe842703          	lw	a4,-24(s0)
 21005b8:	82e1ae23          	sw	a4,-1988(gp) # 1ebc <alt_niosv_timer_interrupt_handler>
}
 21005bc:	00000013          	nop
    INTEL_NIOSV_M_INIT ( NIOSV_M_CPU, NIOSV_M_CPU);
 21005c0:	0e4020ef          	jal	ra,21026a4 <alt_niosv_mtimecmp_interrupt_init>
 21005c4:	00000613          	li	a2,0
 21005c8:	00000593          	li	a1,0
 21005cc:	00000513          	li	a0,0
 21005d0:	028020ef          	jal	ra,21025f8 <alt_niosv_timer_sc_isr>
}
 21005d4:	00000013          	nop
 21005d8:	01c12083          	lw	ra,28(sp)
 21005dc:	01812403          	lw	s0,24(sp)
 21005e0:	02010113          	addi	sp,sp,32
 21005e4:	00008067          	ret

021005e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 21005e8:	fd010113          	addi	sp,sp,-48
 21005ec:	02112623          	sw	ra,44(sp)
 21005f0:	02812423          	sw	s0,40(sp)
 21005f4:	03010413          	addi	s0,sp,48
 21005f8:	fca42e23          	sw	a0,-36(s0)
 21005fc:	fcb42c23          	sw	a1,-40(s0)
 2100600:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2100604:	fdc42783          	lw	a5,-36(s0)
 2100608:	0007a783          	lw	a5,0(a5)
 210060c:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2100610:	fec42783          	lw	a5,-20(s0)
 2100614:	02878713          	addi	a4,a5,40
 2100618:	fdc42783          	lw	a5,-36(s0)
 210061c:	0087a783          	lw	a5,8(a5)
 2100620:	00078693          	mv	a3,a5
 2100624:	fd442603          	lw	a2,-44(s0)
 2100628:	fd842583          	lw	a1,-40(s0)
 210062c:	00070513          	mv	a0,a4
 2100630:	644000ef          	jal	ra,2100c74 <altera_avalon_jtag_uart_read>
 2100634:	00050793          	mv	a5,a0
      fd->fd_flags);
}
 2100638:	00078513          	mv	a0,a5
 210063c:	02c12083          	lw	ra,44(sp)
 2100640:	02812403          	lw	s0,40(sp)
 2100644:	03010113          	addi	sp,sp,48
 2100648:	00008067          	ret

0210064c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 210064c:	fd010113          	addi	sp,sp,-48
 2100650:	02112623          	sw	ra,44(sp)
 2100654:	02812423          	sw	s0,40(sp)
 2100658:	03010413          	addi	s0,sp,48
 210065c:	fca42e23          	sw	a0,-36(s0)
 2100660:	fcb42c23          	sw	a1,-40(s0)
 2100664:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2100668:	fdc42783          	lw	a5,-36(s0)
 210066c:	0007a783          	lw	a5,0(a5)
 2100670:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2100674:	fec42783          	lw	a5,-20(s0)
 2100678:	02878713          	addi	a4,a5,40
 210067c:	fdc42783          	lw	a5,-36(s0)
 2100680:	0087a783          	lw	a5,8(a5)
 2100684:	00078693          	mv	a3,a5
 2100688:	fd442603          	lw	a2,-44(s0)
 210068c:	fd842583          	lw	a1,-40(s0)
 2100690:	00070513          	mv	a0,a4
 2100694:	00d000ef          	jal	ra,2100ea0 <altera_avalon_jtag_uart_write>
 2100698:	00050793          	mv	a5,a0
      fd->fd_flags);
}
 210069c:	00078513          	mv	a0,a5
 21006a0:	02c12083          	lw	ra,44(sp)
 21006a4:	02812403          	lw	s0,40(sp)
 21006a8:	03010113          	addi	sp,sp,48
 21006ac:	00008067          	ret

021006b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 21006b0:	fd010113          	addi	sp,sp,-48
 21006b4:	02112623          	sw	ra,44(sp)
 21006b8:	02812423          	sw	s0,40(sp)
 21006bc:	03010413          	addi	s0,sp,48
 21006c0:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 21006c4:	fdc42783          	lw	a5,-36(s0)
 21006c8:	0007a783          	lw	a5,0(a5)
 21006cc:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 21006d0:	fec42783          	lw	a5,-20(s0)
 21006d4:	02878713          	addi	a4,a5,40
 21006d8:	fdc42783          	lw	a5,-36(s0)
 21006dc:	0087a783          	lw	a5,8(a5)
 21006e0:	00078593          	mv	a1,a5
 21006e4:	00070513          	mv	a0,a4
 21006e8:	420000ef          	jal	ra,2100b08 <altera_avalon_jtag_uart_close>
 21006ec:	00050793          	mv	a5,a0
}
 21006f0:	00078513          	mv	a0,a5
 21006f4:	02c12083          	lw	ra,44(sp)
 21006f8:	02812403          	lw	s0,40(sp)
 21006fc:	03010113          	addi	sp,sp,48
 2100700:	00008067          	ret

02100704 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2100704:	fd010113          	addi	sp,sp,-48
 2100708:	02112623          	sw	ra,44(sp)
 210070c:	02812423          	sw	s0,40(sp)
 2100710:	03010413          	addi	s0,sp,48
 2100714:	fca42e23          	sw	a0,-36(s0)
 2100718:	fcb42c23          	sw	a1,-40(s0)
 210071c:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2100720:	fdc42783          	lw	a5,-36(s0)
 2100724:	0007a783          	lw	a5,0(a5)
 2100728:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 210072c:	fec42783          	lw	a5,-20(s0)
 2100730:	02878793          	addi	a5,a5,40
 2100734:	fd442603          	lw	a2,-44(s0)
 2100738:	fd842583          	lw	a1,-40(s0)
 210073c:	00078513          	mv	a0,a5
 2100740:	434000ef          	jal	ra,2100b74 <altera_avalon_jtag_uart_ioctl>
 2100744:	00050793          	mv	a5,a0
}
 2100748:	00078513          	mv	a0,a5
 210074c:	02c12083          	lw	ra,44(sp)
 2100750:	02812403          	lw	s0,40(sp)
 2100754:	03010113          	addi	sp,sp,48
 2100758:	00008067          	ret

0210075c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 210075c:	fd010113          	addi	sp,sp,-48
 2100760:	02112623          	sw	ra,44(sp)
 2100764:	02812423          	sw	s0,40(sp)
 2100768:	03010413          	addi	s0,sp,48
 210076c:	fca42e23          	sw	a0,-36(s0)
 2100770:	fcb42c23          	sw	a1,-40(s0)
 2100774:	fcc42a23          	sw	a2,-44(s0)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2100778:	fdc42783          	lw	a5,-36(s0)
 210077c:	00100713          	li	a4,1
 2100780:	02e7a023          	sw	a4,32(a5)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2100784:	fdc42783          	lw	a5,-36(s0)
 2100788:	0207a783          	lw	a5,32(a5)
 210078c:	fef42623          	sw	a5,-20(s0)
 2100790:	fdc42783          	lw	a5,-36(s0)
 2100794:	0007a783          	lw	a5,0(a5)
 2100798:	00478793          	addi	a5,a5,4
 210079c:	00078713          	mv	a4,a5
 21007a0:	fec42783          	lw	a5,-20(s0)
 21007a4:	00f72023          	sw	a5,0(a4)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 21007a8:	fd842503          	lw	a0,-40(s0)
 21007ac:	fd442583          	lw	a1,-44(s0)
 21007b0:	00000713          	li	a4,0
 21007b4:	fdc42683          	lw	a3,-36(s0)
 21007b8:	021017b7          	lui	a5,0x2101
 21007bc:	81878613          	addi	a2,a5,-2024 # 2100818 <altera_avalon_jtag_uart_irq>
 21007c0:	698010ef          	jal	ra,2101e58 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 21007c4:	fdc42783          	lw	a5,-36(s0)
 21007c8:	0207a223          	sw	zero,36(a5)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 21007cc:	fdc42783          	lw	a5,-36(s0)
 21007d0:	00878713          	addi	a4,a5,8
  return _alt_tick_rate;
 21007d4:	8501a583          	lw	a1,-1968(gp) # 1ed0 <_alt_tick_rate>
 21007d8:	fdc42683          	lw	a3,-36(s0)
 21007dc:	021017b7          	lui	a5,0x2101
 21007e0:	a5078613          	addi	a2,a5,-1456 # 2100a50 <altera_avalon_jtag_uart_timeout>
 21007e4:	00070513          	mv	a0,a4
 21007e8:	234010ef          	jal	ra,2101a1c <alt_alarm_start>
 21007ec:	00050793          	mv	a5,a0
 21007f0:	0007da63          	bgez	a5,2100804 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 21007f4:	fdc42783          	lw	a5,-36(s0)
 21007f8:	80000737          	lui	a4,0x80000
 21007fc:	fff74713          	not	a4,a4
 2100800:	00e7a223          	sw	a4,4(a5)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2100804:	00000013          	nop
 2100808:	02c12083          	lw	ra,44(sp)
 210080c:	02812403          	lw	s0,40(sp)
 2100810:	03010113          	addi	sp,sp,48
 2100814:	00008067          	ret

02100818 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2100818:	fa010113          	addi	sp,sp,-96
 210081c:	04812e23          	sw	s0,92(sp)
 2100820:	06010413          	addi	s0,sp,96
 2100824:	faa42623          	sw	a0,-84(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2100828:	fac42783          	lw	a5,-84(s0)
 210082c:	fcf42223          	sw	a5,-60(s0)
  unsigned int base = sp->base;
 2100830:	fc442783          	lw	a5,-60(s0)
 2100834:	0007a783          	lw	a5,0(a5)
 2100838:	fcf42423          	sw	a5,-56(s0)
  unsigned int postflag=0;
 210083c:	fa042c23          	sw	zero,-72(s0)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2100840:	fc842783          	lw	a5,-56(s0)
 2100844:	00478793          	addi	a5,a5,4
 2100848:	0007a783          	lw	a5,0(a5)
 210084c:	fcf42623          	sw	a5,-52(s0)
 2100850:	fcc42783          	lw	a5,-52(s0)
 2100854:	fcf42823          	sw	a5,-48(s0)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2100858:	fd042783          	lw	a5,-48(s0)
 210085c:	3007f793          	andi	a5,a5,768
 2100860:	1c078e63          	beqz	a5,2100a3c <altera_avalon_jtag_uart_irq+0x224>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2100864:	fd042783          	lw	a5,-48(s0)
 2100868:	1007f793          	andi	a5,a5,256
 210086c:	0e078663          	beqz	a5,2100958 <altera_avalon_jtag_uart_irq+0x140>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2100870:	000107b7          	lui	a5,0x10
 2100874:	faf42e23          	sw	a5,-68(s0)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2100878:	fc442783          	lw	a5,-60(s0)
 210087c:	0287a783          	lw	a5,40(a5) # 10028 <__global_pointer$+0xd9a8>
 2100880:	00178793          	addi	a5,a5,1
 2100884:	7ff7f793          	andi	a5,a5,2047
 2100888:	fcf42a23          	sw	a5,-44(s0)
        if (next == sp->rx_out)
 210088c:	fc442783          	lw	a5,-60(s0)
 2100890:	02c7a783          	lw	a5,44(a5)
 2100894:	fd442703          	lw	a4,-44(s0)
 2100898:	06f70263          	beq	a4,a5,21008fc <altera_avalon_jtag_uart_irq+0xe4>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 210089c:	fc842783          	lw	a5,-56(s0)
 21008a0:	0007a783          	lw	a5,0(a5)
 21008a4:	fcf42c23          	sw	a5,-40(s0)
 21008a8:	fd842783          	lw	a5,-40(s0)
 21008ac:	faf42e23          	sw	a5,-68(s0)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 21008b0:	fbc42703          	lw	a4,-68(s0)
 21008b4:	000087b7          	lui	a5,0x8
 21008b8:	00f777b3          	and	a5,a4,a5
 21008bc:	04078463          	beqz	a5,2100904 <altera_avalon_jtag_uart_irq+0xec>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 21008c0:	fc442783          	lw	a5,-60(s0)
 21008c4:	0287a783          	lw	a5,40(a5) # 8028 <__global_pointer$+0x59a8>
 21008c8:	fbc42703          	lw	a4,-68(s0)
 21008cc:	0ff77713          	zext.b	a4,a4
 21008d0:	fc442683          	lw	a3,-60(s0)
 21008d4:	00f687b3          	add	a5,a3,a5
 21008d8:	02e78c23          	sb	a4,56(a5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 21008dc:	fc442783          	lw	a5,-60(s0)
 21008e0:	0287a783          	lw	a5,40(a5)
 21008e4:	00178793          	addi	a5,a5,1
 21008e8:	7ff7f713          	andi	a4,a5,2047
 21008ec:	fc442783          	lw	a5,-60(s0)
 21008f0:	02e7a423          	sw	a4,40(a5)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 21008f4:	00000013          	nop
      {
 21008f8:	f81ff06f          	j	2100878 <altera_avalon_jtag_uart_irq+0x60>
          break;
 21008fc:	00000013          	nop
 2100900:	0080006f          	j	2100908 <altera_avalon_jtag_uart_irq+0xf0>
          break;
 2100904:	00000013          	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2100908:	fbc42703          	lw	a4,-68(s0)
 210090c:	000107b7          	lui	a5,0x10
 2100910:	04f76463          	bltu	a4,a5,2100958 <altera_avalon_jtag_uart_irq+0x140>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2100914:	fc442783          	lw	a5,-60(s0)
 2100918:	0207a783          	lw	a5,32(a5) # 10020 <__global_pointer$+0xd9a0>
 210091c:	ffe7f713          	andi	a4,a5,-2
 2100920:	fc442783          	lw	a5,-60(s0)
 2100924:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2100928:	fc442783          	lw	a5,-60(s0)
 210092c:	0207a783          	lw	a5,32(a5)
 2100930:	fcf42e23          	sw	a5,-36(s0)
 2100934:	fc842783          	lw	a5,-56(s0)
 2100938:	00478793          	addi	a5,a5,4
 210093c:	00078713          	mv	a4,a5
 2100940:	fdc42783          	lw	a5,-36(s0)
 2100944:	00f72023          	sw	a5,0(a4) # 80000000 <__flash_rwdata_start+0x7def8d68>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2100948:	fc842783          	lw	a5,-56(s0)
 210094c:	00478793          	addi	a5,a5,4
 2100950:	0007a783          	lw	a5,0(a5)
 2100954:	fef42023          	sw	a5,-32(s0)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2100958:	fd042783          	lw	a5,-48(s0)
 210095c:	2007f793          	andi	a5,a5,512
 2100960:	ee0780e3          	beqz	a5,2100840 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2100964:	fd042783          	lw	a5,-48(s0)
 2100968:	0107d793          	srli	a5,a5,0x10
 210096c:	fcf42023          	sw	a5,-64(s0)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2100970:	05c0006f          	j	21009cc <altera_avalon_jtag_uart_irq+0x1b4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2100974:	fc442783          	lw	a5,-60(s0)
 2100978:	0347a783          	lw	a5,52(a5)
 210097c:	fc442703          	lw	a4,-60(s0)
 2100980:	00f707b3          	add	a5,a4,a5
 2100984:	00001737          	lui	a4,0x1
 2100988:	00f707b3          	add	a5,a4,a5
 210098c:	8387c783          	lbu	a5,-1992(a5)
 2100990:	fef42223          	sw	a5,-28(s0)
 2100994:	fc842783          	lw	a5,-56(s0)
 2100998:	fe442703          	lw	a4,-28(s0)
 210099c:	00e7a023          	sw	a4,0(a5)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 21009a0:	fc442783          	lw	a5,-60(s0)
 21009a4:	0347a783          	lw	a5,52(a5)
 21009a8:	00178793          	addi	a5,a5,1
 21009ac:	7ff7f713          	andi	a4,a5,2047
 21009b0:	fc442783          	lw	a5,-60(s0)
 21009b4:	02e7aa23          	sw	a4,52(a5)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
 21009b8:	00100793          	li	a5,1
 21009bc:	faf42c23          	sw	a5,-72(s0)

        space--;
 21009c0:	fc042783          	lw	a5,-64(s0)
 21009c4:	fff78793          	addi	a5,a5,-1
 21009c8:	fcf42023          	sw	a5,-64(s0)
      while (space > 0 && sp->tx_out != sp->tx_in)
 21009cc:	fc042783          	lw	a5,-64(s0)
 21009d0:	00078c63          	beqz	a5,21009e8 <altera_avalon_jtag_uart_irq+0x1d0>
 21009d4:	fc442783          	lw	a5,-60(s0)
 21009d8:	0347a703          	lw	a4,52(a5)
 21009dc:	fc442783          	lw	a5,-60(s0)
 21009e0:	0307a783          	lw	a5,48(a5)
 21009e4:	f8f718e3          	bne	a4,a5,2100974 <altera_avalon_jtag_uart_irq+0x15c>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
 21009e8:	fc042783          	lw	a5,-64(s0)
 21009ec:	e4078ae3          	beqz	a5,2100840 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 21009f0:	fc442783          	lw	a5,-60(s0)
 21009f4:	0207a783          	lw	a5,32(a5)
 21009f8:	ffd7f713          	andi	a4,a5,-3
 21009fc:	fc442783          	lw	a5,-60(s0)
 2100a00:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2100a04:	fc442783          	lw	a5,-60(s0)
 2100a08:	0207a783          	lw	a5,32(a5)
 2100a0c:	fef42423          	sw	a5,-24(s0)
 2100a10:	fc442783          	lw	a5,-60(s0)
 2100a14:	0007a783          	lw	a5,0(a5)
 2100a18:	00478793          	addi	a5,a5,4
 2100a1c:	00078713          	mv	a4,a5
 2100a20:	fe842783          	lw	a5,-24(s0)
 2100a24:	00f72023          	sw	a5,0(a4) # 1000 <JTAG_UART_DBG+0xc80>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2100a28:	fc842783          	lw	a5,-56(s0)
 2100a2c:	00478793          	addi	a5,a5,4
 2100a30:	0007a783          	lw	a5,0(a5)
 2100a34:	fef42623          	sw	a5,-20(s0)
  {
 2100a38:	e09ff06f          	j	2100840 <altera_avalon_jtag_uart_irq+0x28>
      break;
 2100a3c:	00000013          	nop
      }
    }
  }
}
 2100a40:	00000013          	nop
 2100a44:	05c12403          	lw	s0,92(sp)
 2100a48:	06010113          	addi	sp,sp,96
 2100a4c:	00008067          	ret

02100a50 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2100a50:	fd010113          	addi	sp,sp,-48
 2100a54:	02812623          	sw	s0,44(sp)
 2100a58:	03010413          	addi	s0,sp,48
 2100a5c:	fca42e23          	sw	a0,-36(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2100a60:	fdc42783          	lw	a5,-36(s0)
 2100a64:	fef42023          	sw	a5,-32(s0)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2100a68:	fe042783          	lw	a5,-32(s0)
 2100a6c:	0007a783          	lw	a5,0(a5)
 2100a70:	00478793          	addi	a5,a5,4
 2100a74:	0007a783          	lw	a5,0(a5)
 2100a78:	fef42223          	sw	a5,-28(s0)
 2100a7c:	fe442783          	lw	a5,-28(s0)
 2100a80:	fef42423          	sw	a5,-24(s0)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2100a84:	fe842783          	lw	a5,-24(s0)
 2100a88:	4007f793          	andi	a5,a5,1024
 2100a8c:	02078c63          	beqz	a5,2100ac4 <altera_avalon_jtag_uart_timeout+0x74>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2100a90:	fe042783          	lw	a5,-32(s0)
 2100a94:	0207a783          	lw	a5,32(a5)
 2100a98:	4007e793          	ori	a5,a5,1024
 2100a9c:	fef42623          	sw	a5,-20(s0)
 2100aa0:	fe042783          	lw	a5,-32(s0)
 2100aa4:	0007a783          	lw	a5,0(a5)
 2100aa8:	00478793          	addi	a5,a5,4
 2100aac:	00078713          	mv	a4,a5
 2100ab0:	fec42783          	lw	a5,-20(s0)
 2100ab4:	00f72023          	sw	a5,0(a4)
    sp->host_inactive = 0;
 2100ab8:	fe042783          	lw	a5,-32(s0)
 2100abc:	0207a223          	sw	zero,36(a5)
 2100ac0:	0340006f          	j	2100af4 <altera_avalon_jtag_uart_timeout+0xa4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2100ac4:	fe042783          	lw	a5,-32(s0)
 2100ac8:	0247a703          	lw	a4,36(a5)
 2100acc:	800007b7          	lui	a5,0x80000
 2100ad0:	ffc7c793          	xori	a5,a5,-4
 2100ad4:	02e7e063          	bltu	a5,a4,2100af4 <altera_avalon_jtag_uart_timeout+0xa4>
    sp->host_inactive++;
 2100ad8:	fe042783          	lw	a5,-32(s0)
 2100adc:	0247a783          	lw	a5,36(a5) # 80000024 <__flash_rwdata_start+0x7def8d8c>
 2100ae0:	00178713          	addi	a4,a5,1
 2100ae4:	fe042783          	lw	a5,-32(s0)
 2100ae8:	02e7a223          	sw	a4,36(a5)
    
    if (sp->host_inactive >= sp->timeout) {
 2100aec:	fe042783          	lw	a5,-32(s0)
 2100af0:	0247a783          	lw	a5,36(a5)
 2100af4:	8501a783          	lw	a5,-1968(gp) # 1ed0 <_alt_tick_rate>
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2100af8:	00078513          	mv	a0,a5
 2100afc:	02c12403          	lw	s0,44(sp)
 2100b00:	03010113          	addi	sp,sp,48
 2100b04:	00008067          	ret

02100b08 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2100b08:	fe010113          	addi	sp,sp,-32
 2100b0c:	00812e23          	sw	s0,28(sp)
 2100b10:	02010413          	addi	s0,sp,32
 2100b14:	fea42623          	sw	a0,-20(s0)
 2100b18:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2100b1c:	01c0006f          	j	2100b38 <altera_avalon_jtag_uart_close+0x30>
    if (flags & O_NONBLOCK) {
 2100b20:	fe842703          	lw	a4,-24(s0)
 2100b24:	000047b7          	lui	a5,0x4
 2100b28:	00f777b3          	and	a5,a4,a5
 2100b2c:	00078663          	beqz	a5,2100b38 <altera_avalon_jtag_uart_close+0x30>
      return -EWOULDBLOCK; 
 2100b30:	ff500793          	li	a5,-11
 2100b34:	0300006f          	j	2100b64 <altera_avalon_jtag_uart_close+0x5c>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2100b38:	fec42783          	lw	a5,-20(s0)
 2100b3c:	0347a703          	lw	a4,52(a5) # 4034 <__global_pointer$+0x19b4>
 2100b40:	fec42783          	lw	a5,-20(s0)
 2100b44:	0307a783          	lw	a5,48(a5)
 2100b48:	00f70c63          	beq	a4,a5,2100b60 <altera_avalon_jtag_uart_close+0x58>
 2100b4c:	fec42783          	lw	a5,-20(s0)
 2100b50:	0247a703          	lw	a4,36(a5)
 2100b54:	fec42783          	lw	a5,-20(s0)
 2100b58:	0047a783          	lw	a5,4(a5)
 2100b5c:	fcf762e3          	bltu	a4,a5,2100b20 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 2100b60:	00000793          	li	a5,0
}
 2100b64:	00078513          	mv	a0,a5
 2100b68:	01c12403          	lw	s0,28(sp)
 2100b6c:	02010113          	addi	sp,sp,32
 2100b70:	00008067          	ret

02100b74 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2100b74:	fd010113          	addi	sp,sp,-48
 2100b78:	02812623          	sw	s0,44(sp)
 2100b7c:	03010413          	addi	s0,sp,48
 2100b80:	fca42e23          	sw	a0,-36(s0)
 2100b84:	fcb42c23          	sw	a1,-40(s0)
 2100b88:	fcc42a23          	sw	a2,-44(s0)
  int rc = -ENOTTY;
 2100b8c:	fe700793          	li	a5,-25
 2100b90:	fef42423          	sw	a5,-24(s0)

  switch (req)
 2100b94:	fd842703          	lw	a4,-40(s0)
 2100b98:	000077b7          	lui	a5,0x7
 2100b9c:	a0178793          	addi	a5,a5,-1535 # 6a01 <__global_pointer$+0x4381>
 2100ba0:	00f70c63          	beq	a4,a5,2100bb8 <altera_avalon_jtag_uart_ioctl+0x44>
 2100ba4:	fd842703          	lw	a4,-40(s0)
 2100ba8:	000077b7          	lui	a5,0x7
 2100bac:	a0278793          	addi	a5,a5,-1534 # 6a02 <__global_pointer$+0x4382>
 2100bb0:	06f70263          	beq	a4,a5,2100c14 <altera_avalon_jtag_uart_ioctl+0xa0>
      rc = 0;
    }
    break;

  default:
    break;
 2100bb4:	0ac0006f          	j	2100c60 <altera_avalon_jtag_uart_ioctl+0xec>
    if (sp->timeout != INT_MAX)
 2100bb8:	fdc42783          	lw	a5,-36(s0)
 2100bbc:	0047a703          	lw	a4,4(a5)
 2100bc0:	800007b7          	lui	a5,0x80000
 2100bc4:	fff7c793          	not	a5,a5
 2100bc8:	08f70663          	beq	a4,a5,2100c54 <altera_avalon_jtag_uart_ioctl+0xe0>
      int timeout = *((int *)arg);
 2100bcc:	fd442783          	lw	a5,-44(s0)
 2100bd0:	0007a783          	lw	a5,0(a5) # 80000000 <__flash_rwdata_start+0x7def8d68>
 2100bd4:	fef42623          	sw	a5,-20(s0)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2100bd8:	fec42703          	lw	a4,-20(s0)
 2100bdc:	00100793          	li	a5,1
 2100be0:	00e7de63          	bge	a5,a4,2100bfc <altera_avalon_jtag_uart_ioctl+0x88>
 2100be4:	fec42703          	lw	a4,-20(s0)
 2100be8:	800007b7          	lui	a5,0x80000
 2100bec:	fff7c793          	not	a5,a5
 2100bf0:	00f70663          	beq	a4,a5,2100bfc <altera_avalon_jtag_uart_ioctl+0x88>
 2100bf4:	fec42783          	lw	a5,-20(s0)
 2100bf8:	00c0006f          	j	2100c04 <altera_avalon_jtag_uart_ioctl+0x90>
 2100bfc:	800007b7          	lui	a5,0x80000
 2100c00:	ffe7c793          	xori	a5,a5,-2
 2100c04:	fdc42703          	lw	a4,-36(s0)
 2100c08:	00f72223          	sw	a5,4(a4)
      rc = 0;
 2100c0c:	fe042423          	sw	zero,-24(s0)
    break;
 2100c10:	0440006f          	j	2100c54 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 2100c14:	fdc42783          	lw	a5,-36(s0)
 2100c18:	0047a703          	lw	a4,4(a5) # 80000004 <__flash_rwdata_start+0x7def8d6c>
 2100c1c:	800007b7          	lui	a5,0x80000
 2100c20:	fff7c793          	not	a5,a5
 2100c24:	02f70c63          	beq	a4,a5,2100c5c <altera_avalon_jtag_uart_ioctl+0xe8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2100c28:	fdc42783          	lw	a5,-36(s0)
 2100c2c:	0247a703          	lw	a4,36(a5) # 80000024 <__flash_rwdata_start+0x7def8d8c>
 2100c30:	fdc42783          	lw	a5,-36(s0)
 2100c34:	0047a783          	lw	a5,4(a5)
 2100c38:	00f737b3          	sltu	a5,a4,a5
 2100c3c:	0ff7f793          	zext.b	a5,a5
 2100c40:	00078713          	mv	a4,a5
 2100c44:	fd442783          	lw	a5,-44(s0)
 2100c48:	00e7a023          	sw	a4,0(a5)
      rc = 0;
 2100c4c:	fe042423          	sw	zero,-24(s0)
    break;
 2100c50:	00c0006f          	j	2100c5c <altera_avalon_jtag_uart_ioctl+0xe8>
    break;
 2100c54:	00000013          	nop
 2100c58:	0080006f          	j	2100c60 <altera_avalon_jtag_uart_ioctl+0xec>
    break;
 2100c5c:	00000013          	nop
  }

  return rc;
 2100c60:	fe842783          	lw	a5,-24(s0)
}
 2100c64:	00078513          	mv	a0,a5
 2100c68:	02c12403          	lw	s0,44(sp)
 2100c6c:	03010113          	addi	sp,sp,48
 2100c70:	00008067          	ret

02100c74 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2100c74:	fc010113          	addi	sp,sp,-64
 2100c78:	02112e23          	sw	ra,60(sp)
 2100c7c:	02812c23          	sw	s0,56(sp)
 2100c80:	04010413          	addi	s0,sp,64
 2100c84:	fca42623          	sw	a0,-52(s0)
 2100c88:	fcb42423          	sw	a1,-56(s0)
 2100c8c:	fcc42223          	sw	a2,-60(s0)
 2100c90:	fcd42023          	sw	a3,-64(s0)
  char * ptr = buffer;
 2100c94:	fc842783          	lw	a5,-56(s0)
 2100c98:	fcf42823          	sw	a5,-48(s0)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2100c9c:	1280006f          	j	2100dc4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2100ca0:	fcc42783          	lw	a5,-52(s0)
 2100ca4:	0287a783          	lw	a5,40(a5)
 2100ca8:	fcf42c23          	sw	a5,-40(s0)
      out = sp->rx_out;
 2100cac:	fcc42783          	lw	a5,-52(s0)
 2100cb0:	02c7a783          	lw	a5,44(a5)
 2100cb4:	fcf42e23          	sw	a5,-36(s0)

      if (in >= out)
 2100cb8:	fd842703          	lw	a4,-40(s0)
 2100cbc:	fdc42783          	lw	a5,-36(s0)
 2100cc0:	00f76c63          	bltu	a4,a5,2100cd8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2100cc4:	fd842703          	lw	a4,-40(s0)
 2100cc8:	fdc42783          	lw	a5,-36(s0)
 2100ccc:	40f707b3          	sub	a5,a4,a5
 2100cd0:	fcf42a23          	sw	a5,-44(s0)
 2100cd4:	0180006f          	j	2100cec <altera_avalon_jtag_uart_read+0x78>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2100cd8:	000017b7          	lui	a5,0x1
 2100cdc:	80078713          	addi	a4,a5,-2048 # 800 <JTAG_UART_DBG+0x480>
 2100ce0:	fdc42783          	lw	a5,-36(s0)
 2100ce4:	40f707b3          	sub	a5,a4,a5
 2100ce8:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
 2100cec:	fd442783          	lw	a5,-44(s0)
 2100cf0:	06078e63          	beqz	a5,2100d6c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */

      if (n > space)
 2100cf4:	fc442783          	lw	a5,-60(s0)
 2100cf8:	fd442703          	lw	a4,-44(s0)
 2100cfc:	00e7f663          	bgeu	a5,a4,2100d08 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2100d00:	fc442783          	lw	a5,-60(s0)
 2100d04:	fcf42a23          	sw	a5,-44(s0)

      memcpy(ptr, sp->rx_buf + out, n);
 2100d08:	fcc42783          	lw	a5,-52(s0)
 2100d0c:	03878713          	addi	a4,a5,56
 2100d10:	fdc42783          	lw	a5,-36(s0)
 2100d14:	00f707b3          	add	a5,a4,a5
 2100d18:	fd442603          	lw	a2,-44(s0)
 2100d1c:	00078593          	mv	a1,a5
 2100d20:	fd042503          	lw	a0,-48(s0)
 2100d24:	7c1020ef          	jal	ra,2103ce4 <memcpy>
      ptr   += n;
 2100d28:	fd042703          	lw	a4,-48(s0)
 2100d2c:	fd442783          	lw	a5,-44(s0)
 2100d30:	00f707b3          	add	a5,a4,a5
 2100d34:	fcf42823          	sw	a5,-48(s0)
      space -= n;
 2100d38:	fc442703          	lw	a4,-60(s0)
 2100d3c:	fd442783          	lw	a5,-44(s0)
 2100d40:	40f707b3          	sub	a5,a4,a5
 2100d44:	fcf42223          	sw	a5,-60(s0)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2100d48:	fdc42703          	lw	a4,-36(s0)
 2100d4c:	fd442783          	lw	a5,-44(s0)
 2100d50:	00f707b3          	add	a5,a4,a5
 2100d54:	7ff7f713          	andi	a4,a5,2047
 2100d58:	fcc42783          	lw	a5,-52(s0)
 2100d5c:	02e7a623          	sw	a4,44(a5)
    }
    while (space > 0);
 2100d60:	fc442783          	lw	a5,-60(s0)
 2100d64:	f2f04ee3          	bgtz	a5,2100ca0 <altera_avalon_jtag_uart_read+0x2c>
 2100d68:	0080006f          	j	2100d70 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */
 2100d6c:	00000013          	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 2100d70:	fd042703          	lw	a4,-48(s0)
 2100d74:	fc842783          	lw	a5,-56(s0)
 2100d78:	04f71c63          	bne	a4,a5,2100dd0 <altera_avalon_jtag_uart_read+0x15c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2100d7c:	fc042703          	lw	a4,-64(s0)
 2100d80:	000047b7          	lui	a5,0x4
 2100d84:	00f777b3          	and	a5,a4,a5
 2100d88:	04079863          	bnez	a5,2100dd8 <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2100d8c:	00000013          	nop
 2100d90:	fcc42783          	lw	a5,-52(s0)
 2100d94:	0287a783          	lw	a5,40(a5) # 4028 <__global_pointer$+0x19a8>
 2100d98:	fd842703          	lw	a4,-40(s0)
 2100d9c:	00f71c63          	bne	a4,a5,2100db4 <altera_avalon_jtag_uart_read+0x140>
 2100da0:	fcc42783          	lw	a5,-52(s0)
 2100da4:	0247a703          	lw	a4,36(a5)
 2100da8:	fcc42783          	lw	a5,-52(s0)
 2100dac:	0047a783          	lw	a5,4(a5)
 2100db0:	fef760e3          	bltu	a4,a5,2100d90 <altera_avalon_jtag_uart_read+0x11c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2100db4:	fcc42783          	lw	a5,-52(s0)
 2100db8:	0287a783          	lw	a5,40(a5)
 2100dbc:	fd842703          	lw	a4,-40(s0)
 2100dc0:	02f70063          	beq	a4,a5,2100de0 <altera_avalon_jtag_uart_read+0x16c>
  while (space > 0)
 2100dc4:	fc442783          	lw	a5,-60(s0)
 2100dc8:	ecf04ce3          	bgtz	a5,2100ca0 <altera_avalon_jtag_uart_read+0x2c>
 2100dcc:	0180006f          	j	2100de4 <altera_avalon_jtag_uart_read+0x170>
      break;
 2100dd0:	00000013          	nop
 2100dd4:	0100006f          	j	2100de4 <altera_avalon_jtag_uart_read+0x170>
      break;
 2100dd8:	00000013          	nop
 2100ddc:	0080006f          	j	2100de4 <altera_avalon_jtag_uart_read+0x170>
      break;
 2100de0:	00000013          	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2100de4:	fd042703          	lw	a4,-48(s0)
 2100de8:	fc842783          	lw	a5,-56(s0)
 2100dec:	06f70463          	beq	a4,a5,2100e54 <altera_avalon_jtag_uart_read+0x1e0>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 2100df0:	00800793          	li	a5,8
 2100df4:	3007b7f3          	csrrc	a5,mstatus,a5
 2100df8:	fef42623          	sw	a5,-20(s0)
    return context;
 2100dfc:	fec42783          	lw	a5,-20(s0)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2100e00:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2100e04:	fcc42783          	lw	a5,-52(s0)
 2100e08:	0207a783          	lw	a5,32(a5)
 2100e0c:	0017e713          	ori	a4,a5,1
 2100e10:	fcc42783          	lw	a5,-52(s0)
 2100e14:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2100e18:	fcc42783          	lw	a5,-52(s0)
 2100e1c:	0207a783          	lw	a5,32(a5)
 2100e20:	fef42223          	sw	a5,-28(s0)
 2100e24:	fcc42783          	lw	a5,-52(s0)
 2100e28:	0007a783          	lw	a5,0(a5)
 2100e2c:	00478793          	addi	a5,a5,4
 2100e30:	00078713          	mv	a4,a5
 2100e34:	fe442783          	lw	a5,-28(s0)
 2100e38:	00f72023          	sw	a5,0(a4)
 2100e3c:	fe042783          	lw	a5,-32(s0)
 2100e40:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 2100e44:	fe842783          	lw	a5,-24(s0)
 2100e48:	0087f793          	andi	a5,a5,8
 2100e4c:	3007a073          	csrs	mstatus,a5
}
 2100e50:	00000013          	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2100e54:	fd042703          	lw	a4,-48(s0)
 2100e58:	fc842783          	lw	a5,-56(s0)
 2100e5c:	00f70a63          	beq	a4,a5,2100e70 <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
 2100e60:	fd042703          	lw	a4,-48(s0)
 2100e64:	fc842783          	lw	a5,-56(s0)
 2100e68:	40f707b3          	sub	a5,a4,a5
 2100e6c:	0200006f          	j	2100e8c <altera_avalon_jtag_uart_read+0x218>
  else if (flags & O_NONBLOCK)
 2100e70:	fc042703          	lw	a4,-64(s0)
 2100e74:	000047b7          	lui	a5,0x4
 2100e78:	00f777b3          	and	a5,a4,a5
 2100e7c:	00078663          	beqz	a5,2100e88 <altera_avalon_jtag_uart_read+0x214>
    return -EWOULDBLOCK;
 2100e80:	ff500793          	li	a5,-11
 2100e84:	0080006f          	j	2100e8c <altera_avalon_jtag_uart_read+0x218>
  else
    return -EIO;
 2100e88:	ffb00793          	li	a5,-5
}
 2100e8c:	00078513          	mv	a0,a5
 2100e90:	03c12083          	lw	ra,60(sp)
 2100e94:	03812403          	lw	s0,56(sp)
 2100e98:	04010113          	addi	sp,sp,64
 2100e9c:	00008067          	ret

02100ea0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2100ea0:	fc010113          	addi	sp,sp,-64
 2100ea4:	02112e23          	sw	ra,60(sp)
 2100ea8:	02812c23          	sw	s0,56(sp)
 2100eac:	04010413          	addi	s0,sp,64
 2100eb0:	fca42623          	sw	a0,-52(s0)
 2100eb4:	fcb42423          	sw	a1,-56(s0)
 2100eb8:	fcc42223          	sw	a2,-60(s0)
 2100ebc:	fcd42023          	sw	a3,-64(s0)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2100ec0:	fc042823          	sw	zero,-48(s0)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2100ec4:	fc842783          	lw	a5,-56(s0)
 2100ec8:	fcf42c23          	sw	a5,-40(s0)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2100ecc:	0ec0006f          	j	2100fb8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2100ed0:	fcc42783          	lw	a5,-52(s0)
 2100ed4:	0307a783          	lw	a5,48(a5) # 4030 <__global_pointer$+0x19b0>
 2100ed8:	fcf42e23          	sw	a5,-36(s0)
      out = sp->tx_out;
 2100edc:	fcc42783          	lw	a5,-52(s0)
 2100ee0:	0347a783          	lw	a5,52(a5)
 2100ee4:	fcf42823          	sw	a5,-48(s0)

      if (in < out)
 2100ee8:	fdc42703          	lw	a4,-36(s0)
 2100eec:	fd042783          	lw	a5,-48(s0)
 2100ef0:	00f77e63          	bgeu	a4,a5,2100f0c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2100ef4:	fd042703          	lw	a4,-48(s0)
 2100ef8:	fdc42783          	lw	a5,-36(s0)
 2100efc:	40f707b3          	sub	a5,a4,a5
 2100f00:	fff78793          	addi	a5,a5,-1
 2100f04:	fcf42a23          	sw	a5,-44(s0)
 2100f08:	0340006f          	j	2100f3c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 2100f0c:	fd042783          	lw	a5,-48(s0)
 2100f10:	00078e63          	beqz	a5,2100f2c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2100f14:	000017b7          	lui	a5,0x1
 2100f18:	80078713          	addi	a4,a5,-2048 # 800 <JTAG_UART_DBG+0x480>
 2100f1c:	fdc42783          	lw	a5,-36(s0)
 2100f20:	40f707b3          	sub	a5,a4,a5
 2100f24:	fcf42a23          	sw	a5,-44(s0)
 2100f28:	0140006f          	j	2100f3c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2100f2c:	7ff00713          	li	a4,2047
 2100f30:	fdc42783          	lw	a5,-36(s0)
 2100f34:	40f707b3          	sub	a5,a4,a5
 2100f38:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
 2100f3c:	fd442783          	lw	a5,-44(s0)
 2100f40:	08078263          	beqz	a5,2100fc4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 2100f44:	fc442783          	lw	a5,-60(s0)
 2100f48:	fd442703          	lw	a4,-44(s0)
 2100f4c:	00e7f663          	bgeu	a5,a4,2100f58 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 2100f50:	fc442783          	lw	a5,-60(s0)
 2100f54:	fcf42a23          	sw	a5,-44(s0)

      memcpy(sp->tx_buf + in, ptr, n);
 2100f58:	fcc42703          	lw	a4,-52(s0)
 2100f5c:	000017b7          	lui	a5,0x1
 2100f60:	83878793          	addi	a5,a5,-1992 # 838 <JTAG_UART_DBG+0x4b8>
 2100f64:	00f70733          	add	a4,a4,a5
 2100f68:	fdc42783          	lw	a5,-36(s0)
 2100f6c:	00f707b3          	add	a5,a4,a5
 2100f70:	fd442603          	lw	a2,-44(s0)
 2100f74:	fc842583          	lw	a1,-56(s0)
 2100f78:	00078513          	mv	a0,a5
 2100f7c:	569020ef          	jal	ra,2103ce4 <memcpy>
      ptr   += n;
 2100f80:	fc842703          	lw	a4,-56(s0)
 2100f84:	fd442783          	lw	a5,-44(s0)
 2100f88:	00f707b3          	add	a5,a4,a5
 2100f8c:	fcf42423          	sw	a5,-56(s0)
      count -= n;
 2100f90:	fc442703          	lw	a4,-60(s0)
 2100f94:	fd442783          	lw	a5,-44(s0)
 2100f98:	40f707b3          	sub	a5,a4,a5
 2100f9c:	fcf42223          	sw	a5,-60(s0)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2100fa0:	fdc42703          	lw	a4,-36(s0)
 2100fa4:	fd442783          	lw	a5,-44(s0)
 2100fa8:	00f707b3          	add	a5,a4,a5
 2100fac:	7ff7f713          	andi	a4,a5,2047
 2100fb0:	fcc42783          	lw	a5,-52(s0)
 2100fb4:	02e7a823          	sw	a4,48(a5)
    while (count > 0)
 2100fb8:	fc442783          	lw	a5,-60(s0)
 2100fbc:	f0f04ae3          	bgtz	a5,2100ed0 <altera_avalon_jtag_uart_write+0x30>
 2100fc0:	0080006f          	j	2100fc8 <altera_avalon_jtag_uart_write+0x128>
        break;
 2100fc4:	00000013          	nop
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 2100fc8:	00800793          	li	a5,8
 2100fcc:	3007b7f3          	csrrc	a5,mstatus,a5
 2100fd0:	fef42623          	sw	a5,-20(s0)
    return context;
 2100fd4:	fec42783          	lw	a5,-20(s0)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2100fd8:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2100fdc:	fcc42783          	lw	a5,-52(s0)
 2100fe0:	0207a783          	lw	a5,32(a5)
 2100fe4:	0027e713          	ori	a4,a5,2
 2100fe8:	fcc42783          	lw	a5,-52(s0)
 2100fec:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2100ff0:	fcc42783          	lw	a5,-52(s0)
 2100ff4:	0207a783          	lw	a5,32(a5)
 2100ff8:	fef42223          	sw	a5,-28(s0)
 2100ffc:	fcc42783          	lw	a5,-52(s0)
 2101000:	0007a783          	lw	a5,0(a5)
 2101004:	00478793          	addi	a5,a5,4
 2101008:	00078713          	mv	a4,a5
 210100c:	fe442783          	lw	a5,-28(s0)
 2101010:	00f72023          	sw	a5,0(a4)
 2101014:	fe042783          	lw	a5,-32(s0)
 2101018:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 210101c:	fe842783          	lw	a5,-24(s0)
 2101020:	0087f793          	andi	a5,a5,8
 2101024:	3007a073          	csrs	mstatus,a5
}
 2101028:	00000013          	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 210102c:	fc442783          	lw	a5,-60(s0)
 2101030:	04f05463          	blez	a5,2101078 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 2101034:	fc042703          	lw	a4,-64(s0)
 2101038:	000047b7          	lui	a5,0x4
 210103c:	00f777b3          	and	a5,a4,a5
 2101040:	04079263          	bnez	a5,2101084 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2101044:	00000013          	nop
 2101048:	fcc42783          	lw	a5,-52(s0)
 210104c:	0347a783          	lw	a5,52(a5) # 4034 <__global_pointer$+0x19b4>
 2101050:	fd042703          	lw	a4,-48(s0)
 2101054:	00f71c63          	bne	a4,a5,210106c <altera_avalon_jtag_uart_write+0x1cc>
 2101058:	fcc42783          	lw	a5,-52(s0)
 210105c:	0247a703          	lw	a4,36(a5)
 2101060:	fcc42783          	lw	a5,-52(s0)
 2101064:	0047a783          	lw	a5,4(a5)
 2101068:	fef760e3          	bltu	a4,a5,2101048 <altera_avalon_jtag_uart_write+0x1a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 210106c:	fcc42783          	lw	a5,-52(s0)
 2101070:	0247a783          	lw	a5,36(a5)
 2101074:	00079c63          	bnez	a5,210108c <altera_avalon_jtag_uart_write+0x1ec>
         break;
    }
  }
  while (count > 0);
 2101078:	fc442783          	lw	a5,-60(s0)
 210107c:	f2f04ee3          	bgtz	a5,2100fb8 <altera_avalon_jtag_uart_write+0x118>
 2101080:	0100006f          	j	2101090 <altera_avalon_jtag_uart_write+0x1f0>
        break;
 2101084:	00000013          	nop
 2101088:	0080006f          	j	2101090 <altera_avalon_jtag_uart_write+0x1f0>
         break;
 210108c:	00000013          	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2101090:	fc842703          	lw	a4,-56(s0)
 2101094:	fd842783          	lw	a5,-40(s0)
 2101098:	00f70a63          	beq	a4,a5,21010ac <altera_avalon_jtag_uart_write+0x20c>
    return ptr - start;
 210109c:	fc842703          	lw	a4,-56(s0)
 21010a0:	fd842783          	lw	a5,-40(s0)
 21010a4:	40f707b3          	sub	a5,a4,a5
 21010a8:	0200006f          	j	21010c8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 21010ac:	fc042703          	lw	a4,-64(s0)
 21010b0:	000047b7          	lui	a5,0x4
 21010b4:	00f777b3          	and	a5,a4,a5
 21010b8:	00078663          	beqz	a5,21010c4 <altera_avalon_jtag_uart_write+0x224>
    return -EWOULDBLOCK;
 21010bc:	ff500793          	li	a5,-11
 21010c0:	0080006f          	j	21010c8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 21010c4:	ffb00793          	li	a5,-5
}
 21010c8:	00078513          	mv	a0,a5
 21010cc:	03c12083          	lw	ra,60(sp)
 21010d0:	03812403          	lw	s0,56(sp)
 21010d4:	04010113          	addi	sp,sp,64
 21010d8:	00008067          	ret

021010dc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 21010dc:	fd010113          	addi	sp,sp,-48
 21010e0:	02112623          	sw	ra,44(sp)
 21010e4:	02812423          	sw	s0,40(sp)
 21010e8:	03010413          	addi	s0,sp,48
 21010ec:	fca42e23          	sw	a0,-36(s0)
 21010f0:	fcb42c23          	sw	a1,-40(s0)
 21010f4:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 21010f8:	fdc42783          	lw	a5,-36(s0)
 21010fc:	0007a783          	lw	a5,0(a5) # 4000 <__global_pointer$+0x1980>
 2101100:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2101104:	fec42783          	lw	a5,-20(s0)
 2101108:	02878713          	addi	a4,a5,40
 210110c:	fdc42783          	lw	a5,-36(s0)
 2101110:	0087a783          	lw	a5,8(a5)
 2101114:	00078693          	mv	a3,a5
 2101118:	fd442603          	lw	a2,-44(s0)
 210111c:	fd842583          	lw	a1,-40(s0)
 2101120:	00070513          	mv	a0,a4
 2101124:	510000ef          	jal	ra,2101634 <altera_avalon_uart_read>
 2101128:	00050793          	mv	a5,a0
      fd->fd_flags);
}
 210112c:	00078513          	mv	a0,a5
 2101130:	02c12083          	lw	ra,44(sp)
 2101134:	02812403          	lw	s0,40(sp)
 2101138:	03010113          	addi	sp,sp,48
 210113c:	00008067          	ret

02101140 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2101140:	fd010113          	addi	sp,sp,-48
 2101144:	02112623          	sw	ra,44(sp)
 2101148:	02812423          	sw	s0,40(sp)
 210114c:	03010413          	addi	s0,sp,48
 2101150:	fca42e23          	sw	a0,-36(s0)
 2101154:	fcb42c23          	sw	a1,-40(s0)
 2101158:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 210115c:	fdc42783          	lw	a5,-36(s0)
 2101160:	0007a783          	lw	a5,0(a5)
 2101164:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 2101168:	fec42783          	lw	a5,-20(s0)
 210116c:	02878713          	addi	a4,a5,40
 2101170:	fdc42783          	lw	a5,-36(s0)
 2101174:	0087a783          	lw	a5,8(a5)
 2101178:	00078693          	mv	a3,a5
 210117c:	fd442603          	lw	a2,-44(s0)
 2101180:	fd842583          	lw	a1,-40(s0)
 2101184:	00070513          	mv	a0,a4
 2101188:	6e0000ef          	jal	ra,2101868 <altera_avalon_uart_write>
 210118c:	00050793          	mv	a5,a0
      fd->fd_flags);
}
 2101190:	00078513          	mv	a0,a5
 2101194:	02c12083          	lw	ra,44(sp)
 2101198:	02812403          	lw	s0,40(sp)
 210119c:	03010113          	addi	sp,sp,48
 21011a0:	00008067          	ret

021011a4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 21011a4:	fd010113          	addi	sp,sp,-48
 21011a8:	02112623          	sw	ra,44(sp)
 21011ac:	02812423          	sw	s0,40(sp)
 21011b0:	03010413          	addi	s0,sp,48
 21011b4:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 21011b8:	fdc42783          	lw	a5,-36(s0)
 21011bc:	0007a783          	lw	a5,0(a5)
 21011c0:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 21011c4:	fec42783          	lw	a5,-20(s0)
 21011c8:	02878713          	addi	a4,a5,40
 21011cc:	fdc42783          	lw	a5,-36(s0)
 21011d0:	0087a783          	lw	a5,8(a5)
 21011d4:	00078593          	mv	a1,a5
 21011d8:	00070513          	mv	a0,a4
 21011dc:	3b8000ef          	jal	ra,2101594 <altera_avalon_uart_close>
 21011e0:	00050793          	mv	a5,a0
}
 21011e4:	00078513          	mv	a0,a5
 21011e8:	02c12083          	lw	ra,44(sp)
 21011ec:	02812403          	lw	s0,40(sp)
 21011f0:	03010113          	addi	sp,sp,48
 21011f4:	00008067          	ret

021011f8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 21011f8:	fd010113          	addi	sp,sp,-48
 21011fc:	02112623          	sw	ra,44(sp)
 2101200:	02812423          	sw	s0,40(sp)
 2101204:	03010413          	addi	s0,sp,48
 2101208:	fca42e23          	sw	a0,-36(s0)
 210120c:	fcb42c23          	sw	a1,-40(s0)
 2101210:	fcc42a23          	sw	a2,-44(s0)
  void* base = sp->base;
 2101214:	fdc42783          	lw	a5,-36(s0)
 2101218:	0007a783          	lw	a5,0(a5)
 210121c:	fef42223          	sw	a5,-28(s0)
 2101220:	00000793          	li	a5,0
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2101224:	00079a63          	bnez	a5,2101238 <altera_avalon_uart_init+0x40>
 2101228:	00000793          	li	a5,0
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 210122c:	00079663          	bnez	a5,2101238 <altera_avalon_uart_init+0x40>
 2101230:	00000793          	li	a5,0
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2101234:	00078663          	beqz	a5,2101240 <altera_avalon_uart_init+0x48>
 2101238:	00100793          	li	a5,1
 210123c:	0080006f          	j	2101244 <altera_avalon_uart_init+0x4c>
 2101240:	00000793          	li	a5,0
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2101244:	fef42423          	sw	a5,-24(s0)
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 2101248:	fe842783          	lw	a5,-24(s0)
 210124c:	04079663          	bnez	a5,2101298 <altera_avalon_uart_init+0xa0>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 2101250:	fdc42783          	lw	a5,-36(s0)
 2101254:	00001737          	lui	a4,0x1
 2101258:	c8070713          	addi	a4,a4,-896 # c80 <JTAG_UART_DBG+0x900>
 210125c:	00e7a223          	sw	a4,4(a5)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 2101260:	fdc42783          	lw	a5,-36(s0)
 2101264:	0047a783          	lw	a5,4(a5)
 2101268:	fef42623          	sw	a5,-20(s0)
 210126c:	fe442783          	lw	a5,-28(s0)
 2101270:	00c78793          	addi	a5,a5,12
 2101274:	fec42703          	lw	a4,-20(s0)
 2101278:	00e7a023          	sw	a4,0(a5)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 210127c:	00000713          	li	a4,0
 2101280:	fdc42683          	lw	a3,-36(s0)
 2101284:	021017b7          	lui	a5,0x2101
 2101288:	2ac78613          	addi	a2,a5,684 # 21012ac <altera_avalon_uart_irq>
 210128c:	fd442583          	lw	a1,-44(s0)
 2101290:	fd842503          	lw	a0,-40(s0)
 2101294:	3c5000ef          	jal	ra,2101e58 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 2101298:	00000013          	nop
 210129c:	02c12083          	lw	ra,44(sp)
 21012a0:	02812403          	lw	s0,40(sp)
 21012a4:	03010113          	addi	sp,sp,48
 21012a8:	00008067          	ret

021012ac <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 21012ac:	fc010113          	addi	sp,sp,-64
 21012b0:	02112e23          	sw	ra,60(sp)
 21012b4:	02812c23          	sw	s0,56(sp)
 21012b8:	04010413          	addi	s0,sp,64
 21012bc:	fca42623          	sw	a0,-52(s0)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 21012c0:	fcc42783          	lw	a5,-52(s0)
 21012c4:	fcf42c23          	sw	a5,-40(s0)
  void* base               = sp->base;
 21012c8:	fd842783          	lw	a5,-40(s0)
 21012cc:	0007a783          	lw	a5,0(a5)
 21012d0:	fcf42e23          	sw	a5,-36(s0)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 21012d4:	fdc42783          	lw	a5,-36(s0)
 21012d8:	00878793          	addi	a5,a5,8
 21012dc:	0007a783          	lw	a5,0(a5)
 21012e0:	fef42023          	sw	a5,-32(s0)
 21012e4:	fe042783          	lw	a5,-32(s0)
 21012e8:	fef42223          	sw	a5,-28(s0)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 21012ec:	fe042423          	sw	zero,-24(s0)
 21012f0:	fdc42783          	lw	a5,-36(s0)
 21012f4:	00878793          	addi	a5,a5,8
 21012f8:	fe842703          	lw	a4,-24(s0)
 21012fc:	00e7a023          	sw	a4,0(a5)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 2101300:	fdc42783          	lw	a5,-36(s0)
 2101304:	00878793          	addi	a5,a5,8
 2101308:	0007a783          	lw	a5,0(a5)
 210130c:	fef42623          	sw	a5,-20(s0)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 2101310:	fe442783          	lw	a5,-28(s0)
 2101314:	0807f793          	andi	a5,a5,128
 2101318:	00078863          	beqz	a5,2101328 <altera_avalon_uart_irq+0x7c>
  {
    altera_avalon_uart_rxirq(sp, status);
 210131c:	fe442583          	lw	a1,-28(s0)
 2101320:	fd842503          	lw	a0,-40(s0)
 2101324:	030000ef          	jal	ra,2101354 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 2101328:	fe442783          	lw	a5,-28(s0)
 210132c:	4407f793          	andi	a5,a5,1088
 2101330:	00078863          	beqz	a5,2101340 <altera_avalon_uart_irq+0x94>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 2101334:	fe442583          	lw	a1,-28(s0)
 2101338:	fd842503          	lw	a0,-40(s0)
 210133c:	100000ef          	jal	ra,210143c <altera_avalon_uart_txirq>
  }
  

}
 2101340:	00000013          	nop
 2101344:	03c12083          	lw	ra,60(sp)
 2101348:	03812403          	lw	s0,56(sp)
 210134c:	04010113          	addi	sp,sp,64
 2101350:	00008067          	ret

02101354 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 2101354:	fd010113          	addi	sp,sp,-48
 2101358:	02812623          	sw	s0,44(sp)
 210135c:	03010413          	addi	s0,sp,48
 2101360:	fca42e23          	sw	a0,-36(s0)
 2101364:	fcb42c23          	sw	a1,-40(s0)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 2101368:	fd842783          	lw	a5,-40(s0)
 210136c:	0037f793          	andi	a5,a5,3
 2101370:	0a079e63          	bnez	a5,210142c <altera_avalon_uart_rxirq+0xd8>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 2101374:	fdc42783          	lw	a5,-36(s0)
 2101378:	00c7a783          	lw	a5,12(a5)
 210137c:	fdc42783          	lw	a5,-36(s0)
 2101380:	0087a783          	lw	a5,8(a5)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, ALT_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2101384:	fdc42783          	lw	a5,-36(s0)
 2101388:	00c7a783          	lw	a5,12(a5)
 210138c:	00178793          	addi	a5,a5,1
 2101390:	03f7f793          	andi	a5,a5,63
 2101394:	fef42223          	sw	a5,-28(s0)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 2101398:	fdc42783          	lw	a5,-36(s0)
 210139c:	0007a783          	lw	a5,0(a5)
 21013a0:	0007a783          	lw	a5,0(a5)
 21013a4:	fef42423          	sw	a5,-24(s0)
 21013a8:	fe842703          	lw	a4,-24(s0)
 21013ac:	fdc42783          	lw	a5,-36(s0)
 21013b0:	00c7a783          	lw	a5,12(a5)
 21013b4:	0ff77713          	zext.b	a4,a4
 21013b8:	fdc42683          	lw	a3,-36(s0)
 21013bc:	00f687b3          	add	a5,a3,a5
 21013c0:	00e78e23          	sb	a4,28(a5)

  sp->rx_end = next;
 21013c4:	fdc42783          	lw	a5,-36(s0)
 21013c8:	fe442703          	lw	a4,-28(s0)
 21013cc:	00e7a623          	sw	a4,12(a5)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 21013d0:	fdc42783          	lw	a5,-36(s0)
 21013d4:	00c7a783          	lw	a5,12(a5)
 21013d8:	00178793          	addi	a5,a5,1
 21013dc:	03f7f793          	andi	a5,a5,63
 21013e0:	fef42223          	sw	a5,-28(s0)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 21013e4:	fdc42783          	lw	a5,-36(s0)
 21013e8:	0087a783          	lw	a5,8(a5)
 21013ec:	fe442703          	lw	a4,-28(s0)
 21013f0:	04f71063          	bne	a4,a5,2101430 <altera_avalon_uart_rxirq+0xdc>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 21013f4:	fdc42783          	lw	a5,-36(s0)
 21013f8:	0047a783          	lw	a5,4(a5)
 21013fc:	f7f7f713          	andi	a4,a5,-129
 2101400:	fdc42783          	lw	a5,-36(s0)
 2101404:	00e7a223          	sw	a4,4(a5)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 2101408:	fdc42783          	lw	a5,-36(s0)
 210140c:	0047a783          	lw	a5,4(a5)
 2101410:	fef42623          	sw	a5,-20(s0)
 2101414:	fdc42783          	lw	a5,-36(s0)
 2101418:	0007a783          	lw	a5,0(a5)
 210141c:	00c78793          	addi	a5,a5,12
 2101420:	fec42703          	lw	a4,-20(s0)
 2101424:	00e7a023          	sw	a4,0(a5)
 2101428:	0080006f          	j	2101430 <altera_avalon_uart_rxirq+0xdc>
    return;
 210142c:	00000013          	nop
  }   
}
 2101430:	02c12403          	lw	s0,44(sp)
 2101434:	03010113          	addi	sp,sp,48
 2101438:	00008067          	ret

0210143c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 210143c:	fd010113          	addi	sp,sp,-48
 2101440:	02812623          	sw	s0,44(sp)
 2101444:	03010413          	addi	s0,sp,48
 2101448:	fca42e23          	sw	a0,-36(s0)
 210144c:	fcb42c23          	sw	a1,-40(s0)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 2101450:	fdc42783          	lw	a5,-36(s0)
 2101454:	0107a703          	lw	a4,16(a5)
 2101458:	fdc42783          	lw	a5,-36(s0)
 210145c:	0147a783          	lw	a5,20(a5)
 2101460:	0cf70e63          	beq	a4,a5,210153c <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2101464:	fdc42783          	lw	a5,-36(s0)
 2101468:	0187a783          	lw	a5,24(a5)
 210146c:	0027f793          	andi	a5,a5,2
 2101470:	00078c63          	beqz	a5,2101488 <altera_avalon_uart_txirq+0x4c>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2101474:	fd842703          	lw	a4,-40(s0)
 2101478:	000017b7          	lui	a5,0x1
 210147c:	80078793          	addi	a5,a5,-2048 # 800 <JTAG_UART_DBG+0x480>
 2101480:	00f777b3          	and	a5,a4,a5
    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2101484:	06078a63          	beqz	a5,21014f8 <altera_avalon_uart_txirq+0xbc>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 2101488:	fdc42783          	lw	a5,-36(s0)
 210148c:	0107a783          	lw	a5,16(a5)
 2101490:	fdc42783          	lw	a5,-36(s0)
 2101494:	0147a783          	lw	a5,20(a5)
                       ALT_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 2101498:	fdc42783          	lw	a5,-36(s0)
 210149c:	0107a783          	lw	a5,16(a5)
 21014a0:	fdc42703          	lw	a4,-36(s0)
 21014a4:	00f707b3          	add	a5,a4,a5
 21014a8:	05c7c783          	lbu	a5,92(a5)
 21014ac:	0ff7f793          	zext.b	a5,a5
 21014b0:	fef42423          	sw	a5,-24(s0)
 21014b4:	fdc42783          	lw	a5,-36(s0)
 21014b8:	0007a783          	lw	a5,0(a5)
 21014bc:	00478793          	addi	a5,a5,4
 21014c0:	fe842703          	lw	a4,-24(s0)
 21014c4:	00e7a023          	sw	a4,0(a5)

      sp->tx_start = ((sp->tx_start) + 1) & ALT_AVALON_UART_BUF_MSK;
 21014c8:	fdc42783          	lw	a5,-36(s0)
 21014cc:	0107a783          	lw	a5,16(a5)
 21014d0:	00178793          	addi	a5,a5,1
 21014d4:	03f7f713          	andi	a4,a5,63
 21014d8:	fdc42783          	lw	a5,-36(s0)
 21014dc:	00e7a823          	sw	a4,16(a5)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 21014e0:	fdc42783          	lw	a5,-36(s0)
 21014e4:	0047a783          	lw	a5,4(a5)
 21014e8:	0407e713          	ori	a4,a5,64
 21014ec:	fdc42783          	lw	a5,-36(s0)
 21014f0:	00e7a223          	sw	a4,4(a5)
 21014f4:	0480006f          	j	210153c <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 21014f8:	fdc42783          	lw	a5,-36(s0)
 21014fc:	0007a783          	lw	a5,0(a5)
 2101500:	00878793          	addi	a5,a5,8
 2101504:	0007a783          	lw	a5,0(a5)
 2101508:	fef42223          	sw	a5,-28(s0)
 210150c:	fe442783          	lw	a5,-28(s0)
 2101510:	fcf42c23          	sw	a5,-40(s0)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2101514:	fd842703          	lw	a4,-40(s0)
 2101518:	000017b7          	lui	a5,0x1
 210151c:	80078793          	addi	a5,a5,-2048 # 800 <JTAG_UART_DBG+0x480>
 2101520:	00f777b3          	and	a5,a4,a5
 2101524:	00079c63          	bnez	a5,210153c <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2101528:	fdc42783          	lw	a5,-36(s0)
 210152c:	0047a783          	lw	a5,4(a5)
 2101530:	fbf7f713          	andi	a4,a5,-65
 2101534:	fdc42783          	lw	a5,-36(s0)
 2101538:	00e7a223          	sw	a4,4(a5)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 210153c:	fdc42783          	lw	a5,-36(s0)
 2101540:	0107a703          	lw	a4,16(a5)
 2101544:	fdc42783          	lw	a5,-36(s0)
 2101548:	0147a783          	lw	a5,20(a5)
 210154c:	00f71c63          	bne	a4,a5,2101564 <altera_avalon_uart_txirq+0x128>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2101550:	fdc42783          	lw	a5,-36(s0)
 2101554:	0047a783          	lw	a5,4(a5)
 2101558:	bbf7f713          	andi	a4,a5,-1089
 210155c:	fdc42783          	lw	a5,-36(s0)
 2101560:	00e7a223          	sw	a4,4(a5)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2101564:	fdc42783          	lw	a5,-36(s0)
 2101568:	0047a783          	lw	a5,4(a5)
 210156c:	fef42623          	sw	a5,-20(s0)
 2101570:	fdc42783          	lw	a5,-36(s0)
 2101574:	0007a783          	lw	a5,0(a5)
 2101578:	00c78793          	addi	a5,a5,12
 210157c:	fec42703          	lw	a4,-20(s0)
 2101580:	00e7a023          	sw	a4,0(a5)
}
 2101584:	00000013          	nop
 2101588:	02c12403          	lw	s0,44(sp)
 210158c:	03010113          	addi	sp,sp,48
 2101590:	00008067          	ret

02101594 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 2101594:	fe010113          	addi	sp,sp,-32
 2101598:	00812e23          	sw	s0,28(sp)
 210159c:	02010413          	addi	s0,sp,32
 21015a0:	fea42623          	sw	a0,-20(s0)
 21015a4:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 21015a8:	01c0006f          	j	21015c4 <altera_avalon_uart_close+0x30>
    if (flags & O_NONBLOCK) {
 21015ac:	fe842703          	lw	a4,-24(s0)
 21015b0:	000047b7          	lui	a5,0x4
 21015b4:	00f777b3          	and	a5,a4,a5
 21015b8:	00078663          	beqz	a5,21015c4 <altera_avalon_uart_close+0x30>
      return -EWOULDBLOCK; 
 21015bc:	ff500793          	li	a5,-11
 21015c0:	01c0006f          	j	21015dc <altera_avalon_uart_close+0x48>
  while (sp->tx_start != sp->tx_end) {
 21015c4:	fec42783          	lw	a5,-20(s0)
 21015c8:	0107a703          	lw	a4,16(a5) # 4010 <__global_pointer$+0x1990>
 21015cc:	fec42783          	lw	a5,-20(s0)
 21015d0:	0147a783          	lw	a5,20(a5)
 21015d4:	fcf71ce3          	bne	a4,a5,21015ac <altera_avalon_uart_close+0x18>
    }
  }

  return 0;
 21015d8:	00000793          	li	a5,0
}
 21015dc:	00078513          	mv	a0,a5
 21015e0:	01c12403          	lw	s0,28(sp)
 21015e4:	02010113          	addi	sp,sp,32
 21015e8:	00008067          	ret

021015ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 21015ec:	ff010113          	addi	sp,sp,-16
 21015f0:	00112623          	sw	ra,12(sp)
 21015f4:	00812423          	sw	s0,8(sp)
 21015f8:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 21015fc:	000027b7          	lui	a5,0x2
 2101600:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2101604:	00078c63          	beqz	a5,210161c <alt_get_errno+0x30>
 2101608:	000027b7          	lui	a5,0x2
 210160c:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2101610:	000780e7          	jalr	a5
 2101614:	00050793          	mv	a5,a0
 2101618:	0080006f          	j	2101620 <alt_get_errno+0x34>
 210161c:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 2101620:	00078513          	mv	a0,a5
 2101624:	00c12083          	lw	ra,12(sp)
 2101628:	00812403          	lw	s0,8(sp)
 210162c:	01010113          	addi	sp,sp,16
 2101630:	00008067          	ret

02101634 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 2101634:	fb010113          	addi	sp,sp,-80
 2101638:	04112623          	sw	ra,76(sp)
 210163c:	04812423          	sw	s0,72(sp)
 2101640:	05010413          	addi	s0,sp,80
 2101644:	faa42e23          	sw	a0,-68(s0)
 2101648:	fab42c23          	sw	a1,-72(s0)
 210164c:	fac42a23          	sw	a2,-76(s0)
 2101650:	fad42823          	sw	a3,-80(s0)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 2101654:	fc0405a3          	sb	zero,-53(s0)
  int             count = 0;
 2101658:	fc042623          	sw	zero,-52(s0)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 210165c:	fb042703          	lw	a4,-80(s0)
 2101660:	000047b7          	lui	a5,0x4
 2101664:	00f777b3          	and	a5,a4,a5
 2101668:	0017b793          	seqz	a5,a5
 210166c:	0ff7f793          	zext.b	a5,a5
 2101670:	fcf42823          	sw	a5,-48(s0)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2101674:	0500006f          	j	21016c4 <altera_avalon_uart_read+0x90>
    {
      count++;
 2101678:	fcc42783          	lw	a5,-52(s0)
 210167c:	00178793          	addi	a5,a5,1 # 4001 <__global_pointer$+0x1981>
 2101680:	fcf42623          	sw	a5,-52(s0)
      *ptr++ = sp->rx_buf[sp->rx_start];
 2101684:	fbc42783          	lw	a5,-68(s0)
 2101688:	0087a703          	lw	a4,8(a5)
 210168c:	fb842783          	lw	a5,-72(s0)
 2101690:	00178693          	addi	a3,a5,1
 2101694:	fad42c23          	sw	a3,-72(s0)
 2101698:	fbc42683          	lw	a3,-68(s0)
 210169c:	00e68733          	add	a4,a3,a4
 21016a0:	01c74703          	lbu	a4,28(a4)
 21016a4:	0ff77713          	zext.b	a4,a4
 21016a8:	00e78023          	sb	a4,0(a5)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 21016ac:	fbc42783          	lw	a5,-68(s0)
 21016b0:	0087a783          	lw	a5,8(a5)
 21016b4:	00178793          	addi	a5,a5,1
 21016b8:	03f7f713          	andi	a4,a5,63
 21016bc:	fbc42783          	lw	a5,-68(s0)
 21016c0:	00e7a423          	sw	a4,8(a5)
    while ((count < len) && (sp->rx_start != sp->rx_end))
 21016c4:	fcc42703          	lw	a4,-52(s0)
 21016c8:	fb442783          	lw	a5,-76(s0)
 21016cc:	00f75c63          	bge	a4,a5,21016e4 <altera_avalon_uart_read+0xb0>
 21016d0:	fbc42783          	lw	a5,-68(s0)
 21016d4:	0087a703          	lw	a4,8(a5)
 21016d8:	fbc42783          	lw	a5,-68(s0)
 21016dc:	00c7a783          	lw	a5,12(a5)
 21016e0:	f8f71ce3          	bne	a4,a5,2101678 <altera_avalon_uart_read+0x44>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 21016e4:	fcc42783          	lw	a5,-52(s0)
 21016e8:	0a079063          	bnez	a5,2101788 <altera_avalon_uart_read+0x154>
 21016ec:	fbc42783          	lw	a5,-68(s0)
 21016f0:	0087a703          	lw	a4,8(a5)
 21016f4:	fbc42783          	lw	a5,-68(s0)
 21016f8:	00c7a783          	lw	a5,12(a5)
 21016fc:	08f71663          	bne	a4,a5,2101788 <altera_avalon_uart_read+0x154>
    {
      if (!block)
 2101700:	fd042783          	lw	a5,-48(s0)
 2101704:	02079063          	bnez	a5,2101724 <altera_avalon_uart_read+0xf0>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 2101708:	ee5ff0ef          	jal	ra,21015ec <alt_get_errno>
 210170c:	00050713          	mv	a4,a0
 2101710:	00b00793          	li	a5,11
 2101714:	00f72023          	sw	a5,0(a4)
        read_would_block = 1;
 2101718:	00100793          	li	a5,1
 210171c:	fcf405a3          	sb	a5,-53(s0)
        break;
 2101720:	0780006f          	j	2101798 <altera_avalon_uart_read+0x164>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 2101724:	00800793          	li	a5,8
 2101728:	3007b7f3          	csrrc	a5,mstatus,a5
 210172c:	fef42223          	sw	a5,-28(s0)
    return context;
 2101730:	fe442783          	lw	a5,-28(s0)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 2101734:	fcf42a23          	sw	a5,-44(s0)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2101738:	fbc42783          	lw	a5,-68(s0)
 210173c:	0047a783          	lw	a5,4(a5)
 2101740:	0807e713          	ori	a4,a5,128
 2101744:	fbc42783          	lw	a5,-68(s0)
 2101748:	00e7a223          	sw	a4,4(a5)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 210174c:	fbc42783          	lw	a5,-68(s0)
 2101750:	0047a783          	lw	a5,4(a5)
 2101754:	fcf42c23          	sw	a5,-40(s0)
 2101758:	fbc42783          	lw	a5,-68(s0)
 210175c:	0007a783          	lw	a5,0(a5)
 2101760:	00c78793          	addi	a5,a5,12
 2101764:	fd842703          	lw	a4,-40(s0)
 2101768:	00e7a023          	sw	a4,0(a5)
 210176c:	fd442783          	lw	a5,-44(s0)
 2101770:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 2101774:	fe042783          	lw	a5,-32(s0)
 2101778:	0087f793          	andi	a5,a5,8
 210177c:	3007a073          	csrs	mstatus,a5
}
 2101780:	00000013          	nop
 2101784:	00000013          	nop
                      ALT_FLAG_WAIT_SET_ANY_WITH_CONSUME,
                      ALT_FLAG_WAIT_MAX_TIMEOUT);
      }
    }
  }
  while (!count && len);
 2101788:	fcc42783          	lw	a5,-52(s0)
 210178c:	00079663          	bnez	a5,2101798 <altera_avalon_uart_read+0x164>
 2101790:	fb442783          	lw	a5,-76(s0)
 2101794:	f20798e3          	bnez	a5,21016c4 <altera_avalon_uart_read+0x90>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 2101798:	00800793          	li	a5,8
 210179c:	3007b7f3          	csrrc	a5,mstatus,a5
 21017a0:	fef42623          	sw	a5,-20(s0)
    return context;
 21017a4:	fec42783          	lw	a5,-20(s0)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 21017a8:	fcf42a23          	sw	a5,-44(s0)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 21017ac:	fbc42783          	lw	a5,-68(s0)
 21017b0:	0047a783          	lw	a5,4(a5)
 21017b4:	0807e713          	ori	a4,a5,128
 21017b8:	fbc42783          	lw	a5,-68(s0)
 21017bc:	00e7a223          	sw	a4,4(a5)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 21017c0:	fbc42783          	lw	a5,-68(s0)
 21017c4:	0047a783          	lw	a5,4(a5)
 21017c8:	fcf42e23          	sw	a5,-36(s0)
 21017cc:	fbc42783          	lw	a5,-68(s0)
 21017d0:	0007a783          	lw	a5,0(a5)
 21017d4:	00c78793          	addi	a5,a5,12
 21017d8:	fdc42703          	lw	a4,-36(s0)
 21017dc:	00e7a023          	sw	a4,0(a5)
 21017e0:	fd442783          	lw	a5,-44(s0)
 21017e4:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 21017e8:	fe842783          	lw	a5,-24(s0)
 21017ec:	0087f793          	andi	a5,a5,8
 21017f0:	3007a073          	csrs	mstatus,a5
}
 21017f4:	00000013          	nop
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 21017f8:	fcb44783          	lbu	a5,-53(s0)
 21017fc:	00078663          	beqz	a5,2101808 <altera_avalon_uart_read+0x1d4>
    return -EWOULDBLOCK;
 2101800:	ff500793          	li	a5,-11
 2101804:	0080006f          	j	210180c <altera_avalon_uart_read+0x1d8>
  }
  else {
    return count;
 2101808:	fcc42783          	lw	a5,-52(s0)
  }
}
 210180c:	00078513          	mv	a0,a5
 2101810:	04c12083          	lw	ra,76(sp)
 2101814:	04812403          	lw	s0,72(sp)
 2101818:	05010113          	addi	sp,sp,80
 210181c:	00008067          	ret

02101820 <alt_get_errno>:
{
 2101820:	ff010113          	addi	sp,sp,-16
 2101824:	00112623          	sw	ra,12(sp)
 2101828:	00812423          	sw	s0,8(sp)
 210182c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 2101830:	000027b7          	lui	a5,0x2
 2101834:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2101838:	00078c63          	beqz	a5,2101850 <alt_get_errno+0x30>
 210183c:	000027b7          	lui	a5,0x2
 2101840:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2101844:	000780e7          	jalr	a5
 2101848:	00050793          	mv	a5,a0
 210184c:	0080006f          	j	2101854 <alt_get_errno+0x34>
 2101850:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 2101854:	00078513          	mv	a0,a5
 2101858:	00c12083          	lw	ra,12(sp)
 210185c:	00812403          	lw	s0,8(sp)
 2101860:	01010113          	addi	sp,sp,16
 2101864:	00008067          	ret

02101868 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 2101868:	fb010113          	addi	sp,sp,-80
 210186c:	04112623          	sw	ra,76(sp)
 2101870:	04812423          	sw	s0,72(sp)
 2101874:	05010413          	addi	s0,sp,80
 2101878:	faa42e23          	sw	a0,-68(s0)
 210187c:	fab42c23          	sw	a1,-72(s0)
 2101880:	fac42a23          	sw	a2,-76(s0)
 2101884:	fad42823          	sw	a3,-80(s0)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 2101888:	fb442783          	lw	a5,-76(s0)
 210188c:	fcf42423          	sw	a5,-56(s0)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 2101890:	fb042703          	lw	a4,-80(s0)
 2101894:	000047b7          	lui	a5,0x4
 2101898:	00f777b3          	and	a5,a4,a5
 210189c:	fcf42623          	sw	a5,-52(s0)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 21018a0:	0f40006f          	j	2101994 <altera_avalon_uart_write+0x12c>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 21018a4:	fbc42783          	lw	a5,-68(s0)
 21018a8:	0147a783          	lw	a5,20(a5) # 4014 <__global_pointer$+0x1994>
 21018ac:	00178793          	addi	a5,a5,1
 21018b0:	03f7f793          	andi	a5,a5,63
 21018b4:	fcf42823          	sw	a5,-48(s0)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 21018b8:	fbc42783          	lw	a5,-68(s0)
 21018bc:	0107a783          	lw	a5,16(a5)
 21018c0:	fd042703          	lw	a4,-48(s0)
 21018c4:	08f71a63          	bne	a4,a5,2101958 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
 21018c8:	fcc42783          	lw	a5,-52(s0)
 21018cc:	00078c63          	beqz	a5,21018e4 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 21018d0:	f51ff0ef          	jal	ra,2101820 <alt_get_errno>
 21018d4:	00050713          	mv	a4,a0
 21018d8:	00b00793          	li	a5,11
 21018dc:	00f72023          	sw	a5,0(a4)
        break;
 21018e0:	0bc0006f          	j	210199c <altera_avalon_uart_write+0x134>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 21018e4:	00800793          	li	a5,8
 21018e8:	3007b7f3          	csrrc	a5,mstatus,a5
 21018ec:	fef42223          	sw	a5,-28(s0)
    return context;
 21018f0:	fe442783          	lw	a5,-28(s0)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 21018f4:	fcf42a23          	sw	a5,-44(s0)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 21018f8:	fbc42783          	lw	a5,-68(s0)
 21018fc:	0047a783          	lw	a5,4(a5)
 2101900:	4407e713          	ori	a4,a5,1088
 2101904:	fbc42783          	lw	a5,-68(s0)
 2101908:	00e7a223          	sw	a4,4(a5)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 210190c:	fbc42783          	lw	a5,-68(s0)
 2101910:	0047a783          	lw	a5,4(a5)
 2101914:	fcf42c23          	sw	a5,-40(s0)
 2101918:	fbc42783          	lw	a5,-68(s0)
 210191c:	0007a783          	lw	a5,0(a5)
 2101920:	00c78793          	addi	a5,a5,12
 2101924:	fd842703          	lw	a4,-40(s0)
 2101928:	00e7a023          	sw	a4,0(a5)
 210192c:	fd442783          	lw	a5,-44(s0)
 2101930:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 2101934:	fe042783          	lw	a5,-32(s0)
 2101938:	0087f793          	andi	a5,a5,8
 210193c:	3007a073          	csrs	mstatus,a5
}
 2101940:	00000013          	nop
 2101944:	00000013          	nop
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         ALT_FLAG_WAIT_SET_ANY_WITH_CONSUME,
                         ALT_FLAG_WAIT_MAX_TIMEOUT);
        }
        while ((next == sp->tx_start));
 2101948:	fbc42783          	lw	a5,-68(s0)
 210194c:	0107a783          	lw	a5,16(a5)
 2101950:	fd042703          	lw	a4,-48(s0)
 2101954:	fef708e3          	beq	a4,a5,2101944 <altera_avalon_uart_write+0xdc>
      }
    }

    count--;
 2101958:	fc842783          	lw	a5,-56(s0)
 210195c:	fff78793          	addi	a5,a5,-1
 2101960:	fcf42423          	sw	a5,-56(s0)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 2101964:	fb842783          	lw	a5,-72(s0)
 2101968:	00178713          	addi	a4,a5,1
 210196c:	fae42c23          	sw	a4,-72(s0)
 2101970:	fbc42703          	lw	a4,-68(s0)
 2101974:	01472683          	lw	a3,20(a4)
 2101978:	0007c703          	lbu	a4,0(a5)
 210197c:	fbc42783          	lw	a5,-68(s0)
 2101980:	00d787b3          	add	a5,a5,a3
 2101984:	04e78e23          	sb	a4,92(a5)
    sp->tx_end = next;
 2101988:	fbc42783          	lw	a5,-68(s0)
 210198c:	fd042703          	lw	a4,-48(s0)
 2101990:	00e7aa23          	sw	a4,20(a5)
  while (count)
 2101994:	fc842783          	lw	a5,-56(s0)
 2101998:	f00796e3          	bnez	a5,21018a4 <altera_avalon_uart_write+0x3c>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 210199c:	00800793          	li	a5,8
 21019a0:	3007b7f3          	csrrc	a5,mstatus,a5
 21019a4:	fef42623          	sw	a5,-20(s0)
    return context;
 21019a8:	fec42783          	lw	a5,-20(s0)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 21019ac:	fcf42a23          	sw	a5,-44(s0)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 21019b0:	fbc42783          	lw	a5,-68(s0)
 21019b4:	0047a783          	lw	a5,4(a5)
 21019b8:	4407e713          	ori	a4,a5,1088
 21019bc:	fbc42783          	lw	a5,-68(s0)
 21019c0:	00e7a223          	sw	a4,4(a5)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 21019c4:	fbc42783          	lw	a5,-68(s0)
 21019c8:	0047a783          	lw	a5,4(a5)
 21019cc:	fcf42e23          	sw	a5,-36(s0)
 21019d0:	fbc42783          	lw	a5,-68(s0)
 21019d4:	0007a783          	lw	a5,0(a5)
 21019d8:	00c78793          	addi	a5,a5,12
 21019dc:	fdc42703          	lw	a4,-36(s0)
 21019e0:	00e7a023          	sw	a4,0(a5)
 21019e4:	fd442783          	lw	a5,-44(s0)
 21019e8:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 21019ec:	fe842783          	lw	a5,-24(s0)
 21019f0:	0087f793          	andi	a5,a5,8
 21019f4:	3007a073          	csrs	mstatus,a5
}
 21019f8:	00000013          	nop
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 21019fc:	fb442703          	lw	a4,-76(s0)
 2101a00:	fc842783          	lw	a5,-56(s0)
 2101a04:	40f707b3          	sub	a5,a4,a5
}
 2101a08:	00078513          	mv	a0,a5
 2101a0c:	04c12083          	lw	ra,76(sp)
 2101a10:	04812403          	lw	s0,72(sp)
 2101a14:	05010113          	addi	sp,sp,80
 2101a18:	00008067          	ret

02101a1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2101a1c:	fc010113          	addi	sp,sp,-64
 2101a20:	02812e23          	sw	s0,60(sp)
 2101a24:	04010413          	addi	s0,sp,64
 2101a28:	fca42623          	sw	a0,-52(s0)
 2101a2c:	fcb42423          	sw	a1,-56(s0)
 2101a30:	fcc42223          	sw	a2,-60(s0)
 2101a34:	fcd42023          	sw	a3,-64(s0)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
 2101a38:	00000713          	li	a4,0
 2101a3c:	00000793          	li	a5,0
 2101a40:	fee42423          	sw	a4,-24(s0)
 2101a44:	fef42623          	sw	a5,-20(s0)
 2101a48:	8501a783          	lw	a5,-1968(gp) # 1ed0 <_alt_tick_rate>
  
  if (alt_ticks_per_second ())
 2101a4c:	12078063          	beqz	a5,2101b6c <alt_alarm_start+0x150>
  {
    if (alarm)
 2101a50:	fcc42783          	lw	a5,-52(s0)
 2101a54:	10078863          	beqz	a5,2101b64 <alt_alarm_start+0x148>
    {
      alarm->callback = callback;
 2101a58:	fcc42783          	lw	a5,-52(s0)
 2101a5c:	fc442703          	lw	a4,-60(s0)
 2101a60:	00e7a823          	sw	a4,16(a5)
      alarm->context  = context;
 2101a64:	fcc42783          	lw	a5,-52(s0)
 2101a68:	fc042703          	lw	a4,-64(s0)
 2101a6c:	00e7aa23          	sw	a4,20(a5)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 2101a70:	00800793          	li	a5,8
 2101a74:	3007b7f3          	csrrc	a5,mstatus,a5
 2101a78:	fef42223          	sw	a5,-28(s0)
    return context;
 2101a7c:	fe442783          	lw	a5,-28(s0)
 
      irq_context = alt_irq_disable_all ();
 2101a80:	fcf42a23          	sw	a5,-44(s0)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2101a84:	8581a703          	lw	a4,-1960(gp) # 1ed8 <_alt_nticks>
 2101a88:	85c1a783          	lw	a5,-1956(gp) # 1edc <_alt_nticks+0x4>
      
      current_nticks = alt_nticks();
 2101a8c:	fee42423          	sw	a4,-24(s0)
 2101a90:	fef42623          	sw	a5,-20(s0)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
 2101a94:	fc842783          	lw	a5,-56(s0)
 2101a98:	00078813          	mv	a6,a5
 2101a9c:	00000893          	li	a7,0
 2101aa0:	fe842603          	lw	a2,-24(s0)
 2101aa4:	fec42683          	lw	a3,-20(s0)
 2101aa8:	00c80733          	add	a4,a6,a2
 2101aac:	00070593          	mv	a1,a4
 2101ab0:	0105b5b3          	sltu	a1,a1,a6
 2101ab4:	00d887b3          	add	a5,a7,a3
 2101ab8:	00f586b3          	add	a3,a1,a5
 2101abc:	00068793          	mv	a5,a3
 2101ac0:	00070613          	mv	a2,a4
 2101ac4:	00078693          	mv	a3,a5
 2101ac8:	00100513          	li	a0,1
 2101acc:	00000593          	li	a1,0
 2101ad0:	00a60733          	add	a4,a2,a0
 2101ad4:	00070813          	mv	a6,a4
 2101ad8:	00c83833          	sltu	a6,a6,a2
 2101adc:	00b687b3          	add	a5,a3,a1
 2101ae0:	00f806b3          	add	a3,a6,a5
 2101ae4:	00068793          	mv	a5,a3
 2101ae8:	fcc42683          	lw	a3,-52(s0)
 2101aec:	00e6a423          	sw	a4,8(a3)
 2101af0:	00f6a623          	sw	a5,12(a3)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2101af4:	fcc42783          	lw	a5,-52(s0)
 2101af8:	00002737          	lui	a4,0x2
 2101afc:	e9870713          	addi	a4,a4,-360 # 1e98 <alt_alarm_list>
 2101b00:	fce42e23          	sw	a4,-36(s0)
 2101b04:	fef42023          	sw	a5,-32(s0)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2101b08:	fe042783          	lw	a5,-32(s0)
 2101b0c:	fdc42703          	lw	a4,-36(s0)
 2101b10:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
 2101b14:	fdc42783          	lw	a5,-36(s0)
 2101b18:	0007a703          	lw	a4,0(a5)
 2101b1c:	fe042783          	lw	a5,-32(s0)
 2101b20:	00e7a023          	sw	a4,0(a5)

  list->next->previous = entry;
 2101b24:	fdc42783          	lw	a5,-36(s0)
 2101b28:	0007a783          	lw	a5,0(a5)
 2101b2c:	fe042703          	lw	a4,-32(s0)
 2101b30:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
 2101b34:	fdc42783          	lw	a5,-36(s0)
 2101b38:	fe042703          	lw	a4,-32(s0)
 2101b3c:	00e7a023          	sw	a4,0(a5)
}
 2101b40:	00000013          	nop
 2101b44:	fd442783          	lw	a5,-44(s0)
 2101b48:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 2101b4c:	fd842783          	lw	a5,-40(s0)
 2101b50:	0087f793          	andi	a5,a5,8
 2101b54:	3007a073          	csrs	mstatus,a5
}
 2101b58:	00000013          	nop
      alt_irq_enable_all (irq_context);

      return 0;
 2101b5c:	00000793          	li	a5,0
 2101b60:	0100006f          	j	2101b70 <alt_alarm_start+0x154>
    }
    else
    {
      return -EINVAL;
 2101b64:	fea00793          	li	a5,-22
 2101b68:	0080006f          	j	2101b70 <alt_alarm_start+0x154>
    }
  }
  else
  {
    return -ENOTSUP;
 2101b6c:	f7a00793          	li	a5,-134
  }
}
 2101b70:	00078513          	mv	a0,a5
 2101b74:	03c12403          	lw	s0,60(sp)
 2101b78:	04010113          	addi	sp,sp,64
 2101b7c:	00008067          	ret

02101b80 <alt_busy_sleep>:

// For a 50 Mhz clock, this is 1,202,590,842.
#define US_PER_OUTER_LOOP ((alt_u64)CLOCKS_PER_OUTER_LOOP / (alt_u64)CPU_FREQUENCY_MHZ)

unsigned int alt_busy_sleep (unsigned int us)
{
 2101b80:	fd010113          	addi	sp,sp,-48
 2101b84:	02112623          	sw	ra,44(sp)
 2101b88:	02812423          	sw	s0,40(sp)
 2101b8c:	03010413          	addi	s0,sp,48
 2101b90:	fca42e23          	sw	a0,-36(s0)
 * is connected, use that. If no timer agent is connected, fallback to a low accuracy busy
 * loop. If accurate timing is desired for busy sleep (used by usleep), please be sure to
 * provide a timestamp source, or connect the timer agent.
 */
#if HAL_TIMESTAMP_ENABLED
    alt_timestamp_start();
 2101b94:	065000ef          	jal	ra,21023f8 <alt_timestamp_start>
    const alt_timestamp_type end_time = (CPU_FREQUENCY_MHZ * us);
 2101b98:	fdc42703          	lw	a4,-36(s0)
 2101b9c:	00070793          	mv	a5,a4
 2101ba0:	00179793          	slli	a5,a5,0x1
 2101ba4:	00e787b3          	add	a5,a5,a4
 2101ba8:	00379793          	slli	a5,a5,0x3
 2101bac:	00e787b3          	add	a5,a5,a4
 2101bb0:	00279793          	slli	a5,a5,0x2
 2101bb4:	fef42423          	sw	a5,-24(s0)
 2101bb8:	fe042623          	sw	zero,-20(s0)
    while (alt_timestamp() < end_time) {
 2101bbc:	00000013          	nop
 2101bc0:	075000ef          	jal	ra,2102434 <alt_timestamp>
 2101bc4:	00050713          	mv	a4,a0
 2101bc8:	00058793          	mv	a5,a1
 2101bcc:	fec42683          	lw	a3,-20(s0)
 2101bd0:	00078613          	mv	a2,a5
 2101bd4:	fed666e3          	bltu	a2,a3,2101bc0 <alt_busy_sleep+0x40>
 2101bd8:	fec42683          	lw	a3,-20(s0)
 2101bdc:	00078613          	mv	a2,a5
 2101be0:	00c69863          	bne	a3,a2,2101bf0 <alt_busy_sleep+0x70>
 2101be4:	fe842683          	lw	a3,-24(s0)
 2101be8:	00070793          	mv	a5,a4
 2101bec:	fcd7eae3          	bltu	a5,a3,2101bc0 <alt_busy_sleep+0x40>
        );
    }
#endif
#endif /* #ifndef ALT_SIM_OPTIMIZE */

  return 0;
 2101bf0:	00000793          	li	a5,0
}
 2101bf4:	00078513          	mv	a0,a5
 2101bf8:	02c12083          	lw	ra,44(sp)
 2101bfc:	02812403          	lw	s0,40(sp)
 2101c00:	03010113          	addi	sp,sp,48
 2101c04:	00008067          	ret

02101c08 <alt_dcache_flush_all>:

/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */
void alt_dcache_flush_all (void)
{
 2101c08:	ff010113          	addi	sp,sp,-16
 2101c0c:	00812623          	sw	s0,12(sp)
 2101c10:	01010413          	addi	s0,sp,16
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    { 
      DCACHE_CLEAN_BY_INDEX_VAL(i); 
    }
#endif
}
 2101c14:	00000013          	nop
 2101c18:	00c12403          	lw	s0,12(sp)
 2101c1c:	01010113          	addi	sp,sp,16
 2101c20:	00008067          	ret

02101c24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2101c24:	fe010113          	addi	sp,sp,-32
 2101c28:	00812e23          	sw	s0,28(sp)
 2101c2c:	02010413          	addi	s0,sp,32
 2101c30:	fea42623          	sw	a0,-20(s0)
 2101c34:	feb42423          	sw	a1,-24(s0)
 2101c38:	fec42223          	sw	a2,-28(s0)
  return len;
 2101c3c:	fe442783          	lw	a5,-28(s0)
}
 2101c40:	00078513          	mv	a0,a5
 2101c44:	01c12403          	lw	s0,28(sp)
 2101c48:	02010113          	addi	sp,sp,32
 2101c4c:	00008067          	ret

02101c50 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
 2101c50:	fe010113          	addi	sp,sp,-32
 2101c54:	00112e23          	sw	ra,28(sp)
 2101c58:	00812c23          	sw	s0,24(sp)
 2101c5c:	02010413          	addi	s0,sp,32
 2101c60:	fea42623          	sw	a0,-20(s0)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2101c64:	000027b7          	lui	a5,0x2
 2101c68:	e8878593          	addi	a1,a5,-376 # 1e88 <alt_dev_list>
 2101c6c:	fec42503          	lw	a0,-20(s0)
 2101c70:	064000ef          	jal	ra,2101cd4 <alt_dev_llist_insert>
 2101c74:	00050793          	mv	a5,a0
}
 2101c78:	00078513          	mv	a0,a5
 2101c7c:	01c12083          	lw	ra,28(sp)
 2101c80:	01812403          	lw	s0,24(sp)
 2101c84:	02010113          	addi	sp,sp,32
 2101c88:	00008067          	ret

02101c8c <alt_get_errno>:
{
 2101c8c:	ff010113          	addi	sp,sp,-16
 2101c90:	00112623          	sw	ra,12(sp)
 2101c94:	00812423          	sw	s0,8(sp)
 2101c98:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 2101c9c:	000027b7          	lui	a5,0x2
 2101ca0:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2101ca4:	00078c63          	beqz	a5,2101cbc <alt_get_errno+0x30>
 2101ca8:	000027b7          	lui	a5,0x2
 2101cac:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2101cb0:	000780e7          	jalr	a5
 2101cb4:	00050793          	mv	a5,a0
 2101cb8:	0080006f          	j	2101cc0 <alt_get_errno+0x34>
 2101cbc:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 2101cc0:	00078513          	mv	a0,a5
 2101cc4:	00c12083          	lw	ra,12(sp)
 2101cc8:	00812403          	lw	s0,8(sp)
 2101ccc:	01010113          	addi	sp,sp,16
 2101cd0:	00008067          	ret

02101cd4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2101cd4:	fd010113          	addi	sp,sp,-48
 2101cd8:	02112623          	sw	ra,44(sp)
 2101cdc:	02812423          	sw	s0,40(sp)
 2101ce0:	03010413          	addi	s0,sp,48
 2101ce4:	fca42e23          	sw	a0,-36(s0)
 2101ce8:	fcb42c23          	sw	a1,-40(s0)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2101cec:	fdc42783          	lw	a5,-36(s0)
 2101cf0:	00078863          	beqz	a5,2101d00 <alt_dev_llist_insert+0x2c>
 2101cf4:	fdc42783          	lw	a5,-36(s0)
 2101cf8:	0087a783          	lw	a5,8(a5)
 2101cfc:	00079e63          	bnez	a5,2101d18 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 2101d00:	f8dff0ef          	jal	ra,2101c8c <alt_get_errno>
 2101d04:	00050713          	mv	a4,a0
 2101d08:	01600793          	li	a5,22
 2101d0c:	00f72023          	sw	a5,0(a4)
    return -EINVAL;
 2101d10:	fea00793          	li	a5,-22
 2101d14:	0540006f          	j	2101d68 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2101d18:	fdc42783          	lw	a5,-36(s0)
 2101d1c:	fd842703          	lw	a4,-40(s0)
 2101d20:	fee42423          	sw	a4,-24(s0)
 2101d24:	fef42623          	sw	a5,-20(s0)
  entry->previous = list;
 2101d28:	fec42783          	lw	a5,-20(s0)
 2101d2c:	fe842703          	lw	a4,-24(s0)
 2101d30:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
 2101d34:	fe842783          	lw	a5,-24(s0)
 2101d38:	0007a703          	lw	a4,0(a5)
 2101d3c:	fec42783          	lw	a5,-20(s0)
 2101d40:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
 2101d44:	fe842783          	lw	a5,-24(s0)
 2101d48:	0007a783          	lw	a5,0(a5)
 2101d4c:	fec42703          	lw	a4,-20(s0)
 2101d50:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
 2101d54:	fe842783          	lw	a5,-24(s0)
 2101d58:	fec42703          	lw	a4,-20(s0)
 2101d5c:	00e7a023          	sw	a4,0(a5)
}
 2101d60:	00000013          	nop

  return 0;  
 2101d64:	00000793          	li	a5,0
}
 2101d68:	00078513          	mv	a0,a5
 2101d6c:	02c12083          	lw	ra,44(sp)
 2101d70:	02812403          	lw	s0,40(sp)
 2101d74:	03010113          	addi	sp,sp,48
 2101d78:	00008067          	ret

02101d7c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2101d7c:	fe010113          	addi	sp,sp,-32
 2101d80:	00112e23          	sw	ra,28(sp)
 2101d84:	00812c23          	sw	s0,24(sp)
 2101d88:	02010413          	addi	s0,sp,32
  constructor* ctor;

  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
 2101d8c:	021077b7          	lui	a5,0x2107
 2101d90:	19878793          	addi	a5,a5,408 # 2107198 <__init_array_start+0x4>
 2101d94:	fef42623          	sw	a5,-20(s0)
 2101d98:	01c0006f          	j	2101db4 <_do_ctors+0x38>
        (*ctor) (); 
 2101d9c:	fec42783          	lw	a5,-20(s0)
 2101da0:	0007a783          	lw	a5,0(a5)
 2101da4:	000780e7          	jalr	a5
  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
 2101da8:	fec42783          	lw	a5,-20(s0)
 2101dac:	ffc78793          	addi	a5,a5,-4
 2101db0:	fef42623          	sw	a5,-20(s0)
 2101db4:	fec42703          	lw	a4,-20(s0)
 2101db8:	021077b7          	lui	a5,0x2107
 2101dbc:	19478793          	addi	a5,a5,404 # 2107194 <__init_array_start>
 2101dc0:	fcf77ee3          	bgeu	a4,a5,2101d9c <_do_ctors+0x20>
}
 2101dc4:	00000013          	nop
 2101dc8:	00000013          	nop
 2101dcc:	01c12083          	lw	ra,28(sp)
 2101dd0:	01812403          	lw	s0,24(sp)
 2101dd4:	02010113          	addi	sp,sp,32
 2101dd8:	00008067          	ret

02101ddc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2101ddc:	fe010113          	addi	sp,sp,-32
 2101de0:	00112e23          	sw	ra,28(sp)
 2101de4:	00812c23          	sw	s0,24(sp)
 2101de8:	02010413          	addi	s0,sp,32
  destructor* dtor;

  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
 2101dec:	021077b7          	lui	a5,0x2107
 2101df0:	19878793          	addi	a5,a5,408 # 2107198 <__init_array_start+0x4>
 2101df4:	fef42623          	sw	a5,-20(s0)
 2101df8:	01c0006f          	j	2101e14 <_do_dtors+0x38>
        (*dtor) (); 
 2101dfc:	fec42783          	lw	a5,-20(s0)
 2101e00:	0007a783          	lw	a5,0(a5)
 2101e04:	000780e7          	jalr	a5
  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
 2101e08:	fec42783          	lw	a5,-20(s0)
 2101e0c:	ffc78793          	addi	a5,a5,-4
 2101e10:	fef42623          	sw	a5,-20(s0)
 2101e14:	fec42703          	lw	a4,-20(s0)
 2101e18:	021077b7          	lui	a5,0x2107
 2101e1c:	19c78793          	addi	a5,a5,412 # 210719c <__fini_array_end>
 2101e20:	fcf77ee3          	bgeu	a4,a5,2101dfc <_do_dtors+0x20>
}
 2101e24:	00000013          	nop
 2101e28:	00000013          	nop
 2101e2c:	01c12083          	lw	ra,28(sp)
 2101e30:	01812403          	lw	s0,24(sp)
 2101e34:	02010113          	addi	sp,sp,32
 2101e38:	00008067          	ret

02101e3c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2101e3c:	ff010113          	addi	sp,sp,-16
 2101e40:	00812623          	sw	s0,12(sp)
 2101e44:	01010413          	addi	s0,sp,16
#if ALT_CPU_ICACHE_SIZE > 0
    __asm__ volatile("fence.i" ::: "memory");
#endif
}
 2101e48:	00000013          	nop
 2101e4c:	00c12403          	lw	s0,12(sp)
 2101e50:	01010113          	addi	sp,sp,16
 2101e54:	00008067          	ret

02101e58 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int 
alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2101e58:	fd010113          	addi	sp,sp,-48
 2101e5c:	02112623          	sw	ra,44(sp)
 2101e60:	02812423          	sw	s0,40(sp)
 2101e64:	03010413          	addi	s0,sp,48
 2101e68:	fea42623          	sw	a0,-20(s0)
 2101e6c:	feb42423          	sw	a1,-24(s0)
 2101e70:	fec42223          	sw	a2,-28(s0)
 2101e74:	fed42023          	sw	a3,-32(s0)
 2101e78:	fce42e23          	sw	a4,-36(s0)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2101e7c:	fdc42703          	lw	a4,-36(s0)
 2101e80:	fe042683          	lw	a3,-32(s0)
 2101e84:	fe442603          	lw	a2,-28(s0)
 2101e88:	fe842583          	lw	a1,-24(s0)
 2101e8c:	fec42503          	lw	a0,-20(s0)
 2101e90:	01c000ef          	jal	ra,2101eac <alt_iic_isr_register>
 2101e94:	00050793          	mv	a5,a0
}  
 2101e98:	00078513          	mv	a0,a5
 2101e9c:	02c12083          	lw	ra,44(sp)
 2101ea0:	02812403          	lw	s0,40(sp)
 2101ea4:	03010113          	addi	sp,sp,48
 2101ea8:	00008067          	ret

02101eac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2101eac:	fa010113          	addi	sp,sp,-96
 2101eb0:	04812e23          	sw	s0,92(sp)
 2101eb4:	06010413          	addi	s0,sp,96
 2101eb8:	faa42e23          	sw	a0,-68(s0)
 2101ebc:	fab42c23          	sw	a1,-72(s0)
 2101ec0:	fac42a23          	sw	a2,-76(s0)
 2101ec4:	fad42823          	sw	a3,-80(s0)
 2101ec8:	fae42623          	sw	a4,-84(s0)
  int rc = -EINVAL;  
 2101ecc:	fea00793          	li	a5,-22
 2101ed0:	fcf42223          	sw	a5,-60(s0)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2101ed4:	fb842783          	lw	a5,-72(s0)
 2101ed8:	fcf42423          	sw	a5,-56(s0)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2101edc:	fc842703          	lw	a4,-56(s0)
 2101ee0:	00f00793          	li	a5,15
 2101ee4:	12e7c463          	blt	a5,a4,210200c <alt_iic_isr_register+0x160>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 2101ee8:	00800793          	li	a5,8
 2101eec:	3007b7f3          	csrrc	a5,mstatus,a5
 2101ef0:	fcf42823          	sw	a5,-48(s0)
    return context;
 2101ef4:	fd042783          	lw	a5,-48(s0)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2101ef8:	fcf42623          	sw	a5,-52(s0)

    alt_irq[id].handler = isr;
 2101efc:	8a018713          	addi	a4,gp,-1888 # 1f20 <alt_irq>
 2101f00:	fc842783          	lw	a5,-56(s0)
 2101f04:	00379793          	slli	a5,a5,0x3
 2101f08:	00f707b3          	add	a5,a4,a5
 2101f0c:	fb442703          	lw	a4,-76(s0)
 2101f10:	00e7a023          	sw	a4,0(a5)
    alt_irq[id].context = isr_context;
 2101f14:	8a018713          	addi	a4,gp,-1888 # 1f20 <alt_irq>
 2101f18:	fc842783          	lw	a5,-56(s0)
 2101f1c:	00379793          	slli	a5,a5,0x3
 2101f20:	00f707b3          	add	a5,a4,a5
 2101f24:	fb042703          	lw	a4,-80(s0)
 2101f28:	00e7a223          	sw	a4,4(a5)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2101f2c:	fb442783          	lw	a5,-76(s0)
 2101f30:	06078263          	beqz	a5,2101f94 <alt_iic_isr_register+0xe8>
 2101f34:	fc842783          	lw	a5,-56(s0)
 2101f38:	fbc42703          	lw	a4,-68(s0)
 2101f3c:	fce42a23          	sw	a4,-44(s0)
 2101f40:	fcf42c23          	sw	a5,-40(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
 2101f44:	fd842703          	lw	a4,-40(s0)
 2101f48:	00f00793          	li	a5,15
 2101f4c:	00e7e863          	bltu	a5,a4,2101f5c <alt_iic_isr_register+0xb0>
 2101f50:	fd842783          	lw	a5,-40(s0)
 2101f54:	01078793          	addi	a5,a5,16
 2101f58:	0080006f          	j	2101f60 <alt_iic_isr_register+0xb4>
 2101f5c:	fff00793          	li	a5,-1
 2101f60:	fcf42e23          	sw	a5,-36(s0)
    if (rc < 0)
 2101f64:	fdc42783          	lw	a5,-36(s0)
 2101f68:	0007d663          	bgez	a5,2101f74 <alt_iic_isr_register+0xc8>
        return rc;
 2101f6c:	fdc42783          	lw	a5,-36(s0)
 2101f70:	0800006f          	j	2101ff0 <alt_iic_isr_register+0x144>
        irq = (alt_u32)rc;
 2101f74:	fdc42783          	lw	a5,-36(s0)
 2101f78:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MIE_CSR, 0x1 << irq);
 2101f7c:	fd842783          	lw	a5,-40(s0)
 2101f80:	00100713          	li	a4,1
 2101f84:	00f717b3          	sll	a5,a4,a5
 2101f88:	3047a073          	csrs	mie,a5
    return 0;
 2101f8c:	00000793          	li	a5,0
 2101f90:	0600006f          	j	2101ff0 <alt_iic_isr_register+0x144>
 2101f94:	fc842783          	lw	a5,-56(s0)
 2101f98:	fbc42703          	lw	a4,-68(s0)
 2101f9c:	fee42023          	sw	a4,-32(s0)
 2101fa0:	fef42223          	sw	a5,-28(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
 2101fa4:	fe442703          	lw	a4,-28(s0)
 2101fa8:	00f00793          	li	a5,15
 2101fac:	00e7e863          	bltu	a5,a4,2101fbc <alt_iic_isr_register+0x110>
 2101fb0:	fe442783          	lw	a5,-28(s0)
 2101fb4:	01078793          	addi	a5,a5,16
 2101fb8:	0080006f          	j	2101fc0 <alt_iic_isr_register+0x114>
 2101fbc:	fff00793          	li	a5,-1
 2101fc0:	fef42423          	sw	a5,-24(s0)
    if (rc < 0)
 2101fc4:	fe842783          	lw	a5,-24(s0)
 2101fc8:	0007d663          	bgez	a5,2101fd4 <alt_iic_isr_register+0x128>
        return rc;
 2101fcc:	fe842783          	lw	a5,-24(s0)
 2101fd0:	0200006f          	j	2101ff0 <alt_iic_isr_register+0x144>
        irq = (alt_u32)rc;
 2101fd4:	fe842783          	lw	a5,-24(s0)
 2101fd8:	fef42223          	sw	a5,-28(s0)
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, 0x1 << irq);
 2101fdc:	fe442783          	lw	a5,-28(s0)
 2101fe0:	00100713          	li	a4,1
 2101fe4:	00f717b3          	sll	a5,a4,a5
 2101fe8:	3047b073          	csrc	mie,a5
    return 0;
 2101fec:	00000793          	li	a5,0
 2101ff0:	fcf42223          	sw	a5,-60(s0)
 2101ff4:	fcc42783          	lw	a5,-52(s0)
 2101ff8:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 2101ffc:	fec42783          	lw	a5,-20(s0)
 2102000:	0087f793          	andi	a5,a5,8
 2102004:	3007a073          	csrs	mstatus,a5
}
 2102008:	00000013          	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 210200c:	fc442783          	lw	a5,-60(s0)
}
 2102010:	00078513          	mv	a0,a5
 2102014:	05c12403          	lw	s0,92(sp)
 2102018:	06010113          	addi	sp,sp,96
 210201c:	00008067          	ret

02102020 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2102020:	fd010113          	addi	sp,sp,-48
 2102024:	02112623          	sw	ra,44(sp)
 2102028:	02812423          	sw	s0,40(sp)
 210202c:	03010413          	addi	s0,sp,48
 2102030:	fca42e23          	sw	a0,-36(s0)
 2102034:	fcb42c23          	sw	a1,-40(s0)
 2102038:	fcc42a23          	sw	a2,-44(s0)
 210203c:	fcd42823          	sw	a3,-48(s0)
  int old;

  old = open (name, flags, mode);
 2102040:	fd042603          	lw	a2,-48(s0)
 2102044:	fd442583          	lw	a1,-44(s0)
 2102048:	fd842503          	lw	a0,-40(s0)
 210204c:	470020ef          	jal	ra,21044bc <open>
 2102050:	fea42623          	sw	a0,-20(s0)

  if (old >= 0)
 2102054:	fec42783          	lw	a5,-20(s0)
 2102058:	0807c863          	bltz	a5,21020e8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 210205c:	000017b7          	lui	a5,0x1
 2102060:	4cc78693          	addi	a3,a5,1228 # 14cc <alt_fd_list>
 2102064:	fec42703          	lw	a4,-20(s0)
 2102068:	00070793          	mv	a5,a4
 210206c:	00179793          	slli	a5,a5,0x1
 2102070:	00e787b3          	add	a5,a5,a4
 2102074:	00279793          	slli	a5,a5,0x2
 2102078:	00f687b3          	add	a5,a3,a5
 210207c:	0007a703          	lw	a4,0(a5)
 2102080:	fdc42783          	lw	a5,-36(s0)
 2102084:	00e7a023          	sw	a4,0(a5)
    fd->priv     = alt_fd_list[old].priv;
 2102088:	000017b7          	lui	a5,0x1
 210208c:	4cc78693          	addi	a3,a5,1228 # 14cc <alt_fd_list>
 2102090:	fec42703          	lw	a4,-20(s0)
 2102094:	00070793          	mv	a5,a4
 2102098:	00179793          	slli	a5,a5,0x1
 210209c:	00e787b3          	add	a5,a5,a4
 21020a0:	00279793          	slli	a5,a5,0x2
 21020a4:	00f687b3          	add	a5,a3,a5
 21020a8:	0047a703          	lw	a4,4(a5)
 21020ac:	fdc42783          	lw	a5,-36(s0)
 21020b0:	00e7a223          	sw	a4,4(a5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 21020b4:	000017b7          	lui	a5,0x1
 21020b8:	4cc78693          	addi	a3,a5,1228 # 14cc <alt_fd_list>
 21020bc:	fec42703          	lw	a4,-20(s0)
 21020c0:	00070793          	mv	a5,a4
 21020c4:	00179793          	slli	a5,a5,0x1
 21020c8:	00e787b3          	add	a5,a5,a4
 21020cc:	00279793          	slli	a5,a5,0x2
 21020d0:	00f687b3          	add	a5,a3,a5
 21020d4:	0087a703          	lw	a4,8(a5)
 21020d8:	fdc42783          	lw	a5,-36(s0)
 21020dc:	00e7a423          	sw	a4,8(a5)

    alt_release_fd (old);
 21020e0:	fec42503          	lw	a0,-20(s0)
 21020e4:	090000ef          	jal	ra,2102174 <alt_release_fd>
  }
} 
 21020e8:	00000013          	nop
 21020ec:	02c12083          	lw	ra,44(sp)
 21020f0:	02812403          	lw	s0,40(sp)
 21020f4:	03010113          	addi	sp,sp,48
 21020f8:	00008067          	ret

021020fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 21020fc:	fe010113          	addi	sp,sp,-32
 2102100:	00112e23          	sw	ra,28(sp)
 2102104:	00812c23          	sw	s0,24(sp)
 2102108:	02010413          	addi	s0,sp,32
 210210c:	fea42623          	sw	a0,-20(s0)
 2102110:	feb42423          	sw	a1,-24(s0)
 2102114:	fec42223          	sw	a2,-28(s0)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2102118:	1ff00693          	li	a3,511
 210211c:	00100613          	li	a2,1
 2102120:	fec42583          	lw	a1,-20(s0)
 2102124:	000017b7          	lui	a5,0x1
 2102128:	4d878513          	addi	a0,a5,1240 # 14d8 <alt_fd_list+0xc>
 210212c:	ef5ff0ef          	jal	ra,2102020 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2102130:	1ff00693          	li	a3,511
 2102134:	00000613          	li	a2,0
 2102138:	fe842583          	lw	a1,-24(s0)
 210213c:	000017b7          	lui	a5,0x1
 2102140:	4cc78513          	addi	a0,a5,1228 # 14cc <alt_fd_list>
 2102144:	eddff0ef          	jal	ra,2102020 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2102148:	1ff00693          	li	a3,511
 210214c:	00100613          	li	a2,1
 2102150:	fe442583          	lw	a1,-28(s0)
 2102154:	000017b7          	lui	a5,0x1
 2102158:	4e478513          	addi	a0,a5,1252 # 14e4 <alt_fd_list+0x18>
 210215c:	ec5ff0ef          	jal	ra,2102020 <alt_open_fd>
}  
 2102160:	00000013          	nop
 2102164:	01c12083          	lw	ra,28(sp)
 2102168:	01812403          	lw	s0,24(sp)
 210216c:	02010113          	addi	sp,sp,32
 2102170:	00008067          	ret

02102174 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2102174:	fe010113          	addi	sp,sp,-32
 2102178:	00812e23          	sw	s0,28(sp)
 210217c:	02010413          	addi	s0,sp,32
 2102180:	fea42623          	sw	a0,-20(s0)
  if (fd > 2)
 2102184:	fec42703          	lw	a4,-20(s0)
 2102188:	00200793          	li	a5,2
 210218c:	04e7d663          	bge	a5,a4,21021d8 <alt_release_fd+0x64>
  {
    alt_fd_list[fd].fd_flags = 0;
 2102190:	000017b7          	lui	a5,0x1
 2102194:	4cc78693          	addi	a3,a5,1228 # 14cc <alt_fd_list>
 2102198:	fec42703          	lw	a4,-20(s0)
 210219c:	00070793          	mv	a5,a4
 21021a0:	00179793          	slli	a5,a5,0x1
 21021a4:	00e787b3          	add	a5,a5,a4
 21021a8:	00279793          	slli	a5,a5,0x2
 21021ac:	00f687b3          	add	a5,a3,a5
 21021b0:	0007a423          	sw	zero,8(a5)
    alt_fd_list[fd].dev      = 0;
 21021b4:	000017b7          	lui	a5,0x1
 21021b8:	4cc78693          	addi	a3,a5,1228 # 14cc <alt_fd_list>
 21021bc:	fec42703          	lw	a4,-20(s0)
 21021c0:	00070793          	mv	a5,a4
 21021c4:	00179793          	slli	a5,a5,0x1
 21021c8:	00e787b3          	add	a5,a5,a4
 21021cc:	00279793          	slli	a5,a5,0x2
 21021d0:	00f687b3          	add	a5,a3,a5
 21021d4:	0007a023          	sw	zero,0(a5)
  }
}
 21021d8:	00000013          	nop
 21021dc:	01c12403          	lw	s0,28(sp)
 21021e0:	02010113          	addi	sp,sp,32
 21021e4:	00008067          	ret

021021e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 21021e8:	fd010113          	addi	sp,sp,-48
 21021ec:	02812623          	sw	s0,44(sp)
 21021f0:	03010413          	addi	s0,sp,48
 21021f4:	fca42e23          	sw	a0,-36(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 21021f8:	00800793          	li	a5,8
 21021fc:	3007b7f3          	csrrc	a5,mstatus,a5
 2102200:	fef42623          	sw	a5,-20(s0)
    return context;
 2102204:	fec42783          	lw	a5,-20(s0)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2102208:	fef42023          	sw	a5,-32(s0)
  alt_llist_remove (&alarm->llist);
 210220c:	fdc42783          	lw	a5,-36(s0)
 2102210:	fef42423          	sw	a5,-24(s0)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2102214:	fe842783          	lw	a5,-24(s0)
 2102218:	0007a783          	lw	a5,0(a5)
 210221c:	fe842703          	lw	a4,-24(s0)
 2102220:	00472703          	lw	a4,4(a4)
 2102224:	00e7a223          	sw	a4,4(a5)
  entry->previous->next = entry->next;
 2102228:	fe842783          	lw	a5,-24(s0)
 210222c:	0047a783          	lw	a5,4(a5)
 2102230:	fe842703          	lw	a4,-24(s0)
 2102234:	00072703          	lw	a4,0(a4)
 2102238:	00e7a023          	sw	a4,0(a5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 210223c:	fe842783          	lw	a5,-24(s0)
 2102240:	fe842703          	lw	a4,-24(s0)
 2102244:	00e7a223          	sw	a4,4(a5)
  entry->next     = entry;
 2102248:	fe842783          	lw	a5,-24(s0)
 210224c:	fe842703          	lw	a4,-24(s0)
 2102250:	00e7a023          	sw	a4,0(a5)
} 
 2102254:	00000013          	nop
 2102258:	fe042783          	lw	a5,-32(s0)
 210225c:	fef42223          	sw	a5,-28(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 2102260:	fe442783          	lw	a5,-28(s0)
 2102264:	0087f793          	andi	a5,a5,8
 2102268:	3007a073          	csrs	mstatus,a5
}
 210226c:	00000013          	nop
  alt_irq_enable_all (irq_context);
}
 2102270:	00000013          	nop
 2102274:	02c12403          	lw	s0,44(sp)
 2102278:	03010113          	addi	sp,sp,48
 210227c:	00008067          	ret

02102280 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2102280:	fe010113          	addi	sp,sp,-32
 2102284:	00112e23          	sw	ra,28(sp)
 2102288:	00812c23          	sw	s0,24(sp)
 210228c:	01212a23          	sw	s2,20(sp)
 2102290:	01312823          	sw	s3,16(sp)
 2102294:	02010413          	addi	s0,sp,32
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2102298:	000027b7          	lui	a5,0x2
 210229c:	e9878793          	addi	a5,a5,-360 # 1e98 <alt_alarm_list>
 21022a0:	0007a783          	lw	a5,0(a5)
 21022a4:	fef42223          	sw	a5,-28(s0)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 21022a8:	8581a703          	lw	a4,-1960(gp) # 1ed8 <_alt_nticks>
 21022ac:	85c1a783          	lw	a5,-1956(gp) # 1edc <_alt_nticks+0x4>
 21022b0:	00100513          	li	a0,1
 21022b4:	00000593          	li	a1,0
 21022b8:	00a70633          	add	a2,a4,a0
 21022bc:	00060813          	mv	a6,a2
 21022c0:	00e83833          	sltu	a6,a6,a4
 21022c4:	00b786b3          	add	a3,a5,a1
 21022c8:	00d807b3          	add	a5,a6,a3
 21022cc:	00078693          	mv	a3,a5
 21022d0:	00060713          	mv	a4,a2
 21022d4:	00068793          	mv	a5,a3
 21022d8:	84e1ac23          	sw	a4,-1960(gp) # 1ed8 <_alt_nticks>
 21022dc:	84f1ae23          	sw	a5,-1956(gp) # 1edc <_alt_nticks+0x4>
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 21022e0:	0c40006f          	j	21023a4 <alt_tick+0x124>
  {
    next = (alt_alarm*) alarm->llist.next;
 21022e4:	fe442783          	lw	a5,-28(s0)
 21022e8:	0007a783          	lw	a5,0(a5)
 21022ec:	fef42423          	sw	a5,-24(s0)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
 21022f0:	fe442783          	lw	a5,-28(s0)
 21022f4:	0087a603          	lw	a2,8(a5)
 21022f8:	00c7a683          	lw	a3,12(a5)
 21022fc:	8581a703          	lw	a4,-1960(gp) # 1ed8 <_alt_nticks>
 2102300:	85c1a783          	lw	a5,-1956(gp) # 1edc <_alt_nticks+0x4>
 2102304:	00068513          	mv	a0,a3
 2102308:	00078593          	mv	a1,a5
 210230c:	08a5e863          	bltu	a1,a0,210239c <alt_tick+0x11c>
 2102310:	00068513          	mv	a0,a3
 2102314:	00078593          	mv	a1,a5
 2102318:	00b51863          	bne	a0,a1,2102328 <alt_tick+0xa8>
 210231c:	00060693          	mv	a3,a2
 2102320:	00070793          	mv	a5,a4
 2102324:	06d7ec63          	bltu	a5,a3,210239c <alt_tick+0x11c>
    {
      next_callback = alarm->callback (alarm->context);
 2102328:	fe442783          	lw	a5,-28(s0)
 210232c:	0107a783          	lw	a5,16(a5)
 2102330:	fe442703          	lw	a4,-28(s0)
 2102334:	01472703          	lw	a4,20(a4)
 2102338:	00070513          	mv	a0,a4
 210233c:	000780e7          	jalr	a5
 2102340:	fea42623          	sw	a0,-20(s0)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2102344:	fec42783          	lw	a5,-20(s0)
 2102348:	00079863          	bnez	a5,2102358 <alt_tick+0xd8>
      {
        alt_alarm_stop (alarm);
 210234c:	fe442503          	lw	a0,-28(s0)
 2102350:	e99ff0ef          	jal	ra,21021e8 <alt_alarm_stop>
 2102354:	0480006f          	j	210239c <alt_tick+0x11c>
      }
      else
      {
        alarm->time += next_callback;
 2102358:	fe442783          	lw	a5,-28(s0)
 210235c:	0087a703          	lw	a4,8(a5)
 2102360:	00c7a783          	lw	a5,12(a5)
 2102364:	fec42683          	lw	a3,-20(s0)
 2102368:	00068913          	mv	s2,a3
 210236c:	00000993          	li	s3,0
 2102370:	01270633          	add	a2,a4,s2
 2102374:	00060593          	mv	a1,a2
 2102378:	00e5b5b3          	sltu	a1,a1,a4
 210237c:	013786b3          	add	a3,a5,s3
 2102380:	00d587b3          	add	a5,a1,a3
 2102384:	00078693          	mv	a3,a5
 2102388:	00060713          	mv	a4,a2
 210238c:	00068793          	mv	a5,a3
 2102390:	fe442683          	lw	a3,-28(s0)
 2102394:	00e6a423          	sw	a4,8(a3)
 2102398:	00f6a623          	sw	a5,12(a3)
      }
    }
    alarm = next;
 210239c:	fe842783          	lw	a5,-24(s0)
 21023a0:	fef42223          	sw	a5,-28(s0)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 21023a4:	fe442703          	lw	a4,-28(s0)
 21023a8:	000027b7          	lui	a5,0x2
 21023ac:	e9878793          	addi	a5,a5,-360 # 1e98 <alt_alarm_list>
 21023b0:	f2f71ae3          	bne	a4,a5,21022e4 <alt_tick+0x64>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 21023b4:	00000013          	nop
}
 21023b8:	00000013          	nop
 21023bc:	01c12083          	lw	ra,28(sp)
 21023c0:	01812403          	lw	s0,24(sp)
 21023c4:	01412903          	lw	s2,20(sp)
 21023c8:	01012983          	lw	s3,16(sp)
 21023cc:	02010113          	addi	sp,sp,32
 21023d0:	00008067          	ret

021023d4 <intel_niosv_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the mie
 * register so that all possible IRQs are disabled.
 */
void intel_niosv_irq_init(void) 
{
 21023d4:	ff010113          	addi	sp,sp,-16
 21023d8:	00812623          	sw	s0,12(sp)
 21023dc:	01010413          	addi	s0,sp,16
#if ALT_HAS_IRQ_SUPPORT
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, NIOSV_MIE_MASK);
 21023e0:	fff00793          	li	a5,-1
 21023e4:	3047b073          	csrc	mie,a5
#endif
}
 21023e8:	00000013          	nop
 21023ec:	00c12403          	lw	s0,12(sp)
 21023f0:	01010113          	addi	sp,sp,16
 21023f4:	00008067          	ret

021023f8 <alt_timestamp_start>:
#define INTEL_NIOSV_TIMER_DEVICE_TYPE 2

#if (ALT_TIMESTAMP_CLK_TIMER_DEVICE_TYPE == INTEL_NIOSV_TIMER_DEVICE_TYPE)
alt_u64 alt_niosv_timestamp_offset = 0;

int alt_timestamp_start() {
 21023f8:	ff010113          	addi	sp,sp,-16
 21023fc:	00112623          	sw	ra,12(sp)
 2102400:	00812423          	sw	s0,8(sp)
 2102404:	01010413          	addi	s0,sp,16
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval);

extern alt_u64 alt_niosv_timestamp_offset;

static ALT_INLINE int ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_start() {
    alt_niosv_timestamp_offset = alt_niosv_mtime_get();
 2102408:	0a4000ef          	jal	ra,21024ac <alt_niosv_mtime_get>
 210240c:	00050713          	mv	a4,a0
 2102410:	00058793          	mv	a5,a1
 2102414:	86e1a023          	sw	a4,-1952(gp) # 1ee0 <alt_niosv_timestamp_offset>
 2102418:	86f1a223          	sw	a5,-1948(gp) # 1ee4 <alt_niosv_timestamp_offset+0x4>
    return 0;
 210241c:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_start();
}
 2102420:	00078513          	mv	a0,a5
 2102424:	00c12083          	lw	ra,12(sp)
 2102428:	00812403          	lw	s0,8(sp)
 210242c:	01010113          	addi	sp,sp,16
 2102430:	00008067          	ret

02102434 <alt_timestamp>:

alt_timestamp_type alt_timestamp() {
 2102434:	ff010113          	addi	sp,sp,-16
 2102438:	00112623          	sw	ra,12(sp)
 210243c:	00812423          	sw	s0,8(sp)
 2102440:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp() {
    return alt_niosv_mtime_get() - alt_niosv_timestamp_offset;
 2102444:	068000ef          	jal	ra,21024ac <alt_niosv_mtime_get>
 2102448:	00050613          	mv	a2,a0
 210244c:	00058693          	mv	a3,a1
 2102450:	8601a503          	lw	a0,-1952(gp) # 1ee0 <alt_niosv_timestamp_offset>
 2102454:	8641a583          	lw	a1,-1948(gp) # 1ee4 <alt_niosv_timestamp_offset+0x4>
 2102458:	40a60733          	sub	a4,a2,a0
 210245c:	00070813          	mv	a6,a4
 2102460:	01063833          	sltu	a6,a2,a6
 2102464:	40b687b3          	sub	a5,a3,a1
 2102468:	410786b3          	sub	a3,a5,a6
 210246c:	00068793          	mv	a5,a3
    return alt_niosv_timer_timestamp();
}
 2102470:	00070513          	mv	a0,a4
 2102474:	00078593          	mv	a1,a5
 2102478:	00c12083          	lw	ra,12(sp)
 210247c:	00812403          	lw	s0,8(sp)
 2102480:	01010113          	addi	sp,sp,16
 2102484:	00008067          	ret

02102488 <alt_timestamp_freq>:

alt_u32 alt_timestamp_freq() {
 2102488:	ff010113          	addi	sp,sp,-16
 210248c:	00812623          	sw	s0,12(sp)
 2102490:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_freq() {
    return ALT_CPU_CPU_FREQ;
 2102494:	05f5e7b7          	lui	a5,0x5f5e
 2102498:	10078793          	addi	a5,a5,256 # 5f5e100 <__flash_rwdata_start+0x3e56e68>
    return alt_niosv_timer_timestamp_freq();
}
 210249c:	00078513          	mv	a0,a5
 21024a0:	00c12403          	lw	s0,12(sp)
 21024a4:	01010113          	addi	sp,sp,16
 21024a8:	00008067          	ret

021024ac <alt_niosv_mtime_get>:
#endif

alt_u64 alt_niosv_mtime_get() {
 21024ac:	fe010113          	addi	sp,sp,-32
 21024b0:	00812e23          	sw	s0,28(sp)
 21024b4:	02010413          	addi	s0,sp,32
    alt_u32 lowbits;
    alt_u32 highbits;

    // Guard against rollover while acquiring each word
    do {
        highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4));
 21024b8:	02810337          	lui	t1,0x2810
 21024bc:	00c30313          	addi	t1,t1,12 # 281000c <__flash_rwdata_start+0x708d74>
 21024c0:	00032303          	lw	t1,0(t1)
 21024c4:	fe642423          	sw	t1,-24(s0)
        lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIME_ADDR);
 21024c8:	02810337          	lui	t1,0x2810
 21024cc:	00830313          	addi	t1,t1,8 # 2810008 <__flash_rwdata_start+0x708d70>
 21024d0:	00032303          	lw	t1,0(t1)
 21024d4:	fe642623          	sw	t1,-20(s0)
    } while (ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4)) != highbits);
 21024d8:	02810337          	lui	t1,0x2810
 21024dc:	00c30313          	addi	t1,t1,12 # 281000c <__flash_rwdata_start+0x708d74>
 21024e0:	00032303          	lw	t1,0(t1)
 21024e4:	fe842e03          	lw	t3,-24(s0)
 21024e8:	fc6e18e3          	bne	t3,t1,21024b8 <alt_niosv_mtime_get+0xc>

    return (((alt_u64)highbits) << 32) | lowbits;
 21024ec:	fe842303          	lw	t1,-24(s0)
 21024f0:	00030813          	mv	a6,t1
 21024f4:	00000893          	li	a7,0
 21024f8:	00081793          	slli	a5,a6,0x0
 21024fc:	00000713          	li	a4,0
 2102500:	fec42803          	lw	a6,-20(s0)
 2102504:	00080613          	mv	a2,a6
 2102508:	00000693          	li	a3,0
 210250c:	00c76533          	or	a0,a4,a2
 2102510:	00d7e5b3          	or	a1,a5,a3
 2102514:	00050713          	mv	a4,a0
 2102518:	00058793          	mv	a5,a1
}
 210251c:	00070513          	mv	a0,a4
 2102520:	00078593          	mv	a1,a5
 2102524:	01c12403          	lw	s0,28(sp)
 2102528:	02010113          	addi	sp,sp,32
 210252c:	00008067          	ret

02102530 <alt_niosv_mtimecmp_set>:

void alt_niosv_mtimecmp_set(alt_u64 time) {
 2102530:	fe010113          	addi	sp,sp,-32
 2102534:	00812e23          	sw	s0,28(sp)
 2102538:	02010413          	addi	s0,sp,32
 210253c:	fea42423          	sw	a0,-24(s0)
 2102540:	feb42623          	sw	a1,-20(s0)
    // Make sure to set the high word to a max value first to prevent triggering inadvertently
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = 0xFFFFFFFF;
 2102544:	028106b7          	lui	a3,0x2810
 2102548:	00468693          	addi	a3,a3,4 # 2810004 <__flash_rwdata_start+0x708d6c>
 210254c:	fff00613          	li	a2,-1
 2102550:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR) = (alt_u32)time;
 2102554:	028106b7          	lui	a3,0x2810
 2102558:	fe842603          	lw	a2,-24(s0)
 210255c:	00c6a023          	sw	a2,0(a3) # 2810000 <__flash_rwdata_start+0x708d68>
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = (alt_u32)(time >> 32);
 2102560:	fec42683          	lw	a3,-20(s0)
 2102564:	0006d713          	srli	a4,a3,0x0
 2102568:	00000793          	li	a5,0
 210256c:	028106b7          	lui	a3,0x2810
 2102570:	00468693          	addi	a3,a3,4 # 2810004 <__flash_rwdata_start+0x708d6c>
 2102574:	00070793          	mv	a5,a4
 2102578:	00f6a023          	sw	a5,0(a3)
}
 210257c:	00000013          	nop
 2102580:	01c12403          	lw	s0,28(sp)
 2102584:	02010113          	addi	sp,sp,32
 2102588:	00008067          	ret

0210258c <alt_niosv_mtimecmp_get>:

alt_u64 alt_niosv_mtimecmp_get() {
 210258c:	fe010113          	addi	sp,sp,-32
 2102590:	00812e23          	sw	s0,28(sp)
 2102594:	02010413          	addi	s0,sp,32
    alt_u32 lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR);
 2102598:	02810337          	lui	t1,0x2810
 210259c:	00032303          	lw	t1,0(t1) # 2810000 <__flash_rwdata_start+0x708d68>
 21025a0:	fe642423          	sw	t1,-24(s0)
    alt_u32 highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4));
 21025a4:	02810337          	lui	t1,0x2810
 21025a8:	00430313          	addi	t1,t1,4 # 2810004 <__flash_rwdata_start+0x708d6c>
 21025ac:	00032303          	lw	t1,0(t1)
 21025b0:	fe642623          	sw	t1,-20(s0)
    return (((alt_u64)highbits) << 32) | lowbits;
 21025b4:	fec42303          	lw	t1,-20(s0)
 21025b8:	00030813          	mv	a6,t1
 21025bc:	00000893          	li	a7,0
 21025c0:	00081793          	slli	a5,a6,0x0
 21025c4:	00000713          	li	a4,0
 21025c8:	fe842803          	lw	a6,-24(s0)
 21025cc:	00080613          	mv	a2,a6
 21025d0:	00000693          	li	a3,0
 21025d4:	00c76533          	or	a0,a4,a2
 21025d8:	00d7e5b3          	or	a1,a5,a3
 21025dc:	00050713          	mv	a4,a0
 21025e0:	00058793          	mv	a5,a1
}
 21025e4:	00070513          	mv	a0,a4
 21025e8:	00078593          	mv	a1,a5
 21025ec:	01c12403          	lw	s0,28(sp)
 21025f0:	02010113          	addi	sp,sp,32
 21025f4:	00008067          	ret

021025f8 <alt_niosv_timer_sc_isr>:
// Let's the OS port handles the machine timer configuration and interrupt if
// the OS port has it (ex: FreeRTOS).
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {}
void alt_niosv_mtimecmp_interrupt_init() {}
#else
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {
 21025f8:	fc010113          	addi	sp,sp,-64
 21025fc:	02112e23          	sw	ra,60(sp)
 2102600:	02812c23          	sw	s0,56(sp)
 2102604:	04010413          	addi	s0,sp,64
 2102608:	fca42623          	sw	a0,-52(s0)
 210260c:	fcb42423          	sw	a1,-56(s0)
 2102610:	fcc42223          	sw	a2,-60(s0)
    // Schedule the next interrupt.  This is done first since who knows how long
    // the following code takes, and the contract is ticks per second, irrespective
    // of how long a given clock tick may take.

    alt_u64 curr_time = alt_niosv_mtime_get();
 2102614:	e99ff0ef          	jal	ra,21024ac <alt_niosv_mtime_get>
 2102618:	fea42423          	sw	a0,-24(s0)
 210261c:	feb42623          	sw	a1,-20(s0)
    alt_niosv_mtimecmp_set(curr_time + MTIMECMP_DELTA_AMT);
 2102620:	fe842703          	lw	a4,-24(s0)
 2102624:	fec42783          	lw	a5,-20(s0)
 2102628:	00018537          	lui	a0,0x18
 210262c:	6a050513          	addi	a0,a0,1696 # 186a0 <__global_pointer$+0x16020>
 2102630:	00000593          	li	a1,0
 2102634:	00a70633          	add	a2,a4,a0
 2102638:	00060813          	mv	a6,a2
 210263c:	00e83833          	sltu	a6,a6,a4
 2102640:	00b786b3          	add	a3,a5,a1
 2102644:	00d807b3          	add	a5,a6,a3
 2102648:	00078693          	mv	a3,a5
 210264c:	00060713          	mv	a4,a2
 2102650:	00068793          	mv	a5,a3
 2102654:	00070513          	mv	a0,a4
 2102658:	00078593          	mv	a1,a5
 210265c:	ed5ff0ef          	jal	ra,2102530 <alt_niosv_mtimecmp_set>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 2102660:	00800793          	li	a5,8
 2102664:	3007b7f3          	csrrc	a5,mstatus,a5
 2102668:	fef42223          	sw	a5,-28(s0)
    return context;
 210266c:	fe442783          	lw	a5,-28(s0)

    /* 
    * Notify the system of a clock tick. disable interrupts 
    * during this time to safely support ISR preemption
    */
    alt_irq_context cpu_sr = alt_irq_disable_all();
 2102670:	fcf42e23          	sw	a5,-36(s0)
    alt_tick();
 2102674:	c0dff0ef          	jal	ra,2102280 <alt_tick>
 2102678:	fdc42783          	lw	a5,-36(s0)
 210267c:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 2102680:	fe042783          	lw	a5,-32(s0)
 2102684:	0087f793          	andi	a5,a5,8
 2102688:	3007a073          	csrs	mstatus,a5
}
 210268c:	00000013          	nop
    alt_irq_enable_all(cpu_sr);
}
 2102690:	00000013          	nop
 2102694:	03c12083          	lw	ra,60(sp)
 2102698:	03812403          	lw	s0,56(sp)
 210269c:	04010113          	addi	sp,sp,64
 21026a0:	00008067          	ret

021026a4 <alt_niosv_mtimecmp_interrupt_init>:

void alt_niosv_mtimecmp_interrupt_init() {
 21026a4:	ff010113          	addi	sp,sp,-16
 21026a8:	00112623          	sw	ra,12(sp)
 21026ac:	00812423          	sw	s0,8(sp)
 21026b0:	01010413          	addi	s0,sp,16
    alt_niosv_mtimecmp_set(MTIMECMP_MAX_VALUE);
 21026b4:	fff00513          	li	a0,-1
 21026b8:	fff00593          	li	a1,-1
 21026bc:	e75ff0ef          	jal	ra,2102530 <alt_niosv_mtimecmp_set>
    NIOSV_SET_CSR(NIOSV_MIE_CSR, (0x1 << NIOSV_TIMER_IRQ));
 21026c0:	08000793          	li	a5,128
 21026c4:	3047a073          	csrs	mie,a5
}
 21026c8:	00000013          	nop
    alt_niosv_enable_timer_interrupt();
}
 21026cc:	00000013          	nop
 21026d0:	00c12083          	lw	ra,12(sp)
 21026d4:	00812403          	lw	s0,8(sp)
 21026d8:	01010113          	addi	sp,sp,16
 21026dc:	00008067          	ret

021026e0 <atexit>:
 21026e0:	00050593          	mv	a1,a0
 21026e4:	00000693          	li	a3,0
 21026e8:	00000613          	li	a2,0
 21026ec:	00000513          	li	a0,0
 21026f0:	6750106f          	j	2104564 <__register_exitproc>

021026f4 <exit>:
 21026f4:	ff010113          	addi	sp,sp,-16
 21026f8:	00000593          	li	a1,0
 21026fc:	00812423          	sw	s0,8(sp)
 2102700:	00112623          	sw	ra,12(sp)
 2102704:	00050413          	mv	s0,a0
 2102708:	741010ef          	jal	ra,2104648 <__call_exitprocs>
 210270c:	37c02503          	lw	a0,892(zero) # 37c <_global_impure_ptr>
 2102710:	03c52783          	lw	a5,60(a0)
 2102714:	00078463          	beqz	a5,210271c <exit+0x28>
 2102718:	000780e7          	jalr	a5
 210271c:	00040513          	mv	a0,s0
 2102720:	5ec030ef          	jal	ra,2105d0c <_exit>

02102724 <__sflush_r>:
 2102724:	00c59783          	lh	a5,12(a1)
 2102728:	fe010113          	addi	sp,sp,-32
 210272c:	00812c23          	sw	s0,24(sp)
 2102730:	01312623          	sw	s3,12(sp)
 2102734:	00112e23          	sw	ra,28(sp)
 2102738:	00912a23          	sw	s1,20(sp)
 210273c:	01212823          	sw	s2,16(sp)
 2102740:	0087f713          	andi	a4,a5,8
 2102744:	00058413          	mv	s0,a1
 2102748:	00050993          	mv	s3,a0
 210274c:	12071263          	bnez	a4,2102870 <__sflush_r+0x14c>
 2102750:	00001737          	lui	a4,0x1
 2102754:	80070713          	addi	a4,a4,-2048 # 800 <JTAG_UART_DBG+0x480>
 2102758:	0045a683          	lw	a3,4(a1)
 210275c:	00e7e733          	or	a4,a5,a4
 2102760:	00e59623          	sh	a4,12(a1)
 2102764:	18d05863          	blez	a3,21028f4 <__sflush_r+0x1d0>
 2102768:	02842803          	lw	a6,40(s0)
 210276c:	0e080263          	beqz	a6,2102850 <__sflush_r+0x12c>
 2102770:	00c7d793          	srli	a5,a5,0xc
 2102774:	0009a483          	lw	s1,0(s3)
 2102778:	0017f793          	andi	a5,a5,1
 210277c:	0009a023          	sw	zero,0(s3)
 2102780:	01c42583          	lw	a1,28(s0)
 2102784:	18079063          	bnez	a5,2102904 <__sflush_r+0x1e0>
 2102788:	00000613          	li	a2,0
 210278c:	00100693          	li	a3,1
 2102790:	00098513          	mv	a0,s3
 2102794:	000800e7          	jalr	a6
 2102798:	fff00793          	li	a5,-1
 210279c:	00050613          	mv	a2,a0
 21027a0:	1af50063          	beq	a0,a5,2102940 <__sflush_r+0x21c>
 21027a4:	00c41703          	lh	a4,12(s0)
 21027a8:	02842803          	lw	a6,40(s0)
 21027ac:	01c42583          	lw	a1,28(s0)
 21027b0:	00477713          	andi	a4,a4,4
 21027b4:	00070e63          	beqz	a4,21027d0 <__sflush_r+0xac>
 21027b8:	00442703          	lw	a4,4(s0)
 21027bc:	03042783          	lw	a5,48(s0)
 21027c0:	40e60633          	sub	a2,a2,a4
 21027c4:	00078663          	beqz	a5,21027d0 <__sflush_r+0xac>
 21027c8:	03c42783          	lw	a5,60(s0)
 21027cc:	40f60633          	sub	a2,a2,a5
 21027d0:	00000693          	li	a3,0
 21027d4:	00098513          	mv	a0,s3
 21027d8:	000800e7          	jalr	a6
 21027dc:	fff00793          	li	a5,-1
 21027e0:	12f51663          	bne	a0,a5,210290c <__sflush_r+0x1e8>
 21027e4:	0009a683          	lw	a3,0(s3)
 21027e8:	01d00793          	li	a5,29
 21027ec:	0cd7ee63          	bltu	a5,a3,21028c8 <__sflush_r+0x1a4>
 21027f0:	dfc00737          	lui	a4,0xdfc00
 21027f4:	ffe70713          	addi	a4,a4,-2 # dfbffffe <__flash_rwdata_start+0xddaf8d66>
 21027f8:	40d75733          	sra	a4,a4,a3
 21027fc:	00177713          	andi	a4,a4,1
 2102800:	00c41783          	lh	a5,12(s0)
 2102804:	0c071463          	bnez	a4,21028cc <__sflush_r+0x1a8>
 2102808:	01042603          	lw	a2,16(s0)
 210280c:	fffff737          	lui	a4,0xfffff
 2102810:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__flash_rwdata_start+0xfdef8567>
 2102814:	00e7f733          	and	a4,a5,a4
 2102818:	00c7d793          	srli	a5,a5,0xc
 210281c:	00e41623          	sh	a4,12(s0)
 2102820:	00042223          	sw	zero,4(s0)
 2102824:	00c42023          	sw	a2,0(s0)
 2102828:	0017f793          	andi	a5,a5,1
 210282c:	12079c63          	bnez	a5,2102964 <__sflush_r+0x240>
 2102830:	03042583          	lw	a1,48(s0)
 2102834:	0099a023          	sw	s1,0(s3)
 2102838:	00058c63          	beqz	a1,2102850 <__sflush_r+0x12c>
 210283c:	04040793          	addi	a5,s0,64
 2102840:	00f58663          	beq	a1,a5,210284c <__sflush_r+0x128>
 2102844:	00098513          	mv	a0,s3
 2102848:	085000ef          	jal	ra,21030cc <_free_r>
 210284c:	02042823          	sw	zero,48(s0)
 2102850:	00000513          	li	a0,0
 2102854:	01c12083          	lw	ra,28(sp)
 2102858:	01812403          	lw	s0,24(sp)
 210285c:	01412483          	lw	s1,20(sp)
 2102860:	01012903          	lw	s2,16(sp)
 2102864:	00c12983          	lw	s3,12(sp)
 2102868:	02010113          	addi	sp,sp,32
 210286c:	00008067          	ret
 2102870:	0105a903          	lw	s2,16(a1)
 2102874:	fc090ee3          	beqz	s2,2102850 <__sflush_r+0x12c>
 2102878:	0005a483          	lw	s1,0(a1)
 210287c:	0037f793          	andi	a5,a5,3
 2102880:	0125a023          	sw	s2,0(a1)
 2102884:	412484b3          	sub	s1,s1,s2
 2102888:	00000713          	li	a4,0
 210288c:	00079463          	bnez	a5,2102894 <__sflush_r+0x170>
 2102890:	0145a703          	lw	a4,20(a1)
 2102894:	00e42423          	sw	a4,8(s0)
 2102898:	00904863          	bgtz	s1,21028a8 <__sflush_r+0x184>
 210289c:	fb5ff06f          	j	2102850 <__sflush_r+0x12c>
 21028a0:	00a90933          	add	s2,s2,a0
 21028a4:	fa9056e3          	blez	s1,2102850 <__sflush_r+0x12c>
 21028a8:	02442783          	lw	a5,36(s0)
 21028ac:	01c42583          	lw	a1,28(s0)
 21028b0:	00048693          	mv	a3,s1
 21028b4:	00090613          	mv	a2,s2
 21028b8:	00098513          	mv	a0,s3
 21028bc:	000780e7          	jalr	a5
 21028c0:	40a484b3          	sub	s1,s1,a0
 21028c4:	fca04ee3          	bgtz	a0,21028a0 <__sflush_r+0x17c>
 21028c8:	00c41783          	lh	a5,12(s0)
 21028cc:	0407e793          	ori	a5,a5,64
 21028d0:	01c12083          	lw	ra,28(sp)
 21028d4:	00f41623          	sh	a5,12(s0)
 21028d8:	01812403          	lw	s0,24(sp)
 21028dc:	01412483          	lw	s1,20(sp)
 21028e0:	01012903          	lw	s2,16(sp)
 21028e4:	00c12983          	lw	s3,12(sp)
 21028e8:	fff00513          	li	a0,-1
 21028ec:	02010113          	addi	sp,sp,32
 21028f0:	00008067          	ret
 21028f4:	03c5a683          	lw	a3,60(a1)
 21028f8:	e6d048e3          	bgtz	a3,2102768 <__sflush_r+0x44>
 21028fc:	00000513          	li	a0,0
 2102900:	f55ff06f          	j	2102854 <__sflush_r+0x130>
 2102904:	05042603          	lw	a2,80(s0)
 2102908:	ea9ff06f          	j	21027b0 <__sflush_r+0x8c>
 210290c:	00c41783          	lh	a5,12(s0)
 2102910:	01042683          	lw	a3,16(s0)
 2102914:	fffff737          	lui	a4,0xfffff
 2102918:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__flash_rwdata_start+0xfdef8567>
 210291c:	00e7f733          	and	a4,a5,a4
 2102920:	00c7d793          	srli	a5,a5,0xc
 2102924:	00e41623          	sh	a4,12(s0)
 2102928:	00042223          	sw	zero,4(s0)
 210292c:	00d42023          	sw	a3,0(s0)
 2102930:	0017f793          	andi	a5,a5,1
 2102934:	ee078ee3          	beqz	a5,2102830 <__sflush_r+0x10c>
 2102938:	04a42823          	sw	a0,80(s0)
 210293c:	ef5ff06f          	j	2102830 <__sflush_r+0x10c>
 2102940:	0009a783          	lw	a5,0(s3)
 2102944:	e60780e3          	beqz	a5,21027a4 <__sflush_r+0x80>
 2102948:	01d00713          	li	a4,29
 210294c:	00e78663          	beq	a5,a4,2102958 <__sflush_r+0x234>
 2102950:	01600713          	li	a4,22
 2102954:	f6e79ae3          	bne	a5,a4,21028c8 <__sflush_r+0x1a4>
 2102958:	0099a023          	sw	s1,0(s3)
 210295c:	00000513          	li	a0,0
 2102960:	ef5ff06f          	j	2102854 <__sflush_r+0x130>
 2102964:	ec0696e3          	bnez	a3,2102830 <__sflush_r+0x10c>
 2102968:	04a42823          	sw	a0,80(s0)
 210296c:	ec5ff06f          	j	2102830 <__sflush_r+0x10c>

02102970 <_fflush_r>:
 2102970:	ff010113          	addi	sp,sp,-16
 2102974:	00812423          	sw	s0,8(sp)
 2102978:	00912223          	sw	s1,4(sp)
 210297c:	00112623          	sw	ra,12(sp)
 2102980:	01212023          	sw	s2,0(sp)
 2102984:	00050493          	mv	s1,a0
 2102988:	00058413          	mv	s0,a1
 210298c:	00050663          	beqz	a0,2102998 <_fflush_r+0x28>
 2102990:	03852783          	lw	a5,56(a0)
 2102994:	06078463          	beqz	a5,21029fc <_fflush_r+0x8c>
 2102998:	00c41783          	lh	a5,12(s0)
 210299c:	00000913          	li	s2,0
 21029a0:	04078063          	beqz	a5,21029e0 <_fflush_r+0x70>
 21029a4:	06442703          	lw	a4,100(s0)
 21029a8:	00177713          	andi	a4,a4,1
 21029ac:	00071663          	bnez	a4,21029b8 <_fflush_r+0x48>
 21029b0:	2007f793          	andi	a5,a5,512
 21029b4:	04078863          	beqz	a5,2102a04 <_fflush_r+0x94>
 21029b8:	00040593          	mv	a1,s0
 21029bc:	00048513          	mv	a0,s1
 21029c0:	d65ff0ef          	jal	ra,2102724 <__sflush_r>
 21029c4:	06442783          	lw	a5,100(s0)
 21029c8:	00050913          	mv	s2,a0
 21029cc:	0017f793          	andi	a5,a5,1
 21029d0:	00079863          	bnez	a5,21029e0 <_fflush_r+0x70>
 21029d4:	00c45783          	lhu	a5,12(s0)
 21029d8:	2007f793          	andi	a5,a5,512
 21029dc:	04078863          	beqz	a5,2102a2c <_fflush_r+0xbc>
 21029e0:	00c12083          	lw	ra,12(sp)
 21029e4:	00812403          	lw	s0,8(sp)
 21029e8:	00412483          	lw	s1,4(sp)
 21029ec:	00090513          	mv	a0,s2
 21029f0:	00012903          	lw	s2,0(sp)
 21029f4:	01010113          	addi	sp,sp,16
 21029f8:	00008067          	ret
 21029fc:	230000ef          	jal	ra,2102c2c <__sinit>
 2102a00:	f99ff06f          	j	2102998 <_fflush_r+0x28>
 2102a04:	05842503          	lw	a0,88(s0)
 2102a08:	335000ef          	jal	ra,210353c <__retarget_lock_acquire_recursive>
 2102a0c:	00040593          	mv	a1,s0
 2102a10:	00048513          	mv	a0,s1
 2102a14:	d11ff0ef          	jal	ra,2102724 <__sflush_r>
 2102a18:	06442783          	lw	a5,100(s0)
 2102a1c:	00050913          	mv	s2,a0
 2102a20:	0017f793          	andi	a5,a5,1
 2102a24:	fa079ee3          	bnez	a5,21029e0 <_fflush_r+0x70>
 2102a28:	fadff06f          	j	21029d4 <_fflush_r+0x64>
 2102a2c:	05842503          	lw	a0,88(s0)
 2102a30:	325000ef          	jal	ra,2103554 <__retarget_lock_release_recursive>
 2102a34:	00c12083          	lw	ra,12(sp)
 2102a38:	00812403          	lw	s0,8(sp)
 2102a3c:	00412483          	lw	s1,4(sp)
 2102a40:	00090513          	mv	a0,s2
 2102a44:	00012903          	lw	s2,0(sp)
 2102a48:	01010113          	addi	sp,sp,16
 2102a4c:	00008067          	ret

02102a50 <fflush>:
 2102a50:	0a050c63          	beqz	a0,2102b08 <fflush+0xb8>
 2102a54:	ff010113          	addi	sp,sp,-16
 2102a58:	00812423          	sw	s0,8(sp)
 2102a5c:	01212023          	sw	s2,0(sp)
 2102a60:	00112623          	sw	ra,12(sp)
 2102a64:	00912223          	sw	s1,4(sp)
 2102a68:	fdeff917          	auipc	s2,0xfdeff
 2102a6c:	43892903          	lw	s2,1080(s2) # 1ea0 <_impure_ptr>
 2102a70:	00050413          	mv	s0,a0
 2102a74:	00090663          	beqz	s2,2102a80 <fflush+0x30>
 2102a78:	03892783          	lw	a5,56(s2)
 2102a7c:	06078463          	beqz	a5,2102ae4 <fflush+0x94>
 2102a80:	00c41783          	lh	a5,12(s0)
 2102a84:	00000493          	li	s1,0
 2102a88:	04078063          	beqz	a5,2102ac8 <fflush+0x78>
 2102a8c:	06442703          	lw	a4,100(s0)
 2102a90:	00177713          	andi	a4,a4,1
 2102a94:	00071663          	bnez	a4,2102aa0 <fflush+0x50>
 2102a98:	2007f793          	andi	a5,a5,512
 2102a9c:	04078a63          	beqz	a5,2102af0 <fflush+0xa0>
 2102aa0:	00040593          	mv	a1,s0
 2102aa4:	00090513          	mv	a0,s2
 2102aa8:	c7dff0ef          	jal	ra,2102724 <__sflush_r>
 2102aac:	06442783          	lw	a5,100(s0)
 2102ab0:	00050493          	mv	s1,a0
 2102ab4:	0017f793          	andi	a5,a5,1
 2102ab8:	00079863          	bnez	a5,2102ac8 <fflush+0x78>
 2102abc:	00c45783          	lhu	a5,12(s0)
 2102ac0:	2007f793          	andi	a5,a5,512
 2102ac4:	02078c63          	beqz	a5,2102afc <fflush+0xac>
 2102ac8:	00c12083          	lw	ra,12(sp)
 2102acc:	00812403          	lw	s0,8(sp)
 2102ad0:	00012903          	lw	s2,0(sp)
 2102ad4:	00048513          	mv	a0,s1
 2102ad8:	00412483          	lw	s1,4(sp)
 2102adc:	01010113          	addi	sp,sp,16
 2102ae0:	00008067          	ret
 2102ae4:	00090513          	mv	a0,s2
 2102ae8:	144000ef          	jal	ra,2102c2c <__sinit>
 2102aec:	f95ff06f          	j	2102a80 <fflush+0x30>
 2102af0:	05842503          	lw	a0,88(s0)
 2102af4:	249000ef          	jal	ra,210353c <__retarget_lock_acquire_recursive>
 2102af8:	fa9ff06f          	j	2102aa0 <fflush+0x50>
 2102afc:	05842503          	lw	a0,88(s0)
 2102b00:	255000ef          	jal	ra,2103554 <__retarget_lock_release_recursive>
 2102b04:	fc5ff06f          	j	2102ac8 <fflush+0x78>
 2102b08:	00000597          	auipc	a1,0x0
 2102b0c:	e6858593          	addi	a1,a1,-408 # 2102970 <_fflush_r>
 2102b10:	37c02503          	lw	a0,892(zero) # 37c <_global_impure_ptr>
 2102b14:	1610006f          	j	2103474 <_fwalk_reent>

02102b18 <_cleanup_r>:
 2102b18:	00002597          	auipc	a1,0x2
 2102b1c:	cd058593          	addi	a1,a1,-816 # 21047e8 <_fclose_r>
 2102b20:	1550006f          	j	2103474 <_fwalk_reent>

02102b24 <__fp_lock>:
 2102b24:	06452783          	lw	a5,100(a0)
 2102b28:	0017f793          	andi	a5,a5,1
 2102b2c:	00079863          	bnez	a5,2102b3c <__fp_lock+0x18>
 2102b30:	00c55783          	lhu	a5,12(a0)
 2102b34:	2007f793          	andi	a5,a5,512
 2102b38:	00078663          	beqz	a5,2102b44 <__fp_lock+0x20>
 2102b3c:	00000513          	li	a0,0
 2102b40:	00008067          	ret
 2102b44:	05852503          	lw	a0,88(a0)
 2102b48:	ff010113          	addi	sp,sp,-16
 2102b4c:	00112623          	sw	ra,12(sp)
 2102b50:	1ed000ef          	jal	ra,210353c <__retarget_lock_acquire_recursive>
 2102b54:	00c12083          	lw	ra,12(sp)
 2102b58:	00000513          	li	a0,0
 2102b5c:	01010113          	addi	sp,sp,16
 2102b60:	00008067          	ret

02102b64 <__fp_unlock>:
 2102b64:	06452783          	lw	a5,100(a0)
 2102b68:	0017f793          	andi	a5,a5,1
 2102b6c:	00079863          	bnez	a5,2102b7c <__fp_unlock+0x18>
 2102b70:	00c55783          	lhu	a5,12(a0)
 2102b74:	2007f793          	andi	a5,a5,512
 2102b78:	00078663          	beqz	a5,2102b84 <__fp_unlock+0x20>
 2102b7c:	00000513          	li	a0,0
 2102b80:	00008067          	ret
 2102b84:	05852503          	lw	a0,88(a0)
 2102b88:	ff010113          	addi	sp,sp,-16
 2102b8c:	00112623          	sw	ra,12(sp)
 2102b90:	1c5000ef          	jal	ra,2103554 <__retarget_lock_release_recursive>
 2102b94:	00c12083          	lw	ra,12(sp)
 2102b98:	00000513          	li	a0,0
 2102b9c:	01010113          	addi	sp,sp,16
 2102ba0:	00008067          	ret

02102ba4 <__sfmoreglue>:
 2102ba4:	ff010113          	addi	sp,sp,-16
 2102ba8:	fff58793          	addi	a5,a1,-1
 2102bac:	00812423          	sw	s0,8(sp)
 2102bb0:	00179413          	slli	s0,a5,0x1
 2102bb4:	00f40433          	add	s0,s0,a5
 2102bb8:	00241413          	slli	s0,s0,0x2
 2102bbc:	00f40433          	add	s0,s0,a5
 2102bc0:	00341413          	slli	s0,s0,0x3
 2102bc4:	01212023          	sw	s2,0(sp)
 2102bc8:	00058913          	mv	s2,a1
 2102bcc:	07440593          	addi	a1,s0,116
 2102bd0:	00912223          	sw	s1,4(sp)
 2102bd4:	00112623          	sw	ra,12(sp)
 2102bd8:	181000ef          	jal	ra,2103558 <_malloc_r>
 2102bdc:	00050493          	mv	s1,a0
 2102be0:	02050063          	beqz	a0,2102c00 <__sfmoreglue+0x5c>
 2102be4:	00c50513          	addi	a0,a0,12
 2102be8:	0004a023          	sw	zero,0(s1)
 2102bec:	0124a223          	sw	s2,4(s1)
 2102bf0:	00a4a423          	sw	a0,8(s1)
 2102bf4:	06840613          	addi	a2,s0,104
 2102bf8:	00000593          	li	a1,0
 2102bfc:	28c010ef          	jal	ra,2103e88 <memset>
 2102c00:	00c12083          	lw	ra,12(sp)
 2102c04:	00812403          	lw	s0,8(sp)
 2102c08:	00012903          	lw	s2,0(sp)
 2102c0c:	00048513          	mv	a0,s1
 2102c10:	00412483          	lw	s1,4(sp)
 2102c14:	01010113          	addi	sp,sp,16
 2102c18:	00008067          	ret

02102c1c <_cleanup>:
 2102c1c:	00002597          	auipc	a1,0x2
 2102c20:	bcc58593          	addi	a1,a1,-1076 # 21047e8 <_fclose_r>
 2102c24:	37c02503          	lw	a0,892(zero) # 37c <_global_impure_ptr>
 2102c28:	04d0006f          	j	2103474 <_fwalk_reent>

02102c2c <__sinit>:
 2102c2c:	fe010113          	addi	sp,sp,-32
 2102c30:	00912a23          	sw	s1,20(sp)
 2102c34:	00050493          	mv	s1,a0
 2102c38:	88818513          	addi	a0,gp,-1912 # 1f08 <__lock___sinit_recursive_mutex>
 2102c3c:	00112e23          	sw	ra,28(sp)
 2102c40:	00812c23          	sw	s0,24(sp)
 2102c44:	01212823          	sw	s2,16(sp)
 2102c48:	01312623          	sw	s3,12(sp)
 2102c4c:	01412423          	sw	s4,8(sp)
 2102c50:	01512223          	sw	s5,4(sp)
 2102c54:	0e9000ef          	jal	ra,210353c <__retarget_lock_acquire_recursive>
 2102c58:	0384a783          	lw	a5,56(s1)
 2102c5c:	14079863          	bnez	a5,2102dac <__sinit+0x180>
 2102c60:	0044a403          	lw	s0,4(s1)
 2102c64:	00000717          	auipc	a4,0x0
 2102c68:	eb470713          	addi	a4,a4,-332 # 2102b18 <_cleanup_r>
 2102c6c:	02e4ae23          	sw	a4,60(s1)
 2102c70:	2ec48793          	addi	a5,s1,748
 2102c74:	00300713          	li	a4,3
 2102c78:	2ee4a223          	sw	a4,740(s1)
 2102c7c:	2ef4a423          	sw	a5,744(s1)
 2102c80:	2e04a023          	sw	zero,736(s1)
 2102c84:	00400793          	li	a5,4
 2102c88:	00f42623          	sw	a5,12(s0)
 2102c8c:	00800613          	li	a2,8
 2102c90:	00000593          	li	a1,0
 2102c94:	00042023          	sw	zero,0(s0)
 2102c98:	00042223          	sw	zero,4(s0)
 2102c9c:	00042423          	sw	zero,8(s0)
 2102ca0:	06042223          	sw	zero,100(s0)
 2102ca4:	00042823          	sw	zero,16(s0)
 2102ca8:	00042a23          	sw	zero,20(s0)
 2102cac:	00042c23          	sw	zero,24(s0)
 2102cb0:	05c40513          	addi	a0,s0,92
 2102cb4:	1d4010ef          	jal	ra,2103e88 <memset>
 2102cb8:	00001a97          	auipc	s5,0x1
 2102cbc:	5fca8a93          	addi	s5,s5,1532 # 21042b4 <__sread>
 2102cc0:	00001a17          	auipc	s4,0x1
 2102cc4:	658a0a13          	addi	s4,s4,1624 # 2104318 <__swrite>
 2102cc8:	00001997          	auipc	s3,0x1
 2102ccc:	6d898993          	addi	s3,s3,1752 # 21043a0 <__sseek>
 2102cd0:	00001917          	auipc	s2,0x1
 2102cd4:	74890913          	addi	s2,s2,1864 # 2104418 <__sclose>
 2102cd8:	05840513          	addi	a0,s0,88
 2102cdc:	00842e23          	sw	s0,28(s0)
 2102ce0:	03542023          	sw	s5,32(s0)
 2102ce4:	03442223          	sw	s4,36(s0)
 2102ce8:	03342423          	sw	s3,40(s0)
 2102cec:	03242623          	sw	s2,44(s0)
 2102cf0:	03d000ef          	jal	ra,210352c <__retarget_lock_init_recursive>
 2102cf4:	0084a403          	lw	s0,8(s1)
 2102cf8:	000107b7          	lui	a5,0x10
 2102cfc:	00878793          	addi	a5,a5,8 # 10008 <__global_pointer$+0xd988>
 2102d00:	00f42623          	sw	a5,12(s0)
 2102d04:	00800613          	li	a2,8
 2102d08:	00000593          	li	a1,0
 2102d0c:	00042023          	sw	zero,0(s0)
 2102d10:	00042223          	sw	zero,4(s0)
 2102d14:	00042423          	sw	zero,8(s0)
 2102d18:	06042223          	sw	zero,100(s0)
 2102d1c:	00042823          	sw	zero,16(s0)
 2102d20:	00042a23          	sw	zero,20(s0)
 2102d24:	00042c23          	sw	zero,24(s0)
 2102d28:	05c40513          	addi	a0,s0,92
 2102d2c:	15c010ef          	jal	ra,2103e88 <memset>
 2102d30:	05840513          	addi	a0,s0,88
 2102d34:	00842e23          	sw	s0,28(s0)
 2102d38:	03542023          	sw	s5,32(s0)
 2102d3c:	03442223          	sw	s4,36(s0)
 2102d40:	03342423          	sw	s3,40(s0)
 2102d44:	03242623          	sw	s2,44(s0)
 2102d48:	7e4000ef          	jal	ra,210352c <__retarget_lock_init_recursive>
 2102d4c:	00c4a403          	lw	s0,12(s1)
 2102d50:	000207b7          	lui	a5,0x20
 2102d54:	01278793          	addi	a5,a5,18 # 20012 <__global_pointer$+0x1d992>
 2102d58:	00f42623          	sw	a5,12(s0)
 2102d5c:	00800613          	li	a2,8
 2102d60:	00000593          	li	a1,0
 2102d64:	00042023          	sw	zero,0(s0)
 2102d68:	00042223          	sw	zero,4(s0)
 2102d6c:	00042423          	sw	zero,8(s0)
 2102d70:	06042223          	sw	zero,100(s0)
 2102d74:	00042823          	sw	zero,16(s0)
 2102d78:	00042a23          	sw	zero,20(s0)
 2102d7c:	00042c23          	sw	zero,24(s0)
 2102d80:	05c40513          	addi	a0,s0,92
 2102d84:	104010ef          	jal	ra,2103e88 <memset>
 2102d88:	05840513          	addi	a0,s0,88
 2102d8c:	00842e23          	sw	s0,28(s0)
 2102d90:	03542023          	sw	s5,32(s0)
 2102d94:	03442223          	sw	s4,36(s0)
 2102d98:	03342423          	sw	s3,40(s0)
 2102d9c:	03242623          	sw	s2,44(s0)
 2102da0:	78c000ef          	jal	ra,210352c <__retarget_lock_init_recursive>
 2102da4:	00100793          	li	a5,1
 2102da8:	02f4ac23          	sw	a5,56(s1)
 2102dac:	01812403          	lw	s0,24(sp)
 2102db0:	01c12083          	lw	ra,28(sp)
 2102db4:	01412483          	lw	s1,20(sp)
 2102db8:	01012903          	lw	s2,16(sp)
 2102dbc:	00c12983          	lw	s3,12(sp)
 2102dc0:	00812a03          	lw	s4,8(sp)
 2102dc4:	00412a83          	lw	s5,4(sp)
 2102dc8:	88818513          	addi	a0,gp,-1912 # 1f08 <__lock___sinit_recursive_mutex>
 2102dcc:	02010113          	addi	sp,sp,32
 2102dd0:	7840006f          	j	2103554 <__retarget_lock_release_recursive>

02102dd4 <__sfp>:
 2102dd4:	fe010113          	addi	sp,sp,-32
 2102dd8:	01312623          	sw	s3,12(sp)
 2102ddc:	00050993          	mv	s3,a0
 2102de0:	88418513          	addi	a0,gp,-1916 # 1f04 <__lock___sfp_recursive_mutex>
 2102de4:	01212823          	sw	s2,16(sp)
 2102de8:	00112e23          	sw	ra,28(sp)
 2102dec:	00812c23          	sw	s0,24(sp)
 2102df0:	00912a23          	sw	s1,20(sp)
 2102df4:	748000ef          	jal	ra,210353c <__retarget_lock_acquire_recursive>
 2102df8:	37c02903          	lw	s2,892(zero) # 37c <_global_impure_ptr>
 2102dfc:	03892783          	lw	a5,56(s2)
 2102e00:	0a078e63          	beqz	a5,2102ebc <__sfp+0xe8>
 2102e04:	2e090913          	addi	s2,s2,736
 2102e08:	fff00493          	li	s1,-1
 2102e0c:	00492783          	lw	a5,4(s2)
 2102e10:	00892403          	lw	s0,8(s2)
 2102e14:	fff78793          	addi	a5,a5,-1
 2102e18:	0007d863          	bgez	a5,2102e28 <__sfp+0x54>
 2102e1c:	0900006f          	j	2102eac <__sfp+0xd8>
 2102e20:	06840413          	addi	s0,s0,104
 2102e24:	08978463          	beq	a5,s1,2102eac <__sfp+0xd8>
 2102e28:	00c41703          	lh	a4,12(s0)
 2102e2c:	fff78793          	addi	a5,a5,-1
 2102e30:	fe0718e3          	bnez	a4,2102e20 <__sfp+0x4c>
 2102e34:	ffff07b7          	lui	a5,0xffff0
 2102e38:	00178793          	addi	a5,a5,1 # ffff0001 <__flash_rwdata_start+0xfdee8d69>
 2102e3c:	00f42623          	sw	a5,12(s0)
 2102e40:	05840513          	addi	a0,s0,88
 2102e44:	06042223          	sw	zero,100(s0)
 2102e48:	6e4000ef          	jal	ra,210352c <__retarget_lock_init_recursive>
 2102e4c:	88418513          	addi	a0,gp,-1916 # 1f04 <__lock___sfp_recursive_mutex>
 2102e50:	704000ef          	jal	ra,2103554 <__retarget_lock_release_recursive>
 2102e54:	00800613          	li	a2,8
 2102e58:	00042023          	sw	zero,0(s0)
 2102e5c:	00042423          	sw	zero,8(s0)
 2102e60:	00042223          	sw	zero,4(s0)
 2102e64:	00042823          	sw	zero,16(s0)
 2102e68:	00042a23          	sw	zero,20(s0)
 2102e6c:	00042c23          	sw	zero,24(s0)
 2102e70:	00000593          	li	a1,0
 2102e74:	05c40513          	addi	a0,s0,92
 2102e78:	010010ef          	jal	ra,2103e88 <memset>
 2102e7c:	02042823          	sw	zero,48(s0)
 2102e80:	02042a23          	sw	zero,52(s0)
 2102e84:	04042223          	sw	zero,68(s0)
 2102e88:	04042423          	sw	zero,72(s0)
 2102e8c:	01c12083          	lw	ra,28(sp)
 2102e90:	00040513          	mv	a0,s0
 2102e94:	01812403          	lw	s0,24(sp)
 2102e98:	01412483          	lw	s1,20(sp)
 2102e9c:	01012903          	lw	s2,16(sp)
 2102ea0:	00c12983          	lw	s3,12(sp)
 2102ea4:	02010113          	addi	sp,sp,32
 2102ea8:	00008067          	ret
 2102eac:	00092403          	lw	s0,0(s2)
 2102eb0:	00040c63          	beqz	s0,2102ec8 <__sfp+0xf4>
 2102eb4:	00040913          	mv	s2,s0
 2102eb8:	f55ff06f          	j	2102e0c <__sfp+0x38>
 2102ebc:	00090513          	mv	a0,s2
 2102ec0:	d6dff0ef          	jal	ra,2102c2c <__sinit>
 2102ec4:	f41ff06f          	j	2102e04 <__sfp+0x30>
 2102ec8:	1ac00593          	li	a1,428
 2102ecc:	00098513          	mv	a0,s3
 2102ed0:	688000ef          	jal	ra,2103558 <_malloc_r>
 2102ed4:	00050413          	mv	s0,a0
 2102ed8:	02050863          	beqz	a0,2102f08 <__sfp+0x134>
 2102edc:	00c50513          	addi	a0,a0,12
 2102ee0:	00400793          	li	a5,4
 2102ee4:	00042023          	sw	zero,0(s0)
 2102ee8:	00f42223          	sw	a5,4(s0)
 2102eec:	00a42423          	sw	a0,8(s0)
 2102ef0:	1a000613          	li	a2,416
 2102ef4:	00000593          	li	a1,0
 2102ef8:	791000ef          	jal	ra,2103e88 <memset>
 2102efc:	00892023          	sw	s0,0(s2)
 2102f00:	00040913          	mv	s2,s0
 2102f04:	f09ff06f          	j	2102e0c <__sfp+0x38>
 2102f08:	00092023          	sw	zero,0(s2)
 2102f0c:	88418513          	addi	a0,gp,-1916 # 1f04 <__lock___sfp_recursive_mutex>
 2102f10:	644000ef          	jal	ra,2103554 <__retarget_lock_release_recursive>
 2102f14:	00c00793          	li	a5,12
 2102f18:	00f9a023          	sw	a5,0(s3)
 2102f1c:	f71ff06f          	j	2102e8c <__sfp+0xb8>

02102f20 <__sfp_lock_acquire>:
 2102f20:	88418513          	addi	a0,gp,-1916 # 1f04 <__lock___sfp_recursive_mutex>
 2102f24:	6180006f          	j	210353c <__retarget_lock_acquire_recursive>

02102f28 <__sfp_lock_release>:
 2102f28:	88418513          	addi	a0,gp,-1916 # 1f04 <__lock___sfp_recursive_mutex>
 2102f2c:	6280006f          	j	2103554 <__retarget_lock_release_recursive>

02102f30 <__sinit_lock_acquire>:
 2102f30:	88818513          	addi	a0,gp,-1912 # 1f08 <__lock___sinit_recursive_mutex>
 2102f34:	6080006f          	j	210353c <__retarget_lock_acquire_recursive>

02102f38 <__sinit_lock_release>:
 2102f38:	88818513          	addi	a0,gp,-1912 # 1f08 <__lock___sinit_recursive_mutex>
 2102f3c:	6180006f          	j	2103554 <__retarget_lock_release_recursive>

02102f40 <__fp_lock_all>:
 2102f40:	ff010113          	addi	sp,sp,-16
 2102f44:	88418513          	addi	a0,gp,-1916 # 1f04 <__lock___sfp_recursive_mutex>
 2102f48:	00112623          	sw	ra,12(sp)
 2102f4c:	5f0000ef          	jal	ra,210353c <__retarget_lock_acquire_recursive>
 2102f50:	00c12083          	lw	ra,12(sp)
 2102f54:	fdeff517          	auipc	a0,0xfdeff
 2102f58:	f4c52503          	lw	a0,-180(a0) # 1ea0 <_impure_ptr>
 2102f5c:	00000597          	auipc	a1,0x0
 2102f60:	bc858593          	addi	a1,a1,-1080 # 2102b24 <__fp_lock>
 2102f64:	01010113          	addi	sp,sp,16
 2102f68:	4680006f          	j	21033d0 <_fwalk>

02102f6c <__fp_unlock_all>:
 2102f6c:	ff010113          	addi	sp,sp,-16
 2102f70:	00000597          	auipc	a1,0x0
 2102f74:	bf458593          	addi	a1,a1,-1036 # 2102b64 <__fp_unlock>
 2102f78:	fdeff517          	auipc	a0,0xfdeff
 2102f7c:	f2852503          	lw	a0,-216(a0) # 1ea0 <_impure_ptr>
 2102f80:	00112623          	sw	ra,12(sp)
 2102f84:	44c000ef          	jal	ra,21033d0 <_fwalk>
 2102f88:	00c12083          	lw	ra,12(sp)
 2102f8c:	88418513          	addi	a0,gp,-1916 # 1f04 <__lock___sfp_recursive_mutex>
 2102f90:	01010113          	addi	sp,sp,16
 2102f94:	5c00006f          	j	2103554 <__retarget_lock_release_recursive>

02102f98 <_malloc_trim_r>:
 2102f98:	fe010113          	addi	sp,sp,-32
 2102f9c:	00812c23          	sw	s0,24(sp)
 2102fa0:	00912a23          	sw	s1,20(sp)
 2102fa4:	01212823          	sw	s2,16(sp)
 2102fa8:	01312623          	sw	s3,12(sp)
 2102fac:	01412423          	sw	s4,8(sp)
 2102fb0:	00058993          	mv	s3,a1
 2102fb4:	00112e23          	sw	ra,28(sp)
 2102fb8:	fdeffa17          	auipc	s4,0xfdeff
 2102fbc:	ac0a0a13          	addi	s4,s4,-1344 # 1a78 <__malloc_av_>
 2102fc0:	00050913          	mv	s2,a0
 2102fc4:	7a1000ef          	jal	ra,2103f64 <__malloc_lock>
 2102fc8:	008a2703          	lw	a4,8(s4)
 2102fcc:	000017b7          	lui	a5,0x1
 2102fd0:	fef78413          	addi	s0,a5,-17 # fef <JTAG_UART_DBG+0xc6f>
 2102fd4:	00472483          	lw	s1,4(a4)
 2102fd8:	ffc4f493          	andi	s1,s1,-4
 2102fdc:	00848433          	add	s0,s1,s0
 2102fe0:	41340433          	sub	s0,s0,s3
 2102fe4:	00c45413          	srli	s0,s0,0xc
 2102fe8:	fff40413          	addi	s0,s0,-1
 2102fec:	00c41413          	slli	s0,s0,0xc
 2102ff0:	00f44e63          	blt	s0,a5,210300c <_malloc_trim_r+0x74>
 2102ff4:	00000593          	li	a1,0
 2102ff8:	00090513          	mv	a0,s2
 2102ffc:	268010ef          	jal	ra,2104264 <_sbrk_r>
 2103000:	008a2783          	lw	a5,8(s4)
 2103004:	009787b3          	add	a5,a5,s1
 2103008:	02f50863          	beq	a0,a5,2103038 <_malloc_trim_r+0xa0>
 210300c:	00090513          	mv	a0,s2
 2103010:	75d000ef          	jal	ra,2103f6c <__malloc_unlock>
 2103014:	01c12083          	lw	ra,28(sp)
 2103018:	01812403          	lw	s0,24(sp)
 210301c:	01412483          	lw	s1,20(sp)
 2103020:	01012903          	lw	s2,16(sp)
 2103024:	00c12983          	lw	s3,12(sp)
 2103028:	00812a03          	lw	s4,8(sp)
 210302c:	00000513          	li	a0,0
 2103030:	02010113          	addi	sp,sp,32
 2103034:	00008067          	ret
 2103038:	408005b3          	neg	a1,s0
 210303c:	00090513          	mv	a0,s2
 2103040:	224010ef          	jal	ra,2104264 <_sbrk_r>
 2103044:	fff00793          	li	a5,-1
 2103048:	04f50863          	beq	a0,a5,2103098 <_malloc_trim_r+0x100>
 210304c:	92018713          	addi	a4,gp,-1760 # 1fa0 <__malloc_current_mallinfo>
 2103050:	00072783          	lw	a5,0(a4)
 2103054:	008a2683          	lw	a3,8(s4)
 2103058:	408484b3          	sub	s1,s1,s0
 210305c:	0014e493          	ori	s1,s1,1
 2103060:	408787b3          	sub	a5,a5,s0
 2103064:	00090513          	mv	a0,s2
 2103068:	0096a223          	sw	s1,4(a3)
 210306c:	00f72023          	sw	a5,0(a4)
 2103070:	6fd000ef          	jal	ra,2103f6c <__malloc_unlock>
 2103074:	01c12083          	lw	ra,28(sp)
 2103078:	01812403          	lw	s0,24(sp)
 210307c:	01412483          	lw	s1,20(sp)
 2103080:	01012903          	lw	s2,16(sp)
 2103084:	00c12983          	lw	s3,12(sp)
 2103088:	00812a03          	lw	s4,8(sp)
 210308c:	00100513          	li	a0,1
 2103090:	02010113          	addi	sp,sp,32
 2103094:	00008067          	ret
 2103098:	00000593          	li	a1,0
 210309c:	00090513          	mv	a0,s2
 21030a0:	1c4010ef          	jal	ra,2104264 <_sbrk_r>
 21030a4:	008a2703          	lw	a4,8(s4)
 21030a8:	00f00693          	li	a3,15
 21030ac:	40e507b3          	sub	a5,a0,a4
 21030b0:	f4f6dee3          	bge	a3,a5,210300c <_malloc_trim_r+0x74>
 21030b4:	8241a683          	lw	a3,-2012(gp) # 1ea4 <__malloc_sbrk_base>
 21030b8:	40d50533          	sub	a0,a0,a3
 21030bc:	0017e793          	ori	a5,a5,1
 21030c0:	92a1a023          	sw	a0,-1760(gp) # 1fa0 <__malloc_current_mallinfo>
 21030c4:	00f72223          	sw	a5,4(a4)
 21030c8:	f45ff06f          	j	210300c <_malloc_trim_r+0x74>

021030cc <_free_r>:
 21030cc:	18058263          	beqz	a1,2103250 <_free_r+0x184>
 21030d0:	ff010113          	addi	sp,sp,-16
 21030d4:	00812423          	sw	s0,8(sp)
 21030d8:	00912223          	sw	s1,4(sp)
 21030dc:	00058413          	mv	s0,a1
 21030e0:	00050493          	mv	s1,a0
 21030e4:	00112623          	sw	ra,12(sp)
 21030e8:	67d000ef          	jal	ra,2103f64 <__malloc_lock>
 21030ec:	ffc42583          	lw	a1,-4(s0)
 21030f0:	ff840713          	addi	a4,s0,-8
 21030f4:	fdeff517          	auipc	a0,0xfdeff
 21030f8:	98450513          	addi	a0,a0,-1660 # 1a78 <__malloc_av_>
 21030fc:	ffe5f793          	andi	a5,a1,-2
 2103100:	00f70633          	add	a2,a4,a5
 2103104:	00462683          	lw	a3,4(a2)
 2103108:	00852803          	lw	a6,8(a0)
 210310c:	ffc6f693          	andi	a3,a3,-4
 2103110:	1ac80263          	beq	a6,a2,21032b4 <_free_r+0x1e8>
 2103114:	00d62223          	sw	a3,4(a2)
 2103118:	0015f593          	andi	a1,a1,1
 210311c:	00d60833          	add	a6,a2,a3
 2103120:	0a059063          	bnez	a1,21031c0 <_free_r+0xf4>
 2103124:	ff842303          	lw	t1,-8(s0)
 2103128:	00482583          	lw	a1,4(a6)
 210312c:	fdeff897          	auipc	a7,0xfdeff
 2103130:	95488893          	addi	a7,a7,-1708 # 1a80 <__malloc_av_+0x8>
 2103134:	40670733          	sub	a4,a4,t1
 2103138:	00872803          	lw	a6,8(a4)
 210313c:	006787b3          	add	a5,a5,t1
 2103140:	0015f593          	andi	a1,a1,1
 2103144:	15180263          	beq	a6,a7,2103288 <_free_r+0x1bc>
 2103148:	00c72303          	lw	t1,12(a4)
 210314c:	00682623          	sw	t1,12(a6)
 2103150:	01032423          	sw	a6,8(t1)
 2103154:	1a058663          	beqz	a1,2103300 <_free_r+0x234>
 2103158:	0017e693          	ori	a3,a5,1
 210315c:	00d72223          	sw	a3,4(a4)
 2103160:	00f62023          	sw	a5,0(a2)
 2103164:	1ff00693          	li	a3,511
 2103168:	06f6ec63          	bltu	a3,a5,21031e0 <_free_r+0x114>
 210316c:	ff87f693          	andi	a3,a5,-8
 2103170:	00868693          	addi	a3,a3,8
 2103174:	00452583          	lw	a1,4(a0)
 2103178:	00d506b3          	add	a3,a0,a3
 210317c:	0006a603          	lw	a2,0(a3)
 2103180:	0057d813          	srli	a6,a5,0x5
 2103184:	00100793          	li	a5,1
 2103188:	010797b3          	sll	a5,a5,a6
 210318c:	00b7e7b3          	or	a5,a5,a1
 2103190:	ff868593          	addi	a1,a3,-8
 2103194:	00b72623          	sw	a1,12(a4)
 2103198:	00c72423          	sw	a2,8(a4)
 210319c:	00f52223          	sw	a5,4(a0)
 21031a0:	00e6a023          	sw	a4,0(a3)
 21031a4:	00e62623          	sw	a4,12(a2)
 21031a8:	00812403          	lw	s0,8(sp)
 21031ac:	00c12083          	lw	ra,12(sp)
 21031b0:	00048513          	mv	a0,s1
 21031b4:	00412483          	lw	s1,4(sp)
 21031b8:	01010113          	addi	sp,sp,16
 21031bc:	5b10006f          	j	2103f6c <__malloc_unlock>
 21031c0:	00482583          	lw	a1,4(a6)
 21031c4:	0015f593          	andi	a1,a1,1
 21031c8:	08058663          	beqz	a1,2103254 <_free_r+0x188>
 21031cc:	0017e693          	ori	a3,a5,1
 21031d0:	fed42e23          	sw	a3,-4(s0)
 21031d4:	00f62023          	sw	a5,0(a2)
 21031d8:	1ff00693          	li	a3,511
 21031dc:	f8f6f8e3          	bgeu	a3,a5,210316c <_free_r+0xa0>
 21031e0:	0097d693          	srli	a3,a5,0x9
 21031e4:	00400613          	li	a2,4
 21031e8:	12d66063          	bltu	a2,a3,2103308 <_free_r+0x23c>
 21031ec:	0067d693          	srli	a3,a5,0x6
 21031f0:	03968593          	addi	a1,a3,57
 21031f4:	03868613          	addi	a2,a3,56
 21031f8:	00359593          	slli	a1,a1,0x3
 21031fc:	00b505b3          	add	a1,a0,a1
 2103200:	0005a683          	lw	a3,0(a1)
 2103204:	ff858593          	addi	a1,a1,-8
 2103208:	00d59863          	bne	a1,a3,2103218 <_free_r+0x14c>
 210320c:	1540006f          	j	2103360 <_free_r+0x294>
 2103210:	0086a683          	lw	a3,8(a3)
 2103214:	00d58863          	beq	a1,a3,2103224 <_free_r+0x158>
 2103218:	0046a603          	lw	a2,4(a3)
 210321c:	ffc67613          	andi	a2,a2,-4
 2103220:	fec7e8e3          	bltu	a5,a2,2103210 <_free_r+0x144>
 2103224:	00c6a583          	lw	a1,12(a3)
 2103228:	00b72623          	sw	a1,12(a4)
 210322c:	00d72423          	sw	a3,8(a4)
 2103230:	00812403          	lw	s0,8(sp)
 2103234:	00c12083          	lw	ra,12(sp)
 2103238:	00e5a423          	sw	a4,8(a1)
 210323c:	00048513          	mv	a0,s1
 2103240:	00412483          	lw	s1,4(sp)
 2103244:	00e6a623          	sw	a4,12(a3)
 2103248:	01010113          	addi	sp,sp,16
 210324c:	5210006f          	j	2103f6c <__malloc_unlock>
 2103250:	00008067          	ret
 2103254:	00d787b3          	add	a5,a5,a3
 2103258:	fdeff897          	auipc	a7,0xfdeff
 210325c:	82888893          	addi	a7,a7,-2008 # 1a80 <__malloc_av_+0x8>
 2103260:	00862683          	lw	a3,8(a2)
 2103264:	0d168c63          	beq	a3,a7,210333c <_free_r+0x270>
 2103268:	00c62803          	lw	a6,12(a2)
 210326c:	0017e593          	ori	a1,a5,1
 2103270:	00f70633          	add	a2,a4,a5
 2103274:	0106a623          	sw	a6,12(a3)
 2103278:	00d82423          	sw	a3,8(a6)
 210327c:	00b72223          	sw	a1,4(a4)
 2103280:	00f62023          	sw	a5,0(a2)
 2103284:	ee1ff06f          	j	2103164 <_free_r+0x98>
 2103288:	12059c63          	bnez	a1,21033c0 <_free_r+0x2f4>
 210328c:	00862583          	lw	a1,8(a2)
 2103290:	00c62603          	lw	a2,12(a2)
 2103294:	00f686b3          	add	a3,a3,a5
 2103298:	0016e793          	ori	a5,a3,1
 210329c:	00c5a623          	sw	a2,12(a1)
 21032a0:	00b62423          	sw	a1,8(a2)
 21032a4:	00f72223          	sw	a5,4(a4)
 21032a8:	00d70733          	add	a4,a4,a3
 21032ac:	00d72023          	sw	a3,0(a4)
 21032b0:	ef9ff06f          	j	21031a8 <_free_r+0xdc>
 21032b4:	0015f593          	andi	a1,a1,1
 21032b8:	00d786b3          	add	a3,a5,a3
 21032bc:	02059063          	bnez	a1,21032dc <_free_r+0x210>
 21032c0:	ff842583          	lw	a1,-8(s0)
 21032c4:	40b70733          	sub	a4,a4,a1
 21032c8:	00c72783          	lw	a5,12(a4)
 21032cc:	00872603          	lw	a2,8(a4)
 21032d0:	00b686b3          	add	a3,a3,a1
 21032d4:	00f62623          	sw	a5,12(a2)
 21032d8:	00c7a423          	sw	a2,8(a5)
 21032dc:	0016e793          	ori	a5,a3,1
 21032e0:	00f72223          	sw	a5,4(a4)
 21032e4:	00e52423          	sw	a4,8(a0)
 21032e8:	8281a783          	lw	a5,-2008(gp) # 1ea8 <__malloc_trim_threshold>
 21032ec:	eaf6eee3          	bltu	a3,a5,21031a8 <_free_r+0xdc>
 21032f0:	8941a583          	lw	a1,-1900(gp) # 1f14 <__malloc_top_pad>
 21032f4:	00048513          	mv	a0,s1
 21032f8:	ca1ff0ef          	jal	ra,2102f98 <_malloc_trim_r>
 21032fc:	eadff06f          	j	21031a8 <_free_r+0xdc>
 2103300:	00d787b3          	add	a5,a5,a3
 2103304:	f5dff06f          	j	2103260 <_free_r+0x194>
 2103308:	01400613          	li	a2,20
 210330c:	02d67063          	bgeu	a2,a3,210332c <_free_r+0x260>
 2103310:	05400613          	li	a2,84
 2103314:	06d66463          	bltu	a2,a3,210337c <_free_r+0x2b0>
 2103318:	00c7d693          	srli	a3,a5,0xc
 210331c:	06f68593          	addi	a1,a3,111
 2103320:	06e68613          	addi	a2,a3,110
 2103324:	00359593          	slli	a1,a1,0x3
 2103328:	ed5ff06f          	j	21031fc <_free_r+0x130>
 210332c:	05c68593          	addi	a1,a3,92
 2103330:	05b68613          	addi	a2,a3,91
 2103334:	00359593          	slli	a1,a1,0x3
 2103338:	ec5ff06f          	j	21031fc <_free_r+0x130>
 210333c:	00e52a23          	sw	a4,20(a0)
 2103340:	00e52823          	sw	a4,16(a0)
 2103344:	0017e693          	ori	a3,a5,1
 2103348:	01172623          	sw	a7,12(a4)
 210334c:	01172423          	sw	a7,8(a4)
 2103350:	00d72223          	sw	a3,4(a4)
 2103354:	00f70733          	add	a4,a4,a5
 2103358:	00f72023          	sw	a5,0(a4)
 210335c:	e4dff06f          	j	21031a8 <_free_r+0xdc>
 2103360:	00452803          	lw	a6,4(a0)
 2103364:	40265613          	srai	a2,a2,0x2
 2103368:	00100793          	li	a5,1
 210336c:	00c797b3          	sll	a5,a5,a2
 2103370:	0107e7b3          	or	a5,a5,a6
 2103374:	00f52223          	sw	a5,4(a0)
 2103378:	eb1ff06f          	j	2103228 <_free_r+0x15c>
 210337c:	15400613          	li	a2,340
 2103380:	00d66c63          	bltu	a2,a3,2103398 <_free_r+0x2cc>
 2103384:	00f7d693          	srli	a3,a5,0xf
 2103388:	07868593          	addi	a1,a3,120
 210338c:	07768613          	addi	a2,a3,119
 2103390:	00359593          	slli	a1,a1,0x3
 2103394:	e69ff06f          	j	21031fc <_free_r+0x130>
 2103398:	55400613          	li	a2,1364
 210339c:	00d66c63          	bltu	a2,a3,21033b4 <_free_r+0x2e8>
 21033a0:	0127d693          	srli	a3,a5,0x12
 21033a4:	07d68593          	addi	a1,a3,125
 21033a8:	07c68613          	addi	a2,a3,124
 21033ac:	00359593          	slli	a1,a1,0x3
 21033b0:	e4dff06f          	j	21031fc <_free_r+0x130>
 21033b4:	3f800593          	li	a1,1016
 21033b8:	07e00613          	li	a2,126
 21033bc:	e41ff06f          	j	21031fc <_free_r+0x130>
 21033c0:	0017e693          	ori	a3,a5,1
 21033c4:	00d72223          	sw	a3,4(a4)
 21033c8:	00f62023          	sw	a5,0(a2)
 21033cc:	dddff06f          	j	21031a8 <_free_r+0xdc>

021033d0 <_fwalk>:
 21033d0:	fe010113          	addi	sp,sp,-32
 21033d4:	01212823          	sw	s2,16(sp)
 21033d8:	01312623          	sw	s3,12(sp)
 21033dc:	01412423          	sw	s4,8(sp)
 21033e0:	01512223          	sw	s5,4(sp)
 21033e4:	01612023          	sw	s6,0(sp)
 21033e8:	00112e23          	sw	ra,28(sp)
 21033ec:	00812c23          	sw	s0,24(sp)
 21033f0:	00912a23          	sw	s1,20(sp)
 21033f4:	00058b13          	mv	s6,a1
 21033f8:	2e050a93          	addi	s5,a0,736
 21033fc:	00000a13          	li	s4,0
 2103400:	00100993          	li	s3,1
 2103404:	fff00913          	li	s2,-1
 2103408:	004aa483          	lw	s1,4(s5)
 210340c:	008aa403          	lw	s0,8(s5)
 2103410:	fff48493          	addi	s1,s1,-1
 2103414:	0204c663          	bltz	s1,2103440 <_fwalk+0x70>
 2103418:	00c45783          	lhu	a5,12(s0)
 210341c:	fff48493          	addi	s1,s1,-1
 2103420:	00f9fc63          	bgeu	s3,a5,2103438 <_fwalk+0x68>
 2103424:	00e41783          	lh	a5,14(s0)
 2103428:	00040513          	mv	a0,s0
 210342c:	01278663          	beq	a5,s2,2103438 <_fwalk+0x68>
 2103430:	000b00e7          	jalr	s6
 2103434:	00aa6a33          	or	s4,s4,a0
 2103438:	06840413          	addi	s0,s0,104
 210343c:	fd249ee3          	bne	s1,s2,2103418 <_fwalk+0x48>
 2103440:	000aaa83          	lw	s5,0(s5)
 2103444:	fc0a92e3          	bnez	s5,2103408 <_fwalk+0x38>
 2103448:	01c12083          	lw	ra,28(sp)
 210344c:	01812403          	lw	s0,24(sp)
 2103450:	01412483          	lw	s1,20(sp)
 2103454:	01012903          	lw	s2,16(sp)
 2103458:	00c12983          	lw	s3,12(sp)
 210345c:	00412a83          	lw	s5,4(sp)
 2103460:	00012b03          	lw	s6,0(sp)
 2103464:	000a0513          	mv	a0,s4
 2103468:	00812a03          	lw	s4,8(sp)
 210346c:	02010113          	addi	sp,sp,32
 2103470:	00008067          	ret

02103474 <_fwalk_reent>:
 2103474:	fd010113          	addi	sp,sp,-48
 2103478:	03212023          	sw	s2,32(sp)
 210347c:	01312e23          	sw	s3,28(sp)
 2103480:	01412c23          	sw	s4,24(sp)
 2103484:	01512a23          	sw	s5,20(sp)
 2103488:	01612823          	sw	s6,16(sp)
 210348c:	01712623          	sw	s7,12(sp)
 2103490:	02112623          	sw	ra,44(sp)
 2103494:	02812423          	sw	s0,40(sp)
 2103498:	02912223          	sw	s1,36(sp)
 210349c:	00050a93          	mv	s5,a0
 21034a0:	00058b93          	mv	s7,a1
 21034a4:	2e050b13          	addi	s6,a0,736
 21034a8:	00000a13          	li	s4,0
 21034ac:	00100993          	li	s3,1
 21034b0:	fff00913          	li	s2,-1
 21034b4:	004b2483          	lw	s1,4(s6)
 21034b8:	008b2403          	lw	s0,8(s6)
 21034bc:	fff48493          	addi	s1,s1,-1
 21034c0:	0204c863          	bltz	s1,21034f0 <_fwalk_reent+0x7c>
 21034c4:	00c45783          	lhu	a5,12(s0)
 21034c8:	fff48493          	addi	s1,s1,-1
 21034cc:	00f9fe63          	bgeu	s3,a5,21034e8 <_fwalk_reent+0x74>
 21034d0:	00e41783          	lh	a5,14(s0)
 21034d4:	00040593          	mv	a1,s0
 21034d8:	000a8513          	mv	a0,s5
 21034dc:	01278663          	beq	a5,s2,21034e8 <_fwalk_reent+0x74>
 21034e0:	000b80e7          	jalr	s7
 21034e4:	00aa6a33          	or	s4,s4,a0
 21034e8:	06840413          	addi	s0,s0,104
 21034ec:	fd249ce3          	bne	s1,s2,21034c4 <_fwalk_reent+0x50>
 21034f0:	000b2b03          	lw	s6,0(s6)
 21034f4:	fc0b10e3          	bnez	s6,21034b4 <_fwalk_reent+0x40>
 21034f8:	02c12083          	lw	ra,44(sp)
 21034fc:	02812403          	lw	s0,40(sp)
 2103500:	02412483          	lw	s1,36(sp)
 2103504:	02012903          	lw	s2,32(sp)
 2103508:	01c12983          	lw	s3,28(sp)
 210350c:	01412a83          	lw	s5,20(sp)
 2103510:	01012b03          	lw	s6,16(sp)
 2103514:	00c12b83          	lw	s7,12(sp)
 2103518:	000a0513          	mv	a0,s4
 210351c:	01812a03          	lw	s4,24(sp)
 2103520:	03010113          	addi	sp,sp,48
 2103524:	00008067          	ret

02103528 <__retarget_lock_init>:
 2103528:	00008067          	ret

0210352c <__retarget_lock_init_recursive>:
 210352c:	00008067          	ret

02103530 <__retarget_lock_close>:
 2103530:	00008067          	ret

02103534 <__retarget_lock_close_recursive>:
 2103534:	00008067          	ret

02103538 <__retarget_lock_acquire>:
 2103538:	00008067          	ret

0210353c <__retarget_lock_acquire_recursive>:
 210353c:	00008067          	ret

02103540 <__retarget_lock_try_acquire>:
 2103540:	00100513          	li	a0,1
 2103544:	00008067          	ret

02103548 <__retarget_lock_try_acquire_recursive>:
 2103548:	00100513          	li	a0,1
 210354c:	00008067          	ret

02103550 <__retarget_lock_release>:
 2103550:	00008067          	ret

02103554 <__retarget_lock_release_recursive>:
 2103554:	00008067          	ret

02103558 <_malloc_r>:
 2103558:	fd010113          	addi	sp,sp,-48
 210355c:	03212023          	sw	s2,32(sp)
 2103560:	02112623          	sw	ra,44(sp)
 2103564:	02812423          	sw	s0,40(sp)
 2103568:	02912223          	sw	s1,36(sp)
 210356c:	01312e23          	sw	s3,28(sp)
 2103570:	01412c23          	sw	s4,24(sp)
 2103574:	01512a23          	sw	s5,20(sp)
 2103578:	01612823          	sw	s6,16(sp)
 210357c:	01712623          	sw	s7,12(sp)
 2103580:	01812423          	sw	s8,8(sp)
 2103584:	01912223          	sw	s9,4(sp)
 2103588:	00b58793          	addi	a5,a1,11
 210358c:	01600713          	li	a4,22
 2103590:	00050913          	mv	s2,a0
 2103594:	08f76e63          	bltu	a4,a5,2103630 <_malloc_r+0xd8>
 2103598:	01000793          	li	a5,16
 210359c:	22b7e063          	bltu	a5,a1,21037bc <_malloc_r+0x264>
 21035a0:	1c5000ef          	jal	ra,2103f64 <__malloc_lock>
 21035a4:	01000493          	li	s1,16
 21035a8:	01800793          	li	a5,24
 21035ac:	00200593          	li	a1,2
 21035b0:	fdefe997          	auipc	s3,0xfdefe
 21035b4:	4c898993          	addi	s3,s3,1224 # 1a78 <__malloc_av_>
 21035b8:	00f987b3          	add	a5,s3,a5
 21035bc:	0047a403          	lw	s0,4(a5)
 21035c0:	ff878713          	addi	a4,a5,-8
 21035c4:	30e40a63          	beq	s0,a4,21038d8 <_malloc_r+0x380>
 21035c8:	00442783          	lw	a5,4(s0)
 21035cc:	00c42683          	lw	a3,12(s0)
 21035d0:	00842603          	lw	a2,8(s0)
 21035d4:	ffc7f793          	andi	a5,a5,-4
 21035d8:	00f407b3          	add	a5,s0,a5
 21035dc:	0047a703          	lw	a4,4(a5)
 21035e0:	00d62623          	sw	a3,12(a2)
 21035e4:	00c6a423          	sw	a2,8(a3)
 21035e8:	00176713          	ori	a4,a4,1
 21035ec:	00090513          	mv	a0,s2
 21035f0:	00e7a223          	sw	a4,4(a5)
 21035f4:	179000ef          	jal	ra,2103f6c <__malloc_unlock>
 21035f8:	00840513          	addi	a0,s0,8
 21035fc:	02c12083          	lw	ra,44(sp)
 2103600:	02812403          	lw	s0,40(sp)
 2103604:	02412483          	lw	s1,36(sp)
 2103608:	02012903          	lw	s2,32(sp)
 210360c:	01c12983          	lw	s3,28(sp)
 2103610:	01812a03          	lw	s4,24(sp)
 2103614:	01412a83          	lw	s5,20(sp)
 2103618:	01012b03          	lw	s6,16(sp)
 210361c:	00c12b83          	lw	s7,12(sp)
 2103620:	00812c03          	lw	s8,8(sp)
 2103624:	00412c83          	lw	s9,4(sp)
 2103628:	03010113          	addi	sp,sp,48
 210362c:	00008067          	ret
 2103630:	ff87f493          	andi	s1,a5,-8
 2103634:	1807c463          	bltz	a5,21037bc <_malloc_r+0x264>
 2103638:	18b4e263          	bltu	s1,a1,21037bc <_malloc_r+0x264>
 210363c:	129000ef          	jal	ra,2103f64 <__malloc_lock>
 2103640:	1f700793          	li	a5,503
 2103644:	3a97f463          	bgeu	a5,s1,21039ec <_malloc_r+0x494>
 2103648:	0094d793          	srli	a5,s1,0x9
 210364c:	18078063          	beqz	a5,21037cc <_malloc_r+0x274>
 2103650:	00400713          	li	a4,4
 2103654:	2ef76a63          	bltu	a4,a5,2103948 <_malloc_r+0x3f0>
 2103658:	0064d793          	srli	a5,s1,0x6
 210365c:	03978593          	addi	a1,a5,57
 2103660:	03878513          	addi	a0,a5,56
 2103664:	00359693          	slli	a3,a1,0x3
 2103668:	fdefe997          	auipc	s3,0xfdefe
 210366c:	41098993          	addi	s3,s3,1040 # 1a78 <__malloc_av_>
 2103670:	00d986b3          	add	a3,s3,a3
 2103674:	0046a403          	lw	s0,4(a3)
 2103678:	ff868693          	addi	a3,a3,-8
 210367c:	02868663          	beq	a3,s0,21036a8 <_malloc_r+0x150>
 2103680:	00f00613          	li	a2,15
 2103684:	0100006f          	j	2103694 <_malloc_r+0x13c>
 2103688:	24075263          	bgez	a4,21038cc <_malloc_r+0x374>
 210368c:	00c42403          	lw	s0,12(s0)
 2103690:	00868c63          	beq	a3,s0,21036a8 <_malloc_r+0x150>
 2103694:	00442783          	lw	a5,4(s0)
 2103698:	ffc7f793          	andi	a5,a5,-4
 210369c:	40978733          	sub	a4,a5,s1
 21036a0:	fee654e3          	bge	a2,a4,2103688 <_malloc_r+0x130>
 21036a4:	00050593          	mv	a1,a0
 21036a8:	0109a403          	lw	s0,16(s3)
 21036ac:	fdefe897          	auipc	a7,0xfdefe
 21036b0:	3d488893          	addi	a7,a7,980 # 1a80 <__malloc_av_+0x8>
 21036b4:	1f140463          	beq	s0,a7,210389c <_malloc_r+0x344>
 21036b8:	00442783          	lw	a5,4(s0)
 21036bc:	00f00693          	li	a3,15
 21036c0:	ffc7f793          	andi	a5,a5,-4
 21036c4:	40978733          	sub	a4,a5,s1
 21036c8:	32e6c863          	blt	a3,a4,21039f8 <_malloc_r+0x4a0>
 21036cc:	0119aa23          	sw	a7,20(s3)
 21036d0:	0119a823          	sw	a7,16(s3)
 21036d4:	2e075c63          	bgez	a4,21039cc <_malloc_r+0x474>
 21036d8:	1ff00713          	li	a4,511
 21036dc:	0049a503          	lw	a0,4(s3)
 21036e0:	20f76463          	bltu	a4,a5,21038e8 <_malloc_r+0x390>
 21036e4:	ff87f713          	andi	a4,a5,-8
 21036e8:	00870713          	addi	a4,a4,8
 21036ec:	00e98733          	add	a4,s3,a4
 21036f0:	00072683          	lw	a3,0(a4)
 21036f4:	0057d613          	srli	a2,a5,0x5
 21036f8:	00100793          	li	a5,1
 21036fc:	00c797b3          	sll	a5,a5,a2
 2103700:	00f56533          	or	a0,a0,a5
 2103704:	ff870793          	addi	a5,a4,-8
 2103708:	00f42623          	sw	a5,12(s0)
 210370c:	00d42423          	sw	a3,8(s0)
 2103710:	00a9a223          	sw	a0,4(s3)
 2103714:	00872023          	sw	s0,0(a4)
 2103718:	0086a623          	sw	s0,12(a3)
 210371c:	4025d793          	srai	a5,a1,0x2
 2103720:	00100613          	li	a2,1
 2103724:	00f61633          	sll	a2,a2,a5
 2103728:	0ac56a63          	bltu	a0,a2,21037dc <_malloc_r+0x284>
 210372c:	00a677b3          	and	a5,a2,a0
 2103730:	02079463          	bnez	a5,2103758 <_malloc_r+0x200>
 2103734:	00161613          	slli	a2,a2,0x1
 2103738:	ffc5f593          	andi	a1,a1,-4
 210373c:	00a677b3          	and	a5,a2,a0
 2103740:	00458593          	addi	a1,a1,4
 2103744:	00079a63          	bnez	a5,2103758 <_malloc_r+0x200>
 2103748:	00161613          	slli	a2,a2,0x1
 210374c:	00a677b3          	and	a5,a2,a0
 2103750:	00458593          	addi	a1,a1,4
 2103754:	fe078ae3          	beqz	a5,2103748 <_malloc_r+0x1f0>
 2103758:	00f00813          	li	a6,15
 210375c:	00359313          	slli	t1,a1,0x3
 2103760:	00698333          	add	t1,s3,t1
 2103764:	00030513          	mv	a0,t1
 2103768:	00c52783          	lw	a5,12(a0)
 210376c:	00058e13          	mv	t3,a1
 2103770:	1ef50e63          	beq	a0,a5,210396c <_malloc_r+0x414>
 2103774:	0047a703          	lw	a4,4(a5)
 2103778:	00078413          	mv	s0,a5
 210377c:	00c7a783          	lw	a5,12(a5)
 2103780:	ffc77713          	andi	a4,a4,-4
 2103784:	409706b3          	sub	a3,a4,s1
 2103788:	1ed84e63          	blt	a6,a3,2103984 <_malloc_r+0x42c>
 210378c:	fe06c2e3          	bltz	a3,2103770 <_malloc_r+0x218>
 2103790:	00e40733          	add	a4,s0,a4
 2103794:	00472683          	lw	a3,4(a4)
 2103798:	00842603          	lw	a2,8(s0)
 210379c:	00090513          	mv	a0,s2
 21037a0:	0016e693          	ori	a3,a3,1
 21037a4:	00d72223          	sw	a3,4(a4)
 21037a8:	00f62623          	sw	a5,12(a2)
 21037ac:	00c7a423          	sw	a2,8(a5)
 21037b0:	7bc000ef          	jal	ra,2103f6c <__malloc_unlock>
 21037b4:	00840513          	addi	a0,s0,8
 21037b8:	e45ff06f          	j	21035fc <_malloc_r+0xa4>
 21037bc:	00c00793          	li	a5,12
 21037c0:	00f92023          	sw	a5,0(s2)
 21037c4:	00000513          	li	a0,0
 21037c8:	e35ff06f          	j	21035fc <_malloc_r+0xa4>
 21037cc:	20000693          	li	a3,512
 21037d0:	04000593          	li	a1,64
 21037d4:	03f00513          	li	a0,63
 21037d8:	e91ff06f          	j	2103668 <_malloc_r+0x110>
 21037dc:	0089a403          	lw	s0,8(s3)
 21037e0:	00442783          	lw	a5,4(s0)
 21037e4:	ffc7fb13          	andi	s6,a5,-4
 21037e8:	009b6863          	bltu	s6,s1,21037f8 <_malloc_r+0x2a0>
 21037ec:	409b0733          	sub	a4,s6,s1
 21037f0:	00f00793          	li	a5,15
 21037f4:	0ae7c863          	blt	a5,a4,21038a4 <_malloc_r+0x34c>
 21037f8:	82418c93          	addi	s9,gp,-2012 # 1ea4 <__malloc_sbrk_base>
 21037fc:	000ca703          	lw	a4,0(s9)
 2103800:	8941aa83          	lw	s5,-1900(gp) # 1f14 <__malloc_top_pad>
 2103804:	fff00793          	li	a5,-1
 2103808:	01640a33          	add	s4,s0,s6
 210380c:	01548ab3          	add	s5,s1,s5
 2103810:	3af70863          	beq	a4,a5,2103bc0 <_malloc_r+0x668>
 2103814:	000017b7          	lui	a5,0x1
 2103818:	00f78793          	addi	a5,a5,15 # 100f <JTAG_UART_DBG+0xc8f>
 210381c:	00fa8ab3          	add	s5,s5,a5
 2103820:	fffff7b7          	lui	a5,0xfffff
 2103824:	00fafab3          	and	s5,s5,a5
 2103828:	000a8593          	mv	a1,s5
 210382c:	00090513          	mv	a0,s2
 2103830:	235000ef          	jal	ra,2104264 <_sbrk_r>
 2103834:	fff00793          	li	a5,-1
 2103838:	00050b93          	mv	s7,a0
 210383c:	20f50863          	beq	a0,a5,2103a4c <_malloc_r+0x4f4>
 2103840:	21456463          	bltu	a0,s4,2103a48 <_malloc_r+0x4f0>
 2103844:	92018c13          	addi	s8,gp,-1760 # 1fa0 <__malloc_current_mallinfo>
 2103848:	000c2583          	lw	a1,0(s8)
 210384c:	00ba85b3          	add	a1,s5,a1
 2103850:	00bc2023          	sw	a1,0(s8)
 2103854:	00058713          	mv	a4,a1
 2103858:	28aa1a63          	bne	s4,a0,2103aec <_malloc_r+0x594>
 210385c:	01451793          	slli	a5,a0,0x14
 2103860:	28079663          	bnez	a5,2103aec <_malloc_r+0x594>
 2103864:	0089ab83          	lw	s7,8(s3)
 2103868:	015b07b3          	add	a5,s6,s5
 210386c:	0017e793          	ori	a5,a5,1
 2103870:	00fba223          	sw	a5,4(s7)
 2103874:	89018713          	addi	a4,gp,-1904 # 1f10 <__malloc_max_sbrked_mem>
 2103878:	00072683          	lw	a3,0(a4)
 210387c:	00b6f463          	bgeu	a3,a1,2103884 <_malloc_r+0x32c>
 2103880:	00b72023          	sw	a1,0(a4)
 2103884:	88c18713          	addi	a4,gp,-1908 # 1f0c <__malloc_max_total_mem>
 2103888:	00072683          	lw	a3,0(a4)
 210388c:	00b6f463          	bgeu	a3,a1,2103894 <_malloc_r+0x33c>
 2103890:	00b72023          	sw	a1,0(a4)
 2103894:	000b8413          	mv	s0,s7
 2103898:	1bc0006f          	j	2103a54 <_malloc_r+0x4fc>
 210389c:	0049a503          	lw	a0,4(s3)
 21038a0:	e7dff06f          	j	210371c <_malloc_r+0x1c4>
 21038a4:	0014e793          	ori	a5,s1,1
 21038a8:	00f42223          	sw	a5,4(s0)
 21038ac:	009404b3          	add	s1,s0,s1
 21038b0:	0099a423          	sw	s1,8(s3)
 21038b4:	00176713          	ori	a4,a4,1
 21038b8:	00090513          	mv	a0,s2
 21038bc:	00e4a223          	sw	a4,4(s1)
 21038c0:	6ac000ef          	jal	ra,2103f6c <__malloc_unlock>
 21038c4:	00840513          	addi	a0,s0,8
 21038c8:	d35ff06f          	j	21035fc <_malloc_r+0xa4>
 21038cc:	00c42683          	lw	a3,12(s0)
 21038d0:	00842603          	lw	a2,8(s0)
 21038d4:	d05ff06f          	j	21035d8 <_malloc_r+0x80>
 21038d8:	00c7a403          	lw	s0,12(a5) # fffff00c <__flash_rwdata_start+0xfdef7d74>
 21038dc:	00258593          	addi	a1,a1,2
 21038e0:	dc8784e3          	beq	a5,s0,21036a8 <_malloc_r+0x150>
 21038e4:	ce5ff06f          	j	21035c8 <_malloc_r+0x70>
 21038e8:	0097d713          	srli	a4,a5,0x9
 21038ec:	00400693          	li	a3,4
 21038f0:	14e6f263          	bgeu	a3,a4,2103a34 <_malloc_r+0x4dc>
 21038f4:	01400693          	li	a3,20
 21038f8:	30e6ea63          	bltu	a3,a4,2103c0c <_malloc_r+0x6b4>
 21038fc:	05c70613          	addi	a2,a4,92
 2103900:	05b70693          	addi	a3,a4,91
 2103904:	00361613          	slli	a2,a2,0x3
 2103908:	00c98633          	add	a2,s3,a2
 210390c:	00062703          	lw	a4,0(a2)
 2103910:	ff860613          	addi	a2,a2,-8
 2103914:	00e61863          	bne	a2,a4,2103924 <_malloc_r+0x3cc>
 2103918:	2b00006f          	j	2103bc8 <_malloc_r+0x670>
 210391c:	00872703          	lw	a4,8(a4)
 2103920:	00e60863          	beq	a2,a4,2103930 <_malloc_r+0x3d8>
 2103924:	00472683          	lw	a3,4(a4)
 2103928:	ffc6f693          	andi	a3,a3,-4
 210392c:	fed7e8e3          	bltu	a5,a3,210391c <_malloc_r+0x3c4>
 2103930:	00c72603          	lw	a2,12(a4)
 2103934:	00c42623          	sw	a2,12(s0)
 2103938:	00e42423          	sw	a4,8(s0)
 210393c:	00862423          	sw	s0,8(a2)
 2103940:	00872623          	sw	s0,12(a4)
 2103944:	dd9ff06f          	j	210371c <_malloc_r+0x1c4>
 2103948:	01400713          	li	a4,20
 210394c:	12f77663          	bgeu	a4,a5,2103a78 <_malloc_r+0x520>
 2103950:	05400713          	li	a4,84
 2103954:	2cf76a63          	bltu	a4,a5,2103c28 <_malloc_r+0x6d0>
 2103958:	00c4d793          	srli	a5,s1,0xc
 210395c:	06f78593          	addi	a1,a5,111
 2103960:	06e78513          	addi	a0,a5,110
 2103964:	00359693          	slli	a3,a1,0x3
 2103968:	d01ff06f          	j	2103668 <_malloc_r+0x110>
 210396c:	001e0e13          	addi	t3,t3,1
 2103970:	003e7793          	andi	a5,t3,3
 2103974:	00850513          	addi	a0,a0,8
 2103978:	10078e63          	beqz	a5,2103a94 <_malloc_r+0x53c>
 210397c:	00c52783          	lw	a5,12(a0)
 2103980:	df1ff06f          	j	2103770 <_malloc_r+0x218>
 2103984:	00842603          	lw	a2,8(s0)
 2103988:	0014e593          	ori	a1,s1,1
 210398c:	00b42223          	sw	a1,4(s0)
 2103990:	00f62623          	sw	a5,12(a2)
 2103994:	00c7a423          	sw	a2,8(a5)
 2103998:	009404b3          	add	s1,s0,s1
 210399c:	0099aa23          	sw	s1,20(s3)
 21039a0:	0099a823          	sw	s1,16(s3)
 21039a4:	0016e793          	ori	a5,a3,1
 21039a8:	0114a623          	sw	a7,12(s1)
 21039ac:	0114a423          	sw	a7,8(s1)
 21039b0:	00f4a223          	sw	a5,4(s1)
 21039b4:	00e40733          	add	a4,s0,a4
 21039b8:	00090513          	mv	a0,s2
 21039bc:	00d72023          	sw	a3,0(a4)
 21039c0:	5ac000ef          	jal	ra,2103f6c <__malloc_unlock>
 21039c4:	00840513          	addi	a0,s0,8
 21039c8:	c35ff06f          	j	21035fc <_malloc_r+0xa4>
 21039cc:	00f407b3          	add	a5,s0,a5
 21039d0:	0047a703          	lw	a4,4(a5)
 21039d4:	00090513          	mv	a0,s2
 21039d8:	00176713          	ori	a4,a4,1
 21039dc:	00e7a223          	sw	a4,4(a5)
 21039e0:	58c000ef          	jal	ra,2103f6c <__malloc_unlock>
 21039e4:	00840513          	addi	a0,s0,8
 21039e8:	c15ff06f          	j	21035fc <_malloc_r+0xa4>
 21039ec:	0034d593          	srli	a1,s1,0x3
 21039f0:	00848793          	addi	a5,s1,8
 21039f4:	bbdff06f          	j	21035b0 <_malloc_r+0x58>
 21039f8:	0014e693          	ori	a3,s1,1
 21039fc:	00d42223          	sw	a3,4(s0)
 2103a00:	009404b3          	add	s1,s0,s1
 2103a04:	0099aa23          	sw	s1,20(s3)
 2103a08:	0099a823          	sw	s1,16(s3)
 2103a0c:	00176693          	ori	a3,a4,1
 2103a10:	0114a623          	sw	a7,12(s1)
 2103a14:	0114a423          	sw	a7,8(s1)
 2103a18:	00d4a223          	sw	a3,4(s1)
 2103a1c:	00f407b3          	add	a5,s0,a5
 2103a20:	00090513          	mv	a0,s2
 2103a24:	00e7a023          	sw	a4,0(a5)
 2103a28:	544000ef          	jal	ra,2103f6c <__malloc_unlock>
 2103a2c:	00840513          	addi	a0,s0,8
 2103a30:	bcdff06f          	j	21035fc <_malloc_r+0xa4>
 2103a34:	0067d713          	srli	a4,a5,0x6
 2103a38:	03970613          	addi	a2,a4,57
 2103a3c:	03870693          	addi	a3,a4,56
 2103a40:	00361613          	slli	a2,a2,0x3
 2103a44:	ec5ff06f          	j	2103908 <_malloc_r+0x3b0>
 2103a48:	09340a63          	beq	s0,s3,2103adc <_malloc_r+0x584>
 2103a4c:	0089a403          	lw	s0,8(s3)
 2103a50:	00442783          	lw	a5,4(s0)
 2103a54:	ffc7f793          	andi	a5,a5,-4
 2103a58:	40978733          	sub	a4,a5,s1
 2103a5c:	0097e663          	bltu	a5,s1,2103a68 <_malloc_r+0x510>
 2103a60:	00f00793          	li	a5,15
 2103a64:	e4e7c0e3          	blt	a5,a4,21038a4 <_malloc_r+0x34c>
 2103a68:	00090513          	mv	a0,s2
 2103a6c:	500000ef          	jal	ra,2103f6c <__malloc_unlock>
 2103a70:	00000513          	li	a0,0
 2103a74:	b89ff06f          	j	21035fc <_malloc_r+0xa4>
 2103a78:	05c78593          	addi	a1,a5,92
 2103a7c:	05b78513          	addi	a0,a5,91
 2103a80:	00359693          	slli	a3,a1,0x3
 2103a84:	be5ff06f          	j	2103668 <_malloc_r+0x110>
 2103a88:	00832783          	lw	a5,8(t1)
 2103a8c:	fff58593          	addi	a1,a1,-1
 2103a90:	24679663          	bne	a5,t1,2103cdc <_malloc_r+0x784>
 2103a94:	0035f793          	andi	a5,a1,3
 2103a98:	ff830313          	addi	t1,t1,-8
 2103a9c:	fe0796e3          	bnez	a5,2103a88 <_malloc_r+0x530>
 2103aa0:	0049a703          	lw	a4,4(s3)
 2103aa4:	fff64793          	not	a5,a2
 2103aa8:	00e7f7b3          	and	a5,a5,a4
 2103aac:	00f9a223          	sw	a5,4(s3)
 2103ab0:	00161613          	slli	a2,a2,0x1
 2103ab4:	d2c7e4e3          	bltu	a5,a2,21037dc <_malloc_r+0x284>
 2103ab8:	d20602e3          	beqz	a2,21037dc <_malloc_r+0x284>
 2103abc:	00f67733          	and	a4,a2,a5
 2103ac0:	00071a63          	bnez	a4,2103ad4 <_malloc_r+0x57c>
 2103ac4:	00161613          	slli	a2,a2,0x1
 2103ac8:	00f67733          	and	a4,a2,a5
 2103acc:	004e0e13          	addi	t3,t3,4
 2103ad0:	fe070ae3          	beqz	a4,2103ac4 <_malloc_r+0x56c>
 2103ad4:	000e0593          	mv	a1,t3
 2103ad8:	c85ff06f          	j	210375c <_malloc_r+0x204>
 2103adc:	92018c13          	addi	s8,gp,-1760 # 1fa0 <__malloc_current_mallinfo>
 2103ae0:	000c2703          	lw	a4,0(s8)
 2103ae4:	00ea8733          	add	a4,s5,a4
 2103ae8:	00ec2023          	sw	a4,0(s8)
 2103aec:	000ca683          	lw	a3,0(s9)
 2103af0:	fff00793          	li	a5,-1
 2103af4:	14f68863          	beq	a3,a5,2103c44 <_malloc_r+0x6ec>
 2103af8:	414b87b3          	sub	a5,s7,s4
 2103afc:	00e787b3          	add	a5,a5,a4
 2103b00:	00fc2023          	sw	a5,0(s8)
 2103b04:	007bfc93          	andi	s9,s7,7
 2103b08:	0c0c8c63          	beqz	s9,2103be0 <_malloc_r+0x688>
 2103b0c:	00001737          	lui	a4,0x1
 2103b10:	419b8bb3          	sub	s7,s7,s9
 2103b14:	00870593          	addi	a1,a4,8 # 1008 <JTAG_UART_DBG+0xc88>
 2103b18:	008b8b93          	addi	s7,s7,8
 2103b1c:	419585b3          	sub	a1,a1,s9
 2103b20:	015b8ab3          	add	s5,s7,s5
 2103b24:	415585b3          	sub	a1,a1,s5
 2103b28:	fff70713          	addi	a4,a4,-1
 2103b2c:	00e5fa33          	and	s4,a1,a4
 2103b30:	000a0593          	mv	a1,s4
 2103b34:	00090513          	mv	a0,s2
 2103b38:	72c000ef          	jal	ra,2104264 <_sbrk_r>
 2103b3c:	fff00793          	li	a5,-1
 2103b40:	14f50863          	beq	a0,a5,2103c90 <_malloc_r+0x738>
 2103b44:	41750533          	sub	a0,a0,s7
 2103b48:	01450ab3          	add	s5,a0,s4
 2103b4c:	000c2703          	lw	a4,0(s8)
 2103b50:	0179a423          	sw	s7,8(s3)
 2103b54:	001ae793          	ori	a5,s5,1
 2103b58:	00ea05b3          	add	a1,s4,a4
 2103b5c:	00bc2023          	sw	a1,0(s8)
 2103b60:	00fba223          	sw	a5,4(s7)
 2103b64:	d13408e3          	beq	s0,s3,2103874 <_malloc_r+0x31c>
 2103b68:	00f00693          	li	a3,15
 2103b6c:	0f66f063          	bgeu	a3,s6,2103c4c <_malloc_r+0x6f4>
 2103b70:	00442703          	lw	a4,4(s0)
 2103b74:	ff4b0793          	addi	a5,s6,-12
 2103b78:	ff87f793          	andi	a5,a5,-8
 2103b7c:	00177713          	andi	a4,a4,1
 2103b80:	00f76733          	or	a4,a4,a5
 2103b84:	00e42223          	sw	a4,4(s0)
 2103b88:	00500613          	li	a2,5
 2103b8c:	00f40733          	add	a4,s0,a5
 2103b90:	00c72223          	sw	a2,4(a4)
 2103b94:	00c72423          	sw	a2,8(a4)
 2103b98:	00f6e663          	bltu	a3,a5,2103ba4 <_malloc_r+0x64c>
 2103b9c:	004ba783          	lw	a5,4(s7)
 2103ba0:	cd5ff06f          	j	2103874 <_malloc_r+0x31c>
 2103ba4:	00840593          	addi	a1,s0,8
 2103ba8:	00090513          	mv	a0,s2
 2103bac:	d20ff0ef          	jal	ra,21030cc <_free_r>
 2103bb0:	0089ab83          	lw	s7,8(s3)
 2103bb4:	000c2583          	lw	a1,0(s8)
 2103bb8:	004ba783          	lw	a5,4(s7)
 2103bbc:	cb9ff06f          	j	2103874 <_malloc_r+0x31c>
 2103bc0:	010a8a93          	addi	s5,s5,16
 2103bc4:	c65ff06f          	j	2103828 <_malloc_r+0x2d0>
 2103bc8:	4026d693          	srai	a3,a3,0x2
 2103bcc:	00100793          	li	a5,1
 2103bd0:	00d797b3          	sll	a5,a5,a3
 2103bd4:	00f56533          	or	a0,a0,a5
 2103bd8:	00a9a223          	sw	a0,4(s3)
 2103bdc:	d59ff06f          	j	2103934 <_malloc_r+0x3dc>
 2103be0:	015b85b3          	add	a1,s7,s5
 2103be4:	40b005b3          	neg	a1,a1
 2103be8:	01459593          	slli	a1,a1,0x14
 2103bec:	0145da13          	srli	s4,a1,0x14
 2103bf0:	000a0593          	mv	a1,s4
 2103bf4:	00090513          	mv	a0,s2
 2103bf8:	66c000ef          	jal	ra,2104264 <_sbrk_r>
 2103bfc:	fff00793          	li	a5,-1
 2103c00:	f4f512e3          	bne	a0,a5,2103b44 <_malloc_r+0x5ec>
 2103c04:	00000a13          	li	s4,0
 2103c08:	f45ff06f          	j	2103b4c <_malloc_r+0x5f4>
 2103c0c:	05400693          	li	a3,84
 2103c10:	04e6e463          	bltu	a3,a4,2103c58 <_malloc_r+0x700>
 2103c14:	00c7d713          	srli	a4,a5,0xc
 2103c18:	06f70613          	addi	a2,a4,111
 2103c1c:	06e70693          	addi	a3,a4,110
 2103c20:	00361613          	slli	a2,a2,0x3
 2103c24:	ce5ff06f          	j	2103908 <_malloc_r+0x3b0>
 2103c28:	15400713          	li	a4,340
 2103c2c:	04f76463          	bltu	a4,a5,2103c74 <_malloc_r+0x71c>
 2103c30:	00f4d793          	srli	a5,s1,0xf
 2103c34:	07878593          	addi	a1,a5,120
 2103c38:	07778513          	addi	a0,a5,119
 2103c3c:	00359693          	slli	a3,a1,0x3
 2103c40:	a29ff06f          	j	2103668 <_malloc_r+0x110>
 2103c44:	017ca023          	sw	s7,0(s9)
 2103c48:	ebdff06f          	j	2103b04 <_malloc_r+0x5ac>
 2103c4c:	00100793          	li	a5,1
 2103c50:	00fba223          	sw	a5,4(s7)
 2103c54:	e15ff06f          	j	2103a68 <_malloc_r+0x510>
 2103c58:	15400693          	li	a3,340
 2103c5c:	04e6e463          	bltu	a3,a4,2103ca4 <_malloc_r+0x74c>
 2103c60:	00f7d713          	srli	a4,a5,0xf
 2103c64:	07870613          	addi	a2,a4,120
 2103c68:	07770693          	addi	a3,a4,119
 2103c6c:	00361613          	slli	a2,a2,0x3
 2103c70:	c99ff06f          	j	2103908 <_malloc_r+0x3b0>
 2103c74:	55400713          	li	a4,1364
 2103c78:	04f76463          	bltu	a4,a5,2103cc0 <_malloc_r+0x768>
 2103c7c:	0124d793          	srli	a5,s1,0x12
 2103c80:	07d78593          	addi	a1,a5,125
 2103c84:	07c78513          	addi	a0,a5,124
 2103c88:	00359693          	slli	a3,a1,0x3
 2103c8c:	9ddff06f          	j	2103668 <_malloc_r+0x110>
 2103c90:	ff8c8c93          	addi	s9,s9,-8
 2103c94:	019a8ab3          	add	s5,s5,s9
 2103c98:	417a8ab3          	sub	s5,s5,s7
 2103c9c:	00000a13          	li	s4,0
 2103ca0:	eadff06f          	j	2103b4c <_malloc_r+0x5f4>
 2103ca4:	55400693          	li	a3,1364
 2103ca8:	02e6e463          	bltu	a3,a4,2103cd0 <_malloc_r+0x778>
 2103cac:	0127d713          	srli	a4,a5,0x12
 2103cb0:	07d70613          	addi	a2,a4,125
 2103cb4:	07c70693          	addi	a3,a4,124
 2103cb8:	00361613          	slli	a2,a2,0x3
 2103cbc:	c4dff06f          	j	2103908 <_malloc_r+0x3b0>
 2103cc0:	3f800693          	li	a3,1016
 2103cc4:	07f00593          	li	a1,127
 2103cc8:	07e00513          	li	a0,126
 2103ccc:	99dff06f          	j	2103668 <_malloc_r+0x110>
 2103cd0:	3f800613          	li	a2,1016
 2103cd4:	07e00693          	li	a3,126
 2103cd8:	c31ff06f          	j	2103908 <_malloc_r+0x3b0>
 2103cdc:	0049a783          	lw	a5,4(s3)
 2103ce0:	dd1ff06f          	j	2103ab0 <_malloc_r+0x558>

02103ce4 <memcpy>:
 2103ce4:	00b547b3          	xor	a5,a0,a1
 2103ce8:	0037f793          	andi	a5,a5,3
 2103cec:	00c508b3          	add	a7,a0,a2
 2103cf0:	06079463          	bnez	a5,2103d58 <memcpy+0x74>
 2103cf4:	00300793          	li	a5,3
 2103cf8:	06c7f063          	bgeu	a5,a2,2103d58 <memcpy+0x74>
 2103cfc:	00357793          	andi	a5,a0,3
 2103d00:	00050713          	mv	a4,a0
 2103d04:	06079a63          	bnez	a5,2103d78 <memcpy+0x94>
 2103d08:	ffc8f613          	andi	a2,a7,-4
 2103d0c:	40e606b3          	sub	a3,a2,a4
 2103d10:	02000793          	li	a5,32
 2103d14:	08d7ce63          	blt	a5,a3,2103db0 <memcpy+0xcc>
 2103d18:	00058693          	mv	a3,a1
 2103d1c:	00070793          	mv	a5,a4
 2103d20:	02c77863          	bgeu	a4,a2,2103d50 <memcpy+0x6c>
 2103d24:	0006a803          	lw	a6,0(a3)
 2103d28:	00478793          	addi	a5,a5,4
 2103d2c:	00468693          	addi	a3,a3,4
 2103d30:	ff07ae23          	sw	a6,-4(a5)
 2103d34:	fec7e8e3          	bltu	a5,a2,2103d24 <memcpy+0x40>
 2103d38:	fff60793          	addi	a5,a2,-1
 2103d3c:	40e787b3          	sub	a5,a5,a4
 2103d40:	ffc7f793          	andi	a5,a5,-4
 2103d44:	00478793          	addi	a5,a5,4
 2103d48:	00f70733          	add	a4,a4,a5
 2103d4c:	00f585b3          	add	a1,a1,a5
 2103d50:	01176863          	bltu	a4,a7,2103d60 <memcpy+0x7c>
 2103d54:	00008067          	ret
 2103d58:	00050713          	mv	a4,a0
 2103d5c:	05157863          	bgeu	a0,a7,2103dac <memcpy+0xc8>
 2103d60:	0005c783          	lbu	a5,0(a1)
 2103d64:	00170713          	addi	a4,a4,1
 2103d68:	00158593          	addi	a1,a1,1
 2103d6c:	fef70fa3          	sb	a5,-1(a4)
 2103d70:	fee898e3          	bne	a7,a4,2103d60 <memcpy+0x7c>
 2103d74:	00008067          	ret
 2103d78:	0005c683          	lbu	a3,0(a1)
 2103d7c:	00170713          	addi	a4,a4,1
 2103d80:	00377793          	andi	a5,a4,3
 2103d84:	fed70fa3          	sb	a3,-1(a4)
 2103d88:	00158593          	addi	a1,a1,1
 2103d8c:	f6078ee3          	beqz	a5,2103d08 <memcpy+0x24>
 2103d90:	0005c683          	lbu	a3,0(a1)
 2103d94:	00170713          	addi	a4,a4,1
 2103d98:	00377793          	andi	a5,a4,3
 2103d9c:	fed70fa3          	sb	a3,-1(a4)
 2103da0:	00158593          	addi	a1,a1,1
 2103da4:	fc079ae3          	bnez	a5,2103d78 <memcpy+0x94>
 2103da8:	f61ff06f          	j	2103d08 <memcpy+0x24>
 2103dac:	00008067          	ret
 2103db0:	ff010113          	addi	sp,sp,-16
 2103db4:	00812623          	sw	s0,12(sp)
 2103db8:	02000413          	li	s0,32
 2103dbc:	0005a383          	lw	t2,0(a1)
 2103dc0:	0045a283          	lw	t0,4(a1)
 2103dc4:	0085af83          	lw	t6,8(a1)
 2103dc8:	00c5af03          	lw	t5,12(a1)
 2103dcc:	0105ae83          	lw	t4,16(a1)
 2103dd0:	0145ae03          	lw	t3,20(a1)
 2103dd4:	0185a303          	lw	t1,24(a1)
 2103dd8:	01c5a803          	lw	a6,28(a1)
 2103ddc:	0205a683          	lw	a3,32(a1)
 2103de0:	02470713          	addi	a4,a4,36
 2103de4:	40e607b3          	sub	a5,a2,a4
 2103de8:	fc772e23          	sw	t2,-36(a4)
 2103dec:	fe572023          	sw	t0,-32(a4)
 2103df0:	fff72223          	sw	t6,-28(a4)
 2103df4:	ffe72423          	sw	t5,-24(a4)
 2103df8:	ffd72623          	sw	t4,-20(a4)
 2103dfc:	ffc72823          	sw	t3,-16(a4)
 2103e00:	fe672a23          	sw	t1,-12(a4)
 2103e04:	ff072c23          	sw	a6,-8(a4)
 2103e08:	fed72e23          	sw	a3,-4(a4)
 2103e0c:	02458593          	addi	a1,a1,36
 2103e10:	faf446e3          	blt	s0,a5,2103dbc <memcpy+0xd8>
 2103e14:	00058693          	mv	a3,a1
 2103e18:	00070793          	mv	a5,a4
 2103e1c:	02c77863          	bgeu	a4,a2,2103e4c <memcpy+0x168>
 2103e20:	0006a803          	lw	a6,0(a3)
 2103e24:	00478793          	addi	a5,a5,4
 2103e28:	00468693          	addi	a3,a3,4
 2103e2c:	ff07ae23          	sw	a6,-4(a5)
 2103e30:	fec7e8e3          	bltu	a5,a2,2103e20 <memcpy+0x13c>
 2103e34:	fff60793          	addi	a5,a2,-1
 2103e38:	40e787b3          	sub	a5,a5,a4
 2103e3c:	ffc7f793          	andi	a5,a5,-4
 2103e40:	00478793          	addi	a5,a5,4
 2103e44:	00f70733          	add	a4,a4,a5
 2103e48:	00f585b3          	add	a1,a1,a5
 2103e4c:	01176863          	bltu	a4,a7,2103e5c <memcpy+0x178>
 2103e50:	00c12403          	lw	s0,12(sp)
 2103e54:	01010113          	addi	sp,sp,16
 2103e58:	00008067          	ret
 2103e5c:	0005c783          	lbu	a5,0(a1)
 2103e60:	00170713          	addi	a4,a4,1
 2103e64:	00158593          	addi	a1,a1,1
 2103e68:	fef70fa3          	sb	a5,-1(a4)
 2103e6c:	fee882e3          	beq	a7,a4,2103e50 <memcpy+0x16c>
 2103e70:	0005c783          	lbu	a5,0(a1)
 2103e74:	00170713          	addi	a4,a4,1
 2103e78:	00158593          	addi	a1,a1,1
 2103e7c:	fef70fa3          	sb	a5,-1(a4)
 2103e80:	fce89ee3          	bne	a7,a4,2103e5c <memcpy+0x178>
 2103e84:	fcdff06f          	j	2103e50 <memcpy+0x16c>

02103e88 <memset>:
 2103e88:	00f00313          	li	t1,15
 2103e8c:	00050713          	mv	a4,a0
 2103e90:	02c37e63          	bgeu	t1,a2,2103ecc <memset+0x44>
 2103e94:	00f77793          	andi	a5,a4,15
 2103e98:	0a079063          	bnez	a5,2103f38 <memset+0xb0>
 2103e9c:	08059263          	bnez	a1,2103f20 <memset+0x98>
 2103ea0:	ff067693          	andi	a3,a2,-16
 2103ea4:	00f67613          	andi	a2,a2,15
 2103ea8:	00e686b3          	add	a3,a3,a4
 2103eac:	00b72023          	sw	a1,0(a4)
 2103eb0:	00b72223          	sw	a1,4(a4)
 2103eb4:	00b72423          	sw	a1,8(a4)
 2103eb8:	00b72623          	sw	a1,12(a4)
 2103ebc:	01070713          	addi	a4,a4,16
 2103ec0:	fed766e3          	bltu	a4,a3,2103eac <memset+0x24>
 2103ec4:	00061463          	bnez	a2,2103ecc <memset+0x44>
 2103ec8:	00008067          	ret
 2103ecc:	40c306b3          	sub	a3,t1,a2
 2103ed0:	00269693          	slli	a3,a3,0x2
 2103ed4:	00000297          	auipc	t0,0x0
 2103ed8:	005686b3          	add	a3,a3,t0
 2103edc:	00c68067          	jr	12(a3)
 2103ee0:	00b70723          	sb	a1,14(a4)
 2103ee4:	00b706a3          	sb	a1,13(a4)
 2103ee8:	00b70623          	sb	a1,12(a4)
 2103eec:	00b705a3          	sb	a1,11(a4)
 2103ef0:	00b70523          	sb	a1,10(a4)
 2103ef4:	00b704a3          	sb	a1,9(a4)
 2103ef8:	00b70423          	sb	a1,8(a4)
 2103efc:	00b703a3          	sb	a1,7(a4)
 2103f00:	00b70323          	sb	a1,6(a4)
 2103f04:	00b702a3          	sb	a1,5(a4)
 2103f08:	00b70223          	sb	a1,4(a4)
 2103f0c:	00b701a3          	sb	a1,3(a4)
 2103f10:	00b70123          	sb	a1,2(a4)
 2103f14:	00b700a3          	sb	a1,1(a4)
 2103f18:	00b70023          	sb	a1,0(a4)
 2103f1c:	00008067          	ret
 2103f20:	0ff5f593          	zext.b	a1,a1
 2103f24:	00859693          	slli	a3,a1,0x8
 2103f28:	00d5e5b3          	or	a1,a1,a3
 2103f2c:	01059693          	slli	a3,a1,0x10
 2103f30:	00d5e5b3          	or	a1,a1,a3
 2103f34:	f6dff06f          	j	2103ea0 <memset+0x18>
 2103f38:	00279693          	slli	a3,a5,0x2
 2103f3c:	00000297          	auipc	t0,0x0
 2103f40:	005686b3          	add	a3,a3,t0
 2103f44:	00008293          	mv	t0,ra
 2103f48:	fa0680e7          	jalr	-96(a3)
 2103f4c:	00028093          	mv	ra,t0
 2103f50:	ff078793          	addi	a5,a5,-16
 2103f54:	40f70733          	sub	a4,a4,a5
 2103f58:	00f60633          	add	a2,a2,a5
 2103f5c:	f6c378e3          	bgeu	t1,a2,2103ecc <memset+0x44>
 2103f60:	f3dff06f          	j	2103e9c <memset+0x14>

02103f64 <__malloc_lock>:
 2103f64:	87818513          	addi	a0,gp,-1928 # 1ef8 <__lock___malloc_recursive_mutex>
 2103f68:	dd4ff06f          	j	210353c <__retarget_lock_acquire_recursive>

02103f6c <__malloc_unlock>:
 2103f6c:	87818513          	addi	a0,gp,-1928 # 1ef8 <__lock___malloc_recursive_mutex>
 2103f70:	de4ff06f          	j	2103554 <__retarget_lock_release_recursive>

02103f74 <_puts_r>:
 2103f74:	fd010113          	addi	sp,sp,-48
 2103f78:	02812423          	sw	s0,40(sp)
 2103f7c:	00050413          	mv	s0,a0
 2103f80:	00058513          	mv	a0,a1
 2103f84:	02912223          	sw	s1,36(sp)
 2103f88:	02112623          	sw	ra,44(sp)
 2103f8c:	00058493          	mv	s1,a1
 2103f90:	490000ef          	jal	ra,2104420 <strlen>
 2103f94:	00150713          	addi	a4,a0,1
 2103f98:	fdefc697          	auipc	a3,0xfdefc
 2103f9c:	3b068693          	addi	a3,a3,944 # 348 <__ram_exceptions_end+0xc4>
 2103fa0:	00e12623          	sw	a4,12(sp)
 2103fa4:	03842783          	lw	a5,56(s0)
 2103fa8:	01010713          	addi	a4,sp,16
 2103fac:	00d12c23          	sw	a3,24(sp)
 2103fb0:	00e12223          	sw	a4,4(sp)
 2103fb4:	00100693          	li	a3,1
 2103fb8:	00200713          	li	a4,2
 2103fbc:	00912823          	sw	s1,16(sp)
 2103fc0:	00a12a23          	sw	a0,20(sp)
 2103fc4:	00d12e23          	sw	a3,28(sp)
 2103fc8:	00e12423          	sw	a4,8(sp)
 2103fcc:	00842483          	lw	s1,8(s0)
 2103fd0:	08078a63          	beqz	a5,2104064 <_puts_r+0xf0>
 2103fd4:	0644a703          	lw	a4,100(s1)
 2103fd8:	00c49783          	lh	a5,12(s1)
 2103fdc:	00177713          	andi	a4,a4,1
 2103fe0:	00071663          	bnez	a4,2103fec <_puts_r+0x78>
 2103fe4:	2007f713          	andi	a4,a5,512
 2103fe8:	0a070463          	beqz	a4,2104090 <_puts_r+0x11c>
 2103fec:	01279713          	slli	a4,a5,0x12
 2103ff0:	02074263          	bltz	a4,2104014 <_puts_r+0xa0>
 2103ff4:	0644a703          	lw	a4,100(s1)
 2103ff8:	000026b7          	lui	a3,0x2
 2103ffc:	00d7e7b3          	or	a5,a5,a3
 2104000:	ffffe6b7          	lui	a3,0xffffe
 2104004:	fff68693          	addi	a3,a3,-1 # ffffdfff <__flash_rwdata_start+0xfdef6d67>
 2104008:	00d77733          	and	a4,a4,a3
 210400c:	00f49623          	sh	a5,12(s1)
 2104010:	06e4a223          	sw	a4,100(s1)
 2104014:	00040513          	mv	a0,s0
 2104018:	00410613          	addi	a2,sp,4
 210401c:	00048593          	mv	a1,s1
 2104020:	1ad000ef          	jal	ra,21049cc <__sfvwrite_r>
 2104024:	0644a783          	lw	a5,100(s1)
 2104028:	00153413          	seqz	s0,a0
 210402c:	40800433          	neg	s0,s0
 2104030:	00b47413          	andi	s0,s0,11
 2104034:	0017f793          	andi	a5,a5,1
 2104038:	fff40413          	addi	s0,s0,-1
 210403c:	00079863          	bnez	a5,210404c <_puts_r+0xd8>
 2104040:	00c4d783          	lhu	a5,12(s1)
 2104044:	2007f793          	andi	a5,a5,512
 2104048:	02078463          	beqz	a5,2104070 <_puts_r+0xfc>
 210404c:	02c12083          	lw	ra,44(sp)
 2104050:	00040513          	mv	a0,s0
 2104054:	02812403          	lw	s0,40(sp)
 2104058:	02412483          	lw	s1,36(sp)
 210405c:	03010113          	addi	sp,sp,48
 2104060:	00008067          	ret
 2104064:	00040513          	mv	a0,s0
 2104068:	bc5fe0ef          	jal	ra,2102c2c <__sinit>
 210406c:	f69ff06f          	j	2103fd4 <_puts_r+0x60>
 2104070:	0584a503          	lw	a0,88(s1)
 2104074:	ce0ff0ef          	jal	ra,2103554 <__retarget_lock_release_recursive>
 2104078:	02c12083          	lw	ra,44(sp)
 210407c:	00040513          	mv	a0,s0
 2104080:	02812403          	lw	s0,40(sp)
 2104084:	02412483          	lw	s1,36(sp)
 2104088:	03010113          	addi	sp,sp,48
 210408c:	00008067          	ret
 2104090:	0584a503          	lw	a0,88(s1)
 2104094:	ca8ff0ef          	jal	ra,210353c <__retarget_lock_acquire_recursive>
 2104098:	00c49783          	lh	a5,12(s1)
 210409c:	f51ff06f          	j	2103fec <_puts_r+0x78>

021040a0 <puts>:
 21040a0:	00050593          	mv	a1,a0
 21040a4:	fdefe517          	auipc	a0,0xfdefe
 21040a8:	dfc52503          	lw	a0,-516(a0) # 1ea0 <_impure_ptr>
 21040ac:	ec9ff06f          	j	2103f74 <_puts_r>

021040b0 <cleanup_glue>:
 21040b0:	fe010113          	addi	sp,sp,-32
 21040b4:	01212823          	sw	s2,16(sp)
 21040b8:	0005a903          	lw	s2,0(a1)
 21040bc:	00812c23          	sw	s0,24(sp)
 21040c0:	00912a23          	sw	s1,20(sp)
 21040c4:	00112e23          	sw	ra,28(sp)
 21040c8:	01312623          	sw	s3,12(sp)
 21040cc:	01412423          	sw	s4,8(sp)
 21040d0:	00058413          	mv	s0,a1
 21040d4:	00050493          	mv	s1,a0
 21040d8:	04090263          	beqz	s2,210411c <cleanup_glue+0x6c>
 21040dc:	00092983          	lw	s3,0(s2)
 21040e0:	02098863          	beqz	s3,2104110 <cleanup_glue+0x60>
 21040e4:	0009aa03          	lw	s4,0(s3)
 21040e8:	000a0e63          	beqz	s4,2104104 <cleanup_glue+0x54>
 21040ec:	000a2583          	lw	a1,0(s4)
 21040f0:	00058463          	beqz	a1,21040f8 <cleanup_glue+0x48>
 21040f4:	fbdff0ef          	jal	ra,21040b0 <cleanup_glue>
 21040f8:	000a0593          	mv	a1,s4
 21040fc:	00048513          	mv	a0,s1
 2104100:	fcdfe0ef          	jal	ra,21030cc <_free_r>
 2104104:	00098593          	mv	a1,s3
 2104108:	00048513          	mv	a0,s1
 210410c:	fc1fe0ef          	jal	ra,21030cc <_free_r>
 2104110:	00090593          	mv	a1,s2
 2104114:	00048513          	mv	a0,s1
 2104118:	fb5fe0ef          	jal	ra,21030cc <_free_r>
 210411c:	00040593          	mv	a1,s0
 2104120:	01812403          	lw	s0,24(sp)
 2104124:	01c12083          	lw	ra,28(sp)
 2104128:	01012903          	lw	s2,16(sp)
 210412c:	00c12983          	lw	s3,12(sp)
 2104130:	00812a03          	lw	s4,8(sp)
 2104134:	00048513          	mv	a0,s1
 2104138:	01412483          	lw	s1,20(sp)
 210413c:	02010113          	addi	sp,sp,32
 2104140:	f8dfe06f          	j	21030cc <_free_r>

02104144 <_reclaim_reent>:
 2104144:	fdefe797          	auipc	a5,0xfdefe
 2104148:	d5c7a783          	lw	a5,-676(a5) # 1ea0 <_impure_ptr>
 210414c:	10a78a63          	beq	a5,a0,2104260 <_reclaim_reent+0x11c>
 2104150:	04c52583          	lw	a1,76(a0)
 2104154:	fe010113          	addi	sp,sp,-32
 2104158:	00912a23          	sw	s1,20(sp)
 210415c:	00112e23          	sw	ra,28(sp)
 2104160:	00812c23          	sw	s0,24(sp)
 2104164:	01212823          	sw	s2,16(sp)
 2104168:	01312623          	sw	s3,12(sp)
 210416c:	00050493          	mv	s1,a0
 2104170:	04058063          	beqz	a1,21041b0 <_reclaim_reent+0x6c>
 2104174:	00000913          	li	s2,0
 2104178:	08000993          	li	s3,128
 210417c:	012587b3          	add	a5,a1,s2
 2104180:	0007a403          	lw	s0,0(a5)
 2104184:	00040e63          	beqz	s0,21041a0 <_reclaim_reent+0x5c>
 2104188:	00040593          	mv	a1,s0
 210418c:	00042403          	lw	s0,0(s0)
 2104190:	00048513          	mv	a0,s1
 2104194:	f39fe0ef          	jal	ra,21030cc <_free_r>
 2104198:	fe0418e3          	bnez	s0,2104188 <_reclaim_reent+0x44>
 210419c:	04c4a583          	lw	a1,76(s1)
 21041a0:	00490913          	addi	s2,s2,4
 21041a4:	fd391ce3          	bne	s2,s3,210417c <_reclaim_reent+0x38>
 21041a8:	00048513          	mv	a0,s1
 21041ac:	f21fe0ef          	jal	ra,21030cc <_free_r>
 21041b0:	0404a583          	lw	a1,64(s1)
 21041b4:	00058663          	beqz	a1,21041c0 <_reclaim_reent+0x7c>
 21041b8:	00048513          	mv	a0,s1
 21041bc:	f11fe0ef          	jal	ra,21030cc <_free_r>
 21041c0:	1484a403          	lw	s0,328(s1)
 21041c4:	02040063          	beqz	s0,21041e4 <_reclaim_reent+0xa0>
 21041c8:	14c48913          	addi	s2,s1,332
 21041cc:	01240c63          	beq	s0,s2,21041e4 <_reclaim_reent+0xa0>
 21041d0:	00040593          	mv	a1,s0
 21041d4:	00042403          	lw	s0,0(s0)
 21041d8:	00048513          	mv	a0,s1
 21041dc:	ef1fe0ef          	jal	ra,21030cc <_free_r>
 21041e0:	fe8918e3          	bne	s2,s0,21041d0 <_reclaim_reent+0x8c>
 21041e4:	0544a583          	lw	a1,84(s1)
 21041e8:	00058663          	beqz	a1,21041f4 <_reclaim_reent+0xb0>
 21041ec:	00048513          	mv	a0,s1
 21041f0:	eddfe0ef          	jal	ra,21030cc <_free_r>
 21041f4:	0384a783          	lw	a5,56(s1)
 21041f8:	04078663          	beqz	a5,2104244 <_reclaim_reent+0x100>
 21041fc:	03c4a783          	lw	a5,60(s1)
 2104200:	00048513          	mv	a0,s1
 2104204:	000780e7          	jalr	a5
 2104208:	2e04a403          	lw	s0,736(s1)
 210420c:	02040c63          	beqz	s0,2104244 <_reclaim_reent+0x100>
 2104210:	00042583          	lw	a1,0(s0)
 2104214:	00058663          	beqz	a1,2104220 <_reclaim_reent+0xdc>
 2104218:	00048513          	mv	a0,s1
 210421c:	e95ff0ef          	jal	ra,21040b0 <cleanup_glue>
 2104220:	00040593          	mv	a1,s0
 2104224:	01812403          	lw	s0,24(sp)
 2104228:	01c12083          	lw	ra,28(sp)
 210422c:	01012903          	lw	s2,16(sp)
 2104230:	00c12983          	lw	s3,12(sp)
 2104234:	00048513          	mv	a0,s1
 2104238:	01412483          	lw	s1,20(sp)
 210423c:	02010113          	addi	sp,sp,32
 2104240:	e8dfe06f          	j	21030cc <_free_r>
 2104244:	01c12083          	lw	ra,28(sp)
 2104248:	01812403          	lw	s0,24(sp)
 210424c:	01412483          	lw	s1,20(sp)
 2104250:	01012903          	lw	s2,16(sp)
 2104254:	00c12983          	lw	s3,12(sp)
 2104258:	02010113          	addi	sp,sp,32
 210425c:	00008067          	ret
 2104260:	00008067          	ret

02104264 <_sbrk_r>:
 2104264:	ff010113          	addi	sp,sp,-16
 2104268:	00812423          	sw	s0,8(sp)
 210426c:	00050413          	mv	s0,a0
 2104270:	00058513          	mv	a0,a1
 2104274:	8801ac23          	sw	zero,-1896(gp) # 1f18 <errno>
 2104278:	00112623          	sw	ra,12(sp)
 210427c:	228020ef          	jal	ra,21064a4 <_sbrk>
 2104280:	fff00793          	li	a5,-1
 2104284:	00f50a63          	beq	a0,a5,2104298 <_sbrk_r+0x34>
 2104288:	00c12083          	lw	ra,12(sp)
 210428c:	00812403          	lw	s0,8(sp)
 2104290:	01010113          	addi	sp,sp,16
 2104294:	00008067          	ret
 2104298:	8981a783          	lw	a5,-1896(gp) # 1f18 <errno>
 210429c:	fe0786e3          	beqz	a5,2104288 <_sbrk_r+0x24>
 21042a0:	00c12083          	lw	ra,12(sp)
 21042a4:	00f42023          	sw	a5,0(s0)
 21042a8:	00812403          	lw	s0,8(sp)
 21042ac:	01010113          	addi	sp,sp,16
 21042b0:	00008067          	ret

021042b4 <__sread>:
 21042b4:	ff010113          	addi	sp,sp,-16
 21042b8:	00812423          	sw	s0,8(sp)
 21042bc:	00058413          	mv	s0,a1
 21042c0:	00e59583          	lh	a1,14(a1)
 21042c4:	00112623          	sw	ra,12(sp)
 21042c8:	63d000ef          	jal	ra,2105104 <_read_r>
 21042cc:	02054063          	bltz	a0,21042ec <__sread+0x38>
 21042d0:	05042783          	lw	a5,80(s0)
 21042d4:	00c12083          	lw	ra,12(sp)
 21042d8:	00a787b3          	add	a5,a5,a0
 21042dc:	04f42823          	sw	a5,80(s0)
 21042e0:	00812403          	lw	s0,8(sp)
 21042e4:	01010113          	addi	sp,sp,16
 21042e8:	00008067          	ret
 21042ec:	00c45783          	lhu	a5,12(s0)
 21042f0:	fffff737          	lui	a4,0xfffff
 21042f4:	fff70713          	addi	a4,a4,-1 # ffffefff <__flash_rwdata_start+0xfdef7d67>
 21042f8:	00e7f7b3          	and	a5,a5,a4
 21042fc:	00c12083          	lw	ra,12(sp)
 2104300:	00f41623          	sh	a5,12(s0)
 2104304:	00812403          	lw	s0,8(sp)
 2104308:	01010113          	addi	sp,sp,16
 210430c:	00008067          	ret

02104310 <__seofread>:
 2104310:	00000513          	li	a0,0
 2104314:	00008067          	ret

02104318 <__swrite>:
 2104318:	00c59783          	lh	a5,12(a1)
 210431c:	fe010113          	addi	sp,sp,-32
 2104320:	00812c23          	sw	s0,24(sp)
 2104324:	00912a23          	sw	s1,20(sp)
 2104328:	01212823          	sw	s2,16(sp)
 210432c:	01312623          	sw	s3,12(sp)
 2104330:	00112e23          	sw	ra,28(sp)
 2104334:	1007f713          	andi	a4,a5,256
 2104338:	00058413          	mv	s0,a1
 210433c:	00050493          	mv	s1,a0
 2104340:	00060913          	mv	s2,a2
 2104344:	00068993          	mv	s3,a3
 2104348:	04071063          	bnez	a4,2104388 <__swrite+0x70>
 210434c:	fffff737          	lui	a4,0xfffff
 2104350:	fff70713          	addi	a4,a4,-1 # ffffefff <__flash_rwdata_start+0xfdef7d67>
 2104354:	00e7f7b3          	and	a5,a5,a4
 2104358:	00e41583          	lh	a1,14(s0)
 210435c:	00f41623          	sh	a5,12(s0)
 2104360:	01812403          	lw	s0,24(sp)
 2104364:	01c12083          	lw	ra,28(sp)
 2104368:	00098693          	mv	a3,s3
 210436c:	00090613          	mv	a2,s2
 2104370:	00c12983          	lw	s3,12(sp)
 2104374:	01012903          	lw	s2,16(sp)
 2104378:	00048513          	mv	a0,s1
 210437c:	01412483          	lw	s1,20(sp)
 2104380:	02010113          	addi	sp,sp,32
 2104384:	1840006f          	j	2104508 <_write_r>
 2104388:	00e59583          	lh	a1,14(a1)
 210438c:	00200693          	li	a3,2
 2104390:	00000613          	li	a2,0
 2104394:	2d9000ef          	jal	ra,2104e6c <_lseek_r>
 2104398:	00c41783          	lh	a5,12(s0)
 210439c:	fb1ff06f          	j	210434c <__swrite+0x34>

021043a0 <__sseek>:
 21043a0:	ff010113          	addi	sp,sp,-16
 21043a4:	00812423          	sw	s0,8(sp)
 21043a8:	00058413          	mv	s0,a1
 21043ac:	00e59583          	lh	a1,14(a1)
 21043b0:	00112623          	sw	ra,12(sp)
 21043b4:	2b9000ef          	jal	ra,2104e6c <_lseek_r>
 21043b8:	fff00793          	li	a5,-1
 21043bc:	02f50863          	beq	a0,a5,21043ec <__sseek+0x4c>
 21043c0:	00c45783          	lhu	a5,12(s0)
 21043c4:	00001737          	lui	a4,0x1
 21043c8:	00c12083          	lw	ra,12(sp)
 21043cc:	00e7e7b3          	or	a5,a5,a4
 21043d0:	01079793          	slli	a5,a5,0x10
 21043d4:	4107d793          	srai	a5,a5,0x10
 21043d8:	04a42823          	sw	a0,80(s0)
 21043dc:	00f41623          	sh	a5,12(s0)
 21043e0:	00812403          	lw	s0,8(sp)
 21043e4:	01010113          	addi	sp,sp,16
 21043e8:	00008067          	ret
 21043ec:	00c45783          	lhu	a5,12(s0)
 21043f0:	fffff737          	lui	a4,0xfffff
 21043f4:	fff70713          	addi	a4,a4,-1 # ffffefff <__flash_rwdata_start+0xfdef7d67>
 21043f8:	00e7f7b3          	and	a5,a5,a4
 21043fc:	01079793          	slli	a5,a5,0x10
 2104400:	4107d793          	srai	a5,a5,0x10
 2104404:	00c12083          	lw	ra,12(sp)
 2104408:	00f41623          	sh	a5,12(s0)
 210440c:	00812403          	lw	s0,8(sp)
 2104410:	01010113          	addi	sp,sp,16
 2104414:	00008067          	ret

02104418 <__sclose>:
 2104418:	00e59583          	lh	a1,14(a1)
 210441c:	37c0006f          	j	2104798 <_close_r>

02104420 <strlen>:
 2104420:	00357793          	andi	a5,a0,3
 2104424:	00050713          	mv	a4,a0
 2104428:	04079c63          	bnez	a5,2104480 <strlen+0x60>
 210442c:	7f7f86b7          	lui	a3,0x7f7f8
 2104430:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__flash_rwdata_start+0x7d6f0ce7>
 2104434:	fff00593          	li	a1,-1
 2104438:	00072603          	lw	a2,0(a4)
 210443c:	00470713          	addi	a4,a4,4
 2104440:	00d677b3          	and	a5,a2,a3
 2104444:	00d787b3          	add	a5,a5,a3
 2104448:	00c7e7b3          	or	a5,a5,a2
 210444c:	00d7e7b3          	or	a5,a5,a3
 2104450:	feb784e3          	beq	a5,a1,2104438 <strlen+0x18>
 2104454:	ffc74683          	lbu	a3,-4(a4)
 2104458:	40a707b3          	sub	a5,a4,a0
 210445c:	04068463          	beqz	a3,21044a4 <strlen+0x84>
 2104460:	ffd74683          	lbu	a3,-3(a4)
 2104464:	02068c63          	beqz	a3,210449c <strlen+0x7c>
 2104468:	ffe74503          	lbu	a0,-2(a4)
 210446c:	00a03533          	snez	a0,a0
 2104470:	00f50533          	add	a0,a0,a5
 2104474:	ffe50513          	addi	a0,a0,-2
 2104478:	00008067          	ret
 210447c:	fa0688e3          	beqz	a3,210442c <strlen+0xc>
 2104480:	00074783          	lbu	a5,0(a4)
 2104484:	00170713          	addi	a4,a4,1
 2104488:	00377693          	andi	a3,a4,3
 210448c:	fe0798e3          	bnez	a5,210447c <strlen+0x5c>
 2104490:	40a70733          	sub	a4,a4,a0
 2104494:	fff70513          	addi	a0,a4,-1
 2104498:	00008067          	ret
 210449c:	ffd78513          	addi	a0,a5,-3
 21044a0:	00008067          	ret
 21044a4:	ffc78513          	addi	a0,a5,-4
 21044a8:	00008067          	ret

021044ac <close>:
 21044ac:	00050593          	mv	a1,a0
 21044b0:	fdefe517          	auipc	a0,0xfdefe
 21044b4:	9f052503          	lw	a0,-1552(a0) # 1ea0 <_impure_ptr>
 21044b8:	2e00006f          	j	2104798 <_close_r>

021044bc <open>:
 21044bc:	fc010113          	addi	sp,sp,-64
 21044c0:	02c12423          	sw	a2,40(sp)
 21044c4:	02d12623          	sw	a3,44(sp)
 21044c8:	02f12a23          	sw	a5,52(sp)
 21044cc:	00060693          	mv	a3,a2
 21044d0:	02810793          	addi	a5,sp,40
 21044d4:	00058613          	mv	a2,a1
 21044d8:	00050593          	mv	a1,a0
 21044dc:	fdefe517          	auipc	a0,0xfdefe
 21044e0:	9c452503          	lw	a0,-1596(a0) # 1ea0 <_impure_ptr>
 21044e4:	00112e23          	sw	ra,28(sp)
 21044e8:	02e12823          	sw	a4,48(sp)
 21044ec:	03012c23          	sw	a6,56(sp)
 21044f0:	03112e23          	sw	a7,60(sp)
 21044f4:	00f12623          	sw	a5,12(sp)
 21044f8:	3b1000ef          	jal	ra,21050a8 <_open_r>
 21044fc:	01c12083          	lw	ra,28(sp)
 2104500:	04010113          	addi	sp,sp,64
 2104504:	00008067          	ret

02104508 <_write_r>:
 2104508:	ff010113          	addi	sp,sp,-16
 210450c:	00058713          	mv	a4,a1
 2104510:	00812423          	sw	s0,8(sp)
 2104514:	00060593          	mv	a1,a2
 2104518:	00050413          	mv	s0,a0
 210451c:	00068613          	mv	a2,a3
 2104520:	00070513          	mv	a0,a4
 2104524:	8801ac23          	sw	zero,-1896(gp) # 1f18 <errno>
 2104528:	00112623          	sw	ra,12(sp)
 210452c:	074020ef          	jal	ra,21065a0 <_write>
 2104530:	fff00793          	li	a5,-1
 2104534:	00f50a63          	beq	a0,a5,2104548 <_write_r+0x40>
 2104538:	00c12083          	lw	ra,12(sp)
 210453c:	00812403          	lw	s0,8(sp)
 2104540:	01010113          	addi	sp,sp,16
 2104544:	00008067          	ret
 2104548:	8981a783          	lw	a5,-1896(gp) # 1f18 <errno>
 210454c:	fe0786e3          	beqz	a5,2104538 <_write_r+0x30>
 2104550:	00c12083          	lw	ra,12(sp)
 2104554:	00f42023          	sw	a5,0(s0)
 2104558:	00812403          	lw	s0,8(sp)
 210455c:	01010113          	addi	sp,sp,16
 2104560:	00008067          	ret

02104564 <__register_exitproc>:
 2104564:	fe010113          	addi	sp,sp,-32
 2104568:	01212823          	sw	s2,16(sp)
 210456c:	82c18913          	addi	s2,gp,-2004 # 1eac <__atexit_recursive_mutex>
 2104570:	00812c23          	sw	s0,24(sp)
 2104574:	00050413          	mv	s0,a0
 2104578:	00092503          	lw	a0,0(s2)
 210457c:	00912a23          	sw	s1,20(sp)
 2104580:	01312623          	sw	s3,12(sp)
 2104584:	01412423          	sw	s4,8(sp)
 2104588:	00112e23          	sw	ra,28(sp)
 210458c:	00058493          	mv	s1,a1
 2104590:	00060a13          	mv	s4,a2
 2104594:	00068993          	mv	s3,a3
 2104598:	fa5fe0ef          	jal	ra,210353c <__retarget_lock_acquire_recursive>
 210459c:	37c02703          	lw	a4,892(zero) # 37c <_global_impure_ptr>
 21045a0:	14872783          	lw	a5,328(a4)
 21045a4:	08078663          	beqz	a5,2104630 <__register_exitproc+0xcc>
 21045a8:	0047a703          	lw	a4,4(a5)
 21045ac:	01f00593          	li	a1,31
 21045b0:	00092503          	lw	a0,0(s2)
 21045b4:	08e5c463          	blt	a1,a4,210463c <__register_exitproc+0xd8>
 21045b8:	00271593          	slli	a1,a4,0x2
 21045bc:	02041e63          	bnez	s0,21045f8 <__register_exitproc+0x94>
 21045c0:	00170713          	addi	a4,a4,1
 21045c4:	00e7a223          	sw	a4,4(a5)
 21045c8:	00b787b3          	add	a5,a5,a1
 21045cc:	0097a423          	sw	s1,8(a5)
 21045d0:	f85fe0ef          	jal	ra,2103554 <__retarget_lock_release_recursive>
 21045d4:	00000513          	li	a0,0
 21045d8:	01c12083          	lw	ra,28(sp)
 21045dc:	01812403          	lw	s0,24(sp)
 21045e0:	01412483          	lw	s1,20(sp)
 21045e4:	01012903          	lw	s2,16(sp)
 21045e8:	00c12983          	lw	s3,12(sp)
 21045ec:	00812a03          	lw	s4,8(sp)
 21045f0:	02010113          	addi	sp,sp,32
 21045f4:	00008067          	ret
 21045f8:	00b78833          	add	a6,a5,a1
 21045fc:	09482423          	sw	s4,136(a6)
 2104600:	1887a683          	lw	a3,392(a5)
 2104604:	00100613          	li	a2,1
 2104608:	00e61633          	sll	a2,a2,a4
 210460c:	00c6e6b3          	or	a3,a3,a2
 2104610:	18d7a423          	sw	a3,392(a5)
 2104614:	11382423          	sw	s3,264(a6)
 2104618:	00200693          	li	a3,2
 210461c:	fad412e3          	bne	s0,a3,21045c0 <__register_exitproc+0x5c>
 2104620:	18c7a683          	lw	a3,396(a5)
 2104624:	00c6e6b3          	or	a3,a3,a2
 2104628:	18d7a623          	sw	a3,396(a5)
 210462c:	f95ff06f          	j	21045c0 <__register_exitproc+0x5c>
 2104630:	14c70793          	addi	a5,a4,332
 2104634:	14f72423          	sw	a5,328(a4)
 2104638:	f71ff06f          	j	21045a8 <__register_exitproc+0x44>
 210463c:	f19fe0ef          	jal	ra,2103554 <__retarget_lock_release_recursive>
 2104640:	fff00513          	li	a0,-1
 2104644:	f95ff06f          	j	21045d8 <__register_exitproc+0x74>

02104648 <__call_exitprocs>:
 2104648:	fd010113          	addi	sp,sp,-48
 210464c:	01712623          	sw	s7,12(sp)
 2104650:	82c18b93          	addi	s7,gp,-2004 # 1eac <__atexit_recursive_mutex>
 2104654:	01612823          	sw	s6,16(sp)
 2104658:	00050b13          	mv	s6,a0
 210465c:	000ba503          	lw	a0,0(s7)
 2104660:	03212023          	sw	s2,32(sp)
 2104664:	01312e23          	sw	s3,28(sp)
 2104668:	01412c23          	sw	s4,24(sp)
 210466c:	01512a23          	sw	s5,20(sp)
 2104670:	01812423          	sw	s8,8(sp)
 2104674:	02112623          	sw	ra,44(sp)
 2104678:	02812423          	sw	s0,40(sp)
 210467c:	02912223          	sw	s1,36(sp)
 2104680:	01912223          	sw	s9,4(sp)
 2104684:	00058c13          	mv	s8,a1
 2104688:	eb5fe0ef          	jal	ra,210353c <__retarget_lock_acquire_recursive>
 210468c:	37c02a03          	lw	s4,892(zero) # 37c <_global_impure_ptr>
 2104690:	148a2903          	lw	s2,328(s4)
 2104694:	00100a93          	li	s5,1
 2104698:	fff00993          	li	s3,-1
 210469c:	02090863          	beqz	s2,21046cc <__call_exitprocs+0x84>
 21046a0:	00492483          	lw	s1,4(s2)
 21046a4:	fff48413          	addi	s0,s1,-1
 21046a8:	02044263          	bltz	s0,21046cc <__call_exitprocs+0x84>
 21046ac:	00249493          	slli	s1,s1,0x2
 21046b0:	009904b3          	add	s1,s2,s1
 21046b4:	040c0863          	beqz	s8,2104704 <__call_exitprocs+0xbc>
 21046b8:	1044a783          	lw	a5,260(s1)
 21046bc:	05878463          	beq	a5,s8,2104704 <__call_exitprocs+0xbc>
 21046c0:	fff40413          	addi	s0,s0,-1
 21046c4:	ffc48493          	addi	s1,s1,-4
 21046c8:	ff3416e3          	bne	s0,s3,21046b4 <__call_exitprocs+0x6c>
 21046cc:	02812403          	lw	s0,40(sp)
 21046d0:	000ba503          	lw	a0,0(s7)
 21046d4:	02c12083          	lw	ra,44(sp)
 21046d8:	02412483          	lw	s1,36(sp)
 21046dc:	02012903          	lw	s2,32(sp)
 21046e0:	01c12983          	lw	s3,28(sp)
 21046e4:	01812a03          	lw	s4,24(sp)
 21046e8:	01412a83          	lw	s5,20(sp)
 21046ec:	01012b03          	lw	s6,16(sp)
 21046f0:	00c12b83          	lw	s7,12(sp)
 21046f4:	00812c03          	lw	s8,8(sp)
 21046f8:	00412c83          	lw	s9,4(sp)
 21046fc:	03010113          	addi	sp,sp,48
 2104700:	e55fe06f          	j	2103554 <__retarget_lock_release_recursive>
 2104704:	00492783          	lw	a5,4(s2)
 2104708:	0044a683          	lw	a3,4(s1)
 210470c:	fff78793          	addi	a5,a5,-1
 2104710:	04878e63          	beq	a5,s0,210476c <__call_exitprocs+0x124>
 2104714:	0004a223          	sw	zero,4(s1)
 2104718:	fa0684e3          	beqz	a3,21046c0 <__call_exitprocs+0x78>
 210471c:	18892783          	lw	a5,392(s2)
 2104720:	008a9733          	sll	a4,s5,s0
 2104724:	00492c83          	lw	s9,4(s2)
 2104728:	00f777b3          	and	a5,a4,a5
 210472c:	02079263          	bnez	a5,2104750 <__call_exitprocs+0x108>
 2104730:	000680e7          	jalr	a3
 2104734:	00492703          	lw	a4,4(s2)
 2104738:	148a2783          	lw	a5,328(s4)
 210473c:	01971463          	bne	a4,s9,2104744 <__call_exitprocs+0xfc>
 2104740:	f92780e3          	beq	a5,s2,21046c0 <__call_exitprocs+0x78>
 2104744:	f80784e3          	beqz	a5,21046cc <__call_exitprocs+0x84>
 2104748:	00078913          	mv	s2,a5
 210474c:	f55ff06f          	j	21046a0 <__call_exitprocs+0x58>
 2104750:	18c92783          	lw	a5,396(s2)
 2104754:	0844a583          	lw	a1,132(s1)
 2104758:	00f77733          	and	a4,a4,a5
 210475c:	00071c63          	bnez	a4,2104774 <__call_exitprocs+0x12c>
 2104760:	000b0513          	mv	a0,s6
 2104764:	000680e7          	jalr	a3
 2104768:	fcdff06f          	j	2104734 <__call_exitprocs+0xec>
 210476c:	00892223          	sw	s0,4(s2)
 2104770:	fa9ff06f          	j	2104718 <__call_exitprocs+0xd0>
 2104774:	00058513          	mv	a0,a1
 2104778:	000680e7          	jalr	a3
 210477c:	fb9ff06f          	j	2104734 <__call_exitprocs+0xec>

02104780 <register_fini>:
 2104780:	00000793          	li	a5,0
 2104784:	00078863          	beqz	a5,2104794 <register_fini+0x14>
 2104788:	00000517          	auipc	a0,0x0
 210478c:	1e850513          	addi	a0,a0,488 # 2104970 <__libc_fini_array>
 2104790:	f51fd06f          	j	21026e0 <atexit>
 2104794:	00008067          	ret

02104798 <_close_r>:
 2104798:	ff010113          	addi	sp,sp,-16
 210479c:	00812423          	sw	s0,8(sp)
 21047a0:	00050413          	mv	s0,a0
 21047a4:	00058513          	mv	a0,a1
 21047a8:	8801ac23          	sw	zero,-1896(gp) # 1f18 <errno>
 21047ac:	00112623          	sw	ra,12(sp)
 21047b0:	47c010ef          	jal	ra,2105c2c <_close>
 21047b4:	fff00793          	li	a5,-1
 21047b8:	00f50a63          	beq	a0,a5,21047cc <_close_r+0x34>
 21047bc:	00c12083          	lw	ra,12(sp)
 21047c0:	00812403          	lw	s0,8(sp)
 21047c4:	01010113          	addi	sp,sp,16
 21047c8:	00008067          	ret
 21047cc:	8981a783          	lw	a5,-1896(gp) # 1f18 <errno>
 21047d0:	fe0786e3          	beqz	a5,21047bc <_close_r+0x24>
 21047d4:	00c12083          	lw	ra,12(sp)
 21047d8:	00f42023          	sw	a5,0(s0)
 21047dc:	00812403          	lw	s0,8(sp)
 21047e0:	01010113          	addi	sp,sp,16
 21047e4:	00008067          	ret

021047e8 <_fclose_r>:
 21047e8:	ff010113          	addi	sp,sp,-16
 21047ec:	00112623          	sw	ra,12(sp)
 21047f0:	00812423          	sw	s0,8(sp)
 21047f4:	00912223          	sw	s1,4(sp)
 21047f8:	01212023          	sw	s2,0(sp)
 21047fc:	0c058a63          	beqz	a1,21048d0 <_fclose_r+0xe8>
 2104800:	00058413          	mv	s0,a1
 2104804:	00050493          	mv	s1,a0
 2104808:	00050663          	beqz	a0,2104814 <_fclose_r+0x2c>
 210480c:	03852783          	lw	a5,56(a0)
 2104810:	0e078063          	beqz	a5,21048f0 <_fclose_r+0x108>
 2104814:	06442783          	lw	a5,100(s0)
 2104818:	00c41703          	lh	a4,12(s0)
 210481c:	0017f793          	andi	a5,a5,1
 2104820:	0a079663          	bnez	a5,21048cc <_fclose_r+0xe4>
 2104824:	20077713          	andi	a4,a4,512
 2104828:	10070063          	beqz	a4,2104928 <_fclose_r+0x140>
 210482c:	00040593          	mv	a1,s0
 2104830:	00048513          	mv	a0,s1
 2104834:	ef1fd0ef          	jal	ra,2102724 <__sflush_r>
 2104838:	02c42783          	lw	a5,44(s0)
 210483c:	00050913          	mv	s2,a0
 2104840:	00078a63          	beqz	a5,2104854 <_fclose_r+0x6c>
 2104844:	01c42583          	lw	a1,28(s0)
 2104848:	00048513          	mv	a0,s1
 210484c:	000780e7          	jalr	a5
 2104850:	0a054c63          	bltz	a0,2104908 <_fclose_r+0x120>
 2104854:	00c45783          	lhu	a5,12(s0)
 2104858:	0807f793          	andi	a5,a5,128
 210485c:	0a079e63          	bnez	a5,2104918 <_fclose_r+0x130>
 2104860:	03042583          	lw	a1,48(s0)
 2104864:	00058c63          	beqz	a1,210487c <_fclose_r+0x94>
 2104868:	04040793          	addi	a5,s0,64
 210486c:	00f58663          	beq	a1,a5,2104878 <_fclose_r+0x90>
 2104870:	00048513          	mv	a0,s1
 2104874:	859fe0ef          	jal	ra,21030cc <_free_r>
 2104878:	02042823          	sw	zero,48(s0)
 210487c:	04442583          	lw	a1,68(s0)
 2104880:	00058863          	beqz	a1,2104890 <_fclose_r+0xa8>
 2104884:	00048513          	mv	a0,s1
 2104888:	845fe0ef          	jal	ra,21030cc <_free_r>
 210488c:	04042223          	sw	zero,68(s0)
 2104890:	e90fe0ef          	jal	ra,2102f20 <__sfp_lock_acquire>
 2104894:	06442783          	lw	a5,100(s0)
 2104898:	00041623          	sh	zero,12(s0)
 210489c:	0017f793          	andi	a5,a5,1
 21048a0:	0a078a63          	beqz	a5,2104954 <_fclose_r+0x16c>
 21048a4:	05842503          	lw	a0,88(s0)
 21048a8:	c8dfe0ef          	jal	ra,2103534 <__retarget_lock_close_recursive>
 21048ac:	e7cfe0ef          	jal	ra,2102f28 <__sfp_lock_release>
 21048b0:	00c12083          	lw	ra,12(sp)
 21048b4:	00812403          	lw	s0,8(sp)
 21048b8:	00412483          	lw	s1,4(sp)
 21048bc:	00090513          	mv	a0,s2
 21048c0:	00012903          	lw	s2,0(sp)
 21048c4:	01010113          	addi	sp,sp,16
 21048c8:	00008067          	ret
 21048cc:	f60710e3          	bnez	a4,210482c <_fclose_r+0x44>
 21048d0:	00000913          	li	s2,0
 21048d4:	00c12083          	lw	ra,12(sp)
 21048d8:	00812403          	lw	s0,8(sp)
 21048dc:	00412483          	lw	s1,4(sp)
 21048e0:	00090513          	mv	a0,s2
 21048e4:	00012903          	lw	s2,0(sp)
 21048e8:	01010113          	addi	sp,sp,16
 21048ec:	00008067          	ret
 21048f0:	b3cfe0ef          	jal	ra,2102c2c <__sinit>
 21048f4:	06442783          	lw	a5,100(s0)
 21048f8:	00c41703          	lh	a4,12(s0)
 21048fc:	0017f793          	andi	a5,a5,1
 2104900:	fc0796e3          	bnez	a5,21048cc <_fclose_r+0xe4>
 2104904:	f21ff06f          	j	2104824 <_fclose_r+0x3c>
 2104908:	00c45783          	lhu	a5,12(s0)
 210490c:	fff00913          	li	s2,-1
 2104910:	0807f793          	andi	a5,a5,128
 2104914:	f40786e3          	beqz	a5,2104860 <_fclose_r+0x78>
 2104918:	01042583          	lw	a1,16(s0)
 210491c:	00048513          	mv	a0,s1
 2104920:	facfe0ef          	jal	ra,21030cc <_free_r>
 2104924:	f3dff06f          	j	2104860 <_fclose_r+0x78>
 2104928:	05842503          	lw	a0,88(s0)
 210492c:	c11fe0ef          	jal	ra,210353c <__retarget_lock_acquire_recursive>
 2104930:	00c41783          	lh	a5,12(s0)
 2104934:	ee079ce3          	bnez	a5,210482c <_fclose_r+0x44>
 2104938:	06442783          	lw	a5,100(s0)
 210493c:	0017f793          	andi	a5,a5,1
 2104940:	f80798e3          	bnez	a5,21048d0 <_fclose_r+0xe8>
 2104944:	05842503          	lw	a0,88(s0)
 2104948:	00000913          	li	s2,0
 210494c:	c09fe0ef          	jal	ra,2103554 <__retarget_lock_release_recursive>
 2104950:	f85ff06f          	j	21048d4 <_fclose_r+0xec>
 2104954:	05842503          	lw	a0,88(s0)
 2104958:	bfdfe0ef          	jal	ra,2103554 <__retarget_lock_release_recursive>
 210495c:	f49ff06f          	j	21048a4 <_fclose_r+0xbc>

02104960 <fclose>:
 2104960:	00050593          	mv	a1,a0
 2104964:	fdefd517          	auipc	a0,0xfdefd
 2104968:	53c52503          	lw	a0,1340(a0) # 1ea0 <_impure_ptr>
 210496c:	e7dff06f          	j	21047e8 <_fclose_r>

02104970 <__libc_fini_array>:
 2104970:	ff010113          	addi	sp,sp,-16
 2104974:	00812423          	sw	s0,8(sp)
 2104978:	00003797          	auipc	a5,0x3
 210497c:	82478793          	addi	a5,a5,-2012 # 210719c <__fini_array_end>
 2104980:	00003417          	auipc	s0,0x3
 2104984:	81c40413          	addi	s0,s0,-2020 # 210719c <__fini_array_end>
 2104988:	40f40433          	sub	s0,s0,a5
 210498c:	00912223          	sw	s1,4(sp)
 2104990:	00112623          	sw	ra,12(sp)
 2104994:	40245493          	srai	s1,s0,0x2
 2104998:	02048063          	beqz	s1,21049b8 <__libc_fini_array+0x48>
 210499c:	ffc40413          	addi	s0,s0,-4
 21049a0:	00f40433          	add	s0,s0,a5
 21049a4:	00042783          	lw	a5,0(s0)
 21049a8:	fff48493          	addi	s1,s1,-1
 21049ac:	ffc40413          	addi	s0,s0,-4
 21049b0:	000780e7          	jalr	a5
 21049b4:	fe0498e3          	bnez	s1,21049a4 <__libc_fini_array+0x34>
 21049b8:	00c12083          	lw	ra,12(sp)
 21049bc:	00812403          	lw	s0,8(sp)
 21049c0:	00412483          	lw	s1,4(sp)
 21049c4:	01010113          	addi	sp,sp,16
 21049c8:	00008067          	ret

021049cc <__sfvwrite_r>:
 21049cc:	00862783          	lw	a5,8(a2)
 21049d0:	30078a63          	beqz	a5,2104ce4 <__sfvwrite_r+0x318>
 21049d4:	00c59683          	lh	a3,12(a1)
 21049d8:	fd010113          	addi	sp,sp,-48
 21049dc:	02812423          	sw	s0,40(sp)
 21049e0:	01412c23          	sw	s4,24(sp)
 21049e4:	01612823          	sw	s6,16(sp)
 21049e8:	02112623          	sw	ra,44(sp)
 21049ec:	02912223          	sw	s1,36(sp)
 21049f0:	03212023          	sw	s2,32(sp)
 21049f4:	01312e23          	sw	s3,28(sp)
 21049f8:	01512a23          	sw	s5,20(sp)
 21049fc:	01712623          	sw	s7,12(sp)
 2104a00:	01812423          	sw	s8,8(sp)
 2104a04:	01912223          	sw	s9,4(sp)
 2104a08:	0086f793          	andi	a5,a3,8
 2104a0c:	00060b13          	mv	s6,a2
 2104a10:	00050a13          	mv	s4,a0
 2104a14:	00058413          	mv	s0,a1
 2104a18:	08078663          	beqz	a5,2104aa4 <__sfvwrite_r+0xd8>
 2104a1c:	0105a783          	lw	a5,16(a1)
 2104a20:	08078263          	beqz	a5,2104aa4 <__sfvwrite_r+0xd8>
 2104a24:	0026f793          	andi	a5,a3,2
 2104a28:	000b2483          	lw	s1,0(s6)
 2104a2c:	08078c63          	beqz	a5,2104ac4 <__sfvwrite_r+0xf8>
 2104a30:	02442783          	lw	a5,36(s0)
 2104a34:	01c42583          	lw	a1,28(s0)
 2104a38:	80000ab7          	lui	s5,0x80000
 2104a3c:	00000993          	li	s3,0
 2104a40:	00000913          	li	s2,0
 2104a44:	c00aca93          	xori	s5,s5,-1024
 2104a48:	00098613          	mv	a2,s3
 2104a4c:	000a0513          	mv	a0,s4
 2104a50:	04090263          	beqz	s2,2104a94 <__sfvwrite_r+0xc8>
 2104a54:	00090693          	mv	a3,s2
 2104a58:	012af463          	bgeu	s5,s2,2104a60 <__sfvwrite_r+0x94>
 2104a5c:	000a8693          	mv	a3,s5
 2104a60:	000780e7          	jalr	a5
 2104a64:	26a05663          	blez	a0,2104cd0 <__sfvwrite_r+0x304>
 2104a68:	008b2783          	lw	a5,8(s6)
 2104a6c:	00a989b3          	add	s3,s3,a0
 2104a70:	40a90933          	sub	s2,s2,a0
 2104a74:	40a787b3          	sub	a5,a5,a0
 2104a78:	00fb2423          	sw	a5,8(s6)
 2104a7c:	20078663          	beqz	a5,2104c88 <__sfvwrite_r+0x2bc>
 2104a80:	02442783          	lw	a5,36(s0)
 2104a84:	01c42583          	lw	a1,28(s0)
 2104a88:	00098613          	mv	a2,s3
 2104a8c:	000a0513          	mv	a0,s4
 2104a90:	fc0912e3          	bnez	s2,2104a54 <__sfvwrite_r+0x88>
 2104a94:	0004a983          	lw	s3,0(s1)
 2104a98:	0044a903          	lw	s2,4(s1)
 2104a9c:	00848493          	addi	s1,s1,8
 2104aa0:	fa9ff06f          	j	2104a48 <__sfvwrite_r+0x7c>
 2104aa4:	00040593          	mv	a1,s0
 2104aa8:	000a0513          	mv	a0,s4
 2104aac:	40d000ef          	jal	ra,21056b8 <__swsetup_r>
 2104ab0:	22051663          	bnez	a0,2104cdc <__sfvwrite_r+0x310>
 2104ab4:	00c41683          	lh	a3,12(s0)
 2104ab8:	000b2483          	lw	s1,0(s6)
 2104abc:	0026f793          	andi	a5,a3,2
 2104ac0:	f60798e3          	bnez	a5,2104a30 <__sfvwrite_r+0x64>
 2104ac4:	0016f793          	andi	a5,a3,1
 2104ac8:	12079c63          	bnez	a5,2104c00 <__sfvwrite_r+0x234>
 2104acc:	00042783          	lw	a5,0(s0)
 2104ad0:	00842703          	lw	a4,8(s0)
 2104ad4:	80000ab7          	lui	s5,0x80000
 2104ad8:	00000b93          	li	s7,0
 2104adc:	00000993          	li	s3,0
 2104ae0:	fffaca93          	not	s5,s5
 2104ae4:	00078513          	mv	a0,a5
 2104ae8:	00070c13          	mv	s8,a4
 2104aec:	10098263          	beqz	s3,2104bf0 <__sfvwrite_r+0x224>
 2104af0:	2006f613          	andi	a2,a3,512
 2104af4:	24060c63          	beqz	a2,2104d4c <__sfvwrite_r+0x380>
 2104af8:	00070c93          	mv	s9,a4
 2104afc:	2ee9e663          	bltu	s3,a4,2104de8 <__sfvwrite_r+0x41c>
 2104b00:	4806f713          	andi	a4,a3,1152
 2104b04:	08070a63          	beqz	a4,2104b98 <__sfvwrite_r+0x1cc>
 2104b08:	01442603          	lw	a2,20(s0)
 2104b0c:	01042583          	lw	a1,16(s0)
 2104b10:	00161713          	slli	a4,a2,0x1
 2104b14:	00c70733          	add	a4,a4,a2
 2104b18:	40b78933          	sub	s2,a5,a1
 2104b1c:	01f75c13          	srli	s8,a4,0x1f
 2104b20:	00ec0c33          	add	s8,s8,a4
 2104b24:	00190793          	addi	a5,s2,1
 2104b28:	401c5c13          	srai	s8,s8,0x1
 2104b2c:	013787b3          	add	a5,a5,s3
 2104b30:	000c0613          	mv	a2,s8
 2104b34:	00fc7663          	bgeu	s8,a5,2104b40 <__sfvwrite_r+0x174>
 2104b38:	00078c13          	mv	s8,a5
 2104b3c:	00078613          	mv	a2,a5
 2104b40:	4006f693          	andi	a3,a3,1024
 2104b44:	2c068e63          	beqz	a3,2104e20 <__sfvwrite_r+0x454>
 2104b48:	00060593          	mv	a1,a2
 2104b4c:	000a0513          	mv	a0,s4
 2104b50:	a09fe0ef          	jal	ra,2103558 <_malloc_r>
 2104b54:	00050c93          	mv	s9,a0
 2104b58:	30050263          	beqz	a0,2104e5c <__sfvwrite_r+0x490>
 2104b5c:	01042583          	lw	a1,16(s0)
 2104b60:	00090613          	mv	a2,s2
 2104b64:	980ff0ef          	jal	ra,2103ce4 <memcpy>
 2104b68:	00c45783          	lhu	a5,12(s0)
 2104b6c:	b7f7f793          	andi	a5,a5,-1153
 2104b70:	0807e793          	ori	a5,a5,128
 2104b74:	00f41623          	sh	a5,12(s0)
 2104b78:	012c8533          	add	a0,s9,s2
 2104b7c:	412c07b3          	sub	a5,s8,s2
 2104b80:	01942823          	sw	s9,16(s0)
 2104b84:	01842a23          	sw	s8,20(s0)
 2104b88:	00a42023          	sw	a0,0(s0)
 2104b8c:	00098c13          	mv	s8,s3
 2104b90:	00f42423          	sw	a5,8(s0)
 2104b94:	00098c93          	mv	s9,s3
 2104b98:	000c8613          	mv	a2,s9
 2104b9c:	000b8593          	mv	a1,s7
 2104ba0:	3ec000ef          	jal	ra,2104f8c <memmove>
 2104ba4:	00842703          	lw	a4,8(s0)
 2104ba8:	00042783          	lw	a5,0(s0)
 2104bac:	00098913          	mv	s2,s3
 2104bb0:	41870733          	sub	a4,a4,s8
 2104bb4:	019787b3          	add	a5,a5,s9
 2104bb8:	00e42423          	sw	a4,8(s0)
 2104bbc:	00f42023          	sw	a5,0(s0)
 2104bc0:	00000993          	li	s3,0
 2104bc4:	008b2783          	lw	a5,8(s6)
 2104bc8:	012b8bb3          	add	s7,s7,s2
 2104bcc:	412787b3          	sub	a5,a5,s2
 2104bd0:	00fb2423          	sw	a5,8(s6)
 2104bd4:	0a078a63          	beqz	a5,2104c88 <__sfvwrite_r+0x2bc>
 2104bd8:	00042783          	lw	a5,0(s0)
 2104bdc:	00842703          	lw	a4,8(s0)
 2104be0:	00c41683          	lh	a3,12(s0)
 2104be4:	00078513          	mv	a0,a5
 2104be8:	00070c13          	mv	s8,a4
 2104bec:	f00992e3          	bnez	s3,2104af0 <__sfvwrite_r+0x124>
 2104bf0:	0004ab83          	lw	s7,0(s1)
 2104bf4:	0044a983          	lw	s3,4(s1)
 2104bf8:	00848493          	addi	s1,s1,8
 2104bfc:	ee9ff06f          	j	2104ae4 <__sfvwrite_r+0x118>
 2104c00:	00000a93          	li	s5,0
 2104c04:	00000513          	li	a0,0
 2104c08:	00000c13          	li	s8,0
 2104c0c:	00000993          	li	s3,0
 2104c10:	0c098e63          	beqz	s3,2104cec <__sfvwrite_r+0x320>
 2104c14:	0e050663          	beqz	a0,2104d00 <__sfvwrite_r+0x334>
 2104c18:	000a8793          	mv	a5,s5
 2104c1c:	00098b93          	mv	s7,s3
 2104c20:	0137f463          	bgeu	a5,s3,2104c28 <__sfvwrite_r+0x25c>
 2104c24:	00078b93          	mv	s7,a5
 2104c28:	00042503          	lw	a0,0(s0)
 2104c2c:	01042783          	lw	a5,16(s0)
 2104c30:	00842903          	lw	s2,8(s0)
 2104c34:	01442683          	lw	a3,20(s0)
 2104c38:	00a7f663          	bgeu	a5,a0,2104c44 <__sfvwrite_r+0x278>
 2104c3c:	00d90933          	add	s2,s2,a3
 2104c40:	0f794063          	blt	s2,s7,2104d20 <__sfvwrite_r+0x354>
 2104c44:	1adbc863          	blt	s7,a3,2104df4 <__sfvwrite_r+0x428>
 2104c48:	02442783          	lw	a5,36(s0)
 2104c4c:	01c42583          	lw	a1,28(s0)
 2104c50:	000c0613          	mv	a2,s8
 2104c54:	000a0513          	mv	a0,s4
 2104c58:	000780e7          	jalr	a5
 2104c5c:	00050913          	mv	s2,a0
 2104c60:	06a05863          	blez	a0,2104cd0 <__sfvwrite_r+0x304>
 2104c64:	412a8ab3          	sub	s5,s5,s2
 2104c68:	00100513          	li	a0,1
 2104c6c:	040a8a63          	beqz	s5,2104cc0 <__sfvwrite_r+0x2f4>
 2104c70:	008b2783          	lw	a5,8(s6)
 2104c74:	012c0c33          	add	s8,s8,s2
 2104c78:	412989b3          	sub	s3,s3,s2
 2104c7c:	412787b3          	sub	a5,a5,s2
 2104c80:	00fb2423          	sw	a5,8(s6)
 2104c84:	f80796e3          	bnez	a5,2104c10 <__sfvwrite_r+0x244>
 2104c88:	00000513          	li	a0,0
 2104c8c:	02c12083          	lw	ra,44(sp)
 2104c90:	02812403          	lw	s0,40(sp)
 2104c94:	02412483          	lw	s1,36(sp)
 2104c98:	02012903          	lw	s2,32(sp)
 2104c9c:	01c12983          	lw	s3,28(sp)
 2104ca0:	01812a03          	lw	s4,24(sp)
 2104ca4:	01412a83          	lw	s5,20(sp)
 2104ca8:	01012b03          	lw	s6,16(sp)
 2104cac:	00c12b83          	lw	s7,12(sp)
 2104cb0:	00812c03          	lw	s8,8(sp)
 2104cb4:	00412c83          	lw	s9,4(sp)
 2104cb8:	03010113          	addi	sp,sp,48
 2104cbc:	00008067          	ret
 2104cc0:	00040593          	mv	a1,s0
 2104cc4:	000a0513          	mv	a0,s4
 2104cc8:	ca9fd0ef          	jal	ra,2102970 <_fflush_r>
 2104ccc:	fa0502e3          	beqz	a0,2104c70 <__sfvwrite_r+0x2a4>
 2104cd0:	00c41783          	lh	a5,12(s0)
 2104cd4:	0407e793          	ori	a5,a5,64
 2104cd8:	00f41623          	sh	a5,12(s0)
 2104cdc:	fff00513          	li	a0,-1
 2104ce0:	fadff06f          	j	2104c8c <__sfvwrite_r+0x2c0>
 2104ce4:	00000513          	li	a0,0
 2104ce8:	00008067          	ret
 2104cec:	0044a983          	lw	s3,4(s1)
 2104cf0:	00048793          	mv	a5,s1
 2104cf4:	00848493          	addi	s1,s1,8
 2104cf8:	fe098ae3          	beqz	s3,2104cec <__sfvwrite_r+0x320>
 2104cfc:	0007ac03          	lw	s8,0(a5)
 2104d00:	00098613          	mv	a2,s3
 2104d04:	00a00593          	li	a1,10
 2104d08:	000c0513          	mv	a0,s8
 2104d0c:	1bc000ef          	jal	ra,2104ec8 <memchr>
 2104d10:	14050063          	beqz	a0,2104e50 <__sfvwrite_r+0x484>
 2104d14:	00150513          	addi	a0,a0,1
 2104d18:	41850ab3          	sub	s5,a0,s8
 2104d1c:	efdff06f          	j	2104c18 <__sfvwrite_r+0x24c>
 2104d20:	000c0593          	mv	a1,s8
 2104d24:	00090613          	mv	a2,s2
 2104d28:	264000ef          	jal	ra,2104f8c <memmove>
 2104d2c:	00042783          	lw	a5,0(s0)
 2104d30:	00040593          	mv	a1,s0
 2104d34:	000a0513          	mv	a0,s4
 2104d38:	012787b3          	add	a5,a5,s2
 2104d3c:	00f42023          	sw	a5,0(s0)
 2104d40:	c31fd0ef          	jal	ra,2102970 <_fflush_r>
 2104d44:	f20500e3          	beqz	a0,2104c64 <__sfvwrite_r+0x298>
 2104d48:	f89ff06f          	j	2104cd0 <__sfvwrite_r+0x304>
 2104d4c:	01042683          	lw	a3,16(s0)
 2104d50:	04f6e463          	bltu	a3,a5,2104d98 <__sfvwrite_r+0x3cc>
 2104d54:	01442583          	lw	a1,20(s0)
 2104d58:	04b9e063          	bltu	s3,a1,2104d98 <__sfvwrite_r+0x3cc>
 2104d5c:	00098913          	mv	s2,s3
 2104d60:	013af463          	bgeu	s5,s3,2104d68 <__sfvwrite_r+0x39c>
 2104d64:	000a8913          	mv	s2,s5
 2104d68:	00090513          	mv	a0,s2
 2104d6c:	649000ef          	jal	ra,2105bb4 <__modsi3>
 2104d70:	02442783          	lw	a5,36(s0)
 2104d74:	01c42583          	lw	a1,28(s0)
 2104d78:	40a906b3          	sub	a3,s2,a0
 2104d7c:	000b8613          	mv	a2,s7
 2104d80:	000a0513          	mv	a0,s4
 2104d84:	000780e7          	jalr	a5
 2104d88:	00050913          	mv	s2,a0
 2104d8c:	f4a052e3          	blez	a0,2104cd0 <__sfvwrite_r+0x304>
 2104d90:	412989b3          	sub	s3,s3,s2
 2104d94:	e31ff06f          	j	2104bc4 <__sfvwrite_r+0x1f8>
 2104d98:	00070913          	mv	s2,a4
 2104d9c:	00e9f463          	bgeu	s3,a4,2104da4 <__sfvwrite_r+0x3d8>
 2104da0:	00098913          	mv	s2,s3
 2104da4:	00078513          	mv	a0,a5
 2104da8:	00090613          	mv	a2,s2
 2104dac:	000b8593          	mv	a1,s7
 2104db0:	1dc000ef          	jal	ra,2104f8c <memmove>
 2104db4:	00842703          	lw	a4,8(s0)
 2104db8:	00042783          	lw	a5,0(s0)
 2104dbc:	41270733          	sub	a4,a4,s2
 2104dc0:	012787b3          	add	a5,a5,s2
 2104dc4:	00e42423          	sw	a4,8(s0)
 2104dc8:	00f42023          	sw	a5,0(s0)
 2104dcc:	fc0712e3          	bnez	a4,2104d90 <__sfvwrite_r+0x3c4>
 2104dd0:	00040593          	mv	a1,s0
 2104dd4:	000a0513          	mv	a0,s4
 2104dd8:	b99fd0ef          	jal	ra,2102970 <_fflush_r>
 2104ddc:	ee051ae3          	bnez	a0,2104cd0 <__sfvwrite_r+0x304>
 2104de0:	412989b3          	sub	s3,s3,s2
 2104de4:	de1ff06f          	j	2104bc4 <__sfvwrite_r+0x1f8>
 2104de8:	00098c13          	mv	s8,s3
 2104dec:	00098c93          	mv	s9,s3
 2104df0:	da9ff06f          	j	2104b98 <__sfvwrite_r+0x1cc>
 2104df4:	000b8613          	mv	a2,s7
 2104df8:	000c0593          	mv	a1,s8
 2104dfc:	190000ef          	jal	ra,2104f8c <memmove>
 2104e00:	00842703          	lw	a4,8(s0)
 2104e04:	00042783          	lw	a5,0(s0)
 2104e08:	000b8913          	mv	s2,s7
 2104e0c:	41770733          	sub	a4,a4,s7
 2104e10:	017787b3          	add	a5,a5,s7
 2104e14:	00e42423          	sw	a4,8(s0)
 2104e18:	00f42023          	sw	a5,0(s0)
 2104e1c:	e49ff06f          	j	2104c64 <__sfvwrite_r+0x298>
 2104e20:	000a0513          	mv	a0,s4
 2104e24:	33c000ef          	jal	ra,2105160 <_realloc_r>
 2104e28:	00050c93          	mv	s9,a0
 2104e2c:	d40516e3          	bnez	a0,2104b78 <__sfvwrite_r+0x1ac>
 2104e30:	01042583          	lw	a1,16(s0)
 2104e34:	000a0513          	mv	a0,s4
 2104e38:	a94fe0ef          	jal	ra,21030cc <_free_r>
 2104e3c:	00c41783          	lh	a5,12(s0)
 2104e40:	00c00713          	li	a4,12
 2104e44:	00ea2023          	sw	a4,0(s4)
 2104e48:	f7f7f793          	andi	a5,a5,-129
 2104e4c:	e89ff06f          	j	2104cd4 <__sfvwrite_r+0x308>
 2104e50:	00198793          	addi	a5,s3,1
 2104e54:	00078a93          	mv	s5,a5
 2104e58:	dc5ff06f          	j	2104c1c <__sfvwrite_r+0x250>
 2104e5c:	00c00713          	li	a4,12
 2104e60:	00c41783          	lh	a5,12(s0)
 2104e64:	00ea2023          	sw	a4,0(s4)
 2104e68:	e6dff06f          	j	2104cd4 <__sfvwrite_r+0x308>

02104e6c <_lseek_r>:
 2104e6c:	ff010113          	addi	sp,sp,-16
 2104e70:	00058713          	mv	a4,a1
 2104e74:	00812423          	sw	s0,8(sp)
 2104e78:	00060593          	mv	a1,a2
 2104e7c:	00050413          	mv	s0,a0
 2104e80:	00068613          	mv	a2,a3
 2104e84:	00070513          	mv	a0,a4
 2104e88:	8801ac23          	sw	zero,-1896(gp) # 1f18 <errno>
 2104e8c:	00112623          	sw	ra,12(sp)
 2104e90:	148010ef          	jal	ra,2105fd8 <_lseek>
 2104e94:	fff00793          	li	a5,-1
 2104e98:	00f50a63          	beq	a0,a5,2104eac <_lseek_r+0x40>
 2104e9c:	00c12083          	lw	ra,12(sp)
 2104ea0:	00812403          	lw	s0,8(sp)
 2104ea4:	01010113          	addi	sp,sp,16
 2104ea8:	00008067          	ret
 2104eac:	8981a783          	lw	a5,-1896(gp) # 1f18 <errno>
 2104eb0:	fe0786e3          	beqz	a5,2104e9c <_lseek_r+0x30>
 2104eb4:	00c12083          	lw	ra,12(sp)
 2104eb8:	00f42023          	sw	a5,0(s0)
 2104ebc:	00812403          	lw	s0,8(sp)
 2104ec0:	01010113          	addi	sp,sp,16
 2104ec4:	00008067          	ret

02104ec8 <memchr>:
 2104ec8:	00357793          	andi	a5,a0,3
 2104ecc:	0ff5f693          	zext.b	a3,a1
 2104ed0:	02078e63          	beqz	a5,2104f0c <memchr+0x44>
 2104ed4:	fff60793          	addi	a5,a2,-1
 2104ed8:	02060663          	beqz	a2,2104f04 <memchr+0x3c>
 2104edc:	fff00613          	li	a2,-1
 2104ee0:	0180006f          	j	2104ef8 <memchr+0x30>
 2104ee4:	00150513          	addi	a0,a0,1
 2104ee8:	00357713          	andi	a4,a0,3
 2104eec:	02070263          	beqz	a4,2104f10 <memchr+0x48>
 2104ef0:	fff78793          	addi	a5,a5,-1
 2104ef4:	00c78863          	beq	a5,a2,2104f04 <memchr+0x3c>
 2104ef8:	00054703          	lbu	a4,0(a0)
 2104efc:	fed714e3          	bne	a4,a3,2104ee4 <memchr+0x1c>
 2104f00:	00008067          	ret
 2104f04:	00000513          	li	a0,0
 2104f08:	00008067          	ret
 2104f0c:	00060793          	mv	a5,a2
 2104f10:	00300713          	li	a4,3
 2104f14:	04f77c63          	bgeu	a4,a5,2104f6c <memchr+0xa4>
 2104f18:	0ff5f593          	zext.b	a1,a1
 2104f1c:	00859713          	slli	a4,a1,0x8
 2104f20:	00b705b3          	add	a1,a4,a1
 2104f24:	01059713          	slli	a4,a1,0x10
 2104f28:	feff08b7          	lui	a7,0xfeff0
 2104f2c:	80808837          	lui	a6,0x80808
 2104f30:	00e585b3          	add	a1,a1,a4
 2104f34:	eff88893          	addi	a7,a7,-257 # fefefeff <__flash_rwdata_start+0xfcee8c67>
 2104f38:	08080813          	addi	a6,a6,128 # 80808080 <__flash_rwdata_start+0x7e700de8>
 2104f3c:	00300313          	li	t1,3
 2104f40:	0100006f          	j	2104f50 <memchr+0x88>
 2104f44:	ffc78793          	addi	a5,a5,-4
 2104f48:	00450513          	addi	a0,a0,4
 2104f4c:	02f37063          	bgeu	t1,a5,2104f6c <memchr+0xa4>
 2104f50:	00052703          	lw	a4,0(a0)
 2104f54:	00e5c733          	xor	a4,a1,a4
 2104f58:	01170633          	add	a2,a4,a7
 2104f5c:	fff74713          	not	a4,a4
 2104f60:	00e67733          	and	a4,a2,a4
 2104f64:	01077733          	and	a4,a4,a6
 2104f68:	fc070ee3          	beqz	a4,2104f44 <memchr+0x7c>
 2104f6c:	00f50733          	add	a4,a0,a5
 2104f70:	00079863          	bnez	a5,2104f80 <memchr+0xb8>
 2104f74:	f91ff06f          	j	2104f04 <memchr+0x3c>
 2104f78:	00150513          	addi	a0,a0,1
 2104f7c:	f8e504e3          	beq	a0,a4,2104f04 <memchr+0x3c>
 2104f80:	00054783          	lbu	a5,0(a0)
 2104f84:	fed79ae3          	bne	a5,a3,2104f78 <memchr+0xb0>
 2104f88:	00008067          	ret

02104f8c <memmove>:
 2104f8c:	02a5f663          	bgeu	a1,a0,2104fb8 <memmove+0x2c>
 2104f90:	00c58733          	add	a4,a1,a2
 2104f94:	02e57263          	bgeu	a0,a4,2104fb8 <memmove+0x2c>
 2104f98:	00c507b3          	add	a5,a0,a2
 2104f9c:	04060663          	beqz	a2,2104fe8 <memmove+0x5c>
 2104fa0:	fff74683          	lbu	a3,-1(a4)
 2104fa4:	fff78793          	addi	a5,a5,-1
 2104fa8:	fff70713          	addi	a4,a4,-1
 2104fac:	00d78023          	sb	a3,0(a5)
 2104fb0:	fef518e3          	bne	a0,a5,2104fa0 <memmove+0x14>
 2104fb4:	00008067          	ret
 2104fb8:	00f00793          	li	a5,15
 2104fbc:	02c7e863          	bltu	a5,a2,2104fec <memmove+0x60>
 2104fc0:	00050793          	mv	a5,a0
 2104fc4:	fff60693          	addi	a3,a2,-1
 2104fc8:	0c060a63          	beqz	a2,210509c <memmove+0x110>
 2104fcc:	00168693          	addi	a3,a3,1
 2104fd0:	00d786b3          	add	a3,a5,a3
 2104fd4:	0005c703          	lbu	a4,0(a1)
 2104fd8:	00178793          	addi	a5,a5,1
 2104fdc:	00158593          	addi	a1,a1,1
 2104fe0:	fee78fa3          	sb	a4,-1(a5)
 2104fe4:	fed798e3          	bne	a5,a3,2104fd4 <memmove+0x48>
 2104fe8:	00008067          	ret
 2104fec:	00b567b3          	or	a5,a0,a1
 2104ff0:	0037f793          	andi	a5,a5,3
 2104ff4:	08079e63          	bnez	a5,2105090 <memmove+0x104>
 2104ff8:	ff060893          	addi	a7,a2,-16
 2104ffc:	ff08f893          	andi	a7,a7,-16
 2105000:	01088893          	addi	a7,a7,16
 2105004:	011507b3          	add	a5,a0,a7
 2105008:	00058693          	mv	a3,a1
 210500c:	00050713          	mv	a4,a0
 2105010:	0006a803          	lw	a6,0(a3)
 2105014:	01068693          	addi	a3,a3,16
 2105018:	01070713          	addi	a4,a4,16
 210501c:	ff072823          	sw	a6,-16(a4)
 2105020:	ff46a803          	lw	a6,-12(a3)
 2105024:	ff072a23          	sw	a6,-12(a4)
 2105028:	ff86a803          	lw	a6,-8(a3)
 210502c:	ff072c23          	sw	a6,-8(a4)
 2105030:	ffc6a803          	lw	a6,-4(a3)
 2105034:	ff072e23          	sw	a6,-4(a4)
 2105038:	fcf71ce3          	bne	a4,a5,2105010 <memmove+0x84>
 210503c:	00c67713          	andi	a4,a2,12
 2105040:	011585b3          	add	a1,a1,a7
 2105044:	00f67813          	andi	a6,a2,15
 2105048:	04070c63          	beqz	a4,21050a0 <memmove+0x114>
 210504c:	00058693          	mv	a3,a1
 2105050:	00078713          	mv	a4,a5
 2105054:	01078eb3          	add	t4,a5,a6
 2105058:	00300e13          	li	t3,3
 210505c:	0006a303          	lw	t1,0(a3)
 2105060:	00470713          	addi	a4,a4,4
 2105064:	40ee88b3          	sub	a7,t4,a4
 2105068:	fe672e23          	sw	t1,-4(a4)
 210506c:	00468693          	addi	a3,a3,4
 2105070:	ff1e66e3          	bltu	t3,a7,210505c <memmove+0xd0>
 2105074:	ffc80713          	addi	a4,a6,-4
 2105078:	ffc77713          	andi	a4,a4,-4
 210507c:	00470713          	addi	a4,a4,4
 2105080:	00367613          	andi	a2,a2,3
 2105084:	00e787b3          	add	a5,a5,a4
 2105088:	00e585b3          	add	a1,a1,a4
 210508c:	f39ff06f          	j	2104fc4 <memmove+0x38>
 2105090:	fff60693          	addi	a3,a2,-1
 2105094:	00050793          	mv	a5,a0
 2105098:	f35ff06f          	j	2104fcc <memmove+0x40>
 210509c:	00008067          	ret
 21050a0:	00080613          	mv	a2,a6
 21050a4:	f21ff06f          	j	2104fc4 <memmove+0x38>

021050a8 <_open_r>:
 21050a8:	ff010113          	addi	sp,sp,-16
 21050ac:	00058713          	mv	a4,a1
 21050b0:	00812423          	sw	s0,8(sp)
 21050b4:	00060593          	mv	a1,a2
 21050b8:	00050413          	mv	s0,a0
 21050bc:	00068613          	mv	a2,a3
 21050c0:	00070513          	mv	a0,a4
 21050c4:	8801ac23          	sw	zero,-1896(gp) # 1f18 <errno>
 21050c8:	00112623          	sw	ra,12(sp)
 21050cc:	120010ef          	jal	ra,21061ec <_open>
 21050d0:	fff00793          	li	a5,-1
 21050d4:	00f50a63          	beq	a0,a5,21050e8 <_open_r+0x40>
 21050d8:	00c12083          	lw	ra,12(sp)
 21050dc:	00812403          	lw	s0,8(sp)
 21050e0:	01010113          	addi	sp,sp,16
 21050e4:	00008067          	ret
 21050e8:	8981a783          	lw	a5,-1896(gp) # 1f18 <errno>
 21050ec:	fe0786e3          	beqz	a5,21050d8 <_open_r+0x30>
 21050f0:	00c12083          	lw	ra,12(sp)
 21050f4:	00f42023          	sw	a5,0(s0)
 21050f8:	00812403          	lw	s0,8(sp)
 21050fc:	01010113          	addi	sp,sp,16
 2105100:	00008067          	ret

02105104 <_read_r>:
 2105104:	ff010113          	addi	sp,sp,-16
 2105108:	00058713          	mv	a4,a1
 210510c:	00812423          	sw	s0,8(sp)
 2105110:	00060593          	mv	a1,a2
 2105114:	00050413          	mv	s0,a0
 2105118:	00068613          	mv	a2,a3
 210511c:	00070513          	mv	a0,a4
 2105120:	8801ac23          	sw	zero,-1896(gp) # 1f18 <errno>
 2105124:	00112623          	sw	ra,12(sp)
 2105128:	274010ef          	jal	ra,210639c <_read>
 210512c:	fff00793          	li	a5,-1
 2105130:	00f50a63          	beq	a0,a5,2105144 <_read_r+0x40>
 2105134:	00c12083          	lw	ra,12(sp)
 2105138:	00812403          	lw	s0,8(sp)
 210513c:	01010113          	addi	sp,sp,16
 2105140:	00008067          	ret
 2105144:	8981a783          	lw	a5,-1896(gp) # 1f18 <errno>
 2105148:	fe0786e3          	beqz	a5,2105134 <_read_r+0x30>
 210514c:	00c12083          	lw	ra,12(sp)
 2105150:	00f42023          	sw	a5,0(s0)
 2105154:	00812403          	lw	s0,8(sp)
 2105158:	01010113          	addi	sp,sp,16
 210515c:	00008067          	ret

02105160 <_realloc_r>:
 2105160:	fd010113          	addi	sp,sp,-48
 2105164:	02912223          	sw	s1,36(sp)
 2105168:	02112623          	sw	ra,44(sp)
 210516c:	02812423          	sw	s0,40(sp)
 2105170:	03212023          	sw	s2,32(sp)
 2105174:	01312e23          	sw	s3,28(sp)
 2105178:	01412c23          	sw	s4,24(sp)
 210517c:	01512a23          	sw	s5,20(sp)
 2105180:	01612823          	sw	s6,16(sp)
 2105184:	01712623          	sw	s7,12(sp)
 2105188:	01812423          	sw	s8,8(sp)
 210518c:	00060493          	mv	s1,a2
 2105190:	1c058263          	beqz	a1,2105354 <_realloc_r+0x1f4>
 2105194:	00058413          	mv	s0,a1
 2105198:	00050913          	mv	s2,a0
 210519c:	dc9fe0ef          	jal	ra,2103f64 <__malloc_lock>
 21051a0:	ffc42703          	lw	a4,-4(s0)
 21051a4:	00b48793          	addi	a5,s1,11
 21051a8:	01600693          	li	a3,22
 21051ac:	ff840a93          	addi	s5,s0,-8
 21051b0:	ffc77993          	andi	s3,a4,-4
 21051b4:	0ef6f663          	bgeu	a3,a5,21052a0 <_realloc_r+0x140>
 21051b8:	ff87fa13          	andi	s4,a5,-8
 21051bc:	0e07c663          	bltz	a5,21052a8 <_realloc_r+0x148>
 21051c0:	0e9a6463          	bltu	s4,s1,21052a8 <_realloc_r+0x148>
 21051c4:	1149d463          	bge	s3,s4,21052cc <_realloc_r+0x16c>
 21051c8:	fdefdc17          	auipc	s8,0xfdefd
 21051cc:	8b0c0c13          	addi	s8,s8,-1872 # 1a78 <__malloc_av_>
 21051d0:	008c2603          	lw	a2,8(s8)
 21051d4:	013a86b3          	add	a3,s5,s3
 21051d8:	0046a783          	lw	a5,4(a3)
 21051dc:	1cd60e63          	beq	a2,a3,21053b8 <_realloc_r+0x258>
 21051e0:	ffe7f613          	andi	a2,a5,-2
 21051e4:	00c68633          	add	a2,a3,a2
 21051e8:	00462603          	lw	a2,4(a2)
 21051ec:	00167613          	andi	a2,a2,1
 21051f0:	14061463          	bnez	a2,2105338 <_realloc_r+0x1d8>
 21051f4:	ffc7f793          	andi	a5,a5,-4
 21051f8:	00f98633          	add	a2,s3,a5
 21051fc:	0b465e63          	bge	a2,s4,21052b8 <_realloc_r+0x158>
 2105200:	00177713          	andi	a4,a4,1
 2105204:	02071463          	bnez	a4,210522c <_realloc_r+0xcc>
 2105208:	ff842b83          	lw	s7,-8(s0)
 210520c:	417a8bb3          	sub	s7,s5,s7
 2105210:	004ba703          	lw	a4,4(s7)
 2105214:	ffc77713          	andi	a4,a4,-4
 2105218:	00e787b3          	add	a5,a5,a4
 210521c:	01378b33          	add	s6,a5,s3
 2105220:	334b5463          	bge	s6,s4,2105548 <_realloc_r+0x3e8>
 2105224:	00e98b33          	add	s6,s3,a4
 2105228:	294b5663          	bge	s6,s4,21054b4 <_realloc_r+0x354>
 210522c:	00048593          	mv	a1,s1
 2105230:	00090513          	mv	a0,s2
 2105234:	b24fe0ef          	jal	ra,2103558 <_malloc_r>
 2105238:	00050493          	mv	s1,a0
 210523c:	40050263          	beqz	a0,2105640 <_realloc_r+0x4e0>
 2105240:	ffc42783          	lw	a5,-4(s0)
 2105244:	ff850713          	addi	a4,a0,-8
 2105248:	ffe7f793          	andi	a5,a5,-2
 210524c:	00fa87b3          	add	a5,s5,a5
 2105250:	24e78a63          	beq	a5,a4,21054a4 <_realloc_r+0x344>
 2105254:	ffc98613          	addi	a2,s3,-4
 2105258:	02400793          	li	a5,36
 210525c:	2ec7e063          	bltu	a5,a2,210553c <_realloc_r+0x3dc>
 2105260:	01300713          	li	a4,19
 2105264:	20c76e63          	bltu	a4,a2,2105480 <_realloc_r+0x320>
 2105268:	00050793          	mv	a5,a0
 210526c:	00040713          	mv	a4,s0
 2105270:	00072683          	lw	a3,0(a4)
 2105274:	00d7a023          	sw	a3,0(a5)
 2105278:	00472683          	lw	a3,4(a4)
 210527c:	00d7a223          	sw	a3,4(a5)
 2105280:	00872703          	lw	a4,8(a4)
 2105284:	00e7a423          	sw	a4,8(a5)
 2105288:	00090513          	mv	a0,s2
 210528c:	00040593          	mv	a1,s0
 2105290:	e3dfd0ef          	jal	ra,21030cc <_free_r>
 2105294:	00090513          	mv	a0,s2
 2105298:	cd5fe0ef          	jal	ra,2103f6c <__malloc_unlock>
 210529c:	0680006f          	j	2105304 <_realloc_r+0x1a4>
 21052a0:	01000a13          	li	s4,16
 21052a4:	f29a70e3          	bgeu	s4,s1,21051c4 <_realloc_r+0x64>
 21052a8:	00c00793          	li	a5,12
 21052ac:	00f92023          	sw	a5,0(s2)
 21052b0:	00000493          	li	s1,0
 21052b4:	0500006f          	j	2105304 <_realloc_r+0x1a4>
 21052b8:	00c6a783          	lw	a5,12(a3)
 21052bc:	0086a703          	lw	a4,8(a3)
 21052c0:	00060993          	mv	s3,a2
 21052c4:	00f72623          	sw	a5,12(a4)
 21052c8:	00e7a423          	sw	a4,8(a5)
 21052cc:	004aa783          	lw	a5,4(s5) # 80000004 <__flash_rwdata_start+0x7def8d6c>
 21052d0:	414986b3          	sub	a3,s3,s4
 21052d4:	00f00613          	li	a2,15
 21052d8:	0017f793          	andi	a5,a5,1
 21052dc:	013a8733          	add	a4,s5,s3
 21052e0:	0ad66463          	bltu	a2,a3,2105388 <_realloc_r+0x228>
 21052e4:	0137e7b3          	or	a5,a5,s3
 21052e8:	00faa223          	sw	a5,4(s5)
 21052ec:	00472783          	lw	a5,4(a4)
 21052f0:	0017e793          	ori	a5,a5,1
 21052f4:	00f72223          	sw	a5,4(a4)
 21052f8:	00090513          	mv	a0,s2
 21052fc:	c71fe0ef          	jal	ra,2103f6c <__malloc_unlock>
 2105300:	00040493          	mv	s1,s0
 2105304:	02c12083          	lw	ra,44(sp)
 2105308:	02812403          	lw	s0,40(sp)
 210530c:	02012903          	lw	s2,32(sp)
 2105310:	01c12983          	lw	s3,28(sp)
 2105314:	01812a03          	lw	s4,24(sp)
 2105318:	01412a83          	lw	s5,20(sp)
 210531c:	01012b03          	lw	s6,16(sp)
 2105320:	00c12b83          	lw	s7,12(sp)
 2105324:	00812c03          	lw	s8,8(sp)
 2105328:	00048513          	mv	a0,s1
 210532c:	02412483          	lw	s1,36(sp)
 2105330:	03010113          	addi	sp,sp,48
 2105334:	00008067          	ret
 2105338:	00177713          	andi	a4,a4,1
 210533c:	ee0718e3          	bnez	a4,210522c <_realloc_r+0xcc>
 2105340:	ff842b83          	lw	s7,-8(s0)
 2105344:	417a8bb3          	sub	s7,s5,s7
 2105348:	004ba703          	lw	a4,4(s7)
 210534c:	ffc77713          	andi	a4,a4,-4
 2105350:	ed5ff06f          	j	2105224 <_realloc_r+0xc4>
 2105354:	02812403          	lw	s0,40(sp)
 2105358:	02c12083          	lw	ra,44(sp)
 210535c:	02412483          	lw	s1,36(sp)
 2105360:	02012903          	lw	s2,32(sp)
 2105364:	01c12983          	lw	s3,28(sp)
 2105368:	01812a03          	lw	s4,24(sp)
 210536c:	01412a83          	lw	s5,20(sp)
 2105370:	01012b03          	lw	s6,16(sp)
 2105374:	00c12b83          	lw	s7,12(sp)
 2105378:	00812c03          	lw	s8,8(sp)
 210537c:	00060593          	mv	a1,a2
 2105380:	03010113          	addi	sp,sp,48
 2105384:	9d4fe06f          	j	2103558 <_malloc_r>
 2105388:	0147e7b3          	or	a5,a5,s4
 210538c:	00faa223          	sw	a5,4(s5)
 2105390:	014a85b3          	add	a1,s5,s4
 2105394:	0016e693          	ori	a3,a3,1
 2105398:	00d5a223          	sw	a3,4(a1)
 210539c:	00472783          	lw	a5,4(a4)
 21053a0:	00858593          	addi	a1,a1,8
 21053a4:	00090513          	mv	a0,s2
 21053a8:	0017e793          	ori	a5,a5,1
 21053ac:	00f72223          	sw	a5,4(a4)
 21053b0:	d1dfd0ef          	jal	ra,21030cc <_free_r>
 21053b4:	f45ff06f          	j	21052f8 <_realloc_r+0x198>
 21053b8:	ffc7f793          	andi	a5,a5,-4
 21053bc:	013786b3          	add	a3,a5,s3
 21053c0:	010a0613          	addi	a2,s4,16
 21053c4:	22c6de63          	bge	a3,a2,2105600 <_realloc_r+0x4a0>
 21053c8:	00177713          	andi	a4,a4,1
 21053cc:	e60710e3          	bnez	a4,210522c <_realloc_r+0xcc>
 21053d0:	ff842b83          	lw	s7,-8(s0)
 21053d4:	417a8bb3          	sub	s7,s5,s7
 21053d8:	004ba703          	lw	a4,4(s7)
 21053dc:	ffc77713          	andi	a4,a4,-4
 21053e0:	00e787b3          	add	a5,a5,a4
 21053e4:	01378b33          	add	s6,a5,s3
 21053e8:	e2cb4ee3          	blt	s6,a2,2105224 <_realloc_r+0xc4>
 21053ec:	00cba783          	lw	a5,12(s7)
 21053f0:	008ba703          	lw	a4,8(s7)
 21053f4:	ffc98613          	addi	a2,s3,-4
 21053f8:	02400693          	li	a3,36
 21053fc:	00f72623          	sw	a5,12(a4)
 2105400:	00e7a423          	sw	a4,8(a5)
 2105404:	008b8493          	addi	s1,s7,8
 2105408:	26c6e263          	bltu	a3,a2,210566c <_realloc_r+0x50c>
 210540c:	01300713          	li	a4,19
 2105410:	00048793          	mv	a5,s1
 2105414:	02c77263          	bgeu	a4,a2,2105438 <_realloc_r+0x2d8>
 2105418:	00042703          	lw	a4,0(s0)
 210541c:	01b00793          	li	a5,27
 2105420:	00eba423          	sw	a4,8(s7)
 2105424:	00442703          	lw	a4,4(s0)
 2105428:	00eba623          	sw	a4,12(s7)
 210542c:	24c7e863          	bltu	a5,a2,210567c <_realloc_r+0x51c>
 2105430:	00840413          	addi	s0,s0,8
 2105434:	010b8793          	addi	a5,s7,16
 2105438:	00042703          	lw	a4,0(s0)
 210543c:	00e7a023          	sw	a4,0(a5)
 2105440:	00442703          	lw	a4,4(s0)
 2105444:	00e7a223          	sw	a4,4(a5)
 2105448:	00842703          	lw	a4,8(s0)
 210544c:	00e7a423          	sw	a4,8(a5)
 2105450:	014b8733          	add	a4,s7,s4
 2105454:	414b07b3          	sub	a5,s6,s4
 2105458:	00ec2423          	sw	a4,8(s8)
 210545c:	0017e793          	ori	a5,a5,1
 2105460:	00f72223          	sw	a5,4(a4)
 2105464:	004ba783          	lw	a5,4(s7)
 2105468:	00090513          	mv	a0,s2
 210546c:	0017f793          	andi	a5,a5,1
 2105470:	0147e7b3          	or	a5,a5,s4
 2105474:	00fba223          	sw	a5,4(s7)
 2105478:	af5fe0ef          	jal	ra,2103f6c <__malloc_unlock>
 210547c:	e89ff06f          	j	2105304 <_realloc_r+0x1a4>
 2105480:	00042683          	lw	a3,0(s0)
 2105484:	01b00713          	li	a4,27
 2105488:	00d52023          	sw	a3,0(a0)
 210548c:	00442683          	lw	a3,4(s0)
 2105490:	00d52223          	sw	a3,4(a0)
 2105494:	14c76663          	bltu	a4,a2,21055e0 <_realloc_r+0x480>
 2105498:	00840713          	addi	a4,s0,8
 210549c:	00850793          	addi	a5,a0,8
 21054a0:	dd1ff06f          	j	2105270 <_realloc_r+0x110>
 21054a4:	ffc52783          	lw	a5,-4(a0)
 21054a8:	ffc7f793          	andi	a5,a5,-4
 21054ac:	00f989b3          	add	s3,s3,a5
 21054b0:	e1dff06f          	j	21052cc <_realloc_r+0x16c>
 21054b4:	00cba783          	lw	a5,12(s7)
 21054b8:	008ba703          	lw	a4,8(s7)
 21054bc:	ffc98613          	addi	a2,s3,-4
 21054c0:	02400693          	li	a3,36
 21054c4:	00f72623          	sw	a5,12(a4)
 21054c8:	00e7a423          	sw	a4,8(a5)
 21054cc:	008b8493          	addi	s1,s7,8
 21054d0:	10c6e063          	bltu	a3,a2,21055d0 <_realloc_r+0x470>
 21054d4:	01300713          	li	a4,19
 21054d8:	00048793          	mv	a5,s1
 21054dc:	02c77c63          	bgeu	a4,a2,2105514 <_realloc_r+0x3b4>
 21054e0:	00042703          	lw	a4,0(s0)
 21054e4:	01b00793          	li	a5,27
 21054e8:	00eba423          	sw	a4,8(s7)
 21054ec:	00442703          	lw	a4,4(s0)
 21054f0:	00eba623          	sw	a4,12(s7)
 21054f4:	14c7f063          	bgeu	a5,a2,2105634 <_realloc_r+0x4d4>
 21054f8:	00842783          	lw	a5,8(s0)
 21054fc:	00fba823          	sw	a5,16(s7)
 2105500:	00c42783          	lw	a5,12(s0)
 2105504:	00fbaa23          	sw	a5,20(s7)
 2105508:	0ad60663          	beq	a2,a3,21055b4 <_realloc_r+0x454>
 210550c:	01040413          	addi	s0,s0,16
 2105510:	018b8793          	addi	a5,s7,24
 2105514:	00042703          	lw	a4,0(s0)
 2105518:	00e7a023          	sw	a4,0(a5)
 210551c:	00442703          	lw	a4,4(s0)
 2105520:	00e7a223          	sw	a4,4(a5)
 2105524:	00842703          	lw	a4,8(s0)
 2105528:	00e7a423          	sw	a4,8(a5)
 210552c:	00048413          	mv	s0,s1
 2105530:	000b0993          	mv	s3,s6
 2105534:	000b8a93          	mv	s5,s7
 2105538:	d95ff06f          	j	21052cc <_realloc_r+0x16c>
 210553c:	00040593          	mv	a1,s0
 2105540:	a4dff0ef          	jal	ra,2104f8c <memmove>
 2105544:	d45ff06f          	j	2105288 <_realloc_r+0x128>
 2105548:	00c6a783          	lw	a5,12(a3)
 210554c:	0086a703          	lw	a4,8(a3)
 2105550:	ffc98613          	addi	a2,s3,-4
 2105554:	02400693          	li	a3,36
 2105558:	00f72623          	sw	a5,12(a4)
 210555c:	00e7a423          	sw	a4,8(a5)
 2105560:	008ba703          	lw	a4,8(s7)
 2105564:	00cba783          	lw	a5,12(s7)
 2105568:	008b8493          	addi	s1,s7,8
 210556c:	00f72623          	sw	a5,12(a4)
 2105570:	00e7a423          	sw	a4,8(a5)
 2105574:	04c6ee63          	bltu	a3,a2,21055d0 <_realloc_r+0x470>
 2105578:	01300713          	li	a4,19
 210557c:	00048793          	mv	a5,s1
 2105580:	f8c77ae3          	bgeu	a4,a2,2105514 <_realloc_r+0x3b4>
 2105584:	00042703          	lw	a4,0(s0)
 2105588:	01b00793          	li	a5,27
 210558c:	00eba423          	sw	a4,8(s7)
 2105590:	00442703          	lw	a4,4(s0)
 2105594:	00eba623          	sw	a4,12(s7)
 2105598:	08c7fe63          	bgeu	a5,a2,2105634 <_realloc_r+0x4d4>
 210559c:	00842703          	lw	a4,8(s0)
 21055a0:	02400793          	li	a5,36
 21055a4:	00eba823          	sw	a4,16(s7)
 21055a8:	00c42703          	lw	a4,12(s0)
 21055ac:	00ebaa23          	sw	a4,20(s7)
 21055b0:	f4f61ee3          	bne	a2,a5,210550c <_realloc_r+0x3ac>
 21055b4:	01042703          	lw	a4,16(s0)
 21055b8:	020b8793          	addi	a5,s7,32
 21055bc:	01840413          	addi	s0,s0,24
 21055c0:	00ebac23          	sw	a4,24(s7)
 21055c4:	ffc42703          	lw	a4,-4(s0)
 21055c8:	00ebae23          	sw	a4,28(s7)
 21055cc:	f49ff06f          	j	2105514 <_realloc_r+0x3b4>
 21055d0:	00040593          	mv	a1,s0
 21055d4:	00048513          	mv	a0,s1
 21055d8:	9b5ff0ef          	jal	ra,2104f8c <memmove>
 21055dc:	f51ff06f          	j	210552c <_realloc_r+0x3cc>
 21055e0:	00842703          	lw	a4,8(s0)
 21055e4:	00e52423          	sw	a4,8(a0)
 21055e8:	00c42703          	lw	a4,12(s0)
 21055ec:	00e52623          	sw	a4,12(a0)
 21055f0:	06f60063          	beq	a2,a5,2105650 <_realloc_r+0x4f0>
 21055f4:	01040713          	addi	a4,s0,16
 21055f8:	01050793          	addi	a5,a0,16
 21055fc:	c75ff06f          	j	2105270 <_realloc_r+0x110>
 2105600:	014a8ab3          	add	s5,s5,s4
 2105604:	414687b3          	sub	a5,a3,s4
 2105608:	015c2423          	sw	s5,8(s8)
 210560c:	0017e793          	ori	a5,a5,1
 2105610:	00faa223          	sw	a5,4(s5)
 2105614:	ffc42783          	lw	a5,-4(s0)
 2105618:	00090513          	mv	a0,s2
 210561c:	00040493          	mv	s1,s0
 2105620:	0017f793          	andi	a5,a5,1
 2105624:	0147e7b3          	or	a5,a5,s4
 2105628:	fef42e23          	sw	a5,-4(s0)
 210562c:	941fe0ef          	jal	ra,2103f6c <__malloc_unlock>
 2105630:	cd5ff06f          	j	2105304 <_realloc_r+0x1a4>
 2105634:	00840413          	addi	s0,s0,8
 2105638:	010b8793          	addi	a5,s7,16
 210563c:	ed9ff06f          	j	2105514 <_realloc_r+0x3b4>
 2105640:	00090513          	mv	a0,s2
 2105644:	929fe0ef          	jal	ra,2103f6c <__malloc_unlock>
 2105648:	00000493          	li	s1,0
 210564c:	cb9ff06f          	j	2105304 <_realloc_r+0x1a4>
 2105650:	01042683          	lw	a3,16(s0)
 2105654:	01840713          	addi	a4,s0,24
 2105658:	01850793          	addi	a5,a0,24
 210565c:	00d52823          	sw	a3,16(a0)
 2105660:	01442683          	lw	a3,20(s0)
 2105664:	00d52a23          	sw	a3,20(a0)
 2105668:	c09ff06f          	j	2105270 <_realloc_r+0x110>
 210566c:	00040593          	mv	a1,s0
 2105670:	00048513          	mv	a0,s1
 2105674:	919ff0ef          	jal	ra,2104f8c <memmove>
 2105678:	dd9ff06f          	j	2105450 <_realloc_r+0x2f0>
 210567c:	00842783          	lw	a5,8(s0)
 2105680:	00fba823          	sw	a5,16(s7)
 2105684:	00c42783          	lw	a5,12(s0)
 2105688:	00fbaa23          	sw	a5,20(s7)
 210568c:	00d60863          	beq	a2,a3,210569c <_realloc_r+0x53c>
 2105690:	01040413          	addi	s0,s0,16
 2105694:	018b8793          	addi	a5,s7,24
 2105698:	da1ff06f          	j	2105438 <_realloc_r+0x2d8>
 210569c:	01042703          	lw	a4,16(s0)
 21056a0:	020b8793          	addi	a5,s7,32
 21056a4:	01840413          	addi	s0,s0,24
 21056a8:	00ebac23          	sw	a4,24(s7)
 21056ac:	ffc42703          	lw	a4,-4(s0)
 21056b0:	00ebae23          	sw	a4,28(s7)
 21056b4:	d85ff06f          	j	2105438 <_realloc_r+0x2d8>

021056b8 <__swsetup_r>:
 21056b8:	ff010113          	addi	sp,sp,-16
 21056bc:	00812423          	sw	s0,8(sp)
 21056c0:	00912223          	sw	s1,4(sp)
 21056c4:	00112623          	sw	ra,12(sp)
 21056c8:	fdefc797          	auipc	a5,0xfdefc
 21056cc:	7d87a783          	lw	a5,2008(a5) # 1ea0 <_impure_ptr>
 21056d0:	00050493          	mv	s1,a0
 21056d4:	00058413          	mv	s0,a1
 21056d8:	00078663          	beqz	a5,21056e4 <__swsetup_r+0x2c>
 21056dc:	0387a703          	lw	a4,56(a5)
 21056e0:	08070063          	beqz	a4,2105760 <__swsetup_r+0xa8>
 21056e4:	00c41783          	lh	a5,12(s0)
 21056e8:	0087f713          	andi	a4,a5,8
 21056ec:	08070463          	beqz	a4,2105774 <__swsetup_r+0xbc>
 21056f0:	01042703          	lw	a4,16(s0)
 21056f4:	0a070063          	beqz	a4,2105794 <__swsetup_r+0xdc>
 21056f8:	0017f693          	andi	a3,a5,1
 21056fc:	02068863          	beqz	a3,210572c <__swsetup_r+0x74>
 2105700:	01442683          	lw	a3,20(s0)
 2105704:	00042423          	sw	zero,8(s0)
 2105708:	00000513          	li	a0,0
 210570c:	40d006b3          	neg	a3,a3
 2105710:	00d42c23          	sw	a3,24(s0)
 2105714:	02070a63          	beqz	a4,2105748 <__swsetup_r+0x90>
 2105718:	00c12083          	lw	ra,12(sp)
 210571c:	00812403          	lw	s0,8(sp)
 2105720:	00412483          	lw	s1,4(sp)
 2105724:	01010113          	addi	sp,sp,16
 2105728:	00008067          	ret
 210572c:	0027f693          	andi	a3,a5,2
 2105730:	00000613          	li	a2,0
 2105734:	00069463          	bnez	a3,210573c <__swsetup_r+0x84>
 2105738:	01442603          	lw	a2,20(s0)
 210573c:	00c42423          	sw	a2,8(s0)
 2105740:	00000513          	li	a0,0
 2105744:	fc071ae3          	bnez	a4,2105718 <__swsetup_r+0x60>
 2105748:	0807f713          	andi	a4,a5,128
 210574c:	fc0706e3          	beqz	a4,2105718 <__swsetup_r+0x60>
 2105750:	0407e793          	ori	a5,a5,64
 2105754:	00f41623          	sh	a5,12(s0)
 2105758:	fff00513          	li	a0,-1
 210575c:	fbdff06f          	j	2105718 <__swsetup_r+0x60>
 2105760:	00078513          	mv	a0,a5
 2105764:	cc8fd0ef          	jal	ra,2102c2c <__sinit>
 2105768:	00c41783          	lh	a5,12(s0)
 210576c:	0087f713          	andi	a4,a5,8
 2105770:	f80710e3          	bnez	a4,21056f0 <__swsetup_r+0x38>
 2105774:	0107f713          	andi	a4,a5,16
 2105778:	06070a63          	beqz	a4,21057ec <__swsetup_r+0x134>
 210577c:	0047f713          	andi	a4,a5,4
 2105780:	02071c63          	bnez	a4,21057b8 <__swsetup_r+0x100>
 2105784:	01042703          	lw	a4,16(s0)
 2105788:	0087e793          	ori	a5,a5,8
 210578c:	00f41623          	sh	a5,12(s0)
 2105790:	f60714e3          	bnez	a4,21056f8 <__swsetup_r+0x40>
 2105794:	2807f693          	andi	a3,a5,640
 2105798:	20000613          	li	a2,512
 210579c:	f4c68ee3          	beq	a3,a2,21056f8 <__swsetup_r+0x40>
 21057a0:	00040593          	mv	a1,s0
 21057a4:	00048513          	mv	a0,s1
 21057a8:	054000ef          	jal	ra,21057fc <__smakebuf_r>
 21057ac:	00c41783          	lh	a5,12(s0)
 21057b0:	01042703          	lw	a4,16(s0)
 21057b4:	f45ff06f          	j	21056f8 <__swsetup_r+0x40>
 21057b8:	03042583          	lw	a1,48(s0)
 21057bc:	00058e63          	beqz	a1,21057d8 <__swsetup_r+0x120>
 21057c0:	04040713          	addi	a4,s0,64
 21057c4:	00e58863          	beq	a1,a4,21057d4 <__swsetup_r+0x11c>
 21057c8:	00048513          	mv	a0,s1
 21057cc:	901fd0ef          	jal	ra,21030cc <_free_r>
 21057d0:	00c41783          	lh	a5,12(s0)
 21057d4:	02042823          	sw	zero,48(s0)
 21057d8:	01042703          	lw	a4,16(s0)
 21057dc:	fdb7f793          	andi	a5,a5,-37
 21057e0:	00042223          	sw	zero,4(s0)
 21057e4:	00e42023          	sw	a4,0(s0)
 21057e8:	fa1ff06f          	j	2105788 <__swsetup_r+0xd0>
 21057ec:	00900713          	li	a4,9
 21057f0:	00e4a023          	sw	a4,0(s1)
 21057f4:	0407e793          	ori	a5,a5,64
 21057f8:	f5dff06f          	j	2105754 <__swsetup_r+0x9c>

021057fc <__smakebuf_r>:
 21057fc:	00c59783          	lh	a5,12(a1)
 2105800:	f8010113          	addi	sp,sp,-128
 2105804:	06812c23          	sw	s0,120(sp)
 2105808:	06112e23          	sw	ra,124(sp)
 210580c:	06912a23          	sw	s1,116(sp)
 2105810:	07212823          	sw	s2,112(sp)
 2105814:	07312623          	sw	s3,108(sp)
 2105818:	07412423          	sw	s4,104(sp)
 210581c:	0027f713          	andi	a4,a5,2
 2105820:	00058413          	mv	s0,a1
 2105824:	02070c63          	beqz	a4,210585c <__smakebuf_r+0x60>
 2105828:	04358793          	addi	a5,a1,67
 210582c:	00f5a023          	sw	a5,0(a1)
 2105830:	00f5a823          	sw	a5,16(a1)
 2105834:	00100793          	li	a5,1
 2105838:	00f5aa23          	sw	a5,20(a1)
 210583c:	07c12083          	lw	ra,124(sp)
 2105840:	07812403          	lw	s0,120(sp)
 2105844:	07412483          	lw	s1,116(sp)
 2105848:	07012903          	lw	s2,112(sp)
 210584c:	06c12983          	lw	s3,108(sp)
 2105850:	06812a03          	lw	s4,104(sp)
 2105854:	08010113          	addi	sp,sp,128
 2105858:	00008067          	ret
 210585c:	00e59583          	lh	a1,14(a1)
 2105860:	00050493          	mv	s1,a0
 2105864:	0805cc63          	bltz	a1,21058fc <__smakebuf_r+0x100>
 2105868:	00810613          	addi	a2,sp,8
 210586c:	1f8000ef          	jal	ra,2105a64 <_fstat_r>
 2105870:	08054463          	bltz	a0,21058f8 <__smakebuf_r+0xfc>
 2105874:	00c12783          	lw	a5,12(sp)
 2105878:	0000f937          	lui	s2,0xf
 210587c:	00001a37          	lui	s4,0x1
 2105880:	00f97933          	and	s2,s2,a5
 2105884:	ffffe7b7          	lui	a5,0xffffe
 2105888:	00f90933          	add	s2,s2,a5
 210588c:	00193913          	seqz	s2,s2
 2105890:	40000993          	li	s3,1024
 2105894:	800a0a13          	addi	s4,s4,-2048 # 800 <JTAG_UART_DBG+0x480>
 2105898:	00098593          	mv	a1,s3
 210589c:	00048513          	mv	a0,s1
 21058a0:	cb9fd0ef          	jal	ra,2103558 <_malloc_r>
 21058a4:	00c41783          	lh	a5,12(s0)
 21058a8:	06050e63          	beqz	a0,2105924 <__smakebuf_r+0x128>
 21058ac:	ffffd717          	auipc	a4,0xffffd
 21058b0:	26c70713          	addi	a4,a4,620 # 2102b18 <_cleanup_r>
 21058b4:	02e4ae23          	sw	a4,60(s1)
 21058b8:	0807e793          	ori	a5,a5,128
 21058bc:	00f41623          	sh	a5,12(s0)
 21058c0:	00a42023          	sw	a0,0(s0)
 21058c4:	00a42823          	sw	a0,16(s0)
 21058c8:	01342a23          	sw	s3,20(s0)
 21058cc:	08091863          	bnez	s2,210595c <__smakebuf_r+0x160>
 21058d0:	0147e7b3          	or	a5,a5,s4
 21058d4:	07c12083          	lw	ra,124(sp)
 21058d8:	00f41623          	sh	a5,12(s0)
 21058dc:	07812403          	lw	s0,120(sp)
 21058e0:	07412483          	lw	s1,116(sp)
 21058e4:	07012903          	lw	s2,112(sp)
 21058e8:	06c12983          	lw	s3,108(sp)
 21058ec:	06812a03          	lw	s4,104(sp)
 21058f0:	08010113          	addi	sp,sp,128
 21058f4:	00008067          	ret
 21058f8:	00c41783          	lh	a5,12(s0)
 21058fc:	0807f793          	andi	a5,a5,128
 2105900:	00000913          	li	s2,0
 2105904:	04078663          	beqz	a5,2105950 <__smakebuf_r+0x154>
 2105908:	04000993          	li	s3,64
 210590c:	00098593          	mv	a1,s3
 2105910:	00048513          	mv	a0,s1
 2105914:	c45fd0ef          	jal	ra,2103558 <_malloc_r>
 2105918:	00c41783          	lh	a5,12(s0)
 210591c:	00000a13          	li	s4,0
 2105920:	f80516e3          	bnez	a0,21058ac <__smakebuf_r+0xb0>
 2105924:	2007f713          	andi	a4,a5,512
 2105928:	f0071ae3          	bnez	a4,210583c <__smakebuf_r+0x40>
 210592c:	ffc7f793          	andi	a5,a5,-4
 2105930:	0027e793          	ori	a5,a5,2
 2105934:	04340713          	addi	a4,s0,67
 2105938:	00f41623          	sh	a5,12(s0)
 210593c:	00100793          	li	a5,1
 2105940:	00e42023          	sw	a4,0(s0)
 2105944:	00e42823          	sw	a4,16(s0)
 2105948:	00f42a23          	sw	a5,20(s0)
 210594c:	ef1ff06f          	j	210583c <__smakebuf_r+0x40>
 2105950:	40000993          	li	s3,1024
 2105954:	00000a13          	li	s4,0
 2105958:	f41ff06f          	j	2105898 <__smakebuf_r+0x9c>
 210595c:	00e41583          	lh	a1,14(s0)
 2105960:	00048513          	mv	a0,s1
 2105964:	158000ef          	jal	ra,2105abc <_isatty_r>
 2105968:	00051663          	bnez	a0,2105974 <__smakebuf_r+0x178>
 210596c:	00c41783          	lh	a5,12(s0)
 2105970:	f61ff06f          	j	21058d0 <__smakebuf_r+0xd4>
 2105974:	00c45783          	lhu	a5,12(s0)
 2105978:	ffc7f793          	andi	a5,a5,-4
 210597c:	0017e793          	ori	a5,a5,1
 2105980:	01079793          	slli	a5,a5,0x10
 2105984:	4107d793          	srai	a5,a5,0x10
 2105988:	f49ff06f          	j	21058d0 <__smakebuf_r+0xd4>

0210598c <__swhatbuf_r>:
 210598c:	f9010113          	addi	sp,sp,-112
 2105990:	06812423          	sw	s0,104(sp)
 2105994:	00058413          	mv	s0,a1
 2105998:	00e59583          	lh	a1,14(a1)
 210599c:	06912223          	sw	s1,100(sp)
 21059a0:	07212023          	sw	s2,96(sp)
 21059a4:	06112623          	sw	ra,108(sp)
 21059a8:	00060493          	mv	s1,a2
 21059ac:	00068913          	mv	s2,a3
 21059b0:	0405ca63          	bltz	a1,2105a04 <__swhatbuf_r+0x78>
 21059b4:	00810613          	addi	a2,sp,8
 21059b8:	0ac000ef          	jal	ra,2105a64 <_fstat_r>
 21059bc:	04054463          	bltz	a0,2105a04 <__swhatbuf_r+0x78>
 21059c0:	00c12703          	lw	a4,12(sp)
 21059c4:	0000f7b7          	lui	a5,0xf
 21059c8:	06c12083          	lw	ra,108(sp)
 21059cc:	00e7f7b3          	and	a5,a5,a4
 21059d0:	ffffe737          	lui	a4,0xffffe
 21059d4:	00e787b3          	add	a5,a5,a4
 21059d8:	06812403          	lw	s0,104(sp)
 21059dc:	0017b793          	seqz	a5,a5
 21059e0:	00f92023          	sw	a5,0(s2) # f000 <__global_pointer$+0xc980>
 21059e4:	40000713          	li	a4,1024
 21059e8:	00e4a023          	sw	a4,0(s1)
 21059ec:	00001537          	lui	a0,0x1
 21059f0:	06412483          	lw	s1,100(sp)
 21059f4:	06012903          	lw	s2,96(sp)
 21059f8:	80050513          	addi	a0,a0,-2048 # 800 <JTAG_UART_DBG+0x480>
 21059fc:	07010113          	addi	sp,sp,112
 2105a00:	00008067          	ret
 2105a04:	00c45783          	lhu	a5,12(s0)
 2105a08:	0807f793          	andi	a5,a5,128
 2105a0c:	02078863          	beqz	a5,2105a3c <__swhatbuf_r+0xb0>
 2105a10:	06c12083          	lw	ra,108(sp)
 2105a14:	06812403          	lw	s0,104(sp)
 2105a18:	00000793          	li	a5,0
 2105a1c:	00f92023          	sw	a5,0(s2)
 2105a20:	04000713          	li	a4,64
 2105a24:	00e4a023          	sw	a4,0(s1)
 2105a28:	06012903          	lw	s2,96(sp)
 2105a2c:	06412483          	lw	s1,100(sp)
 2105a30:	00000513          	li	a0,0
 2105a34:	07010113          	addi	sp,sp,112
 2105a38:	00008067          	ret
 2105a3c:	06c12083          	lw	ra,108(sp)
 2105a40:	06812403          	lw	s0,104(sp)
 2105a44:	00f92023          	sw	a5,0(s2)
 2105a48:	40000713          	li	a4,1024
 2105a4c:	00e4a023          	sw	a4,0(s1)
 2105a50:	06012903          	lw	s2,96(sp)
 2105a54:	06412483          	lw	s1,100(sp)
 2105a58:	00000513          	li	a0,0
 2105a5c:	07010113          	addi	sp,sp,112
 2105a60:	00008067          	ret

02105a64 <_fstat_r>:
 2105a64:	ff010113          	addi	sp,sp,-16
 2105a68:	00058713          	mv	a4,a1
 2105a6c:	00812423          	sw	s0,8(sp)
 2105a70:	00060593          	mv	a1,a2
 2105a74:	00050413          	mv	s0,a0
 2105a78:	00070513          	mv	a0,a4
 2105a7c:	8801ac23          	sw	zero,-1896(gp) # 1f18 <errno>
 2105a80:	00112623          	sw	ra,12(sp)
 2105a84:	310000ef          	jal	ra,2105d94 <_fstat>
 2105a88:	fff00793          	li	a5,-1
 2105a8c:	00f50a63          	beq	a0,a5,2105aa0 <_fstat_r+0x3c>
 2105a90:	00c12083          	lw	ra,12(sp)
 2105a94:	00812403          	lw	s0,8(sp)
 2105a98:	01010113          	addi	sp,sp,16
 2105a9c:	00008067          	ret
 2105aa0:	8981a783          	lw	a5,-1896(gp) # 1f18 <errno>
 2105aa4:	fe0786e3          	beqz	a5,2105a90 <_fstat_r+0x2c>
 2105aa8:	00c12083          	lw	ra,12(sp)
 2105aac:	00f42023          	sw	a5,0(s0)
 2105ab0:	00812403          	lw	s0,8(sp)
 2105ab4:	01010113          	addi	sp,sp,16
 2105ab8:	00008067          	ret

02105abc <_isatty_r>:
 2105abc:	ff010113          	addi	sp,sp,-16
 2105ac0:	00812423          	sw	s0,8(sp)
 2105ac4:	00050413          	mv	s0,a0
 2105ac8:	00058513          	mv	a0,a1
 2105acc:	8801ac23          	sw	zero,-1896(gp) # 1f18 <errno>
 2105ad0:	00112623          	sw	ra,12(sp)
 2105ad4:	3c8000ef          	jal	ra,2105e9c <_isatty>
 2105ad8:	fff00793          	li	a5,-1
 2105adc:	00f50a63          	beq	a0,a5,2105af0 <_isatty_r+0x34>
 2105ae0:	00c12083          	lw	ra,12(sp)
 2105ae4:	00812403          	lw	s0,8(sp)
 2105ae8:	01010113          	addi	sp,sp,16
 2105aec:	00008067          	ret
 2105af0:	8981a783          	lw	a5,-1896(gp) # 1f18 <errno>
 2105af4:	fe0786e3          	beqz	a5,2105ae0 <_isatty_r+0x24>
 2105af8:	00c12083          	lw	ra,12(sp)
 2105afc:	00f42023          	sw	a5,0(s0)
 2105b00:	00812403          	lw	s0,8(sp)
 2105b04:	01010113          	addi	sp,sp,16
 2105b08:	00008067          	ret

02105b0c <__mulsi3>:
 2105b0c:	00050613          	mv	a2,a0
 2105b10:	00000513          	li	a0,0
 2105b14:	0015f693          	andi	a3,a1,1
 2105b18:	00068463          	beqz	a3,2105b20 <__mulsi3+0x14>
 2105b1c:	00c50533          	add	a0,a0,a2
 2105b20:	0015d593          	srli	a1,a1,0x1
 2105b24:	00161613          	slli	a2,a2,0x1
 2105b28:	fe0596e3          	bnez	a1,2105b14 <__mulsi3+0x8>
 2105b2c:	00008067          	ret

02105b30 <__divsi3>:
 2105b30:	06054063          	bltz	a0,2105b90 <__umodsi3+0x10>
 2105b34:	0605c663          	bltz	a1,2105ba0 <__umodsi3+0x20>

02105b38 <__hidden___udivsi3>:
 2105b38:	00058613          	mv	a2,a1
 2105b3c:	00050593          	mv	a1,a0
 2105b40:	fff00513          	li	a0,-1
 2105b44:	02060c63          	beqz	a2,2105b7c <__hidden___udivsi3+0x44>
 2105b48:	00100693          	li	a3,1
 2105b4c:	00b67a63          	bgeu	a2,a1,2105b60 <__hidden___udivsi3+0x28>
 2105b50:	00c05863          	blez	a2,2105b60 <__hidden___udivsi3+0x28>
 2105b54:	00161613          	slli	a2,a2,0x1
 2105b58:	00169693          	slli	a3,a3,0x1
 2105b5c:	feb66ae3          	bltu	a2,a1,2105b50 <__hidden___udivsi3+0x18>
 2105b60:	00000513          	li	a0,0
 2105b64:	00c5e663          	bltu	a1,a2,2105b70 <__hidden___udivsi3+0x38>
 2105b68:	40c585b3          	sub	a1,a1,a2
 2105b6c:	00d56533          	or	a0,a0,a3
 2105b70:	0016d693          	srli	a3,a3,0x1
 2105b74:	00165613          	srli	a2,a2,0x1
 2105b78:	fe0696e3          	bnez	a3,2105b64 <__hidden___udivsi3+0x2c>
 2105b7c:	00008067          	ret

02105b80 <__umodsi3>:
 2105b80:	00008293          	mv	t0,ra
 2105b84:	fb5ff0ef          	jal	ra,2105b38 <__hidden___udivsi3>
 2105b88:	00058513          	mv	a0,a1
 2105b8c:	00028067          	jr	t0 # 2103f3c <memset+0xb4>
 2105b90:	40a00533          	neg	a0,a0
 2105b94:	00b04863          	bgtz	a1,2105ba4 <__umodsi3+0x24>
 2105b98:	40b005b3          	neg	a1,a1
 2105b9c:	f9dff06f          	j	2105b38 <__hidden___udivsi3>
 2105ba0:	40b005b3          	neg	a1,a1
 2105ba4:	00008293          	mv	t0,ra
 2105ba8:	f91ff0ef          	jal	ra,2105b38 <__hidden___udivsi3>
 2105bac:	40a00533          	neg	a0,a0
 2105bb0:	00028067          	jr	t0

02105bb4 <__modsi3>:
 2105bb4:	00008293          	mv	t0,ra
 2105bb8:	0005ca63          	bltz	a1,2105bcc <__modsi3+0x18>
 2105bbc:	00054c63          	bltz	a0,2105bd4 <__modsi3+0x20>
 2105bc0:	f79ff0ef          	jal	ra,2105b38 <__hidden___udivsi3>
 2105bc4:	00058513          	mv	a0,a1
 2105bc8:	00028067          	jr	t0
 2105bcc:	40b005b3          	neg	a1,a1
 2105bd0:	fe0558e3          	bgez	a0,2105bc0 <__modsi3+0xc>
 2105bd4:	40a00533          	neg	a0,a0
 2105bd8:	f61ff0ef          	jal	ra,2105b38 <__hidden___udivsi3>
 2105bdc:	40b00533          	neg	a0,a1
 2105be0:	00028067          	jr	t0

02105be4 <alt_get_errno>:
{
 2105be4:	ff010113          	addi	sp,sp,-16
 2105be8:	00112623          	sw	ra,12(sp)
 2105bec:	00812423          	sw	s0,8(sp)
 2105bf0:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 2105bf4:	000027b7          	lui	a5,0x2
 2105bf8:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2105bfc:	00078c63          	beqz	a5,2105c14 <alt_get_errno+0x30>
 2105c00:	000027b7          	lui	a5,0x2
 2105c04:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2105c08:	000780e7          	jalr	a5
 2105c0c:	00050793          	mv	a5,a0
 2105c10:	0080006f          	j	2105c18 <alt_get_errno+0x34>
 2105c14:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 2105c18:	00078513          	mv	a0,a5
 2105c1c:	00c12083          	lw	ra,12(sp)
 2105c20:	00812403          	lw	s0,8(sp)
 2105c24:	01010113          	addi	sp,sp,16
 2105c28:	00008067          	ret

02105c2c <_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2105c2c:	fd010113          	addi	sp,sp,-48
 2105c30:	02112623          	sw	ra,44(sp)
 2105c34:	02812423          	sw	s0,40(sp)
 2105c38:	03010413          	addi	s0,sp,48
 2105c3c:	fca42e23          	sw	a0,-36(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2105c40:	fdc42783          	lw	a5,-36(s0)
 2105c44:	0207c463          	bltz	a5,2105c6c <_close+0x40>
 2105c48:	fdc42703          	lw	a4,-36(s0)
 2105c4c:	00070793          	mv	a5,a4
 2105c50:	00179793          	slli	a5,a5,0x1
 2105c54:	00e787b3          	add	a5,a5,a4
 2105c58:	00279793          	slli	a5,a5,0x2
 2105c5c:	00001737          	lui	a4,0x1
 2105c60:	4cc70713          	addi	a4,a4,1228 # 14cc <alt_fd_list>
 2105c64:	00e787b3          	add	a5,a5,a4
 2105c68:	0080006f          	j	2105c70 <_close+0x44>
 2105c6c:	00000793          	li	a5,0
 2105c70:	fef42423          	sw	a5,-24(s0)

  if (fd)
 2105c74:	fe842783          	lw	a5,-24(s0)
 2105c78:	06078663          	beqz	a5,2105ce4 <_close+0xb8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2105c7c:	fe842783          	lw	a5,-24(s0)
 2105c80:	0007a783          	lw	a5,0(a5)
 2105c84:	0107a783          	lw	a5,16(a5)
 2105c88:	02078063          	beqz	a5,2105ca8 <_close+0x7c>
 2105c8c:	fe842783          	lw	a5,-24(s0)
 2105c90:	0007a783          	lw	a5,0(a5)
 2105c94:	0107a783          	lw	a5,16(a5)
 2105c98:	fe842503          	lw	a0,-24(s0)
 2105c9c:	000780e7          	jalr	a5
 2105ca0:	00050793          	mv	a5,a0
 2105ca4:	0080006f          	j	2105cac <_close+0x80>
 2105ca8:	00000793          	li	a5,0
 2105cac:	fef42623          	sw	a5,-20(s0)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2105cb0:	fdc42503          	lw	a0,-36(s0)
 2105cb4:	cc0fc0ef          	jal	ra,2102174 <alt_release_fd>
    if (rval < 0)
 2105cb8:	fec42783          	lw	a5,-20(s0)
 2105cbc:	0207d063          	bgez	a5,2105cdc <_close+0xb0>
    {
      ALT_ERRNO = -rval;
 2105cc0:	f25ff0ef          	jal	ra,2105be4 <alt_get_errno>
 2105cc4:	00050713          	mv	a4,a0
 2105cc8:	fec42783          	lw	a5,-20(s0)
 2105ccc:	40f007b3          	neg	a5,a5
 2105cd0:	00f72023          	sw	a5,0(a4)
      return -1;
 2105cd4:	fff00793          	li	a5,-1
 2105cd8:	0200006f          	j	2105cf8 <_close+0xcc>
    }
    return 0;
 2105cdc:	00000793          	li	a5,0
 2105ce0:	0180006f          	j	2105cf8 <_close+0xcc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2105ce4:	f01ff0ef          	jal	ra,2105be4 <alt_get_errno>
 2105ce8:	00050713          	mv	a4,a0
 2105cec:	05100793          	li	a5,81
 2105cf0:	00f72023          	sw	a5,0(a4)
    return -1;
 2105cf4:	fff00793          	li	a5,-1
  }
}
 2105cf8:	00078513          	mv	a0,a5
 2105cfc:	02c12083          	lw	ra,44(sp)
 2105d00:	02812403          	lw	s0,40(sp)
 2105d04:	03010113          	addi	sp,sp,48
 2105d08:	00008067          	ret

02105d0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2105d0c:	fd010113          	addi	sp,sp,-48
 2105d10:	02812623          	sw	s0,44(sp)
 2105d14:	03010413          	addi	s0,sp,48
 2105d18:	fca42e23          	sw	a0,-36(s0)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2105d1c:	00000013          	nop
 2105d20:	fdc42783          	lw	a5,-36(s0)
 2105d24:	fef42623          	sw	a5,-20(s0)
 * Routine called on exit.
 * TODO: Add support for GMON/gprof.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int a0 asm ("a0") = exit_code;
 2105d28:	fec42503          	lw	a0,-20(s0)
    "ebreak" 
    : 
    : "r"(a0), "r"(a1));

#else /* !DEBUG_STUB */
  if (a0) {
 2105d2c:	00050793          	mv	a5,a0
 2105d30:	00078663          	beqz	a5,2105d3c <_exit+0x30>
    ALT_SIM_FAIL();
 2105d34:	7c103013          	sltiu	zero,zero,1985
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 2105d38:	0080006f          	j	2105d40 <_exit+0x34>
    ALT_SIM_PASS();
 2105d3c:	7c203013          	sltiu	zero,zero,1986
}
 2105d40:	00000013          	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2105d44:	00000013          	nop
 2105d48:	ffdff06f          	j	2105d44 <_exit+0x38>

02105d4c <alt_get_errno>:
{
 2105d4c:	ff010113          	addi	sp,sp,-16
 2105d50:	00112623          	sw	ra,12(sp)
 2105d54:	00812423          	sw	s0,8(sp)
 2105d58:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 2105d5c:	000027b7          	lui	a5,0x2
 2105d60:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2105d64:	00078c63          	beqz	a5,2105d7c <alt_get_errno+0x30>
 2105d68:	000027b7          	lui	a5,0x2
 2105d6c:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2105d70:	000780e7          	jalr	a5
 2105d74:	00050793          	mv	a5,a0
 2105d78:	0080006f          	j	2105d80 <alt_get_errno+0x34>
 2105d7c:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 2105d80:	00078513          	mv	a0,a5
 2105d84:	00c12083          	lw	ra,12(sp)
 2105d88:	00812403          	lw	s0,8(sp)
 2105d8c:	01010113          	addi	sp,sp,16
 2105d90:	00008067          	ret

02105d94 <_fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2105d94:	fd010113          	addi	sp,sp,-48
 2105d98:	02112623          	sw	ra,44(sp)
 2105d9c:	02812423          	sw	s0,40(sp)
 2105da0:	03010413          	addi	s0,sp,48
 2105da4:	fca42e23          	sw	a0,-36(s0)
 2105da8:	fcb42c23          	sw	a1,-40(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2105dac:	fdc42783          	lw	a5,-36(s0)
 2105db0:	0207c463          	bltz	a5,2105dd8 <_fstat+0x44>
 2105db4:	fdc42703          	lw	a4,-36(s0)
 2105db8:	00070793          	mv	a5,a4
 2105dbc:	00179793          	slli	a5,a5,0x1
 2105dc0:	00e787b3          	add	a5,a5,a4
 2105dc4:	00279793          	slli	a5,a5,0x2
 2105dc8:	00001737          	lui	a4,0x1
 2105dcc:	4cc70713          	addi	a4,a4,1228 # 14cc <alt_fd_list>
 2105dd0:	00e787b3          	add	a5,a5,a4
 2105dd4:	0080006f          	j	2105ddc <_fstat+0x48>
 2105dd8:	00000793          	li	a5,0
 2105ddc:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
 2105de0:	fec42783          	lw	a5,-20(s0)
 2105de4:	04078463          	beqz	a5,2105e2c <_fstat+0x98>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2105de8:	fec42783          	lw	a5,-20(s0)
 2105dec:	0007a783          	lw	a5,0(a5)
 2105df0:	0207a783          	lw	a5,32(a5)
 2105df4:	02078263          	beqz	a5,2105e18 <_fstat+0x84>
    {
      return fd->dev->fstat(fd, st);
 2105df8:	fec42783          	lw	a5,-20(s0)
 2105dfc:	0007a783          	lw	a5,0(a5)
 2105e00:	0207a783          	lw	a5,32(a5)
 2105e04:	fd842583          	lw	a1,-40(s0)
 2105e08:	fec42503          	lw	a0,-20(s0)
 2105e0c:	000780e7          	jalr	a5
 2105e10:	00050793          	mv	a5,a0
 2105e14:	02c0006f          	j	2105e40 <_fstat+0xac>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2105e18:	fd842783          	lw	a5,-40(s0)
 2105e1c:	00002737          	lui	a4,0x2
 2105e20:	00e7a223          	sw	a4,4(a5)
      return 0;
 2105e24:	00000793          	li	a5,0
 2105e28:	0180006f          	j	2105e40 <_fstat+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2105e2c:	f21ff0ef          	jal	ra,2105d4c <alt_get_errno>
 2105e30:	00050713          	mv	a4,a0
 2105e34:	05100793          	li	a5,81
 2105e38:	00f72023          	sw	a5,0(a4) # 2000 <__alt_heap_start+0x38>
    return -1;
 2105e3c:	fff00793          	li	a5,-1
  }
}
 2105e40:	00078513          	mv	a0,a5
 2105e44:	02c12083          	lw	ra,44(sp)
 2105e48:	02812403          	lw	s0,40(sp)
 2105e4c:	03010113          	addi	sp,sp,48
 2105e50:	00008067          	ret

02105e54 <alt_get_errno>:
{
 2105e54:	ff010113          	addi	sp,sp,-16
 2105e58:	00112623          	sw	ra,12(sp)
 2105e5c:	00812423          	sw	s0,8(sp)
 2105e60:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 2105e64:	000027b7          	lui	a5,0x2
 2105e68:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2105e6c:	00078c63          	beqz	a5,2105e84 <alt_get_errno+0x30>
 2105e70:	000027b7          	lui	a5,0x2
 2105e74:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2105e78:	000780e7          	jalr	a5
 2105e7c:	00050793          	mv	a5,a0
 2105e80:	0080006f          	j	2105e88 <alt_get_errno+0x34>
 2105e84:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 2105e88:	00078513          	mv	a0,a5
 2105e8c:	00c12083          	lw	ra,12(sp)
 2105e90:	00812403          	lw	s0,8(sp)
 2105e94:	01010113          	addi	sp,sp,16
 2105e98:	00008067          	ret

02105e9c <_isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2105e9c:	f7010113          	addi	sp,sp,-144
 2105ea0:	08112623          	sw	ra,140(sp)
 2105ea4:	08812423          	sw	s0,136(sp)
 2105ea8:	09010413          	addi	s0,sp,144
 2105eac:	f6a42e23          	sw	a0,-132(s0)
 2105eb0:	89c1a703          	lw	a4,-1892(gp) # 1f1c <__stack_chk_guard>
 2105eb4:	fee42623          	sw	a4,-20(s0)
 2105eb8:	00000713          	li	a4,0
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
 2105ebc:	f8042a23          	sw	zero,-108(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2105ec0:	f7c42783          	lw	a5,-132(s0)
 2105ec4:	0207c463          	bltz	a5,2105eec <_isatty+0x50>
 2105ec8:	f7c42703          	lw	a4,-132(s0)
 2105ecc:	00070793          	mv	a5,a4
 2105ed0:	00179793          	slli	a5,a5,0x1
 2105ed4:	00e787b3          	add	a5,a5,a4
 2105ed8:	00279793          	slli	a5,a5,0x2
 2105edc:	00001737          	lui	a4,0x1
 2105ee0:	4cc70713          	addi	a4,a4,1228 # 14cc <alt_fd_list>
 2105ee4:	00e787b3          	add	a5,a5,a4
 2105ee8:	0080006f          	j	2105ef0 <_isatty+0x54>
 2105eec:	00000793          	li	a5,0
 2105ef0:	f8f42623          	sw	a5,-116(s0)
  
  if (fd)
 2105ef4:	f8c42783          	lw	a5,-116(s0)
 2105ef8:	04078a63          	beqz	a5,2105f4c <_isatty+0xb0>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2105efc:	f8c42783          	lw	a5,-116(s0)
 2105f00:	0007a783          	lw	a5,0(a5)
 2105f04:	0207a783          	lw	a5,32(a5)
 2105f08:	00079663          	bnez	a5,2105f14 <_isatty+0x78>
    {
      return 1;
 2105f0c:	00100793          	li	a5,1
 2105f10:	0500006f          	j	2105f60 <_isatty+0xc4>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      if (fstat (file, &stat) < 0)
 2105f14:	f9040793          	addi	a5,s0,-112
 2105f18:	00078593          	mv	a1,a5
 2105f1c:	f7c42503          	lw	a0,-132(s0)
 2105f20:	365000ef          	jal	ra,2106a84 <fstat>
 2105f24:	00050793          	mv	a5,a0
 2105f28:	0007d663          	bgez	a5,2105f34 <_isatty+0x98>
        return 0;  // fstat will set ERRNO
 2105f2c:	00000793          	li	a5,0
 2105f30:	0300006f          	j	2105f60 <_isatty+0xc4>
      else
        return (stat.st_mode == _IFCHR) ? 1 : 0;
 2105f34:	f9442703          	lw	a4,-108(s0)
 2105f38:	ffffe7b7          	lui	a5,0xffffe
 2105f3c:	00f707b3          	add	a5,a4,a5
 2105f40:	0017b793          	seqz	a5,a5
 2105f44:	0ff7f793          	zext.b	a5,a5
 2105f48:	0180006f          	j	2105f60 <_isatty+0xc4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2105f4c:	f09ff0ef          	jal	ra,2105e54 <alt_get_errno>
 2105f50:	00050713          	mv	a4,a0
 2105f54:	05100793          	li	a5,81
 2105f58:	00f72023          	sw	a5,0(a4)
    return 0;
 2105f5c:	00000793          	li	a5,0
  }
}
 2105f60:	00078713          	mv	a4,a5
 2105f64:	fec42683          	lw	a3,-20(s0)
 2105f68:	89c1a783          	lw	a5,-1892(gp) # 1f1c <__stack_chk_guard>
 2105f6c:	00f6c7b3          	xor	a5,a3,a5
 2105f70:	00000693          	li	a3,0
 2105f74:	00078463          	beqz	a5,2105f7c <_isatty+0xe0>
 2105f78:	251000ef          	jal	ra,21069c8 <__stack_chk_fail>
 2105f7c:	00070513          	mv	a0,a4
 2105f80:	08c12083          	lw	ra,140(sp)
 2105f84:	08812403          	lw	s0,136(sp)
 2105f88:	09010113          	addi	sp,sp,144
 2105f8c:	00008067          	ret

02105f90 <alt_get_errno>:
{
 2105f90:	ff010113          	addi	sp,sp,-16
 2105f94:	00112623          	sw	ra,12(sp)
 2105f98:	00812423          	sw	s0,8(sp)
 2105f9c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 2105fa0:	000027b7          	lui	a5,0x2
 2105fa4:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2105fa8:	00078c63          	beqz	a5,2105fc0 <alt_get_errno+0x30>
 2105fac:	000027b7          	lui	a5,0x2
 2105fb0:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2105fb4:	000780e7          	jalr	a5
 2105fb8:	00050793          	mv	a5,a0
 2105fbc:	0080006f          	j	2105fc4 <alt_get_errno+0x34>
 2105fc0:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 2105fc4:	00078513          	mv	a0,a5
 2105fc8:	00c12083          	lw	ra,12(sp)
 2105fcc:	00812403          	lw	s0,8(sp)
 2105fd0:	01010113          	addi	sp,sp,16
 2105fd4:	00008067          	ret

02105fd8 <_lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2105fd8:	fd010113          	addi	sp,sp,-48
 2105fdc:	02112623          	sw	ra,44(sp)
 2105fe0:	02812423          	sw	s0,40(sp)
 2105fe4:	03010413          	addi	s0,sp,48
 2105fe8:	fca42e23          	sw	a0,-36(s0)
 2105fec:	fcb42c23          	sw	a1,-40(s0)
 2105ff0:	fcc42a23          	sw	a2,-44(s0)
  alt_fd* fd;
  off_t   rc = 0; 
 2105ff4:	fe042423          	sw	zero,-24(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2105ff8:	fdc42783          	lw	a5,-36(s0)
 2105ffc:	0207c463          	bltz	a5,2106024 <_lseek+0x4c>
 2106000:	fdc42703          	lw	a4,-36(s0)
 2106004:	00070793          	mv	a5,a4
 2106008:	00179793          	slli	a5,a5,0x1
 210600c:	00e787b3          	add	a5,a5,a4
 2106010:	00279793          	slli	a5,a5,0x2
 2106014:	00001737          	lui	a4,0x1
 2106018:	4cc70713          	addi	a4,a4,1228 # 14cc <alt_fd_list>
 210601c:	00e787b3          	add	a5,a5,a4
 2106020:	0080006f          	j	2106028 <_lseek+0x50>
 2106024:	00000793          	li	a5,0
 2106028:	fef42623          	sw	a5,-20(s0)
  
  if (fd) 
 210602c:	fec42783          	lw	a5,-20(s0)
 2106030:	04078263          	beqz	a5,2106074 <_lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2106034:	fec42783          	lw	a5,-20(s0)
 2106038:	0007a783          	lw	a5,0(a5)
 210603c:	01c7a783          	lw	a5,28(a5)
 2106040:	02078463          	beqz	a5,2106068 <_lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2106044:	fec42783          	lw	a5,-20(s0)
 2106048:	0007a783          	lw	a5,0(a5)
 210604c:	01c7a783          	lw	a5,28(a5)
 2106050:	fd442603          	lw	a2,-44(s0)
 2106054:	fd842583          	lw	a1,-40(s0)
 2106058:	fec42503          	lw	a0,-20(s0)
 210605c:	000780e7          	jalr	a5
 2106060:	fea42423          	sw	a0,-24(s0)
 2106064:	0180006f          	j	210607c <_lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2106068:	f7a00793          	li	a5,-134
 210606c:	fef42423          	sw	a5,-24(s0)
 2106070:	00c0006f          	j	210607c <_lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 2106074:	faf00793          	li	a5,-81
 2106078:	fef42423          	sw	a5,-24(s0)
  }

  if (rc < 0)
 210607c:	fe842783          	lw	a5,-24(s0)
 2106080:	0207d063          	bgez	a5,21060a0 <_lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 2106084:	f0dff0ef          	jal	ra,2105f90 <alt_get_errno>
 2106088:	00050713          	mv	a4,a0
 210608c:	fe842783          	lw	a5,-24(s0)
 2106090:	40f007b3          	neg	a5,a5
 2106094:	00f72023          	sw	a5,0(a4)
    rc = -1;
 2106098:	fff00793          	li	a5,-1
 210609c:	fef42423          	sw	a5,-24(s0)
  }

  return rc;
 21060a0:	fe842783          	lw	a5,-24(s0)
}
 21060a4:	00078513          	mv	a0,a5
 21060a8:	02c12083          	lw	ra,44(sp)
 21060ac:	02812403          	lw	s0,40(sp)
 21060b0:	03010113          	addi	sp,sp,48
 21060b4:	00008067          	ret

021060b8 <alt_get_errno>:
{
 21060b8:	ff010113          	addi	sp,sp,-16
 21060bc:	00112623          	sw	ra,12(sp)
 21060c0:	00812423          	sw	s0,8(sp)
 21060c4:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 21060c8:	000027b7          	lui	a5,0x2
 21060cc:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 21060d0:	00078c63          	beqz	a5,21060e8 <alt_get_errno+0x30>
 21060d4:	000027b7          	lui	a5,0x2
 21060d8:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 21060dc:	000780e7          	jalr	a5
 21060e0:	00050793          	mv	a5,a0
 21060e4:	0080006f          	j	21060ec <alt_get_errno+0x34>
 21060e8:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 21060ec:	00078513          	mv	a0,a5
 21060f0:	00c12083          	lw	ra,12(sp)
 21060f4:	00812403          	lw	s0,8(sp)
 21060f8:	01010113          	addi	sp,sp,16
 21060fc:	00008067          	ret

02106100 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2106100:	fd010113          	addi	sp,sp,-48
 2106104:	02812623          	sw	s0,44(sp)
 2106108:	03010413          	addi	s0,sp,48
 210610c:	fca42e23          	sw	a0,-36(s0)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2106110:	fdc42783          	lw	a5,-36(s0)
 2106114:	0087a703          	lw	a4,8(a5)
 2106118:	400007b7          	lui	a5,0x40000
 210611c:	00f76733          	or	a4,a4,a5
 2106120:	fdc42783          	lw	a5,-36(s0)
 2106124:	00e7a423          	sw	a4,8(a5) # 40000008 <__flash_rwdata_start+0x3def8d70>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2106128:	fe042623          	sw	zero,-20(s0)
 210612c:	0980006f          	j	21061c4 <alt_file_locked+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2106130:	000017b7          	lui	a5,0x1
 2106134:	4cc78693          	addi	a3,a5,1228 # 14cc <alt_fd_list>
 2106138:	fec42703          	lw	a4,-20(s0)
 210613c:	00070793          	mv	a5,a4
 2106140:	00179793          	slli	a5,a5,0x1
 2106144:	00e787b3          	add	a5,a5,a4
 2106148:	00279793          	slli	a5,a5,0x2
 210614c:	00f687b3          	add	a5,a3,a5
 2106150:	0007a703          	lw	a4,0(a5)
 2106154:	fdc42783          	lw	a5,-36(s0)
 2106158:	0007a783          	lw	a5,0(a5)
 210615c:	04f71e63          	bne	a4,a5,21061b8 <alt_file_locked+0xb8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2106160:	000017b7          	lui	a5,0x1
 2106164:	4cc78693          	addi	a3,a5,1228 # 14cc <alt_fd_list>
 2106168:	fec42703          	lw	a4,-20(s0)
 210616c:	00070793          	mv	a5,a4
 2106170:	00179793          	slli	a5,a5,0x1
 2106174:	00e787b3          	add	a5,a5,a4
 2106178:	00279793          	slli	a5,a5,0x2
 210617c:	00f687b3          	add	a5,a3,a5
 2106180:	0087a783          	lw	a5,8(a5)
    if ((alt_fd_list[i].dev == fd->dev) &&
 2106184:	0207da63          	bgez	a5,21061b8 <alt_file_locked+0xb8>
        (&alt_fd_list[i] != fd))
 2106188:	fec42703          	lw	a4,-20(s0)
 210618c:	00070793          	mv	a5,a4
 2106190:	00179793          	slli	a5,a5,0x1
 2106194:	00e787b3          	add	a5,a5,a4
 2106198:	00279793          	slli	a5,a5,0x2
 210619c:	00001737          	lui	a4,0x1
 21061a0:	4cc70713          	addi	a4,a4,1228 # 14cc <alt_fd_list>
 21061a4:	00e787b3          	add	a5,a5,a4
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 21061a8:	fdc42703          	lw	a4,-36(s0)
 21061ac:	00f70663          	beq	a4,a5,21061b8 <alt_file_locked+0xb8>
    {
      return -EACCES;
 21061b0:	ff300793          	li	a5,-13
 21061b4:	0280006f          	j	21061dc <alt_file_locked+0xdc>
  for (i = 0; i <= alt_max_fd; i++)
 21061b8:	fec42783          	lw	a5,-20(s0)
 21061bc:	00178793          	addi	a5,a5,1
 21061c0:	fef42623          	sw	a5,-20(s0)
 21061c4:	000027b7          	lui	a5,0x2
 21061c8:	e907a783          	lw	a5,-368(a5) # 1e90 <alt_max_fd>
 21061cc:	00078713          	mv	a4,a5
 21061d0:	fec42783          	lw	a5,-20(s0)
 21061d4:	f4f77ee3          	bgeu	a4,a5,2106130 <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 21061d8:	00000793          	li	a5,0
}
 21061dc:	00078513          	mv	a0,a5
 21061e0:	02c12403          	lw	s0,44(sp)
 21061e4:	03010113          	addi	sp,sp,48
 21061e8:	00008067          	ret

021061ec <_open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 21061ec:	fc010113          	addi	sp,sp,-64
 21061f0:	02112e23          	sw	ra,60(sp)
 21061f4:	02812c23          	sw	s0,56(sp)
 21061f8:	04010413          	addi	s0,sp,64
 21061fc:	fca42623          	sw	a0,-52(s0)
 2106200:	fcb42423          	sw	a1,-56(s0)
 2106204:	fcc42223          	sw	a2,-60(s0)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2106208:	fff00793          	li	a5,-1
 210620c:	fef42023          	sw	a5,-32(s0)
  int status = -ENODEV;
 2106210:	fed00793          	li	a5,-19
 2106214:	fef42223          	sw	a5,-28(s0)
  int isafs = 0;
 2106218:	fe042423          	sw	zero,-24(s0)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 210621c:	000027b7          	lui	a5,0x2
 2106220:	e8878593          	addi	a1,a5,-376 # 1e88 <alt_dev_list>
 2106224:	fcc42503          	lw	a0,-52(s0)
 2106228:	47c000ef          	jal	ra,21066a4 <alt_find_dev>
 210622c:	fca42e23          	sw	a0,-36(s0)
 2106230:	fdc42783          	lw	a5,-36(s0)
 2106234:	00079c63          	bnez	a5,210624c <_open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2106238:	fcc42503          	lw	a0,-52(s0)
 210623c:	588000ef          	jal	ra,21067c4 <alt_find_file>
 2106240:	fca42e23          	sw	a0,-36(s0)
    isafs = 1;
 2106244:	00100793          	li	a5,1
 2106248:	fef42423          	sw	a5,-24(s0)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 210624c:	fdc42783          	lw	a5,-36(s0)
 2106250:	0a078c63          	beqz	a5,2106308 <_open+0x11c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2106254:	fdc42503          	lw	a0,-36(s0)
 2106258:	6a8000ef          	jal	ra,2106900 <alt_get_fd>
 210625c:	fea42023          	sw	a0,-32(s0)
 2106260:	fe042783          	lw	a5,-32(s0)
 2106264:	0007d863          	bgez	a5,2106274 <_open+0x88>
    {
      status = index;
 2106268:	fe042783          	lw	a5,-32(s0)
 210626c:	fef42223          	sw	a5,-28(s0)
 2106270:	0a00006f          	j	2106310 <_open+0x124>
    }
    else
    {
      fd = &alt_fd_list[index];
 2106274:	fe042703          	lw	a4,-32(s0)
 2106278:	00070793          	mv	a5,a4
 210627c:	00179793          	slli	a5,a5,0x1
 2106280:	00e787b3          	add	a5,a5,a4
 2106284:	00279793          	slli	a5,a5,0x2
 2106288:	00001737          	lui	a4,0x1
 210628c:	4cc70713          	addi	a4,a4,1228 # 14cc <alt_fd_list>
 2106290:	00e787b3          	add	a5,a5,a4
 2106294:	fef42623          	sw	a5,-20(s0)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2106298:	fc842703          	lw	a4,-56(s0)
 210629c:	400007b7          	lui	a5,0x40000
 21062a0:	fff78793          	addi	a5,a5,-1 # 3fffffff <__flash_rwdata_start+0x3def8d67>
 21062a4:	00f77733          	and	a4,a4,a5
 21062a8:	fec42783          	lw	a5,-20(s0)
 21062ac:	00e7a423          	sw	a4,8(a5)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 21062b0:	fe842783          	lw	a5,-24(s0)
 21062b4:	00079c63          	bnez	a5,21062cc <_open+0xe0>
 21062b8:	fec42503          	lw	a0,-20(s0)
 21062bc:	e45ff0ef          	jal	ra,2106100 <alt_file_locked>
 21062c0:	fea42223          	sw	a0,-28(s0)
 21062c4:	fe442783          	lw	a5,-28(s0)
 21062c8:	0407c463          	bltz	a5,2106310 <_open+0x124>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 21062cc:	fdc42783          	lw	a5,-36(s0)
 21062d0:	00c7a783          	lw	a5,12(a5)
 21062d4:	02078463          	beqz	a5,21062fc <_open+0x110>
 21062d8:	fdc42783          	lw	a5,-36(s0)
 21062dc:	00c7a783          	lw	a5,12(a5)
 21062e0:	fc442683          	lw	a3,-60(s0)
 21062e4:	fc842603          	lw	a2,-56(s0)
 21062e8:	fcc42583          	lw	a1,-52(s0)
 21062ec:	fec42503          	lw	a0,-20(s0)
 21062f0:	000780e7          	jalr	a5
 21062f4:	00050793          	mv	a5,a0
 21062f8:	0080006f          	j	2106300 <_open+0x114>
 21062fc:	00000793          	li	a5,0
 2106300:	fef42223          	sw	a5,-28(s0)
 2106304:	00c0006f          	j	2106310 <_open+0x124>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2106308:	fed00793          	li	a5,-19
 210630c:	fef42223          	sw	a5,-28(s0)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2106310:	fe442783          	lw	a5,-28(s0)
 2106314:	0207d463          	bgez	a5,210633c <_open+0x150>
  {
    alt_release_fd (index);  
 2106318:	fe042503          	lw	a0,-32(s0)
 210631c:	e59fb0ef          	jal	ra,2102174 <alt_release_fd>
    ALT_ERRNO = -status;
 2106320:	d99ff0ef          	jal	ra,21060b8 <alt_get_errno>
 2106324:	00050713          	mv	a4,a0
 2106328:	fe442783          	lw	a5,-28(s0)
 210632c:	40f007b3          	neg	a5,a5
 2106330:	00f72023          	sw	a5,0(a4)
    return -1;
 2106334:	fff00793          	li	a5,-1
 2106338:	0080006f          	j	2106340 <_open+0x154>
  }
  
  /* return the reference upon success */

  return index;
 210633c:	fe042783          	lw	a5,-32(s0)
}
 2106340:	00078513          	mv	a0,a5
 2106344:	03c12083          	lw	ra,60(sp)
 2106348:	03812403          	lw	s0,56(sp)
 210634c:	04010113          	addi	sp,sp,64
 2106350:	00008067          	ret

02106354 <alt_get_errno>:
{
 2106354:	ff010113          	addi	sp,sp,-16
 2106358:	00112623          	sw	ra,12(sp)
 210635c:	00812423          	sw	s0,8(sp)
 2106360:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 2106364:	000027b7          	lui	a5,0x2
 2106368:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 210636c:	00078c63          	beqz	a5,2106384 <alt_get_errno+0x30>
 2106370:	000027b7          	lui	a5,0x2
 2106374:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2106378:	000780e7          	jalr	a5
 210637c:	00050793          	mv	a5,a0
 2106380:	0080006f          	j	2106388 <alt_get_errno+0x34>
 2106384:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 2106388:	00078513          	mv	a0,a5
 210638c:	00c12083          	lw	ra,12(sp)
 2106390:	00812403          	lw	s0,8(sp)
 2106394:	01010113          	addi	sp,sp,16
 2106398:	00008067          	ret

0210639c <_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 210639c:	fd010113          	addi	sp,sp,-48
 21063a0:	02112623          	sw	ra,44(sp)
 21063a4:	02812423          	sw	s0,40(sp)
 21063a8:	03010413          	addi	s0,sp,48
 21063ac:	fca42e23          	sw	a0,-36(s0)
 21063b0:	fcb42c23          	sw	a1,-40(s0)
 21063b4:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 21063b8:	fdc42783          	lw	a5,-36(s0)
 21063bc:	0207c463          	bltz	a5,21063e4 <_read+0x48>
 21063c0:	fdc42703          	lw	a4,-36(s0)
 21063c4:	00070793          	mv	a5,a4
 21063c8:	00179793          	slli	a5,a5,0x1
 21063cc:	00e787b3          	add	a5,a5,a4
 21063d0:	00279793          	slli	a5,a5,0x2
 21063d4:	00001737          	lui	a4,0x1
 21063d8:	4cc70713          	addi	a4,a4,1228 # 14cc <alt_fd_list>
 21063dc:	00e787b3          	add	a5,a5,a4
 21063e0:	0080006f          	j	21063e8 <_read+0x4c>
 21063e4:	00000793          	li	a5,0
 21063e8:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
 21063ec:	fe842783          	lw	a5,-24(s0)
 21063f0:	08078663          	beqz	a5,210647c <_read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 21063f4:	fe842783          	lw	a5,-24(s0)
 21063f8:	0087a783          	lw	a5,8(a5)
 21063fc:	0037f713          	andi	a4,a5,3
 2106400:	00100793          	li	a5,1
 2106404:	06f70263          	beq	a4,a5,2106468 <_read+0xcc>
        (fd->dev->read))
 2106408:	fe842783          	lw	a5,-24(s0)
 210640c:	0007a783          	lw	a5,0(a5)
 2106410:	0147a783          	lw	a5,20(a5)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2106414:	04078a63          	beqz	a5,2106468 <_read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2106418:	fe842783          	lw	a5,-24(s0)
 210641c:	0007a783          	lw	a5,0(a5)
 2106420:	0147a783          	lw	a5,20(a5)
 2106424:	fd442703          	lw	a4,-44(s0)
 2106428:	00070613          	mv	a2,a4
 210642c:	fd842583          	lw	a1,-40(s0)
 2106430:	fe842503          	lw	a0,-24(s0)
 2106434:	000780e7          	jalr	a5
 2106438:	fea42623          	sw	a0,-20(s0)
 210643c:	fec42783          	lw	a5,-20(s0)
 2106440:	0207d063          	bgez	a5,2106460 <_read+0xc4>
        {
          ALT_ERRNO = -rval;
 2106444:	f11ff0ef          	jal	ra,2106354 <alt_get_errno>
 2106448:	00050713          	mv	a4,a0
 210644c:	fec42783          	lw	a5,-20(s0)
 2106450:	40f007b3          	neg	a5,a5
 2106454:	00f72023          	sw	a5,0(a4)
          return -1;
 2106458:	fff00793          	li	a5,-1
 210645c:	0340006f          	j	2106490 <_read+0xf4>
        }
        return rval;
 2106460:	fec42783          	lw	a5,-20(s0)
 2106464:	02c0006f          	j	2106490 <_read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2106468:	eedff0ef          	jal	ra,2106354 <alt_get_errno>
 210646c:	00050713          	mv	a4,a0
 2106470:	00d00793          	li	a5,13
 2106474:	00f72023          	sw	a5,0(a4)
 2106478:	0140006f          	j	210648c <_read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 210647c:	ed9ff0ef          	jal	ra,2106354 <alt_get_errno>
 2106480:	00050713          	mv	a4,a0
 2106484:	05100793          	li	a5,81
 2106488:	00f72023          	sw	a5,0(a4)
  }
  return -1;
 210648c:	fff00793          	li	a5,-1
}
 2106490:	00078513          	mv	a0,a5
 2106494:	02c12083          	lw	ra,44(sp)
 2106498:	02812403          	lw	s0,40(sp)
 210649c:	03010113          	addi	sp,sp,48
 21064a0:	00008067          	ret

021064a4 <_sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 21064a4:	fc010113          	addi	sp,sp,-64
 21064a8:	02812e23          	sw	s0,60(sp)
 21064ac:	04010413          	addi	s0,sp,64
 21064b0:	fca42623          	sw	a0,-52(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
 21064b4:	00800793          	li	a5,8
 21064b8:	3007b7f3          	csrrc	a5,mstatus,a5
 21064bc:	fef42223          	sw	a5,-28(s0)
    return context;
 21064c0:	fe442783          	lw	a5,-28(s0)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 21064c4:	fcf42e23          	sw	a5,-36(s0)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 21064c8:	8301a783          	lw	a5,-2000(gp) # 1eb0 <heap_end>
 21064cc:	00378793          	addi	a5,a5,3
 21064d0:	ffc7f793          	andi	a5,a5,-4
 21064d4:	00078713          	mv	a4,a5
 21064d8:	82e1a823          	sw	a4,-2000(gp) # 1eb0 <heap_end>
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 21064dc:	8301a703          	lw	a4,-2000(gp) # 1eb0 <heap_end>
 21064e0:	fcc42783          	lw	a5,-52(s0)
 21064e4:	00f70733          	add	a4,a4,a5
 21064e8:	020007b7          	lui	a5,0x2000
 21064ec:	00078793          	mv	a5,a5
 21064f0:	02e7f263          	bgeu	a5,a4,2106514 <_sbrk+0x70>
 21064f4:	fdc42783          	lw	a5,-36(s0)
 21064f8:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 21064fc:	fe842783          	lw	a5,-24(s0)
 2106500:	0087f793          	andi	a5,a5,8
 2106504:	3007a073          	csrs	mstatus,a5
}
 2106508:	00000013          	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 210650c:	fff00793          	li	a5,-1
 2106510:	0380006f          	j	2106548 <_sbrk+0xa4>
  }
#endif

  prev_heap_end = heap_end; 
 2106514:	8301a783          	lw	a5,-2000(gp) # 1eb0 <heap_end>
 2106518:	fef42023          	sw	a5,-32(s0)
  heap_end += incr; 
 210651c:	8301a703          	lw	a4,-2000(gp) # 1eb0 <heap_end>
 2106520:	fcc42783          	lw	a5,-52(s0)
 2106524:	00f70733          	add	a4,a4,a5
 2106528:	82e1a823          	sw	a4,-2000(gp) # 1eb0 <heap_end>
 210652c:	fdc42783          	lw	a5,-36(s0)
 2106530:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
 2106534:	fec42783          	lw	a5,-20(s0)
 2106538:	0087f793          	andi	a5,a5,8
 210653c:	3007a073          	csrs	mstatus,a5
}
 2106540:	00000013          	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2106544:	fe042783          	lw	a5,-32(s0)
}
 2106548:	00078513          	mv	a0,a5
 210654c:	03c12403          	lw	s0,60(sp)
 2106550:	04010113          	addi	sp,sp,64
 2106554:	00008067          	ret

02106558 <alt_get_errno>:
{
 2106558:	ff010113          	addi	sp,sp,-16
 210655c:	00112623          	sw	ra,12(sp)
 2106560:	00812423          	sw	s0,8(sp)
 2106564:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 2106568:	000027b7          	lui	a5,0x2
 210656c:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2106570:	00078c63          	beqz	a5,2106588 <alt_get_errno+0x30>
 2106574:	000027b7          	lui	a5,0x2
 2106578:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 210657c:	000780e7          	jalr	a5
 2106580:	00050793          	mv	a5,a0
 2106584:	0080006f          	j	210658c <alt_get_errno+0x34>
 2106588:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 210658c:	00078513          	mv	a0,a5
 2106590:	00c12083          	lw	ra,12(sp)
 2106594:	00812403          	lw	s0,8(sp)
 2106598:	01010113          	addi	sp,sp,16
 210659c:	00008067          	ret

021065a0 <_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 21065a0:	fd010113          	addi	sp,sp,-48
 21065a4:	02112623          	sw	ra,44(sp)
 21065a8:	02812423          	sw	s0,40(sp)
 21065ac:	03010413          	addi	s0,sp,48
 21065b0:	fca42e23          	sw	a0,-36(s0)
 21065b4:	fcb42c23          	sw	a1,-40(s0)
 21065b8:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 21065bc:	fdc42783          	lw	a5,-36(s0)
 21065c0:	0207c463          	bltz	a5,21065e8 <_write+0x48>
 21065c4:	fdc42703          	lw	a4,-36(s0)
 21065c8:	00070793          	mv	a5,a4
 21065cc:	00179793          	slli	a5,a5,0x1
 21065d0:	00e787b3          	add	a5,a5,a4
 21065d4:	00279793          	slli	a5,a5,0x2
 21065d8:	00001737          	lui	a4,0x1
 21065dc:	4cc70713          	addi	a4,a4,1228 # 14cc <alt_fd_list>
 21065e0:	00e787b3          	add	a5,a5,a4
 21065e4:	0080006f          	j	21065ec <_write+0x4c>
 21065e8:	00000793          	li	a5,0
 21065ec:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
 21065f0:	fe842783          	lw	a5,-24(s0)
 21065f4:	08078463          	beqz	a5,210667c <_write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 21065f8:	fe842783          	lw	a5,-24(s0)
 21065fc:	0087a783          	lw	a5,8(a5)
 2106600:	0037f793          	andi	a5,a5,3
 2106604:	06078263          	beqz	a5,2106668 <_write+0xc8>
 2106608:	fe842783          	lw	a5,-24(s0)
 210660c:	0007a783          	lw	a5,0(a5)
 2106610:	0187a783          	lw	a5,24(a5)
 2106614:	04078a63          	beqz	a5,2106668 <_write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2106618:	fe842783          	lw	a5,-24(s0)
 210661c:	0007a783          	lw	a5,0(a5)
 2106620:	0187a783          	lw	a5,24(a5)
 2106624:	fd442703          	lw	a4,-44(s0)
 2106628:	00070613          	mv	a2,a4
 210662c:	fd842583          	lw	a1,-40(s0)
 2106630:	fe842503          	lw	a0,-24(s0)
 2106634:	000780e7          	jalr	a5
 2106638:	fea42623          	sw	a0,-20(s0)
 210663c:	fec42783          	lw	a5,-20(s0)
 2106640:	0207d063          	bgez	a5,2106660 <_write+0xc0>
      {
        ALT_ERRNO = -rval;
 2106644:	f15ff0ef          	jal	ra,2106558 <alt_get_errno>
 2106648:	00050713          	mv	a4,a0
 210664c:	fec42783          	lw	a5,-20(s0)
 2106650:	40f007b3          	neg	a5,a5
 2106654:	00f72023          	sw	a5,0(a4)
        return -1;
 2106658:	fff00793          	li	a5,-1
 210665c:	0340006f          	j	2106690 <_write+0xf0>
      }
      return rval;
 2106660:	fec42783          	lw	a5,-20(s0)
 2106664:	02c0006f          	j	2106690 <_write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2106668:	ef1ff0ef          	jal	ra,2106558 <alt_get_errno>
 210666c:	00050713          	mv	a4,a0
 2106670:	00d00793          	li	a5,13
 2106674:	00f72023          	sw	a5,0(a4)
 2106678:	0140006f          	j	210668c <_write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 210667c:	eddff0ef          	jal	ra,2106558 <alt_get_errno>
 2106680:	00050713          	mv	a4,a0
 2106684:	05100793          	li	a5,81
 2106688:	00f72023          	sw	a5,0(a4)
  }
  return -1;
 210668c:	fff00793          	li	a5,-1
}
 2106690:	00078513          	mv	a0,a5
 2106694:	02c12083          	lw	ra,44(sp)
 2106698:	02812403          	lw	s0,40(sp)
 210669c:	03010113          	addi	sp,sp,48
 21066a0:	00008067          	ret

021066a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 21066a4:	fd010113          	addi	sp,sp,-48
 21066a8:	02812623          	sw	s0,44(sp)
 21066ac:	03010413          	addi	s0,sp,48
 21066b0:	fca42e23          	sw	a0,-36(s0)
 21066b4:	fcb42c23          	sw	a1,-40(s0)
    alt_dev* next=NULL; 
 21066b8:	fe042223          	sw	zero,-28(s0)
    alt_32   len=0;
 21066bc:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
 21066c0:	3e800793          	li	a5,1000
 21066c4:	fef42623          	sw	a5,-20(s0)
    
    if (llist == NULL) { return NULL; }
 21066c8:	fd842783          	lw	a5,-40(s0)
 21066cc:	00079663          	bnez	a5,21066d8 <alt_find_dev+0x34>
 21066d0:	00000793          	li	a5,0
 21066d4:	0e00006f          	j	21067b4 <alt_find_dev+0x110>
    next = (alt_dev*) llist->next;
 21066d8:	fd842783          	lw	a5,-40(s0)
 21066dc:	0007a783          	lw	a5,0(a5)
 21066e0:	fef42223          	sw	a5,-28(s0)
    /*
     * Check each list entry in turn, until a match is found, or we reach the
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
 21066e4:	0c00006f          	j	21067a4 <alt_find_dev+0x100>
    {
        len=0;
 21066e8:	fe042423          	sw	zero,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
 21066ec:	0380006f          	j	2106724 <alt_find_dev+0x80>
        {
            if (next->name[len] != name[len]) { break; }
 21066f0:	fe442783          	lw	a5,-28(s0)
 21066f4:	0087a703          	lw	a4,8(a5)
 21066f8:	fe842783          	lw	a5,-24(s0)
 21066fc:	00f707b3          	add	a5,a4,a5
 2106700:	0007c703          	lbu	a4,0(a5)
 2106704:	fe842783          	lw	a5,-24(s0)
 2106708:	fdc42683          	lw	a3,-36(s0)
 210670c:	00f687b3          	add	a5,a3,a5
 2106710:	0007c783          	lbu	a5,0(a5)
 2106714:	04f71663          	bne	a4,a5,2106760 <alt_find_dev+0xbc>
            len++;
 2106718:	fe842783          	lw	a5,-24(s0)
 210671c:	00178793          	addi	a5,a5,1
 2106720:	fef42423          	sw	a5,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
 2106724:	fe842783          	lw	a5,-24(s0)
 2106728:	fdc42703          	lw	a4,-36(s0)
 210672c:	00f707b3          	add	a5,a4,a5
 2106730:	0007c783          	lbu	a5,0(a5)
 2106734:	02078863          	beqz	a5,2106764 <alt_find_dev+0xc0>
 2106738:	fe442783          	lw	a5,-28(s0)
 210673c:	0087a703          	lw	a4,8(a5)
 2106740:	fe842783          	lw	a5,-24(s0)
 2106744:	00f707b3          	add	a5,a4,a5
 2106748:	0007c783          	lbu	a5,0(a5)
 210674c:	00078c63          	beqz	a5,2106764 <alt_find_dev+0xc0>
 2106750:	fe842703          	lw	a4,-24(s0)
 2106754:	fec42783          	lw	a5,-20(s0)
 2106758:	f8f74ce3          	blt	a4,a5,21066f0 <alt_find_dev+0x4c>
 210675c:	0080006f          	j	2106764 <alt_find_dev+0xc0>
            if (next->name[len] != name[len]) { break; }
 2106760:	00000013          	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
 2106764:	fe842783          	lw	a5,-24(s0)
 2106768:	fdc42703          	lw	a4,-36(s0)
 210676c:	00f707b3          	add	a5,a4,a5
 2106770:	0007c783          	lbu	a5,0(a5)
 2106774:	02079263          	bnez	a5,2106798 <alt_find_dev+0xf4>
 2106778:	fe442783          	lw	a5,-28(s0)
 210677c:	0087a703          	lw	a4,8(a5)
 2106780:	fe842783          	lw	a5,-24(s0)
 2106784:	00f707b3          	add	a5,a4,a5
 2106788:	0007c783          	lbu	a5,0(a5)
 210678c:	00079663          	bnez	a5,2106798 <alt_find_dev+0xf4>
 2106790:	fe442783          	lw	a5,-28(s0)
 2106794:	0200006f          	j	21067b4 <alt_find_dev+0x110>

        next = (alt_dev*) next->llist.next;
 2106798:	fe442783          	lw	a5,-28(s0)
 210679c:	0007a783          	lw	a5,0(a5)
 21067a0:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) llist)
 21067a4:	fe442703          	lw	a4,-28(s0)
 21067a8:	fd842783          	lw	a5,-40(s0)
 21067ac:	f2f71ee3          	bne	a4,a5,21066e8 <alt_find_dev+0x44>
    }
  
    /* No match found */
  
    return NULL;
 21067b0:	00000793          	li	a5,0
}
 21067b4:	00078513          	mv	a0,a5
 21067b8:	02c12403          	lw	s0,44(sp)
 21067bc:	03010113          	addi	sp,sp,48
 21067c0:	00008067          	ret

021067c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 21067c4:	fd010113          	addi	sp,sp,-48
 21067c8:	02812623          	sw	s0,44(sp)
 21067cc:	03010413          	addi	s0,sp,48
 21067d0:	fca42e23          	sw	a0,-36(s0)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
 21067d4:	000027b7          	lui	a5,0x2
 21067d8:	e8078793          	addi	a5,a5,-384 # 1e80 <alt_fs_list>
 21067dc:	0007a783          	lw	a5,0(a5)
 21067e0:	fef42223          	sw	a5,-28(s0)
    alt_32   len=0;
 21067e4:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
 21067e8:	3e800793          	li	a5,1000
 21067ec:	fef42623          	sw	a5,-20(s0)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
 21067f0:	0ec0006f          	j	21068dc <alt_find_file+0x118>
    {
        len=0;
 21067f4:	fe042423          	sw	zero,-24(s0)
        while (len < MAX_STRING_LENGTH)    
 21067f8:	0bc0006f          	j	21068b4 <alt_find_file+0xf0>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
 21067fc:	fe442783          	lw	a5,-28(s0)
 2106800:	0087a703          	lw	a4,8(a5)
 2106804:	fe842783          	lw	a5,-24(s0)
 2106808:	00f707b3          	add	a5,a4,a5
 210680c:	0007c703          	lbu	a4,0(a5)
 2106810:	02f00793          	li	a5,47
 2106814:	02f71063          	bne	a4,a5,2106834 <alt_find_file+0x70>
 2106818:	fe442783          	lw	a5,-28(s0)
 210681c:	0087a703          	lw	a4,8(a5)
 2106820:	fe842783          	lw	a5,-24(s0)
 2106824:	00178793          	addi	a5,a5,1
 2106828:	00f707b3          	add	a5,a4,a5
 210682c:	0007c783          	lbu	a5,0(a5)
 2106830:	00078e63          	beqz	a5,210684c <alt_find_file+0x88>
 2106834:	fe442783          	lw	a5,-28(s0)
 2106838:	0087a703          	lw	a4,8(a5)
 210683c:	fe842783          	lw	a5,-24(s0)
 2106840:	00f707b3          	add	a5,a4,a5
 2106844:	0007c783          	lbu	a5,0(a5)
 2106848:	02079c63          	bnez	a5,2106880 <alt_find_file+0xbc>
            { 
                if ((name[len]== '/') || (name[len] == 0))
 210684c:	fe842783          	lw	a5,-24(s0)
 2106850:	fdc42703          	lw	a4,-36(s0)
 2106854:	00f707b3          	add	a5,a4,a5
 2106858:	0007c703          	lbu	a4,0(a5)
 210685c:	02f00793          	li	a5,47
 2106860:	00f70c63          	beq	a4,a5,2106878 <alt_find_file+0xb4>
 2106864:	fe842783          	lw	a5,-24(s0)
 2106868:	fdc42703          	lw	a4,-36(s0)
 210686c:	00f707b3          	add	a5,a4,a5
 2106870:	0007c783          	lbu	a5,0(a5)
 2106874:	04079863          	bnez	a5,21068c4 <alt_find_file+0x100>
                {
                    return next;
 2106878:	fe442783          	lw	a5,-28(s0)
 210687c:	0740006f          	j	21068f0 <alt_find_file+0x12c>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
 2106880:	fe442783          	lw	a5,-28(s0)
 2106884:	0087a703          	lw	a4,8(a5)
 2106888:	fe842783          	lw	a5,-24(s0)
 210688c:	00f707b3          	add	a5,a4,a5
 2106890:	0007c703          	lbu	a4,0(a5)
 2106894:	fe842783          	lw	a5,-24(s0)
 2106898:	fdc42683          	lw	a3,-36(s0)
 210689c:	00f687b3          	add	a5,a3,a5
 21068a0:	0007c783          	lbu	a5,0(a5)
 21068a4:	02f71463          	bne	a4,a5,21068cc <alt_find_file+0x108>
            len++;
 21068a8:	fe842783          	lw	a5,-24(s0)
 21068ac:	00178793          	addi	a5,a5,1
 21068b0:	fef42423          	sw	a5,-24(s0)
        while (len < MAX_STRING_LENGTH)    
 21068b4:	fe842703          	lw	a4,-24(s0)
 21068b8:	fec42783          	lw	a5,-20(s0)
 21068bc:	f4f740e3          	blt	a4,a5,21067fc <alt_find_file+0x38>
 21068c0:	0100006f          	j	21068d0 <alt_find_file+0x10c>
                break;
 21068c4:	00000013          	nop
 21068c8:	0080006f          	j	21068d0 <alt_find_file+0x10c>
            if (next->name[len]!=name[len]) { break; }
 21068cc:	00000013          	nop
        }  
        
        next = (alt_dev*) next->llist.next;
 21068d0:	fe442783          	lw	a5,-28(s0)
 21068d4:	0007a783          	lw	a5,0(a5)
 21068d8:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) &alt_fs_list)
 21068dc:	fe442703          	lw	a4,-28(s0)
 21068e0:	000027b7          	lui	a5,0x2
 21068e4:	e8078793          	addi	a5,a5,-384 # 1e80 <alt_fs_list>
 21068e8:	f0f716e3          	bne	a4,a5,21067f4 <alt_find_file+0x30>
    }
  
    /* No match found */
  
    return NULL;     
 21068ec:	00000793          	li	a5,0
}
 21068f0:	00078513          	mv	a0,a5
 21068f4:	02c12403          	lw	s0,44(sp)
 21068f8:	03010113          	addi	sp,sp,48
 21068fc:	00008067          	ret

02106900 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2106900:	fd010113          	addi	sp,sp,-48
 2106904:	02812623          	sw	s0,44(sp)
 2106908:	03010413          	addi	s0,sp,48
 210690c:	fca42e23          	sw	a0,-36(s0)
  alt_32 i;
  int rc = -EMFILE;
 2106910:	fe800793          	li	a5,-24
 2106914:	fef42623          	sw	a5,-20(s0)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2106918:	fe042423          	sw	zero,-24(s0)
 210691c:	0880006f          	j	21069a4 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
 2106920:	000017b7          	lui	a5,0x1
 2106924:	4cc78693          	addi	a3,a5,1228 # 14cc <alt_fd_list>
 2106928:	fe842703          	lw	a4,-24(s0)
 210692c:	00070793          	mv	a5,a4
 2106930:	00179793          	slli	a5,a5,0x1
 2106934:	00e787b3          	add	a5,a5,a4
 2106938:	00279793          	slli	a5,a5,0x2
 210693c:	00f687b3          	add	a5,a3,a5
 2106940:	0007a783          	lw	a5,0(a5)
 2106944:	04079a63          	bnez	a5,2106998 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
 2106948:	000017b7          	lui	a5,0x1
 210694c:	4cc78693          	addi	a3,a5,1228 # 14cc <alt_fd_list>
 2106950:	fe842703          	lw	a4,-24(s0)
 2106954:	00070793          	mv	a5,a4
 2106958:	00179793          	slli	a5,a5,0x1
 210695c:	00e787b3          	add	a5,a5,a4
 2106960:	00279793          	slli	a5,a5,0x2
 2106964:	00f687b3          	add	a5,a3,a5
 2106968:	fdc42703          	lw	a4,-36(s0)
 210696c:	00e7a023          	sw	a4,0(a5)
      if (i > alt_max_fd)
 2106970:	000027b7          	lui	a5,0x2
 2106974:	e907a783          	lw	a5,-368(a5) # 1e90 <alt_max_fd>
 2106978:	fe842703          	lw	a4,-24(s0)
 210697c:	00e7d863          	bge	a5,a4,210698c <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
 2106980:	000027b7          	lui	a5,0x2
 2106984:	fe842703          	lw	a4,-24(s0)
 2106988:	e8e7a823          	sw	a4,-368(a5) # 1e90 <alt_max_fd>
      }
      rc = i;
 210698c:	fe842783          	lw	a5,-24(s0)
 2106990:	fef42623          	sw	a5,-20(s0)
      goto alt_get_fd_exit;
 2106994:	0200006f          	j	21069b4 <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
 2106998:	fe842783          	lw	a5,-24(s0)
 210699c:	00178793          	addi	a5,a5,1
 21069a0:	fef42423          	sw	a5,-24(s0)
 21069a4:	fe842703          	lw	a4,-24(s0)
 21069a8:	01f00793          	li	a5,31
 21069ac:	f6e7dae3          	bge	a5,a4,2106920 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 21069b0:	00000013          	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 21069b4:	fec42783          	lw	a5,-20(s0)
}
 21069b8:	00078513          	mv	a0,a5
 21069bc:	02c12403          	lw	s0,44(sp)
 21069c0:	03010113          	addi	sp,sp,48
 21069c4:	00008067          	ret

021069c8 <__stack_chk_fail>:
 21069c8:	fdefa797          	auipc	a5,0xfdefa
 21069cc:	98478793          	addi	a5,a5,-1660 # 34c <__ram_exceptions_end+0xc8>
 21069d0:	0007af83          	lw	t6,0(a5)
 21069d4:	0047af03          	lw	t5,4(a5)
 21069d8:	0087ae83          	lw	t4,8(a5)
 21069dc:	00c7ae03          	lw	t3,12(a5)
 21069e0:	0107a303          	lw	t1,16(a5)
 21069e4:	0147a883          	lw	a7,20(a5)
 21069e8:	0187a803          	lw	a6,24(a5)
 21069ec:	0247a683          	lw	a3,36(a5)
 21069f0:	0287a703          	lw	a4,40(a5)
 21069f4:	01c7a583          	lw	a1,28(a5)
 21069f8:	0207a603          	lw	a2,32(a5)
 21069fc:	02c7c783          	lbu	a5,44(a5)
 2106a00:	fc010113          	addi	sp,sp,-64
 2106a04:	00010513          	mv	a0,sp
 2106a08:	02112e23          	sw	ra,60(sp)
 2106a0c:	01f12023          	sw	t6,0(sp)
 2106a10:	01e12223          	sw	t5,4(sp)
 2106a14:	01d12423          	sw	t4,8(sp)
 2106a18:	01c12623          	sw	t3,12(sp)
 2106a1c:	00612823          	sw	t1,16(sp)
 2106a20:	01112a23          	sw	a7,20(sp)
 2106a24:	01012c23          	sw	a6,24(sp)
 2106a28:	02d12223          	sw	a3,36(sp)
 2106a2c:	02e12423          	sw	a4,40(sp)
 2106a30:	02f10623          	sb	a5,44(sp)
 2106a34:	00b12e23          	sw	a1,28(sp)
 2106a38:	02c12023          	sw	a2,32(sp)
 2106a3c:	9e5fd0ef          	jal	ra,2104420 <strlen>
 2106a40:	00050613          	mv	a2,a0
 2106a44:	00010593          	mv	a1,sp
 2106a48:	00200513          	li	a0,2
 2106a4c:	04c000ef          	jal	ra,2106a98 <write>
 2106a50:	00600513          	li	a0,6
 2106a54:	2ec000ef          	jal	ra,2106d40 <raise>
 2106a58:	07f00513          	li	a0,127
 2106a5c:	ab0ff0ef          	jal	ra,2105d0c <_exit>

02106a60 <__stack_chk_fail_local>:
 2106a60:	ff010113          	addi	sp,sp,-16
 2106a64:	00112623          	sw	ra,12(sp)
 2106a68:	f61ff0ef          	jal	ra,21069c8 <__stack_chk_fail>

02106a6c <__stack_chk_init>:
 2106a6c:	89c18793          	addi	a5,gp,-1892 # 1f1c <__stack_chk_guard>
 2106a70:	0007a703          	lw	a4,0(a5)
 2106a74:	00071663          	bnez	a4,2106a80 <__stack_chk_init+0x14>
 2106a78:	ff0a0737          	lui	a4,0xff0a0
 2106a7c:	00e7a023          	sw	a4,0(a5)
 2106a80:	00008067          	ret

02106a84 <fstat>:
 2106a84:	00058613          	mv	a2,a1
 2106a88:	00050593          	mv	a1,a0
 2106a8c:	fdefb517          	auipc	a0,0xfdefb
 2106a90:	41452503          	lw	a0,1044(a0) # 1ea0 <_impure_ptr>
 2106a94:	fd1fe06f          	j	2105a64 <_fstat_r>

02106a98 <write>:
 2106a98:	00060693          	mv	a3,a2
 2106a9c:	00058613          	mv	a2,a1
 2106aa0:	00050593          	mv	a1,a0
 2106aa4:	fdefb517          	auipc	a0,0xfdefb
 2106aa8:	3fc52503          	lw	a0,1020(a0) # 1ea0 <_impure_ptr>
 2106aac:	a5dfd06f          	j	2104508 <_write_r>

02106ab0 <_init_signal_r>:
 2106ab0:	2dc52783          	lw	a5,732(a0)
 2106ab4:	00078663          	beqz	a5,2106ac0 <_init_signal_r+0x10>
 2106ab8:	00000513          	li	a0,0
 2106abc:	00008067          	ret
 2106ac0:	ff010113          	addi	sp,sp,-16
 2106ac4:	08000593          	li	a1,128
 2106ac8:	00812423          	sw	s0,8(sp)
 2106acc:	00112623          	sw	ra,12(sp)
 2106ad0:	00050413          	mv	s0,a0
 2106ad4:	a85fc0ef          	jal	ra,2103558 <_malloc_r>
 2106ad8:	2ca42e23          	sw	a0,732(s0)
 2106adc:	02050463          	beqz	a0,2106b04 <_init_signal_r+0x54>
 2106ae0:	08050793          	addi	a5,a0,128
 2106ae4:	00052023          	sw	zero,0(a0)
 2106ae8:	00450513          	addi	a0,a0,4
 2106aec:	fef51ce3          	bne	a0,a5,2106ae4 <_init_signal_r+0x34>
 2106af0:	00000513          	li	a0,0
 2106af4:	00c12083          	lw	ra,12(sp)
 2106af8:	00812403          	lw	s0,8(sp)
 2106afc:	01010113          	addi	sp,sp,16
 2106b00:	00008067          	ret
 2106b04:	fff00513          	li	a0,-1
 2106b08:	fedff06f          	j	2106af4 <_init_signal_r+0x44>

02106b0c <_signal_r>:
 2106b0c:	fe010113          	addi	sp,sp,-32
 2106b10:	00912a23          	sw	s1,20(sp)
 2106b14:	00112e23          	sw	ra,28(sp)
 2106b18:	00812c23          	sw	s0,24(sp)
 2106b1c:	01f00793          	li	a5,31
 2106b20:	00050493          	mv	s1,a0
 2106b24:	02b7ea63          	bltu	a5,a1,2106b58 <_signal_r+0x4c>
 2106b28:	2dc52783          	lw	a5,732(a0)
 2106b2c:	00058413          	mv	s0,a1
 2106b30:	02078c63          	beqz	a5,2106b68 <_signal_r+0x5c>
 2106b34:	00241413          	slli	s0,s0,0x2
 2106b38:	008787b3          	add	a5,a5,s0
 2106b3c:	0007a503          	lw	a0,0(a5)
 2106b40:	00c7a023          	sw	a2,0(a5)
 2106b44:	01c12083          	lw	ra,28(sp)
 2106b48:	01812403          	lw	s0,24(sp)
 2106b4c:	01412483          	lw	s1,20(sp)
 2106b50:	02010113          	addi	sp,sp,32
 2106b54:	00008067          	ret
 2106b58:	01600793          	li	a5,22
 2106b5c:	00f52023          	sw	a5,0(a0)
 2106b60:	fff00513          	li	a0,-1
 2106b64:	fe1ff06f          	j	2106b44 <_signal_r+0x38>
 2106b68:	08000593          	li	a1,128
 2106b6c:	00c12623          	sw	a2,12(sp)
 2106b70:	9e9fc0ef          	jal	ra,2103558 <_malloc_r>
 2106b74:	2ca4ae23          	sw	a0,732(s1)
 2106b78:	00c12603          	lw	a2,12(sp)
 2106b7c:	00050793          	mv	a5,a0
 2106b80:	00050713          	mv	a4,a0
 2106b84:	08050693          	addi	a3,a0,128
 2106b88:	fc050ce3          	beqz	a0,2106b60 <_signal_r+0x54>
 2106b8c:	00072023          	sw	zero,0(a4) # ff0a0000 <__flash_rwdata_start+0xfcf98d68>
 2106b90:	00470713          	addi	a4,a4,4
 2106b94:	fed71ce3          	bne	a4,a3,2106b8c <_signal_r+0x80>
 2106b98:	f9dff06f          	j	2106b34 <_signal_r+0x28>

02106b9c <_raise_r>:
 2106b9c:	ff010113          	addi	sp,sp,-16
 2106ba0:	00912223          	sw	s1,4(sp)
 2106ba4:	00112623          	sw	ra,12(sp)
 2106ba8:	00812423          	sw	s0,8(sp)
 2106bac:	01f00793          	li	a5,31
 2106bb0:	00050493          	mv	s1,a0
 2106bb4:	08b7ee63          	bltu	a5,a1,2106c50 <_raise_r+0xb4>
 2106bb8:	2dc52783          	lw	a5,732(a0)
 2106bbc:	00058413          	mv	s0,a1
 2106bc0:	04078463          	beqz	a5,2106c08 <_raise_r+0x6c>
 2106bc4:	00259713          	slli	a4,a1,0x2
 2106bc8:	00e787b3          	add	a5,a5,a4
 2106bcc:	0007a703          	lw	a4,0(a5)
 2106bd0:	02070c63          	beqz	a4,2106c08 <_raise_r+0x6c>
 2106bd4:	00100693          	li	a3,1
 2106bd8:	00d70c63          	beq	a4,a3,2106bf0 <_raise_r+0x54>
 2106bdc:	fff00693          	li	a3,-1
 2106be0:	04d70863          	beq	a4,a3,2106c30 <_raise_r+0x94>
 2106be4:	0007a023          	sw	zero,0(a5)
 2106be8:	00058513          	mv	a0,a1
 2106bec:	000700e7          	jalr	a4
 2106bf0:	00000513          	li	a0,0
 2106bf4:	00c12083          	lw	ra,12(sp)
 2106bf8:	00812403          	lw	s0,8(sp)
 2106bfc:	00412483          	lw	s1,4(sp)
 2106c00:	01010113          	addi	sp,sp,16
 2106c04:	00008067          	ret
 2106c08:	00048513          	mv	a0,s1
 2106c0c:	428000ef          	jal	ra,2107034 <_getpid_r>
 2106c10:	00040613          	mv	a2,s0
 2106c14:	00812403          	lw	s0,8(sp)
 2106c18:	00c12083          	lw	ra,12(sp)
 2106c1c:	00050593          	mv	a1,a0
 2106c20:	00048513          	mv	a0,s1
 2106c24:	00412483          	lw	s1,4(sp)
 2106c28:	01010113          	addi	sp,sp,16
 2106c2c:	3b00006f          	j	2106fdc <_kill_r>
 2106c30:	00c12083          	lw	ra,12(sp)
 2106c34:	00812403          	lw	s0,8(sp)
 2106c38:	01600793          	li	a5,22
 2106c3c:	00f52023          	sw	a5,0(a0)
 2106c40:	00412483          	lw	s1,4(sp)
 2106c44:	00100513          	li	a0,1
 2106c48:	01010113          	addi	sp,sp,16
 2106c4c:	00008067          	ret
 2106c50:	01600793          	li	a5,22
 2106c54:	00f52023          	sw	a5,0(a0)
 2106c58:	fff00513          	li	a0,-1
 2106c5c:	f99ff06f          	j	2106bf4 <_raise_r+0x58>

02106c60 <__sigtramp_r>:
 2106c60:	01f00793          	li	a5,31
 2106c64:	0cb7ea63          	bltu	a5,a1,2106d38 <__sigtramp_r+0xd8>
 2106c68:	2dc52783          	lw	a5,732(a0)
 2106c6c:	ff010113          	addi	sp,sp,-16
 2106c70:	00812423          	sw	s0,8(sp)
 2106c74:	00912223          	sw	s1,4(sp)
 2106c78:	00112623          	sw	ra,12(sp)
 2106c7c:	00058413          	mv	s0,a1
 2106c80:	00050493          	mv	s1,a0
 2106c84:	08078063          	beqz	a5,2106d04 <__sigtramp_r+0xa4>
 2106c88:	00241713          	slli	a4,s0,0x2
 2106c8c:	00e787b3          	add	a5,a5,a4
 2106c90:	0007a703          	lw	a4,0(a5)
 2106c94:	02070c63          	beqz	a4,2106ccc <__sigtramp_r+0x6c>
 2106c98:	fff00693          	li	a3,-1
 2106c9c:	06d70063          	beq	a4,a3,2106cfc <__sigtramp_r+0x9c>
 2106ca0:	00100693          	li	a3,1
 2106ca4:	04d70063          	beq	a4,a3,2106ce4 <__sigtramp_r+0x84>
 2106ca8:	00040513          	mv	a0,s0
 2106cac:	0007a023          	sw	zero,0(a5)
 2106cb0:	000700e7          	jalr	a4
 2106cb4:	00000513          	li	a0,0
 2106cb8:	00c12083          	lw	ra,12(sp)
 2106cbc:	00812403          	lw	s0,8(sp)
 2106cc0:	00412483          	lw	s1,4(sp)
 2106cc4:	01010113          	addi	sp,sp,16
 2106cc8:	00008067          	ret
 2106ccc:	00c12083          	lw	ra,12(sp)
 2106cd0:	00812403          	lw	s0,8(sp)
 2106cd4:	00412483          	lw	s1,4(sp)
 2106cd8:	00100513          	li	a0,1
 2106cdc:	01010113          	addi	sp,sp,16
 2106ce0:	00008067          	ret
 2106ce4:	00c12083          	lw	ra,12(sp)
 2106ce8:	00812403          	lw	s0,8(sp)
 2106cec:	00412483          	lw	s1,4(sp)
 2106cf0:	00300513          	li	a0,3
 2106cf4:	01010113          	addi	sp,sp,16
 2106cf8:	00008067          	ret
 2106cfc:	00200513          	li	a0,2
 2106d00:	fb9ff06f          	j	2106cb8 <__sigtramp_r+0x58>
 2106d04:	08000593          	li	a1,128
 2106d08:	851fc0ef          	jal	ra,2103558 <_malloc_r>
 2106d0c:	2ca4ae23          	sw	a0,732(s1)
 2106d10:	00050793          	mv	a5,a0
 2106d14:	00050e63          	beqz	a0,2106d30 <__sigtramp_r+0xd0>
 2106d18:	00050713          	mv	a4,a0
 2106d1c:	08050693          	addi	a3,a0,128
 2106d20:	00072023          	sw	zero,0(a4)
 2106d24:	00470713          	addi	a4,a4,4
 2106d28:	fee69ce3          	bne	a3,a4,2106d20 <__sigtramp_r+0xc0>
 2106d2c:	f5dff06f          	j	2106c88 <__sigtramp_r+0x28>
 2106d30:	fff00513          	li	a0,-1
 2106d34:	f85ff06f          	j	2106cb8 <__sigtramp_r+0x58>
 2106d38:	fff00513          	li	a0,-1
 2106d3c:	00008067          	ret

02106d40 <raise>:
 2106d40:	ff010113          	addi	sp,sp,-16
 2106d44:	00912223          	sw	s1,4(sp)
 2106d48:	00112623          	sw	ra,12(sp)
 2106d4c:	00812423          	sw	s0,8(sp)
 2106d50:	01f00793          	li	a5,31
 2106d54:	fdefb497          	auipc	s1,0xfdefb
 2106d58:	14c4a483          	lw	s1,332(s1) # 1ea0 <_impure_ptr>
 2106d5c:	08a7ec63          	bltu	a5,a0,2106df4 <raise+0xb4>
 2106d60:	2dc4a783          	lw	a5,732(s1)
 2106d64:	00050413          	mv	s0,a0
 2106d68:	04078263          	beqz	a5,2106dac <raise+0x6c>
 2106d6c:	00251713          	slli	a4,a0,0x2
 2106d70:	00e787b3          	add	a5,a5,a4
 2106d74:	0007a703          	lw	a4,0(a5)
 2106d78:	02070a63          	beqz	a4,2106dac <raise+0x6c>
 2106d7c:	00100693          	li	a3,1
 2106d80:	00d70a63          	beq	a4,a3,2106d94 <raise+0x54>
 2106d84:	fff00693          	li	a3,-1
 2106d88:	04d70663          	beq	a4,a3,2106dd4 <raise+0x94>
 2106d8c:	0007a023          	sw	zero,0(a5)
 2106d90:	000700e7          	jalr	a4
 2106d94:	00000513          	li	a0,0
 2106d98:	00c12083          	lw	ra,12(sp)
 2106d9c:	00812403          	lw	s0,8(sp)
 2106da0:	00412483          	lw	s1,4(sp)
 2106da4:	01010113          	addi	sp,sp,16
 2106da8:	00008067          	ret
 2106dac:	00048513          	mv	a0,s1
 2106db0:	284000ef          	jal	ra,2107034 <_getpid_r>
 2106db4:	00040613          	mv	a2,s0
 2106db8:	00812403          	lw	s0,8(sp)
 2106dbc:	00c12083          	lw	ra,12(sp)
 2106dc0:	00050593          	mv	a1,a0
 2106dc4:	00048513          	mv	a0,s1
 2106dc8:	00412483          	lw	s1,4(sp)
 2106dcc:	01010113          	addi	sp,sp,16
 2106dd0:	20c0006f          	j	2106fdc <_kill_r>
 2106dd4:	00c12083          	lw	ra,12(sp)
 2106dd8:	00812403          	lw	s0,8(sp)
 2106ddc:	01600793          	li	a5,22
 2106de0:	00f4a023          	sw	a5,0(s1)
 2106de4:	00100513          	li	a0,1
 2106de8:	00412483          	lw	s1,4(sp)
 2106dec:	01010113          	addi	sp,sp,16
 2106df0:	00008067          	ret
 2106df4:	01600793          	li	a5,22
 2106df8:	00f4a023          	sw	a5,0(s1)
 2106dfc:	fff00513          	li	a0,-1
 2106e00:	f99ff06f          	j	2106d98 <raise+0x58>

02106e04 <signal>:
 2106e04:	ff010113          	addi	sp,sp,-16
 2106e08:	01212023          	sw	s2,0(sp)
 2106e0c:	00112623          	sw	ra,12(sp)
 2106e10:	00812423          	sw	s0,8(sp)
 2106e14:	00912223          	sw	s1,4(sp)
 2106e18:	01f00793          	li	a5,31
 2106e1c:	fdefb917          	auipc	s2,0xfdefb
 2106e20:	08492903          	lw	s2,132(s2) # 1ea0 <_impure_ptr>
 2106e24:	02a7ee63          	bltu	a5,a0,2106e60 <signal+0x5c>
 2106e28:	00050413          	mv	s0,a0
 2106e2c:	2dc92503          	lw	a0,732(s2)
 2106e30:	00058493          	mv	s1,a1
 2106e34:	02050e63          	beqz	a0,2106e70 <signal+0x6c>
 2106e38:	00241413          	slli	s0,s0,0x2
 2106e3c:	008507b3          	add	a5,a0,s0
 2106e40:	0007a503          	lw	a0,0(a5)
 2106e44:	0097a023          	sw	s1,0(a5)
 2106e48:	00c12083          	lw	ra,12(sp)
 2106e4c:	00812403          	lw	s0,8(sp)
 2106e50:	00412483          	lw	s1,4(sp)
 2106e54:	00012903          	lw	s2,0(sp)
 2106e58:	01010113          	addi	sp,sp,16
 2106e5c:	00008067          	ret
 2106e60:	01600793          	li	a5,22
 2106e64:	00f92023          	sw	a5,0(s2)
 2106e68:	fff00513          	li	a0,-1
 2106e6c:	fddff06f          	j	2106e48 <signal+0x44>
 2106e70:	08000593          	li	a1,128
 2106e74:	00090513          	mv	a0,s2
 2106e78:	ee0fc0ef          	jal	ra,2103558 <_malloc_r>
 2106e7c:	2ca92e23          	sw	a0,732(s2)
 2106e80:	00050793          	mv	a5,a0
 2106e84:	08050713          	addi	a4,a0,128
 2106e88:	fe0500e3          	beqz	a0,2106e68 <signal+0x64>
 2106e8c:	0007a023          	sw	zero,0(a5)
 2106e90:	00478793          	addi	a5,a5,4
 2106e94:	fee79ce3          	bne	a5,a4,2106e8c <signal+0x88>
 2106e98:	fa1ff06f          	j	2106e38 <signal+0x34>

02106e9c <_init_signal>:
 2106e9c:	ff010113          	addi	sp,sp,-16
 2106ea0:	00812423          	sw	s0,8(sp)
 2106ea4:	fdefb417          	auipc	s0,0xfdefb
 2106ea8:	ffc42403          	lw	s0,-4(s0) # 1ea0 <_impure_ptr>
 2106eac:	2dc42783          	lw	a5,732(s0)
 2106eb0:	00112623          	sw	ra,12(sp)
 2106eb4:	00078c63          	beqz	a5,2106ecc <_init_signal+0x30>
 2106eb8:	00000513          	li	a0,0
 2106ebc:	00c12083          	lw	ra,12(sp)
 2106ec0:	00812403          	lw	s0,8(sp)
 2106ec4:	01010113          	addi	sp,sp,16
 2106ec8:	00008067          	ret
 2106ecc:	08000593          	li	a1,128
 2106ed0:	00040513          	mv	a0,s0
 2106ed4:	e84fc0ef          	jal	ra,2103558 <_malloc_r>
 2106ed8:	2ca42e23          	sw	a0,732(s0)
 2106edc:	00050c63          	beqz	a0,2106ef4 <_init_signal+0x58>
 2106ee0:	08050793          	addi	a5,a0,128
 2106ee4:	00052023          	sw	zero,0(a0)
 2106ee8:	00450513          	addi	a0,a0,4
 2106eec:	fef51ce3          	bne	a0,a5,2106ee4 <_init_signal+0x48>
 2106ef0:	fc9ff06f          	j	2106eb8 <_init_signal+0x1c>
 2106ef4:	fff00513          	li	a0,-1
 2106ef8:	fc5ff06f          	j	2106ebc <_init_signal+0x20>

02106efc <__sigtramp>:
 2106efc:	ff010113          	addi	sp,sp,-16
 2106f00:	00912223          	sw	s1,4(sp)
 2106f04:	00112623          	sw	ra,12(sp)
 2106f08:	00812423          	sw	s0,8(sp)
 2106f0c:	01f00793          	li	a5,31
 2106f10:	fdefb497          	auipc	s1,0xfdefb
 2106f14:	f904a483          	lw	s1,-112(s1) # 1ea0 <_impure_ptr>
 2106f18:	0aa7ee63          	bltu	a5,a0,2106fd4 <__sigtramp+0xd8>
 2106f1c:	2dc4a783          	lw	a5,732(s1)
 2106f20:	00050413          	mv	s0,a0
 2106f24:	08078063          	beqz	a5,2106fa4 <__sigtramp+0xa8>
 2106f28:	00241713          	slli	a4,s0,0x2
 2106f2c:	00e787b3          	add	a5,a5,a4
 2106f30:	0007a703          	lw	a4,0(a5)
 2106f34:	02070c63          	beqz	a4,2106f6c <__sigtramp+0x70>
 2106f38:	fff00693          	li	a3,-1
 2106f3c:	06d70063          	beq	a4,a3,2106f9c <__sigtramp+0xa0>
 2106f40:	00100693          	li	a3,1
 2106f44:	04d70063          	beq	a4,a3,2106f84 <__sigtramp+0x88>
 2106f48:	00040513          	mv	a0,s0
 2106f4c:	0007a023          	sw	zero,0(a5)
 2106f50:	000700e7          	jalr	a4
 2106f54:	00000513          	li	a0,0
 2106f58:	00c12083          	lw	ra,12(sp)
 2106f5c:	00812403          	lw	s0,8(sp)
 2106f60:	00412483          	lw	s1,4(sp)
 2106f64:	01010113          	addi	sp,sp,16
 2106f68:	00008067          	ret
 2106f6c:	00c12083          	lw	ra,12(sp)
 2106f70:	00812403          	lw	s0,8(sp)
 2106f74:	00412483          	lw	s1,4(sp)
 2106f78:	00100513          	li	a0,1
 2106f7c:	01010113          	addi	sp,sp,16
 2106f80:	00008067          	ret
 2106f84:	00c12083          	lw	ra,12(sp)
 2106f88:	00812403          	lw	s0,8(sp)
 2106f8c:	00412483          	lw	s1,4(sp)
 2106f90:	00300513          	li	a0,3
 2106f94:	01010113          	addi	sp,sp,16
 2106f98:	00008067          	ret
 2106f9c:	00200513          	li	a0,2
 2106fa0:	fb9ff06f          	j	2106f58 <__sigtramp+0x5c>
 2106fa4:	08000593          	li	a1,128
 2106fa8:	00048513          	mv	a0,s1
 2106fac:	dacfc0ef          	jal	ra,2103558 <_malloc_r>
 2106fb0:	2ca4ae23          	sw	a0,732(s1)
 2106fb4:	00050793          	mv	a5,a0
 2106fb8:	00050e63          	beqz	a0,2106fd4 <__sigtramp+0xd8>
 2106fbc:	00050713          	mv	a4,a0
 2106fc0:	08050693          	addi	a3,a0,128
 2106fc4:	00072023          	sw	zero,0(a4)
 2106fc8:	00470713          	addi	a4,a4,4
 2106fcc:	fee69ce3          	bne	a3,a4,2106fc4 <__sigtramp+0xc8>
 2106fd0:	f59ff06f          	j	2106f28 <__sigtramp+0x2c>
 2106fd4:	fff00513          	li	a0,-1
 2106fd8:	f81ff06f          	j	2106f58 <__sigtramp+0x5c>

02106fdc <_kill_r>:
 2106fdc:	ff010113          	addi	sp,sp,-16
 2106fe0:	00058713          	mv	a4,a1
 2106fe4:	00812423          	sw	s0,8(sp)
 2106fe8:	00060593          	mv	a1,a2
 2106fec:	00050413          	mv	s0,a0
 2106ff0:	00070513          	mv	a0,a4
 2106ff4:	8801ac23          	sw	zero,-1896(gp) # 1f18 <errno>
 2106ff8:	00112623          	sw	ra,12(sp)
 2106ffc:	0a4000ef          	jal	ra,21070a0 <_kill>
 2107000:	fff00793          	li	a5,-1
 2107004:	00f50a63          	beq	a0,a5,2107018 <_kill_r+0x3c>
 2107008:	00c12083          	lw	ra,12(sp)
 210700c:	00812403          	lw	s0,8(sp)
 2107010:	01010113          	addi	sp,sp,16
 2107014:	00008067          	ret
 2107018:	8981a783          	lw	a5,-1896(gp) # 1f18 <errno>
 210701c:	fe0786e3          	beqz	a5,2107008 <_kill_r+0x2c>
 2107020:	00c12083          	lw	ra,12(sp)
 2107024:	00f42023          	sw	a5,0(s0)
 2107028:	00812403          	lw	s0,8(sp)
 210702c:	01010113          	addi	sp,sp,16
 2107030:	00008067          	ret

02107034 <_getpid_r>:
 2107034:	0040006f          	j	2107038 <_getpid>

02107038 <_getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 2107038:	ff010113          	addi	sp,sp,-16
 210703c:	00812623          	sw	s0,12(sp)
 2107040:	01010413          	addi	s0,sp,16
  return 0;
 2107044:	00000793          	li	a5,0
}
 2107048:	00078513          	mv	a0,a5
 210704c:	00c12403          	lw	s0,12(sp)
 2107050:	01010113          	addi	sp,sp,16
 2107054:	00008067          	ret

02107058 <alt_get_errno>:
{
 2107058:	ff010113          	addi	sp,sp,-16
 210705c:	00112623          	sw	ra,12(sp)
 2107060:	00812423          	sw	s0,8(sp)
 2107064:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
 2107068:	000027b7          	lui	a5,0x2
 210706c:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 2107070:	00078c63          	beqz	a5,2107088 <alt_get_errno+0x30>
 2107074:	000027b7          	lui	a5,0x2
 2107078:	e947a783          	lw	a5,-364(a5) # 1e94 <alt_errno>
 210707c:	000780e7          	jalr	a5
 2107080:	00050793          	mv	a5,a0
 2107084:	0080006f          	j	210708c <alt_get_errno+0x34>
 2107088:	89818793          	addi	a5,gp,-1896 # 1f18 <errno>
}
 210708c:	00078513          	mv	a0,a5
 2107090:	00c12083          	lw	ra,12(sp)
 2107094:	00812403          	lw	s0,8(sp)
 2107098:	01010113          	addi	sp,sp,16
 210709c:	00008067          	ret

021070a0 <_kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 21070a0:	fd010113          	addi	sp,sp,-48
 21070a4:	02112623          	sw	ra,44(sp)
 21070a8:	02812423          	sw	s0,40(sp)
 21070ac:	03010413          	addi	s0,sp,48
 21070b0:	fca42e23          	sw	a0,-36(s0)
 21070b4:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
 21070b8:	fe042623          	sw	zero,-20(s0)

  if (pid <= 0)
 21070bc:	fdc42783          	lw	a5,-36(s0)
 21070c0:	06f04e63          	bgtz	a5,210713c <_kill+0x9c>
  {
    switch (sig)
 21070c4:	fd842783          	lw	a5,-40(s0)
 21070c8:	08078463          	beqz	a5,2107150 <_kill+0xb0>
 21070cc:	fd842783          	lw	a5,-40(s0)
 21070d0:	0607c063          	bltz	a5,2107130 <_kill+0x90>
 21070d4:	fd842703          	lw	a4,-40(s0)
 21070d8:	01f00793          	li	a5,31
 21070dc:	04e7ca63          	blt	a5,a4,2107130 <_kill+0x90>
 21070e0:	fd842703          	lw	a4,-40(s0)
 21070e4:	00300793          	li	a5,3
 21070e8:	04f74463          	blt	a4,a5,2107130 <_kill+0x90>
 21070ec:	fd842783          	lw	a5,-40(s0)
 21070f0:	00100713          	li	a4,1
 21070f4:	00f717b3          	sll	a5,a4,a5
 21070f8:	cf810737          	lui	a4,0xcf810
 21070fc:	f7870713          	addi	a4,a4,-136 # cf80ff78 <__flash_rwdata_start+0xcd708ce0>
 2107100:	00e7f733          	and	a4,a5,a4
 2107104:	00e03733          	snez	a4,a4
 2107108:	0ff77713          	zext.b	a4,a4
 210710c:	00071e63          	bnez	a4,2107128 <_kill+0x88>
 2107110:	00110737          	lui	a4,0x110
 2107114:	00e7f7b3          	and	a5,a5,a4
 2107118:	00f037b3          	snez	a5,a5
 210711c:	0ff7f793          	zext.b	a5,a5
 2107120:	02079c63          	bnez	a5,2107158 <_kill+0xb8>
 2107124:	00c0006f          	j	2107130 <_kill+0x90>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 2107128:	00000513          	li	a0,0
 210712c:	be1fe0ef          	jal	ra,2105d0c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 2107130:	01600793          	li	a5,22
 2107134:	fef42623          	sw	a5,-20(s0)
 2107138:	0240006f          	j	210715c <_kill+0xbc>
    }
  }

  else if (pid > 0)
 210713c:	fdc42783          	lw	a5,-36(s0)
 2107140:	00f05e63          	blez	a5,210715c <_kill+0xbc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 2107144:	00300793          	li	a5,3
 2107148:	fef42623          	sw	a5,-20(s0)
 210714c:	0100006f          	j	210715c <_kill+0xbc>
      break;
 2107150:	00000013          	nop
 2107154:	0080006f          	j	210715c <_kill+0xbc>
      break;
 2107158:	00000013          	nop
  }

  if (status)
 210715c:	fec42783          	lw	a5,-20(s0)
 2107160:	00078e63          	beqz	a5,210717c <_kill+0xdc>
  {
    ALT_ERRNO = status;
 2107164:	ef5ff0ef          	jal	ra,2107058 <alt_get_errno>
 2107168:	00050713          	mv	a4,a0
 210716c:	fec42783          	lw	a5,-20(s0)
 2107170:	00f72023          	sw	a5,0(a4) # 110000 <__global_pointer$+0x10d980>
    return -1;
 2107174:	fff00793          	li	a5,-1
 2107178:	0080006f          	j	2107180 <_kill+0xe0>
  }

  return 0;
 210717c:	00000793          	li	a5,0
}
 2107180:	00078513          	mv	a0,a5
 2107184:	02c12083          	lw	ra,44(sp)
 2107188:	02812403          	lw	s0,40(sp)
 210718c:	03010113          	addi	sp,sp,48
 2107190:	00008067          	ret
 2107194:	4780                	.2byte	0x4780
 2107196:	0210                	.2byte	0x210
 2107198:	6a6c                	.2byte	0x6a6c
 210719a:	0210                	.2byte	0x210
