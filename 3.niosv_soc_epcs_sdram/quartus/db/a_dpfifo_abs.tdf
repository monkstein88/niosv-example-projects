--a_dpfifo ALLOW_RWCYCLE_WHEN_FULL="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_NUMWORDS=258 LPM_SHOWAHEAD="OFF" lpm_width=8 lpm_widthu=9 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" aclr clock data q rreq sclr wreq CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 23.1 cbx_altdpram 2024:05:14:17:57:37:SC cbx_altera_counter 2024:05:14:17:57:38:SC cbx_altera_syncram 2024:05:14:17:57:38:SC cbx_altera_syncram_nd_impl 2024:05:14:17:57:38:SC cbx_altsyncram 2024:05:14:17:57:38:SC cbx_cycloneii 2024:05:14:17:57:38:SC cbx_fifo_common 2024:05:14:17:57:38:SC cbx_lpm_add_sub 2024:05:14:17:57:38:SC cbx_lpm_compare 2024:05:14:17:57:38:SC cbx_lpm_counter 2024:05:14:17:57:37:SC cbx_lpm_decode 2024:05:14:17:57:37:SC cbx_lpm_mux 2024:05:14:17:57:37:SC cbx_mgl 2024:05:14:17:57:46:SC cbx_nadder 2024:05:14:17:57:38:SC cbx_scfifo 2024:05:14:17:57:38:SC cbx_stratix 2024:05:14:17:57:38:SC cbx_stratixii 2024:05:14:17:57:38:SC cbx_stratixiii 2024:05:14:17:57:38:SC cbx_stratixv 2024:05:14:17:57:38:SC cbx_util_mgl 2024:05:14:17:57:38:SC  VERSION_END


-- Copyright (C) 2024  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION a_fefifo_48e (aclr, clock, rreq, sclr, wreq)
RETURNS ( empty, full);
FUNCTION altsyncram_2lm1 (address_a[8..0], address_b[8..0], clock0, clock1, clocken1, data_a[7..0], wren_a)
RETURNS ( q_b[7..0]);
FUNCTION cntr_4ob (aclr, clock, cnt_en, sclr)
RETURNS ( q[8..0]);

--synthesis_resources = lut 27 M9K 1 reg 29 
SUBDESIGN a_dpfifo_abs
( 
	aclr	:	input;
	clock	:	input;
	data[7..0]	:	input;
	q[7..0]	:	output;
	rreq	:	input;
	sclr	:	input;
	wreq	:	input;
) 
VARIABLE 
	fifo_state : a_fefifo_48e;
	FIFOram : altsyncram_2lm1;
	rd_ptr_count : cntr_4ob;
	wr_ptr : cntr_4ob;
	rd_ptr[8..0]	: WIRE;
	valid_rreq	: WIRE;
	valid_wreq	: WIRE;

BEGIN 
	fifo_state.aclr = aclr;
	fifo_state.clock = clock;
	fifo_state.rreq = rreq;
	fifo_state.sclr = sclr;
	fifo_state.wreq = wreq;
	FIFOram.address_a[] = wr_ptr.q[];
	FIFOram.address_b[] = ((! sclr) & rd_ptr[]);
	FIFOram.clock0 = clock;
	FIFOram.clock1 = clock;
	FIFOram.clocken1 = (valid_rreq # sclr);
	FIFOram.data_a[] = data[];
	FIFOram.wren_a = valid_wreq;
	rd_ptr_count.aclr = aclr;
	rd_ptr_count.clock = clock;
	rd_ptr_count.cnt_en = valid_rreq;
	rd_ptr_count.sclr = sclr;
	wr_ptr.aclr = aclr;
	wr_ptr.clock = clock;
	wr_ptr.cnt_en = valid_wreq;
	wr_ptr.sclr = sclr;
	q[] = FIFOram.q_b[];
	rd_ptr[] = rd_ptr_count.q[];
	valid_rreq = (rreq & (! fifo_state.empty));
	valid_wreq = (wreq & (! fifo_state.full));
END;
--VALID FILE
