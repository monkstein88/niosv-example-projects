
app.elf:     file format elf32-littleriscv
app.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000002e8

Program Header:
0x70000003 off    0x0000a9b6 vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000025 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x000099a4 memsz 0x00009ab8 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .exceptions   00000284  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000079d8  00000284  00000284  00001284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  00007c5c  00007c5c  00008c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00001c14  00007d90  00007d90  00008d90  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000110  000099a8  000099a8  0000a9a4  2**3
                  ALLOC
  5 .EXT_SDRAM_PROGMEM 00000000  00009ab8  00009ab8  0000a9a4  2**0
                  CONTENTS
  6 .EPCS_FLASH_CONTROLLER_avl_mem 00000000  02100020  02100020  0000a9a4  2**0
                  CONTENTS
  7 .comment      00000012  00000000  00000000  0000a9a4  2**0
                  CONTENTS, READONLY
  8 .riscv.attributes 00000025  00000000  00000000  0000a9b6  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000600  00000000  00000000  0000a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   000096e5  00000000  00000000  0000afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003774  00000000  00000000  000146c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00004776  00000000  00000000  00017e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  0000101c  00000000  00000000  0001c5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00001696  00000000  00000000  0001d5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 0000160f  00000000  00000000  0001ec62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008f  00000000  00000000  00020271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .exceptions	00000000 .exceptions
00000284 l    d  .text	00000000 .text
00007c5c l    d  .rodata	00000000 .rodata
00007d90 l    d  .rwdata	00000000 .rwdata
000099a8 l    d  .bss	00000000 .bss
00009ab8 l    d  .EXT_SDRAM_PROGMEM	00000000 .EXT_SDRAM_PROGMEM
02100020 l    d  .EPCS_FLASH_CONTROLLER_avl_mem	00000000 .EPCS_FLASH_CONTROLLER_avl_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 machine_trap.S.obj
00000000 l       .exceptions	00000000 save_registers
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 crt0.S.obj
00000384 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00007d90 l     O .rwdata	00001060 JTAG_UART_DBG
00008df0 l     O .rwdata	000000c4 UART_SERIAL_COM
00008eb4 l     O .rwdata	000000dc EPCS_FLASH_CONTROLLER
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000075c l     F .text	00000238 altera_avalon_jtag_uart_irq
00000994 l     F .text	000000b8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000011f0 l     F .text	000000a8 altera_avalon_uart_irq
00001298 l     F .text	000000e8 altera_avalon_uart_rxirq
00001380 l     F .text	00000158 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00001530 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000175c l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 altera_epcq_controller.c
00002410 l     F .text	00000094 alt_epcq_poll_for_write_in_progress
00002374 l     F .text	0000009c alt_epcq_validate_read_write_arguments
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000268c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000026f4 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002b58 l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 intel_niosv_irq.c
00000000 l    df *ABS*	00000000 mtimer.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 lib_a-atexit.o
00000000 l    df *ABS*	00000000 lib_a-exit.o
00000000 l    df *ABS*	00000000 lib_a-fflush.o
00000000 l    df *ABS*	00000000 lib_a-findfp.o
00003778 l     F .text	00000040 __fp_lock
000037b8 l     F .text	00000040 __fp_unlock
00000000 l    df *ABS*	00000000 lib_a-freer.o
00000000 l    df *ABS*	00000000 lib_a-fwalk.o
00000000 l    df *ABS*	00000000 lib_a-impure.o
00009138 l     O .rwdata	00000428 impure_data
00000000 l    df *ABS*	00000000 lib_a-lock.o
00000000 l    df *ABS*	00000000 lib_a-mallocr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 lib_a-mlock.o
00000000 l    df *ABS*	00000000 lib_a-puts.o
00000000 l    df *ABS*	00000000 lib_a-reent.o
00000000 l    df *ABS*	00000000 lib_a-sbrkr.o
00000000 l    df *ABS*	00000000 lib_a-stack_protector.o
00000000 l    df *ABS*	00000000 lib_a-stdio.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-sysclose.o
00000000 l    df *ABS*	00000000 lib_a-sysopen.o
00000000 l    df *ABS*	00000000 lib_a-syswrite.o
00000000 l    df *ABS*	00000000 lib_a-writer.o
00000000 l    df *ABS*	00000000 lib_a-__atexit.o
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
0000549c l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 lib_a-closer.o
00000000 l    df *ABS*	00000000 lib_a-fclose.o
00000000 l    df *ABS*	00000000 lib_a-fini.o
00000000 l    df *ABS*	00000000 lib_a-fvwrite.o
00000000 l    df *ABS*	00000000 lib_a-lseekr.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memmove-stub.o
00000000 l    df *ABS*	00000000 lib_a-openr.o
00000000 l    df *ABS*	00000000 lib_a-readr.o
00000000 l    df *ABS*	00000000 lib_a-reallocr.o
00000000 l    df *ABS*	00000000 lib_a-signal.o
00000000 l    df *ABS*	00000000 lib_a-signalr.o
00000000 l    df *ABS*	00000000 lib_a-wsetup.o
00000000 l    df *ABS*	00000000 lib_a-makebuf.o
00000000 l    df *ABS*	00000000 lib_a-fstatr.o
00000000 l    df *ABS*	00000000 lib_a-isattyr.o
00000000 l    df *ABS*	00000000 muldi3.o
00000000 l    df *ABS*	00000000 div.o
00000000 l    df *ABS*	00000000 alt_close.c
00006e70 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00006fd0 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000070f0 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00007224 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00007358 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
00007478 l     F .text	00000040 alt_get_errno
000074b8 l     F .text	000000e8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00007708 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
000099a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00007904 l     F .text	00000040 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 lib_a-sysfstat.o
00004f98 g     F .text	0000000c .hidden __stack_chk_fail_local
00006d48 g     F .text	00000050 _isatty_r
00000388 g     F .text	0000007c alt_main
00004d00 g     F .text	00000094 cleanup_glue
000070d0 g     F .text	00000020 _getpid
00004bc8 g     F .text	0000012c _puts_r
00009a10 g     O .bss	00000080 alt_irq
00005b84 g     F .text	0000005c _lseek_r
00009ab8 g       *ABS*	00000000 __alt_heap_start
000068ec g     F .text	00000058 _kill_r
0000a168 g       *ABS*	00000000 __global_pointer$
000099f0 g     O .bss	00000001 __lock___atexit_recursive_mutex
0000642c g     F .text	00000090 _signal_r
000050a8 g     F .text	00000078 __sseek
00003884 g     F .text	000001a8 __sinit
000037f8 g     F .text	00000078 __sfmoreglue
00007d90 g       *ABS*	00000000 __tls_base
00004bc0 g     F .text	00000008 __malloc_unlock
000099d8 g     O .bss	00000001 __lock___arc4random_mutex
00005ca4 g     F .text	0000011c memmove
00003870 g     F .text	00000014 _cleanup
00009a0c g     O .bss	00000004 __stack_chk_guard
0000999c g     O .rwdata	00000004 __atexit_recursive_mutex
00004184 g     F .text	00000004 __retarget_lock_close
00006cf0 g     F .text	00000058 _fstat_r
00009a08 g     O .bss	00000004 errno
00005018 g     F .text	00000008 __seofread
000099b4 g     O .bss	00000004 alt_argv
00000404 g     F .text	00000034 usleep
00008fb8 g     O .rwdata	00000180 alt_fd_list
00003210 g     F .text	00000120 alt_find_dev
00004938 g     F .text	000001a4 memcpy
0000376c g     F .text	0000000c _cleanup_r
00003128 g     F .text	000000ac alt_niosv_timer_sc_isr
00002c34 g     F .text	00000078 alt_io_redirect
00004cf4 g     F .text	0000000c puts
00007c5c g       *ABS*	00000000 __fini_array_end
00006dc4 g     F .text	00000048 .hidden __hidden___udivsi3
00000bb8 g     F .text	0000022c altera_avalon_jtag_uart_read
00006dc4 g     F .text	00000048 .hidden __udivsi3
000064bc g     F .text	000000c4 _raise_r
00007010 g     F .text	000000c0 _fstat
0000018c g     F .exceptions	000000f8 handle_trap
00009a04 g     O .bss	00000004 __malloc_top_pad
00006944 g     F .text	00000004 _getpid_r
000099bc g     O .bss	00000004 __dso_handle
000056e4 g     F .text	000004a0 __sfvwrite_r
00006580 g     F .text	000000e0 __sigtramp_r
00004eb0 g     F .text	00000050 _sbrk_r
00005e1c g     F .text	0000005c _read_r
00009978 g     O .rwdata	00000004 alt_max_fd
00005504 g     F .text	00000178 _fclose_r
000036a4 g     F .text	000000c8 fflush
00009a00 g     O .bss	00000004 __malloc_max_sbrked_mem
00004fa4 g     F .text	00000018 __stack_chk_init
000099e4 g     O .bss	00000001 __lock___env_recursive_mutex
00007130 g     F .text	000000f4 _isatty
000099f8 g     O .bss	00000001 __lock___sinit_recursive_mutex
00007d88 g     O .rodata	00000004 _global_impure_ptr
00005e78 g     F .text	00000558 _realloc_r
00009ab8 g       *ABS*	00000000 __bss_end
000029e4 g     F .text	00000174 alt_iic_isr_register
00002db8 g     F .text	0000014c alt_tick
000075a0 g     F .text	00000168 _open
00007850 g     F .text	000000b4 _sbrk
00004f00 g     F .text	00000098 __stack_chk_fail
0000113c g     F .text	000000b4 altera_avalon_uart_init
00007d90 g       *ABS*	00000000 __tbss_start
000031d4 g     F .text	0000003c alt_niosv_mtimecmp_interrupt_init
00003b9c g     F .text	00000028 __fp_lock_all
00002d20 g     F .text	00000098 alt_alarm_stop
000000a0 g     F .exceptions	000000ec alt_irq_handler
00008f90 g     O .rwdata	00000028 alt_dev_null
00005688 g     F .text	0000005c __libc_fini_array
00002fdc g     F .text	00000084 alt_niosv_mtime_get
00001afc g     F .text	00000140 alt_epcq_controller_erase_block
00004d94 g     F .text	0000011c _reclaim_reent
000099e8 g     O .bss	00000001 __lock___malloc_recursive_mutex
00009970 g     O .rwdata	00000008 alt_dev_list
00005208 g     F .text	00000014 write
00002fb8 g     F .text	00000024 alt_timestamp_freq
00007c44 g     F .text	00000010 fstat
00006e0c g     F .text	00000010 .hidden __umodsi3
00009ab8 g       *ABS*	00000000 end
000026b8 g     F .text	0000003c alt_dev_reg
000041a8 g     F .text	00000004 __retarget_lock_release_recursive
0000179c g     F .text	000001b4 altera_avalon_uart_write
0000419c g     F .text	00000008 __retarget_lock_try_acquire_recursive
000006a4 g     F .text	000000b8 altera_avalon_jtag_uart_init
02000000 g       *ABS*	00000000 __alt_stack_pointer
00001084 g     F .text	00000064 altera_avalon_uart_write_fd
000010e8 g     F .text	00000054 altera_avalon_uart_close_fd
00000de4 g     F .text	0000023c altera_avalon_jtag_uart_write
00003b7c g     F .text	00000008 __sfp_lock_acquire
00005be0 g     F .text	000000c4 memchr
00001e98 g     F .text	000001e0 alt_epcq_controller_write
00003d20 g     F .text	00000304 _free_r
00005360 g     F .text	0000013c __call_exitprocs
00009994 g     O .rwdata	00000004 __malloc_sbrk_base
000002e8 g     F .text	000000a0 _start
00002078 g     F .text	000000ac alt_epcq_controller_read
000099c0 g     O .bss	00000004 _alt_tick_rate
00004194 g     F .text	00000008 __retarget_lock_try_acquire
00007398 g     F .text	000000e0 _lseek
000099c8 g     O .bss	00000008 _alt_nticks
00006720 g     F .text	00000094 signal
000030bc g     F .text	0000006c alt_niosv_mtimecmp_get
00000470 g     F .text	000000c0 alt_sys_init
00005dc0 g     F .text	0000005c _open_r
00007d90 g       *ABS*	00000000 __tdata_source
00005278 g     F .text	000000e8 __register_exitproc
00000000 g       *ABS*	00000000 __alt_mem_EXT_SDRAM_PROGMEM
00000a4c g     F .text	0000006c altera_avalon_jtag_uart_close
00006d98 g     F .text	00000024 .hidden __mulsi3
00009a90 g     O .bss	00000028 __malloc_current_mallinfo
000099d0 g     O .bss	00000008 alt_niosv_timestamp_offset
000099ac g     O .bss	00000004 alt_niosv_timer_interrupt_handler
00000530 g     F .text	00000064 altera_avalon_jtag_uart_read_fd
00007b84 g     F .text	000000c0 alt_get_fd
00002604 g     F .text	00000088 alt_busy_sleep
000054b4 g     F .text	00000050 _close_r
000005f8 g     F .text	00000054 altera_avalon_jtag_uart_close_fd
00009ab8 g       *ABS*	00000000 __alt_stack_base
0000064c g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
00004188 g     F .text	00000004 __retarget_lock_close_recursive
00006948 g     F .text	00000140 __swsetup_r
00003a2c g     F .text	00000150 __sfp
00009560 g     O .rwdata	00000408 __malloc_av_
00003b94 g     F .text	00000008 __sinit_lock_release
00004fbc g     F .text	0000005c __sread
00007a48 g     F .text	0000013c alt_find_file
00002734 g     F .text	000000a8 alt_dev_llist_insert
00004bb8 g     F .text	00000008 __malloc_lock
00007c5c g       *ABS*	00000000 __fini_array_start
000035c4 g     F .text	000000e0 _fflush_r
00002958 g     F .text	00000038 alt_flash_device_register
00009980 g     O .rwdata	00000008 alt_flash_dev_list
00004190 g     F .text	00000004 __retarget_lock_acquire_recursive
000099a8 g       *ABS*	00000000 __bss_start
00007d90 g       *ABS*	00000000 __tdata_start
00007d90 g       *ABS*	00000000 __tdata_end
00004adc g     F .text	000000dc memset
00000284 g     F .text	00000064 main
000099b8 g     O .bss	00000004 alt_envp
000099fc g     O .bss	00000004 __malloc_max_total_mem
00000594 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
00004180 g     F .text	00000004 __retarget_lock_init_recursive
00005120 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0000567c g     F .text	0000000c fclose
00002f28 g     F .text	0000003c alt_timestamp_start
00007c5c g       *ABS*	00000000 __init_array_end
000041ac g     F .text	0000078c _malloc_r
0000997c g     O .rwdata	00000004 alt_errno
000067b4 g     F .text	0000005c _init_signal
00004024 g     F .text	000000a4 _fwalk
00006dbc g     F .text	00000084 .hidden __divsi3
00003bec g     F .text	00000134 _malloc_trim_r
0000417c g     F .text	00000004 __retarget_lock_init
00000438 g     F .text	00000038 alt_irq_init
00002cac g     F .text	00000074 alt_release_fd
00003330 g     F .text	00000014 atexit
0000521c g     F .text	0000005c _write_r
00009990 g     O .rwdata	00000004 _impure_ptr
000099b0 g     O .bss	00000004 alt_argc
00003378 g     F .text	0000024c __sflush_r
0000283c g     F .text	00000060 _do_dtors
00001a70 g     F .text	0000008c alt_epcq_controller_get_info
00003bc4 g     F .text	00000028 __fp_unlock_all
00009968 g     O .rwdata	00000008 alt_fs_list
00002f64 g     F .text	00000054 alt_timestamp
00006c18 g     F .text	000000d8 __swhatbuf_r
00002990 g     F .text	00000054 alt_ic_isr_register
00000000 g       .exceptions	00000000 trap_vector
00007944 g     F .text	00000104 _write
000099a4 g       *ABS*	00000000 _edata
00001020 g     F .text	00000064 altera_avalon_uart_read_fd
00002124 g     F .text	00000250 altera_epcq_controller_init
00009ab8 g       *ABS*	00000000 _end
0000289c g     F .text	0000006c alt_flash_open_dev
000099ec g     O .bss	00000001 __lock___at_quick_exit_mutex
00000ab8 g     F .text	00000100 altera_avalon_jtag_uart_ioctl
00002f04 g     F .text	00000024 intel_niosv_irq_init
00005020 g     F .text	00000088 __swrite
00009998 g     O .rwdata	00000004 __malloc_trim_threshold
00003344 g     F .text	00000034 exit
000040c8 g     F .text	000000b4 _fwalk_reent
00002908 g     F .text	00000050 alt_flash_close_dev
00006e40 g     F .text	00000030 .hidden __modsi3
00007264 g     F .text	000000f4 _kill
00001950 g     F .text	00000120 alt_epcq_controller_lock
02000000 g       *ABS*	00000000 __alt_data_end
00007d90 g       *ABS*	00000000 __tbss_end
00003b84 g     F .text	00000008 __sfp_lock_release
00007748 g     F .text	00000108 _read
00007c54 g       *ABS*	00000000 __init_array_start
0000418c g     F .text	00000004 __retarget_lock_acquire
000041a4 g     F .text	00000004 __retarget_lock_release
000014d8 g     F .text	00000058 altera_avalon_uart_close
00006f90 g     F .text	00000040 _exit
000024a4 g     F .text	00000160 alt_alarm_start
00001c3c g     F .text	0000025c alt_epcq_controller_write_block
000099dc g     O .bss	00000001 __lock___dd_hash_mutex
00006a88 g     F .text	00000190 __smakebuf_r
000099e0 g     O .bss	00000001 __lock___tz_mutex
00005128 g     F .text	0000008c strlen
000063d0 g     F .text	0000005c _init_signal_r
000051c0 g     F .text	00000048 open
00003060 g     F .text	0000005c alt_niosv_mtimecmp_set
00001570 g     F .text	000001ec altera_avalon_uart_read
00009988 g     O .rwdata	00000008 alt_alarm_list
000027dc g     F .text	00000060 _do_ctors
00006810 g     F .text	000000dc __sigtramp
000051b4 g     F .text	0000000c close
000099a8 g     O .bss	00000004 alt_niosv_software_interrupt_handler
000099f4 g     O .bss	00000001 __lock___sfp_recursive_mutex
00006eb0 g     F .text	000000e0 _close
00006660 g     F .text	000000c0 raise
02000000 g       *ABS*	00000000 __alt_mem_EPCS_FLASH_CONTROLLER_avl_mem
00003b8c g     F .text	00000008 __sinit_lock_acquire



Disassembly of section .exceptions:

00000000 <trap_vector>:
    /* Save caller-saved registers on the stack */

#if __riscv_flen == 32 // rv32if
    addi sp, sp, -36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
    addi sp, sp, -16 * 4
   0:	fc010113          	addi	sp,sp,-64
#else // rv32e (16-bit)
    addi sp, sp, -10 * 4
#endif

    /* rv32e (16-bit), rv32i and rv32if */
    sw ra,  0 * 4(sp)
   4:	00112023          	sw	ra,0(sp)
    sw t0,  1 * 4(sp)
   8:	00512223          	sw	t0,4(sp)
    sw t1,  2 * 4(sp)
   c:	00612423          	sw	t1,8(sp)
    sw t2,  3 * 4(sp)
  10:	00712623          	sw	t2,12(sp)
    sw a0,  4 * 4(sp)
  14:	00a12823          	sw	a0,16(sp)
    sw a1,  5 * 4(sp)
  18:	00b12a23          	sw	a1,20(sp)
    sw a2,  6 * 4(sp)
  1c:	00c12c23          	sw	a2,24(sp)
    sw a3,  7 * 4(sp)
  20:	00d12e23          	sw	a3,28(sp)
    sw a4,  8 * 4(sp)
  24:	02e12023          	sw	a4,32(sp)
    sw a5,  9 * 4(sp)
  28:	02f12223          	sw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32 
    sw a6, 10 * 4(sp)
  2c:	03012423          	sw	a6,40(sp)
    sw a7, 11 * 4(sp)
  30:	03112623          	sw	a7,44(sp)
    sw t3, 12 * 4(sp)
  34:	03c12823          	sw	t3,48(sp)
    sw t4, 13 * 4(sp)
  38:	03d12a23          	sw	t4,52(sp)
    sw t5, 14 * 4(sp)
  3c:	03e12c23          	sw	t5,56(sp)
    sw t6, 15 * 4(sp)
  40:	03f12e23          	sw	t6,60(sp)
    fsw fa6, 34 * 4(sp)
    fsw fa7, 35 * 4(sp)
#endif
    
    /* Call handle_trap to dispatch the correct handler, if available */
    csrr a0, mcause
  44:	34202573          	csrr	a0,mcause
    csrr a1, mepc
  48:	341025f3          	csrr	a1,mepc
    csrr a2, mtval
  4c:	34302673          	csrr	a2,mtval
    jal handle_trap
  50:	13c000ef          	jal	ra,18c <handle_trap>
    csrw mepc, a0
  54:	34151073          	csrw	mepc,a0

    /* Restore caller-saved registers */

    /* rv32e (16-bit), rv32i and rv32if */
    lw ra,  0 * 4(sp)
  58:	00012083          	lw	ra,0(sp)
    lw t0,  1 * 4(sp)
  5c:	00412283          	lw	t0,4(sp)
    lw t1,  2 * 4(sp)
  60:	00812303          	lw	t1,8(sp)
    lw t2,  3 * 4(sp)
  64:	00c12383          	lw	t2,12(sp)
    lw a0,  4 * 4(sp)
  68:	01012503          	lw	a0,16(sp)
    lw a1,  5 * 4(sp)
  6c:	01412583          	lw	a1,20(sp)
    lw a2,  6 * 4(sp)
  70:	01812603          	lw	a2,24(sp)
    lw a3,  7 * 4(sp)
  74:	01c12683          	lw	a3,28(sp)
    lw a4,  8 * 4(sp)
  78:	02012703          	lw	a4,32(sp)
    lw a5,  9 * 4(sp)
  7c:	02412783          	lw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32	
    lw a6, 10 * 4(sp)
  80:	02812803          	lw	a6,40(sp)
    lw a7, 11 * 4(sp)
  84:	02c12883          	lw	a7,44(sp)
    lw t3, 12 * 4(sp)
  88:	03012e03          	lw	t3,48(sp)
    lw t4, 13 * 4(sp)
  8c:	03412e83          	lw	t4,52(sp)
    lw t5, 14 * 4(sp)
  90:	03812f03          	lw	t5,56(sp)
    lw t6, 15 * 4(sp)
  94:	03c12f83          	lw	t6,60(sp)
#endif

#if __riscv_flen == 32 // rv32if
    addi sp, sp, 36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
	addi sp, sp, 16 * 4
  98:	04010113          	addi	sp,sp,64
    lw s0, 0(sp)
    lw s1, 4(sp)
    addi sp, sp, 8
#endif

    mret
  9c:	30200073          	mret

000000a0 <alt_irq_handler>:
 * This means that if there is never a call to alt_irq_register() then
 * this function will not get linked in to the executable. This is acceptable
 * since if no handler is ever registered, then an interrupt can never occur.
 */
void alt_irq_handler (void)
{
  a0:	fd010113          	addi	sp,sp,-48
  a4:	02112623          	sw	ra,44(sp)
  a8:	02812423          	sw	s0,40(sp)
  ac:	03010413          	addi	s0,sp,48
    alt_u32 i;

    /*
     * Notify the operating system that we are at interrupt level.
     */  
    ALT_OS_INT_ENTER();
  b0:	00000013          	nop
{
#if ALT_HAS_IRQ_SUPPORT
    alt_u32 active;
    alt_u32 enabled;

    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
  b4:	344027f3          	csrr	a5,mip
  b8:	fef42023          	sw	a5,-32(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
  bc:	304027f3          	csrr	a5,mie
  c0:	fef42223          	sw	a5,-28(s0)

    // Since this is used by alt_irq_handler, we want to only process the upper 16-bits
    // --> the interrupt lines connected via Platform Designer...
    return (active & enabled) >> 16;
  c4:	fe042703          	lw	a4,-32(s0)
  c8:	fe442783          	lw	a5,-28(s0)
  cc:	00f777b3          	and	a5,a4,a5
  d0:	0107d793          	srli	a5,a5,0x10
     * reduced by finding out which interrupts are pending as late as possible.
     * Consider the case where the high priority interupt is asserted during
     * the interrupt entry sequence for a lower priority interrupt to see why
     * this is the case.
     */
    active = alt_irq_pending();
  d4:	fcf42a23          	sw	a5,-44(s0)

    do
    {
        i = 0;
  d8:	fc042e23          	sw	zero,-36(s0)
        mask = 1;
  dc:	00100793          	li	a5,1
  e0:	fcf42c23          	sw	a5,-40(s0)
         * called to clear the interrupt condition.
         */

        do
        {
            if (active & mask)
  e4:	fd442703          	lw	a4,-44(s0)
  e8:	fd842783          	lw	a5,-40(s0)
  ec:	00f777b3          	and	a5,a4,a5
  f0:	04078e63          	beqz	a5,14c <alt_irq_handler+0xac>
            {
                alt_irq[i].handler(alt_irq[i].context); 
  f4:	8a818713          	addi	a4,gp,-1880 # 9a10 <alt_irq>
  f8:	fdc42783          	lw	a5,-36(s0)
  fc:	00379793          	slli	a5,a5,0x3
 100:	00f707b3          	add	a5,a4,a5
 104:	0007a703          	lw	a4,0(a5)
 108:	8a818693          	addi	a3,gp,-1880 # 9a10 <alt_irq>
 10c:	fdc42783          	lw	a5,-36(s0)
 110:	00379793          	slli	a5,a5,0x3
 114:	00f687b3          	add	a5,a3,a5
 118:	0047a783          	lw	a5,4(a5)
 11c:	00078513          	mv	a0,a5
 120:	000700e7          	jalr	a4
                break;
 124:	00000013          	nop
    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
 128:	344027f3          	csrr	a5,mip
 12c:	fef42423          	sw	a5,-24(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
 130:	304027f3          	csrr	a5,mie
 134:	fef42623          	sw	a5,-20(s0)
    return (active & enabled) >> 16;
 138:	fe842703          	lw	a4,-24(s0)
 13c:	fec42783          	lw	a5,-20(s0)
 140:	00f777b3          	and	a5,a4,a5
 144:	0107d793          	srli	a5,a5,0x10
 148:	0200006f          	j	168 <alt_irq_handler+0xc8>
            }
            
            mask <<= 1;
 14c:	fd842783          	lw	a5,-40(s0)
 150:	00179793          	slli	a5,a5,0x1
 154:	fcf42c23          	sw	a5,-40(s0)
            i++;
 158:	fdc42783          	lw	a5,-36(s0)
 15c:	00178793          	addi	a5,a5,1
 160:	fcf42e23          	sw	a5,-36(s0)
            if (active & mask)
 164:	f81ff06f          	j	e4 <alt_irq_handler+0x44>
            
        } while (1);

        active = alt_irq_pending();
 168:	fcf42a23          	sw	a5,-44(s0)
    
    } while (active);
 16c:	fd442783          	lw	a5,-44(s0)
 170:	f60794e3          	bnez	a5,d8 <alt_irq_handler+0x38>

    /*
     * Notify the operating system that interrupt processing is complete.
     */ 

    ALT_OS_INT_EXIT();
 174:	00000013          	nop
}
 178:	00000013          	nop
 17c:	02c12083          	lw	ra,44(sp)
 180:	02812403          	lw	s0,40(sp)
 184:	03010113          	addi	sp,sp,48
 188:	00008067          	ret

0000018c <handle_trap>:
{
 18c:	fd010113          	addi	sp,sp,-48
 190:	02112623          	sw	ra,44(sp)
 194:	02812423          	sw	s0,40(sp)
 198:	03010413          	addi	s0,sp,48
 19c:	fca42e23          	sw	a0,-36(s0)
 1a0:	fcb42c23          	sw	a1,-40(s0)
 1a4:	fcc42a23          	sw	a2,-44(s0)
    is_irq = (cause & NIOSV_MCAUSE_INTERRUPT_MASK);
 1a8:	fdc42703          	lw	a4,-36(s0)
 1ac:	800007b7          	lui	a5,0x80000
 1b0:	00f777b3          	and	a5,a4,a5
 1b4:	fef42423          	sw	a5,-24(s0)
    exception_code = (cause & ~NIOSV_MCAUSE_INTERRUPT_MASK);
 1b8:	fdc42703          	lw	a4,-36(s0)
 1bc:	800007b7          	lui	a5,0x80000
 1c0:	fff7c793          	not	a5,a5
 1c4:	00f777b3          	and	a5,a4,a5
 1c8:	fef42623          	sw	a5,-20(s0)
    if (is_irq) {
 1cc:	fe842783          	lw	a5,-24(s0)
 1d0:	08078063          	beqz	a5,250 <handle_trap+0xc4>
        switch (exception_code) {
 1d4:	fec42703          	lw	a4,-20(s0)
 1d8:	00300793          	li	a5,3
 1dc:	02f70c63          	beq	a4,a5,214 <handle_trap+0x88>
 1e0:	fec42703          	lw	a4,-20(s0)
 1e4:	00700793          	li	a5,7
 1e8:	04f71a63          	bne	a4,a5,23c <handle_trap+0xb0>
                if (alt_niosv_timer_interrupt_handler) {
 1ec:	8441a783          	lw	a5,-1980(gp) # 99ac <alt_niosv_timer_interrupt_handler>
 1f0:	06078463          	beqz	a5,258 <handle_trap+0xcc>
                    ALT_OS_INT_ENTER();
 1f4:	00000013          	nop
                    alt_niosv_timer_interrupt_handler(cause, epc, tval);
 1f8:	8441a783          	lw	a5,-1980(gp) # 99ac <alt_niosv_timer_interrupt_handler>
 1fc:	fd442603          	lw	a2,-44(s0)
 200:	fd842583          	lw	a1,-40(s0)
 204:	fdc42503          	lw	a0,-36(s0)
 208:	000780e7          	jalr	a5 # 80000000 <__alt_data_end+0x7e000000>
                    ALT_OS_INT_EXIT();
 20c:	00000013          	nop
                break;
 210:	0480006f          	j	258 <handle_trap+0xcc>
                if (alt_niosv_software_interrupt_handler) {
 214:	8401a783          	lw	a5,-1984(gp) # 99a8 <alt_niosv_software_interrupt_handler>
 218:	04078463          	beqz	a5,260 <handle_trap+0xd4>
                    ALT_OS_INT_ENTER();
 21c:	00000013          	nop
                    alt_niosv_software_interrupt_handler(cause, epc, tval);
 220:	8401a783          	lw	a5,-1984(gp) # 99a8 <alt_niosv_software_interrupt_handler>
 224:	fd442603          	lw	a2,-44(s0)
 228:	fd842583          	lw	a1,-40(s0)
 22c:	fdc42503          	lw	a0,-36(s0)
 230:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 234:	00000013          	nop
                break;
 238:	0280006f          	j	260 <handle_trap+0xd4>
                if (exception_code >= 16) {
 23c:	fec42703          	lw	a4,-20(s0)
 240:	00f00793          	li	a5,15
 244:	02e7f263          	bgeu	a5,a4,268 <handle_trap+0xdc>
                    alt_irq_handler();
 248:	e59ff0ef          	jal	ra,a0 <alt_irq_handler>
                break;
 24c:	01c0006f          	j	268 <handle_trap+0xdc>
            NIOSV_EBREAK();
 250:	00100073          	ebreak
 254:	0180006f          	j	26c <handle_trap+0xe0>
                break;
 258:	00000013          	nop
 25c:	0100006f          	j	26c <handle_trap+0xe0>
                break;
 260:	00000013          	nop
 264:	0080006f          	j	26c <handle_trap+0xe0>
                break;
 268:	00000013          	nop
    return epc;
 26c:	fd842783          	lw	a5,-40(s0)
}
 270:	00078513          	mv	a0,a5
 274:	02c12083          	lw	ra,44(sp)
 278:	02812403          	lw	s0,40(sp)
 27c:	03010113          	addi	sp,sp,48
 280:	00008067          	ret

Disassembly of section .text:

00000284 <main>:
#include <altera_avalon_pio_regs.h>



int main(void)
{
     284:	fe010113          	addi	sp,sp,-32
     288:	00112e23          	sw	ra,28(sp)
     28c:	00812c23          	sw	s0,24(sp)
     290:	02010413          	addi	s0,sp,32

    printf("\nHello from NIOS-V on DE0-NANO: booting from EPCS and running from external SDRAM!\n");
     294:	000087b7          	lui	a5,0x8
     298:	c5c78513          	addi	a0,a5,-932 # 7c5c <__fini_array_end>
     29c:	259040ef          	jal	ra,4cf4 <puts>
    fflush(stdout);
     2a0:	8281a783          	lw	a5,-2008(gp) # 9990 <_impure_ptr>
     2a4:	0087a783          	lw	a5,8(a5)
     2a8:	00078513          	mv	a0,a5
     2ac:	3f8030ef          	jal	ra,36a4 <fflush>
	uint8_t count = 0;
     2b0:	fe0405a3          	sb	zero,-21(s0)
    while(1)
    {
    	IOWR_ALTERA_AVALON_PIO_DATA(GPO2_LEDG_BASE, count++);
     2b4:	feb44783          	lbu	a5,-21(s0)
     2b8:	00178713          	addi	a4,a5,1
     2bc:	fee405a3          	sb	a4,-21(s0)
     2c0:	fef42623          	sw	a5,-20(s0)
     2c4:	028107b7          	lui	a5,0x2810
     2c8:	04078793          	addi	a5,a5,64 # 2810040 <__alt_data_end+0x810040>
     2cc:	fec42703          	lw	a4,-20(s0)
     2d0:	00e7a023          	sw	a4,0(a5)
        usleep(100000);
     2d4:	000187b7          	lui	a5,0x18
     2d8:	6a078513          	addi	a0,a5,1696 # 186a0 <__global_pointer$+0xe538>
     2dc:	128000ef          	jal	ra,404 <usleep>
    	IOWR_ALTERA_AVALON_PIO_DATA(GPO2_LEDG_BASE, count++);
     2e0:	00000013          	nop
     2e4:	fd1ff06f          	j	2b4 <main+0x30>

000002e8 <_start>:
    .type _start, @function
_start:
#if ALT_CPU_HAS_CSR_SUPPORT
    /* assume that we are in machine mode on startup */
    /* setup trap to catch anything that goes wrong early in the boot process */
    la t0, trap_vector
     2e8:	00000297          	auipc	t0,0x0
     2ec:	d1828293          	addi	t0,t0,-744 # 0 <__alt_mem_EXT_SDRAM_PROGMEM>
    csrw mtvec, t0
     2f0:	30529073          	csrw	mtvec,t0

    /* disable all interrupt */
    li t0, 0x88
     2f4:	08800293          	li	t0,136
    csrc mstatus, t0
     2f8:	3002b073          	csrc	mstatus,t0
    csrw mie, zero
     2fc:	30401073          	csrw	mie,zero
    csrw mip, zero
     300:	34401073          	csrw	mip,zero
#endif /* Initialize Data Cache */
#endif /* ALT_SIM_OPTIMIZE */

    .option push
    .option norelax
    la gp, __global_pointer$
     304:	0000a197          	auipc	gp,0xa
     308:	e6418193          	addi	gp,gp,-412 # a168 <__global_pointer$>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    la sp, __alt_stack_pointer
     30c:	02000117          	auipc	sp,0x2000
     310:	cf410113          	addi	sp,sp,-780 # 2000000 <__alt_data_end>
    /* Log that the BSS is about to be cleared. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_bss)
#endif /* ALT_LOG_ENABLE */

    la t1, __bss_start
     314:	84018313          	addi	t1,gp,-1984 # 99a8 <alt_niosv_software_interrupt_handler>
    la t2, __bss_end
     318:	95018393          	addi	t2,gp,-1712 # 9ab8 <__alt_heap_start>
0:
    sw zero, (t1)
     31c:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     320:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     324:	fe736ce3          	bltu	t1,t2,31c <_start+0x34>
 */
#ifndef ALT_SIM_OPTIMIZE
.globl __tbss_start
.globl __tbss_end

    la t1, __tbss_start
     328:	00008317          	auipc	t1,0x8
     32c:	a6830313          	addi	t1,t1,-1432 # 7d90 <JTAG_UART_DBG>
    la t2, __tbss_end
     330:	00008397          	auipc	t2,0x8
     334:	a6038393          	addi	t2,t2,-1440 # 7d90 <JTAG_UART_DBG>
    
    // Check if we need to skip this (if .tbss is empty)
    bgeu t1, t2, 1f
     338:	00737863          	bgeu	t1,t2,348 <_start+0x60>
0:
    sw zero, (t1)
     33c:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     340:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     344:	fe736ce3          	bltu	t1,t2,33c <_start+0x54>
// Copy tdata to tdata golden source location
.globl __tdata_start
.globl __tdata_end
.globl __tdata_source

    la t0, __tdata_start
     348:	00008297          	auipc	t0,0x8
     34c:	a4828293          	addi	t0,t0,-1464 # 7d90 <JTAG_UART_DBG>
    la t1, __tdata_end
     350:	00008317          	auipc	t1,0x8
     354:	a4030313          	addi	t1,t1,-1472 # 7d90 <JTAG_UART_DBG>
    la t2, __tdata_source
     358:	00008397          	auipc	t2,0x8
     35c:	a3838393          	addi	t2,t2,-1480 # 7d90 <JTAG_UART_DBG>

    // Check if we need to skip this (if .tdata is empty)
    bgeu t0, t1, 1f
     360:	0062fc63          	bgeu	t0,t1,378 <_start+0x90>
0:
    lw s1, (t0)
     364:	0002a483          	lw	s1,0(t0)
    sw s1, (t2)
     368:	0093a023          	sw	s1,0(t2)
    addi t0, t0, 4
     36c:	00428293          	addi	t0,t0,4
    addi t2, t2, 4
     370:	00438393          	addi	t2,t2,4
    bltu t0, t1, 0b
     374:	fe62e8e3          	bltu	t0,t1,364 <_start+0x7c>
1:

// Assign thread pointer register (tp) to main thread tls base
.globl __tls_base
    la tp, __tls_base
     378:	00008217          	auipc	tp,0x8
     37c:	a1820213          	addi	tp,tp,-1512 # 7d90 <JTAG_UART_DBG>
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_alt_main)
#endif /* ALT_LOG_ENABLE */

    /* Call the C entry point. It should never return. */
    call alt_main
     380:	008000ef          	jal	ra,388 <alt_main>

00000384 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    j alt_after_alt_main
     384:	0000006f          	j	384 <alt_after_alt_main>

00000388 <alt_main>:
     388:	fe010113          	addi	sp,sp,-32
     38c:	00112e23          	sw	ra,28(sp)
     390:	00812c23          	sw	s0,24(sp)
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     394:	02010413          	addi	s0,sp,32
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     398:	00000513          	li	a0,0
     39c:	09c000ef          	jal	ra,438 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     3a0:	00000013          	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     3a4:	0cc000ef          	jal	ra,470 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     3a8:	000087b7          	lui	a5,0x8
     3ac:	cb078613          	addi	a2,a5,-848 # 7cb0 <__fini_array_end+0x54>
     3b0:	000087b7          	lui	a5,0x8
     3b4:	cb078593          	addi	a1,a5,-848 # 7cb0 <__fini_array_end+0x54>
     3b8:	000087b7          	lui	a5,0x8
     3bc:	cb078513          	addi	a0,a5,-848 # 7cb0 <__fini_array_end+0x54>
     3c0:	075020ef          	jal	ra,2c34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     3c4:	418020ef          	jal	ra,27dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     3c8:	000037b7          	lui	a5,0x3
     3cc:	83c78513          	addi	a0,a5,-1988 # 283c <_do_dtors>
     3d0:	761020ef          	jal	ra,3330 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     3d4:	8481a703          	lw	a4,-1976(gp) # 99b0 <alt_argc>
     3d8:	84c1a683          	lw	a3,-1972(gp) # 99b4 <alt_argv>
     3dc:	8501a783          	lw	a5,-1968(gp) # 99b8 <alt_envp>
     3e0:	00078613          	mv	a2,a5
     3e4:	00068593          	mv	a1,a3
     3e8:	00070513          	mv	a0,a4
     3ec:	e99ff0ef          	jal	ra,284 <main>
     3f0:	fea42623          	sw	a0,-20(s0)
  close(STDOUT_FILENO);
     3f4:	00100513          	li	a0,1
     3f8:	5bd040ef          	jal	ra,51b4 <close>
  exit (result);
     3fc:	fec42503          	lw	a0,-20(s0)
     400:	745020ef          	jal	ra,3344 <exit>

00000404 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     404:	fe010113          	addi	sp,sp,-32
     408:	00112e23          	sw	ra,28(sp)
     40c:	00812c23          	sw	s0,24(sp)
     410:	02010413          	addi	s0,sp,32
     414:	fea42623          	sw	a0,-20(s0)
  return alt_busy_sleep(us);
     418:	fec42503          	lw	a0,-20(s0)
     41c:	1e8020ef          	jal	ra,2604 <alt_busy_sleep>
     420:	00050793          	mv	a5,a0
}
     424:	00078513          	mv	a0,a5
     428:	01c12083          	lw	ra,28(sp)
     42c:	01812403          	lw	s0,24(sp)
     430:	02010113          	addi	sp,sp,32
     434:	00008067          	ret

00000438 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     438:	fe010113          	addi	sp,sp,-32
     43c:	00112e23          	sw	ra,28(sp)
     440:	00812c23          	sw	s0,24(sp)
     444:	02010413          	addi	s0,sp,32
     448:	fea42623          	sw	a0,-20(s0)
    INTEL_NIOSV_M_IRQ_INIT ( NIOSV_M_CPU, NIOSV_M_CPU);
     44c:	2b9020ef          	jal	ra,2f04 <intel_niosv_irq_init>
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, NIOSV_MSTATUS_MIE_MASK);
     450:	00800793          	li	a5,8
     454:	3007a073          	csrs	mstatus,a5
}
     458:	00000013          	nop
    alt_irq_cpu_enable_interrupts();
}
     45c:	00000013          	nop
     460:	01c12083          	lw	ra,28(sp)
     464:	01812403          	lw	s0,24(sp)
     468:	02010113          	addi	sp,sp,32
     46c:	00008067          	ret

00000470 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     470:	fe010113          	addi	sp,sp,-32
     474:	00112e23          	sw	ra,28(sp)
     478:	00812c23          	sw	s0,24(sp)
     47c:	02010413          	addi	s0,sp,32
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_DBG, JTAG_UART_DBG);
     480:	00100613          	li	a2,1
     484:	00000593          	li	a1,0
     488:	000087b7          	lui	a5,0x8
     48c:	db878513          	addi	a0,a5,-584 # 7db8 <JTAG_UART_DBG+0x28>
     490:	214000ef          	jal	ra,6a4 <altera_avalon_jtag_uart_init>
     494:	000087b7          	lui	a5,0x8
     498:	d9078513          	addi	a0,a5,-624 # 7d90 <JTAG_UART_DBG>
     49c:	21c020ef          	jal	ra,26b8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SOC_SYSID, SOC_SYSID);
     4a0:	00000013          	nop
    ALTERA_AVALON_UART_INIT ( UART_SERIAL_COM, UART_SERIAL_COM);
     4a4:	00200613          	li	a2,2
     4a8:	00000593          	li	a1,0
     4ac:	000097b7          	lui	a5,0x9
     4b0:	e1878513          	addi	a0,a5,-488 # 8e18 <UART_SERIAL_COM+0x28>
     4b4:	489000ef          	jal	ra,113c <altera_avalon_uart_init>
     4b8:	000097b7          	lui	a5,0x9
     4bc:	df078513          	addi	a0,a5,-528 # 8df0 <UART_SERIAL_COM>
     4c0:	1f8020ef          	jal	ra,26b8 <alt_dev_reg>
    ALTERA_EPCQ_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, EPCS_FLASH_CONTROLLER);
     4c4:	000097b7          	lui	a5,0x9
     4c8:	eb478513          	addi	a0,a5,-332 # 8eb4 <EPCS_FLASH_CONTROLLER>
     4cc:	459010ef          	jal	ra,2124 <altera_epcq_controller_init>
     4d0:	3e800793          	li	a5,1000
     4d4:	fef42623          	sw	a5,-20(s0)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
     4d8:	8581a783          	lw	a5,-1960(gp) # 99c0 <_alt_tick_rate>
     4dc:	00079863          	bnez	a5,4ec <alt_sys_init+0x7c>
  {
    _alt_tick_rate = nticks;
     4e0:	fec42703          	lw	a4,-20(s0)
     4e4:	84e1ac23          	sw	a4,-1960(gp) # 99c0 <_alt_tick_rate>
    return 0;
     4e8:	0080006f          	j	4f0 <alt_sys_init+0x80>
  }
  else
  {
    return -1;
     4ec:	00000013          	nop
     4f0:	000037b7          	lui	a5,0x3
     4f4:	12878793          	addi	a5,a5,296 # 3128 <alt_niosv_timer_sc_isr>
     4f8:	fef42423          	sw	a5,-24(s0)
alt_u64 alt_niosv_mtimecmp_get();
void alt_niosv_mtimecmp_interrupt_init();
extern alt_niosv_timer_isr_t alt_niosv_timer_interrupt_handler;

static ALT_INLINE void ALT_ALWAYS_INLINE alt_niosv_register_mtimecmp_interrupt_handle(alt_niosv_timer_isr_t handle) {
    alt_niosv_timer_interrupt_handler = handle;
     4fc:	fe842703          	lw	a4,-24(s0)
     500:	84e1a223          	sw	a4,-1980(gp) # 99ac <alt_niosv_timer_interrupt_handler>
}
     504:	00000013          	nop
    INTEL_NIOSV_M_INIT ( NIOSV_M_CPU, NIOSV_M_CPU);
     508:	4cd020ef          	jal	ra,31d4 <alt_niosv_mtimecmp_interrupt_init>
     50c:	00000613          	li	a2,0
     510:	00000593          	li	a1,0
     514:	00000513          	li	a0,0
     518:	411020ef          	jal	ra,3128 <alt_niosv_timer_sc_isr>
}
     51c:	00000013          	nop
     520:	01c12083          	lw	ra,28(sp)
     524:	01812403          	lw	s0,24(sp)
     528:	02010113          	addi	sp,sp,32
     52c:	00008067          	ret

00000530 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     530:	fd010113          	addi	sp,sp,-48
     534:	02112623          	sw	ra,44(sp)
     538:	02812423          	sw	s0,40(sp)
     53c:	03010413          	addi	s0,sp,48
     540:	fca42e23          	sw	a0,-36(s0)
     544:	fcb42c23          	sw	a1,-40(s0)
     548:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     54c:	fdc42783          	lw	a5,-36(s0)
     550:	0007a783          	lw	a5,0(a5)
     554:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     558:	fec42783          	lw	a5,-20(s0)
     55c:	02878713          	addi	a4,a5,40
     560:	fdc42783          	lw	a5,-36(s0)
     564:	0087a783          	lw	a5,8(a5)
     568:	00078693          	mv	a3,a5
     56c:	fd442603          	lw	a2,-44(s0)
     570:	fd842583          	lw	a1,-40(s0)
     574:	00070513          	mv	a0,a4
     578:	640000ef          	jal	ra,bb8 <altera_avalon_jtag_uart_read>
     57c:	00050793          	mv	a5,a0
      fd->fd_flags);
}
     580:	00078513          	mv	a0,a5
     584:	02c12083          	lw	ra,44(sp)
     588:	02812403          	lw	s0,40(sp)
     58c:	03010113          	addi	sp,sp,48
     590:	00008067          	ret

00000594 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     594:	fd010113          	addi	sp,sp,-48
     598:	02112623          	sw	ra,44(sp)
     59c:	02812423          	sw	s0,40(sp)
     5a0:	03010413          	addi	s0,sp,48
     5a4:	fca42e23          	sw	a0,-36(s0)
     5a8:	fcb42c23          	sw	a1,-40(s0)
     5ac:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     5b0:	fdc42783          	lw	a5,-36(s0)
     5b4:	0007a783          	lw	a5,0(a5)
     5b8:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     5bc:	fec42783          	lw	a5,-20(s0)
     5c0:	02878713          	addi	a4,a5,40
     5c4:	fdc42783          	lw	a5,-36(s0)
     5c8:	0087a783          	lw	a5,8(a5)
     5cc:	00078693          	mv	a3,a5
     5d0:	fd442603          	lw	a2,-44(s0)
     5d4:	fd842583          	lw	a1,-40(s0)
     5d8:	00070513          	mv	a0,a4
     5dc:	009000ef          	jal	ra,de4 <altera_avalon_jtag_uart_write>
     5e0:	00050793          	mv	a5,a0
      fd->fd_flags);
}
     5e4:	00078513          	mv	a0,a5
     5e8:	02c12083          	lw	ra,44(sp)
     5ec:	02812403          	lw	s0,40(sp)
     5f0:	03010113          	addi	sp,sp,48
     5f4:	00008067          	ret

000005f8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     5f8:	fd010113          	addi	sp,sp,-48
     5fc:	02112623          	sw	ra,44(sp)
     600:	02812423          	sw	s0,40(sp)
     604:	03010413          	addi	s0,sp,48
     608:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     60c:	fdc42783          	lw	a5,-36(s0)
     610:	0007a783          	lw	a5,0(a5)
     614:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     618:	fec42783          	lw	a5,-20(s0)
     61c:	02878713          	addi	a4,a5,40
     620:	fdc42783          	lw	a5,-36(s0)
     624:	0087a783          	lw	a5,8(a5)
     628:	00078593          	mv	a1,a5
     62c:	00070513          	mv	a0,a4
     630:	41c000ef          	jal	ra,a4c <altera_avalon_jtag_uart_close>
     634:	00050793          	mv	a5,a0
}
     638:	00078513          	mv	a0,a5
     63c:	02c12083          	lw	ra,44(sp)
     640:	02812403          	lw	s0,40(sp)
     644:	03010113          	addi	sp,sp,48
     648:	00008067          	ret

0000064c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     64c:	fd010113          	addi	sp,sp,-48
     650:	02112623          	sw	ra,44(sp)
     654:	02812423          	sw	s0,40(sp)
     658:	03010413          	addi	s0,sp,48
     65c:	fca42e23          	sw	a0,-36(s0)
     660:	fcb42c23          	sw	a1,-40(s0)
     664:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     668:	fdc42783          	lw	a5,-36(s0)
     66c:	0007a783          	lw	a5,0(a5)
     670:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     674:	fec42783          	lw	a5,-20(s0)
     678:	02878793          	addi	a5,a5,40
     67c:	fd442603          	lw	a2,-44(s0)
     680:	fd842583          	lw	a1,-40(s0)
     684:	00078513          	mv	a0,a5
     688:	430000ef          	jal	ra,ab8 <altera_avalon_jtag_uart_ioctl>
     68c:	00050793          	mv	a5,a0
}
     690:	00078513          	mv	a0,a5
     694:	02c12083          	lw	ra,44(sp)
     698:	02812403          	lw	s0,40(sp)
     69c:	03010113          	addi	sp,sp,48
     6a0:	00008067          	ret

000006a4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     6a4:	fd010113          	addi	sp,sp,-48
     6a8:	02112623          	sw	ra,44(sp)
     6ac:	02812423          	sw	s0,40(sp)
     6b0:	03010413          	addi	s0,sp,48
     6b4:	fca42e23          	sw	a0,-36(s0)
     6b8:	fcb42c23          	sw	a1,-40(s0)
     6bc:	fcc42a23          	sw	a2,-44(s0)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     6c0:	fdc42783          	lw	a5,-36(s0)
     6c4:	00100713          	li	a4,1
     6c8:	02e7a023          	sw	a4,32(a5)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     6cc:	fdc42783          	lw	a5,-36(s0)
     6d0:	0207a783          	lw	a5,32(a5)
     6d4:	fef42623          	sw	a5,-20(s0)
     6d8:	fdc42783          	lw	a5,-36(s0)
     6dc:	0007a783          	lw	a5,0(a5)
     6e0:	00478793          	addi	a5,a5,4
     6e4:	00078713          	mv	a4,a5
     6e8:	fec42783          	lw	a5,-20(s0)
     6ec:	00f72023          	sw	a5,0(a4)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     6f0:	fd842503          	lw	a0,-40(s0)
     6f4:	fd442583          	lw	a1,-44(s0)
     6f8:	00000713          	li	a4,0
     6fc:	fdc42683          	lw	a3,-36(s0)
     700:	75c00613          	li	a2,1884
     704:	28c020ef          	jal	ra,2990 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     708:	fdc42783          	lw	a5,-36(s0)
     70c:	0207a223          	sw	zero,36(a5)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     710:	fdc42783          	lw	a5,-36(s0)
     714:	00878713          	addi	a4,a5,8
  return _alt_tick_rate;
     718:	8581a583          	lw	a1,-1960(gp) # 99c0 <_alt_tick_rate>
     71c:	fdc42683          	lw	a3,-36(s0)
     720:	000017b7          	lui	a5,0x1
     724:	99478613          	addi	a2,a5,-1644 # 994 <altera_avalon_jtag_uart_timeout>
     728:	00070513          	mv	a0,a4
     72c:	579010ef          	jal	ra,24a4 <alt_alarm_start>
     730:	00050793          	mv	a5,a0
     734:	0007da63          	bgez	a5,748 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     738:	fdc42783          	lw	a5,-36(s0)
     73c:	80000737          	lui	a4,0x80000
     740:	fff74713          	not	a4,a4
     744:	00e7a223          	sw	a4,4(a5)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     748:	00000013          	nop
     74c:	02c12083          	lw	ra,44(sp)
     750:	02812403          	lw	s0,40(sp)
     754:	03010113          	addi	sp,sp,48
     758:	00008067          	ret

0000075c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     75c:	fa010113          	addi	sp,sp,-96
     760:	04812e23          	sw	s0,92(sp)
     764:	06010413          	addi	s0,sp,96
     768:	faa42623          	sw	a0,-84(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     76c:	fac42783          	lw	a5,-84(s0)
     770:	fcf42223          	sw	a5,-60(s0)
  unsigned int base = sp->base;
     774:	fc442783          	lw	a5,-60(s0)
     778:	0007a783          	lw	a5,0(a5)
     77c:	fcf42423          	sw	a5,-56(s0)
  unsigned int postflag=0;
     780:	fa042c23          	sw	zero,-72(s0)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     784:	fc842783          	lw	a5,-56(s0)
     788:	00478793          	addi	a5,a5,4
     78c:	0007a783          	lw	a5,0(a5)
     790:	fcf42623          	sw	a5,-52(s0)
     794:	fcc42783          	lw	a5,-52(s0)
     798:	fcf42823          	sw	a5,-48(s0)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     79c:	fd042783          	lw	a5,-48(s0)
     7a0:	3007f793          	andi	a5,a5,768
     7a4:	1c078e63          	beqz	a5,980 <altera_avalon_jtag_uart_irq+0x224>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     7a8:	fd042783          	lw	a5,-48(s0)
     7ac:	1007f793          	andi	a5,a5,256
     7b0:	0e078663          	beqz	a5,89c <altera_avalon_jtag_uart_irq+0x140>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     7b4:	000107b7          	lui	a5,0x10
     7b8:	faf42e23          	sw	a5,-68(s0)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     7bc:	fc442783          	lw	a5,-60(s0)
     7c0:	0287a783          	lw	a5,40(a5) # 10028 <__global_pointer$+0x5ec0>
     7c4:	00178793          	addi	a5,a5,1
     7c8:	7ff7f793          	andi	a5,a5,2047
     7cc:	fcf42a23          	sw	a5,-44(s0)
        if (next == sp->rx_out)
     7d0:	fc442783          	lw	a5,-60(s0)
     7d4:	02c7a783          	lw	a5,44(a5)
     7d8:	fd442703          	lw	a4,-44(s0)
     7dc:	06f70263          	beq	a4,a5,840 <altera_avalon_jtag_uart_irq+0xe4>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     7e0:	fc842783          	lw	a5,-56(s0)
     7e4:	0007a783          	lw	a5,0(a5)
     7e8:	fcf42c23          	sw	a5,-40(s0)
     7ec:	fd842783          	lw	a5,-40(s0)
     7f0:	faf42e23          	sw	a5,-68(s0)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     7f4:	fbc42703          	lw	a4,-68(s0)
     7f8:	000087b7          	lui	a5,0x8
     7fc:	00f777b3          	and	a5,a4,a5
     800:	04078463          	beqz	a5,848 <altera_avalon_jtag_uart_irq+0xec>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     804:	fc442783          	lw	a5,-60(s0)
     808:	0287a783          	lw	a5,40(a5) # 8028 <JTAG_UART_DBG+0x298>
     80c:	fbc42703          	lw	a4,-68(s0)
     810:	0ff77713          	zext.b	a4,a4
     814:	fc442683          	lw	a3,-60(s0)
     818:	00f687b3          	add	a5,a3,a5
     81c:	02e78c23          	sb	a4,56(a5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     820:	fc442783          	lw	a5,-60(s0)
     824:	0287a783          	lw	a5,40(a5)
     828:	00178793          	addi	a5,a5,1
     82c:	7ff7f713          	andi	a4,a5,2047
     830:	fc442783          	lw	a5,-60(s0)
     834:	02e7a423          	sw	a4,40(a5)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
     838:	00000013          	nop
      {
     83c:	f81ff06f          	j	7bc <altera_avalon_jtag_uart_irq+0x60>
          break;
     840:	00000013          	nop
     844:	0080006f          	j	84c <altera_avalon_jtag_uart_irq+0xf0>
          break;
     848:	00000013          	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     84c:	fbc42703          	lw	a4,-68(s0)
     850:	000107b7          	lui	a5,0x10
     854:	04f76463          	bltu	a4,a5,89c <altera_avalon_jtag_uart_irq+0x140>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     858:	fc442783          	lw	a5,-60(s0)
     85c:	0207a783          	lw	a5,32(a5) # 10020 <__global_pointer$+0x5eb8>
     860:	ffe7f713          	andi	a4,a5,-2
     864:	fc442783          	lw	a5,-60(s0)
     868:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     86c:	fc442783          	lw	a5,-60(s0)
     870:	0207a783          	lw	a5,32(a5)
     874:	fcf42e23          	sw	a5,-36(s0)
     878:	fc842783          	lw	a5,-56(s0)
     87c:	00478793          	addi	a5,a5,4
     880:	00078713          	mv	a4,a5
     884:	fdc42783          	lw	a5,-36(s0)
     888:	00f72023          	sw	a5,0(a4) # 80000000 <__alt_data_end+0x7e000000>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     88c:	fc842783          	lw	a5,-56(s0)
     890:	00478793          	addi	a5,a5,4
     894:	0007a783          	lw	a5,0(a5)
     898:	fef42023          	sw	a5,-32(s0)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     89c:	fd042783          	lw	a5,-48(s0)
     8a0:	2007f793          	andi	a5,a5,512
     8a4:	ee0780e3          	beqz	a5,784 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     8a8:	fd042783          	lw	a5,-48(s0)
     8ac:	0107d793          	srli	a5,a5,0x10
     8b0:	fcf42023          	sw	a5,-64(s0)

      while (space > 0 && sp->tx_out != sp->tx_in)
     8b4:	05c0006f          	j	910 <altera_avalon_jtag_uart_irq+0x1b4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     8b8:	fc442783          	lw	a5,-60(s0)
     8bc:	0347a783          	lw	a5,52(a5)
     8c0:	fc442703          	lw	a4,-60(s0)
     8c4:	00f707b3          	add	a5,a4,a5
     8c8:	00001737          	lui	a4,0x1
     8cc:	00f707b3          	add	a5,a4,a5
     8d0:	8387c783          	lbu	a5,-1992(a5)
     8d4:	fef42223          	sw	a5,-28(s0)
     8d8:	fc842783          	lw	a5,-56(s0)
     8dc:	fe442703          	lw	a4,-28(s0)
     8e0:	00e7a023          	sw	a4,0(a5)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     8e4:	fc442783          	lw	a5,-60(s0)
     8e8:	0347a783          	lw	a5,52(a5)
     8ec:	00178793          	addi	a5,a5,1
     8f0:	7ff7f713          	andi	a4,a5,2047
     8f4:	fc442783          	lw	a5,-60(s0)
     8f8:	02e7aa23          	sw	a4,52(a5)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
     8fc:	00100793          	li	a5,1
     900:	faf42c23          	sw	a5,-72(s0)

        space--;
     904:	fc042783          	lw	a5,-64(s0)
     908:	fff78793          	addi	a5,a5,-1
     90c:	fcf42023          	sw	a5,-64(s0)
      while (space > 0 && sp->tx_out != sp->tx_in)
     910:	fc042783          	lw	a5,-64(s0)
     914:	00078c63          	beqz	a5,92c <altera_avalon_jtag_uart_irq+0x1d0>
     918:	fc442783          	lw	a5,-60(s0)
     91c:	0347a703          	lw	a4,52(a5)
     920:	fc442783          	lw	a5,-60(s0)
     924:	0307a783          	lw	a5,48(a5)
     928:	f8f718e3          	bne	a4,a5,8b8 <altera_avalon_jtag_uart_irq+0x15c>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
     92c:	fc042783          	lw	a5,-64(s0)
     930:	e4078ae3          	beqz	a5,784 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     934:	fc442783          	lw	a5,-60(s0)
     938:	0207a783          	lw	a5,32(a5)
     93c:	ffd7f713          	andi	a4,a5,-3
     940:	fc442783          	lw	a5,-60(s0)
     944:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     948:	fc442783          	lw	a5,-60(s0)
     94c:	0207a783          	lw	a5,32(a5)
     950:	fef42423          	sw	a5,-24(s0)
     954:	fc442783          	lw	a5,-60(s0)
     958:	0007a783          	lw	a5,0(a5)
     95c:	00478793          	addi	a5,a5,4
     960:	00078713          	mv	a4,a5
     964:	fe842783          	lw	a5,-24(s0)
     968:	00f72023          	sw	a5,0(a4) # 1000 <altera_avalon_jtag_uart_write+0x21c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     96c:	fc842783          	lw	a5,-56(s0)
     970:	00478793          	addi	a5,a5,4
     974:	0007a783          	lw	a5,0(a5)
     978:	fef42623          	sw	a5,-20(s0)
  {
     97c:	e09ff06f          	j	784 <altera_avalon_jtag_uart_irq+0x28>
      break;
     980:	00000013          	nop
      }
    }
  }
}
     984:	00000013          	nop
     988:	05c12403          	lw	s0,92(sp)
     98c:	06010113          	addi	sp,sp,96
     990:	00008067          	ret

00000994 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     994:	fd010113          	addi	sp,sp,-48
     998:	02812623          	sw	s0,44(sp)
     99c:	03010413          	addi	s0,sp,48
     9a0:	fca42e23          	sw	a0,-36(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     9a4:	fdc42783          	lw	a5,-36(s0)
     9a8:	fef42023          	sw	a5,-32(s0)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     9ac:	fe042783          	lw	a5,-32(s0)
     9b0:	0007a783          	lw	a5,0(a5)
     9b4:	00478793          	addi	a5,a5,4
     9b8:	0007a783          	lw	a5,0(a5)
     9bc:	fef42223          	sw	a5,-28(s0)
     9c0:	fe442783          	lw	a5,-28(s0)
     9c4:	fef42423          	sw	a5,-24(s0)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     9c8:	fe842783          	lw	a5,-24(s0)
     9cc:	4007f793          	andi	a5,a5,1024
     9d0:	02078c63          	beqz	a5,a08 <altera_avalon_jtag_uart_timeout+0x74>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     9d4:	fe042783          	lw	a5,-32(s0)
     9d8:	0207a783          	lw	a5,32(a5)
     9dc:	4007e793          	ori	a5,a5,1024
     9e0:	fef42623          	sw	a5,-20(s0)
     9e4:	fe042783          	lw	a5,-32(s0)
     9e8:	0007a783          	lw	a5,0(a5)
     9ec:	00478793          	addi	a5,a5,4
     9f0:	00078713          	mv	a4,a5
     9f4:	fec42783          	lw	a5,-20(s0)
     9f8:	00f72023          	sw	a5,0(a4)
    sp->host_inactive = 0;
     9fc:	fe042783          	lw	a5,-32(s0)
     a00:	0207a223          	sw	zero,36(a5)
     a04:	0340006f          	j	a38 <altera_avalon_jtag_uart_timeout+0xa4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     a08:	fe042783          	lw	a5,-32(s0)
     a0c:	0247a703          	lw	a4,36(a5)
     a10:	800007b7          	lui	a5,0x80000
     a14:	ffc7c793          	xori	a5,a5,-4
     a18:	02e7e063          	bltu	a5,a4,a38 <altera_avalon_jtag_uart_timeout+0xa4>
    sp->host_inactive++;
     a1c:	fe042783          	lw	a5,-32(s0)
     a20:	0247a783          	lw	a5,36(a5) # 80000024 <__alt_data_end+0x7e000024>
     a24:	00178713          	addi	a4,a5,1
     a28:	fe042783          	lw	a5,-32(s0)
     a2c:	02e7a223          	sw	a4,36(a5)
    
    if (sp->host_inactive >= sp->timeout) {
     a30:	fe042783          	lw	a5,-32(s0)
     a34:	0247a783          	lw	a5,36(a5)
     a38:	8581a783          	lw	a5,-1960(gp) # 99c0 <_alt_tick_rate>
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     a3c:	00078513          	mv	a0,a5
     a40:	02c12403          	lw	s0,44(sp)
     a44:	03010113          	addi	sp,sp,48
     a48:	00008067          	ret

00000a4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     a4c:	fe010113          	addi	sp,sp,-32
     a50:	00812e23          	sw	s0,28(sp)
     a54:	02010413          	addi	s0,sp,32
     a58:	fea42623          	sw	a0,-20(s0)
     a5c:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     a60:	01c0006f          	j	a7c <altera_avalon_jtag_uart_close+0x30>
    if (flags & O_NONBLOCK) {
     a64:	fe842703          	lw	a4,-24(s0)
     a68:	000047b7          	lui	a5,0x4
     a6c:	00f777b3          	and	a5,a4,a5
     a70:	00078663          	beqz	a5,a7c <altera_avalon_jtag_uart_close+0x30>
      return -EWOULDBLOCK; 
     a74:	ff500793          	li	a5,-11
     a78:	0300006f          	j	aa8 <altera_avalon_jtag_uart_close+0x5c>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     a7c:	fec42783          	lw	a5,-20(s0)
     a80:	0347a703          	lw	a4,52(a5) # 4034 <_fwalk+0x10>
     a84:	fec42783          	lw	a5,-20(s0)
     a88:	0307a783          	lw	a5,48(a5)
     a8c:	00f70c63          	beq	a4,a5,aa4 <altera_avalon_jtag_uart_close+0x58>
     a90:	fec42783          	lw	a5,-20(s0)
     a94:	0247a703          	lw	a4,36(a5)
     a98:	fec42783          	lw	a5,-20(s0)
     a9c:	0047a783          	lw	a5,4(a5)
     aa0:	fcf762e3          	bltu	a4,a5,a64 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
     aa4:	00000793          	li	a5,0
}
     aa8:	00078513          	mv	a0,a5
     aac:	01c12403          	lw	s0,28(sp)
     ab0:	02010113          	addi	sp,sp,32
     ab4:	00008067          	ret

00000ab8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     ab8:	fd010113          	addi	sp,sp,-48
     abc:	02812623          	sw	s0,44(sp)
     ac0:	03010413          	addi	s0,sp,48
     ac4:	fca42e23          	sw	a0,-36(s0)
     ac8:	fcb42c23          	sw	a1,-40(s0)
     acc:	fcc42a23          	sw	a2,-44(s0)
  int rc = -ENOTTY;
     ad0:	fe700793          	li	a5,-25
     ad4:	fef42423          	sw	a5,-24(s0)

  switch (req)
     ad8:	fd842703          	lw	a4,-40(s0)
     adc:	000077b7          	lui	a5,0x7
     ae0:	a0178793          	addi	a5,a5,-1535 # 6a01 <__swsetup_r+0xb9>
     ae4:	00f70c63          	beq	a4,a5,afc <altera_avalon_jtag_uart_ioctl+0x44>
     ae8:	fd842703          	lw	a4,-40(s0)
     aec:	000077b7          	lui	a5,0x7
     af0:	a0278793          	addi	a5,a5,-1534 # 6a02 <__swsetup_r+0xba>
     af4:	06f70263          	beq	a4,a5,b58 <altera_avalon_jtag_uart_ioctl+0xa0>
      rc = 0;
    }
    break;

  default:
    break;
     af8:	0ac0006f          	j	ba4 <altera_avalon_jtag_uart_ioctl+0xec>
    if (sp->timeout != INT_MAX)
     afc:	fdc42783          	lw	a5,-36(s0)
     b00:	0047a703          	lw	a4,4(a5)
     b04:	800007b7          	lui	a5,0x80000
     b08:	fff7c793          	not	a5,a5
     b0c:	08f70663          	beq	a4,a5,b98 <altera_avalon_jtag_uart_ioctl+0xe0>
      int timeout = *((int *)arg);
     b10:	fd442783          	lw	a5,-44(s0)
     b14:	0007a783          	lw	a5,0(a5) # 80000000 <__alt_data_end+0x7e000000>
     b18:	fef42623          	sw	a5,-20(s0)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     b1c:	fec42703          	lw	a4,-20(s0)
     b20:	00100793          	li	a5,1
     b24:	00e7de63          	bge	a5,a4,b40 <altera_avalon_jtag_uart_ioctl+0x88>
     b28:	fec42703          	lw	a4,-20(s0)
     b2c:	800007b7          	lui	a5,0x80000
     b30:	fff7c793          	not	a5,a5
     b34:	00f70663          	beq	a4,a5,b40 <altera_avalon_jtag_uart_ioctl+0x88>
     b38:	fec42783          	lw	a5,-20(s0)
     b3c:	00c0006f          	j	b48 <altera_avalon_jtag_uart_ioctl+0x90>
     b40:	800007b7          	lui	a5,0x80000
     b44:	ffe7c793          	xori	a5,a5,-2
     b48:	fdc42703          	lw	a4,-36(s0)
     b4c:	00f72223          	sw	a5,4(a4)
      rc = 0;
     b50:	fe042423          	sw	zero,-24(s0)
    break;
     b54:	0440006f          	j	b98 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
     b58:	fdc42783          	lw	a5,-36(s0)
     b5c:	0047a703          	lw	a4,4(a5) # 80000004 <__alt_data_end+0x7e000004>
     b60:	800007b7          	lui	a5,0x80000
     b64:	fff7c793          	not	a5,a5
     b68:	02f70c63          	beq	a4,a5,ba0 <altera_avalon_jtag_uart_ioctl+0xe8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     b6c:	fdc42783          	lw	a5,-36(s0)
     b70:	0247a703          	lw	a4,36(a5) # 80000024 <__alt_data_end+0x7e000024>
     b74:	fdc42783          	lw	a5,-36(s0)
     b78:	0047a783          	lw	a5,4(a5)
     b7c:	00f737b3          	sltu	a5,a4,a5
     b80:	0ff7f793          	zext.b	a5,a5
     b84:	00078713          	mv	a4,a5
     b88:	fd442783          	lw	a5,-44(s0)
     b8c:	00e7a023          	sw	a4,0(a5)
      rc = 0;
     b90:	fe042423          	sw	zero,-24(s0)
    break;
     b94:	00c0006f          	j	ba0 <altera_avalon_jtag_uart_ioctl+0xe8>
    break;
     b98:	00000013          	nop
     b9c:	0080006f          	j	ba4 <altera_avalon_jtag_uart_ioctl+0xec>
    break;
     ba0:	00000013          	nop
  }

  return rc;
     ba4:	fe842783          	lw	a5,-24(s0)
}
     ba8:	00078513          	mv	a0,a5
     bac:	02c12403          	lw	s0,44(sp)
     bb0:	03010113          	addi	sp,sp,48
     bb4:	00008067          	ret

00000bb8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     bb8:	fc010113          	addi	sp,sp,-64
     bbc:	02112e23          	sw	ra,60(sp)
     bc0:	02812c23          	sw	s0,56(sp)
     bc4:	04010413          	addi	s0,sp,64
     bc8:	fca42623          	sw	a0,-52(s0)
     bcc:	fcb42423          	sw	a1,-56(s0)
     bd0:	fcc42223          	sw	a2,-60(s0)
     bd4:	fcd42023          	sw	a3,-64(s0)
  char * ptr = buffer;
     bd8:	fc842783          	lw	a5,-56(s0)
     bdc:	fcf42823          	sw	a5,-48(s0)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     be0:	1280006f          	j	d08 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     be4:	fcc42783          	lw	a5,-52(s0)
     be8:	0287a783          	lw	a5,40(a5)
     bec:	fcf42c23          	sw	a5,-40(s0)
      out = sp->rx_out;
     bf0:	fcc42783          	lw	a5,-52(s0)
     bf4:	02c7a783          	lw	a5,44(a5)
     bf8:	fcf42e23          	sw	a5,-36(s0)

      if (in >= out)
     bfc:	fd842703          	lw	a4,-40(s0)
     c00:	fdc42783          	lw	a5,-36(s0)
     c04:	00f76c63          	bltu	a4,a5,c1c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     c08:	fd842703          	lw	a4,-40(s0)
     c0c:	fdc42783          	lw	a5,-36(s0)
     c10:	40f707b3          	sub	a5,a4,a5
     c14:	fcf42a23          	sw	a5,-44(s0)
     c18:	0180006f          	j	c30 <altera_avalon_jtag_uart_read+0x78>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     c1c:	000017b7          	lui	a5,0x1
     c20:	80078713          	addi	a4,a5,-2048 # 800 <altera_avalon_jtag_uart_irq+0xa4>
     c24:	fdc42783          	lw	a5,-36(s0)
     c28:	40f707b3          	sub	a5,a4,a5
     c2c:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
     c30:	fd442783          	lw	a5,-44(s0)
     c34:	06078e63          	beqz	a5,cb0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */

      if (n > space)
     c38:	fc442783          	lw	a5,-60(s0)
     c3c:	fd442703          	lw	a4,-44(s0)
     c40:	00e7f663          	bgeu	a5,a4,c4c <altera_avalon_jtag_uart_read+0x94>
        n = space;
     c44:	fc442783          	lw	a5,-60(s0)
     c48:	fcf42a23          	sw	a5,-44(s0)

      memcpy(ptr, sp->rx_buf + out, n);
     c4c:	fcc42783          	lw	a5,-52(s0)
     c50:	03878713          	addi	a4,a5,56
     c54:	fdc42783          	lw	a5,-36(s0)
     c58:	00f707b3          	add	a5,a4,a5
     c5c:	fd442603          	lw	a2,-44(s0)
     c60:	00078593          	mv	a1,a5
     c64:	fd042503          	lw	a0,-48(s0)
     c68:	4d1030ef          	jal	ra,4938 <memcpy>
      ptr   += n;
     c6c:	fd042703          	lw	a4,-48(s0)
     c70:	fd442783          	lw	a5,-44(s0)
     c74:	00f707b3          	add	a5,a4,a5
     c78:	fcf42823          	sw	a5,-48(s0)
      space -= n;
     c7c:	fc442703          	lw	a4,-60(s0)
     c80:	fd442783          	lw	a5,-44(s0)
     c84:	40f707b3          	sub	a5,a4,a5
     c88:	fcf42223          	sw	a5,-60(s0)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c8c:	fdc42703          	lw	a4,-36(s0)
     c90:	fd442783          	lw	a5,-44(s0)
     c94:	00f707b3          	add	a5,a4,a5
     c98:	7ff7f713          	andi	a4,a5,2047
     c9c:	fcc42783          	lw	a5,-52(s0)
     ca0:	02e7a623          	sw	a4,44(a5)
    }
    while (space > 0);
     ca4:	fc442783          	lw	a5,-60(s0)
     ca8:	f2f04ee3          	bgtz	a5,be4 <altera_avalon_jtag_uart_read+0x2c>
     cac:	0080006f          	j	cb4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */
     cb0:	00000013          	nop

    /* If we read any data then return it */
    if (ptr != buffer)
     cb4:	fd042703          	lw	a4,-48(s0)
     cb8:	fc842783          	lw	a5,-56(s0)
     cbc:	04f71c63          	bne	a4,a5,d14 <altera_avalon_jtag_uart_read+0x15c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     cc0:	fc042703          	lw	a4,-64(s0)
     cc4:	000047b7          	lui	a5,0x4
     cc8:	00f777b3          	and	a5,a4,a5
     ccc:	04079863          	bnez	a5,d1c <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     cd0:	00000013          	nop
     cd4:	fcc42783          	lw	a5,-52(s0)
     cd8:	0287a783          	lw	a5,40(a5) # 4028 <_fwalk+0x4>
     cdc:	fd842703          	lw	a4,-40(s0)
     ce0:	00f71c63          	bne	a4,a5,cf8 <altera_avalon_jtag_uart_read+0x140>
     ce4:	fcc42783          	lw	a5,-52(s0)
     ce8:	0247a703          	lw	a4,36(a5)
     cec:	fcc42783          	lw	a5,-52(s0)
     cf0:	0047a783          	lw	a5,4(a5)
     cf4:	fef760e3          	bltu	a4,a5,cd4 <altera_avalon_jtag_uart_read+0x11c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     cf8:	fcc42783          	lw	a5,-52(s0)
     cfc:	0287a783          	lw	a5,40(a5)
     d00:	fd842703          	lw	a4,-40(s0)
     d04:	02f70063          	beq	a4,a5,d24 <altera_avalon_jtag_uart_read+0x16c>
  while (space > 0)
     d08:	fc442783          	lw	a5,-60(s0)
     d0c:	ecf04ce3          	bgtz	a5,be4 <altera_avalon_jtag_uart_read+0x2c>
     d10:	0180006f          	j	d28 <altera_avalon_jtag_uart_read+0x170>
      break;
     d14:	00000013          	nop
     d18:	0100006f          	j	d28 <altera_avalon_jtag_uart_read+0x170>
      break;
     d1c:	00000013          	nop
     d20:	0080006f          	j	d28 <altera_avalon_jtag_uart_read+0x170>
      break;
     d24:	00000013          	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     d28:	fd042703          	lw	a4,-48(s0)
     d2c:	fc842783          	lw	a5,-56(s0)
     d30:	06f70463          	beq	a4,a5,d98 <altera_avalon_jtag_uart_read+0x1e0>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
     d34:	00800793          	li	a5,8
     d38:	3007b7f3          	csrrc	a5,mstatus,a5
     d3c:	fef42623          	sw	a5,-20(s0)
    return context;
     d40:	fec42783          	lw	a5,-20(s0)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     d44:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     d48:	fcc42783          	lw	a5,-52(s0)
     d4c:	0207a783          	lw	a5,32(a5)
     d50:	0017e713          	ori	a4,a5,1
     d54:	fcc42783          	lw	a5,-52(s0)
     d58:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     d5c:	fcc42783          	lw	a5,-52(s0)
     d60:	0207a783          	lw	a5,32(a5)
     d64:	fef42223          	sw	a5,-28(s0)
     d68:	fcc42783          	lw	a5,-52(s0)
     d6c:	0007a783          	lw	a5,0(a5)
     d70:	00478793          	addi	a5,a5,4
     d74:	00078713          	mv	a4,a5
     d78:	fe442783          	lw	a5,-28(s0)
     d7c:	00f72023          	sw	a5,0(a4)
     d80:	fe042783          	lw	a5,-32(s0)
     d84:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
     d88:	fe842783          	lw	a5,-24(s0)
     d8c:	0087f793          	andi	a5,a5,8
     d90:	3007a073          	csrs	mstatus,a5
}
     d94:	00000013          	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
     d98:	fd042703          	lw	a4,-48(s0)
     d9c:	fc842783          	lw	a5,-56(s0)
     da0:	00f70a63          	beq	a4,a5,db4 <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
     da4:	fd042703          	lw	a4,-48(s0)
     da8:	fc842783          	lw	a5,-56(s0)
     dac:	40f707b3          	sub	a5,a4,a5
     db0:	0200006f          	j	dd0 <altera_avalon_jtag_uart_read+0x218>
  else if (flags & O_NONBLOCK)
     db4:	fc042703          	lw	a4,-64(s0)
     db8:	000047b7          	lui	a5,0x4
     dbc:	00f777b3          	and	a5,a4,a5
     dc0:	00078663          	beqz	a5,dcc <altera_avalon_jtag_uart_read+0x214>
    return -EWOULDBLOCK;
     dc4:	ff500793          	li	a5,-11
     dc8:	0080006f          	j	dd0 <altera_avalon_jtag_uart_read+0x218>
  else
    return -EIO;
     dcc:	ffb00793          	li	a5,-5
}
     dd0:	00078513          	mv	a0,a5
     dd4:	03c12083          	lw	ra,60(sp)
     dd8:	03812403          	lw	s0,56(sp)
     ddc:	04010113          	addi	sp,sp,64
     de0:	00008067          	ret

00000de4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     de4:	fc010113          	addi	sp,sp,-64
     de8:	02112e23          	sw	ra,60(sp)
     dec:	02812c23          	sw	s0,56(sp)
     df0:	04010413          	addi	s0,sp,64
     df4:	fca42623          	sw	a0,-52(s0)
     df8:	fcb42423          	sw	a1,-56(s0)
     dfc:	fcc42223          	sw	a2,-60(s0)
     e00:	fcd42023          	sw	a3,-64(s0)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
     e04:	fc042823          	sw	zero,-48(s0)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
     e08:	fc842783          	lw	a5,-56(s0)
     e0c:	fcf42c23          	sw	a5,-40(s0)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     e10:	0ec0006f          	j	efc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     e14:	fcc42783          	lw	a5,-52(s0)
     e18:	0307a783          	lw	a5,48(a5) # 4030 <_fwalk+0xc>
     e1c:	fcf42e23          	sw	a5,-36(s0)
      out = sp->tx_out;
     e20:	fcc42783          	lw	a5,-52(s0)
     e24:	0347a783          	lw	a5,52(a5)
     e28:	fcf42823          	sw	a5,-48(s0)

      if (in < out)
     e2c:	fdc42703          	lw	a4,-36(s0)
     e30:	fd042783          	lw	a5,-48(s0)
     e34:	00f77e63          	bgeu	a4,a5,e50 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
     e38:	fd042703          	lw	a4,-48(s0)
     e3c:	fdc42783          	lw	a5,-36(s0)
     e40:	40f707b3          	sub	a5,a4,a5
     e44:	fff78793          	addi	a5,a5,-1
     e48:	fcf42a23          	sw	a5,-44(s0)
     e4c:	0340006f          	j	e80 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
     e50:	fd042783          	lw	a5,-48(s0)
     e54:	00078e63          	beqz	a5,e70 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     e58:	000017b7          	lui	a5,0x1
     e5c:	80078713          	addi	a4,a5,-2048 # 800 <altera_avalon_jtag_uart_irq+0xa4>
     e60:	fdc42783          	lw	a5,-36(s0)
     e64:	40f707b3          	sub	a5,a4,a5
     e68:	fcf42a23          	sw	a5,-44(s0)
     e6c:	0140006f          	j	e80 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     e70:	7ff00713          	li	a4,2047
     e74:	fdc42783          	lw	a5,-36(s0)
     e78:	40f707b3          	sub	a5,a4,a5
     e7c:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
     e80:	fd442783          	lw	a5,-44(s0)
     e84:	08078263          	beqz	a5,f08 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
     e88:	fc442783          	lw	a5,-60(s0)
     e8c:	fd442703          	lw	a4,-44(s0)
     e90:	00e7f663          	bgeu	a5,a4,e9c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
     e94:	fc442783          	lw	a5,-60(s0)
     e98:	fcf42a23          	sw	a5,-44(s0)

      memcpy(sp->tx_buf + in, ptr, n);
     e9c:	fcc42703          	lw	a4,-52(s0)
     ea0:	000017b7          	lui	a5,0x1
     ea4:	83878793          	addi	a5,a5,-1992 # 838 <altera_avalon_jtag_uart_irq+0xdc>
     ea8:	00f70733          	add	a4,a4,a5
     eac:	fdc42783          	lw	a5,-36(s0)
     eb0:	00f707b3          	add	a5,a4,a5
     eb4:	fd442603          	lw	a2,-44(s0)
     eb8:	fc842583          	lw	a1,-56(s0)
     ebc:	00078513          	mv	a0,a5
     ec0:	279030ef          	jal	ra,4938 <memcpy>
      ptr   += n;
     ec4:	fc842703          	lw	a4,-56(s0)
     ec8:	fd442783          	lw	a5,-44(s0)
     ecc:	00f707b3          	add	a5,a4,a5
     ed0:	fcf42423          	sw	a5,-56(s0)
      count -= n;
     ed4:	fc442703          	lw	a4,-60(s0)
     ed8:	fd442783          	lw	a5,-44(s0)
     edc:	40f707b3          	sub	a5,a4,a5
     ee0:	fcf42223          	sw	a5,-60(s0)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     ee4:	fdc42703          	lw	a4,-36(s0)
     ee8:	fd442783          	lw	a5,-44(s0)
     eec:	00f707b3          	add	a5,a4,a5
     ef0:	7ff7f713          	andi	a4,a5,2047
     ef4:	fcc42783          	lw	a5,-52(s0)
     ef8:	02e7a823          	sw	a4,48(a5)
    while (count > 0)
     efc:	fc442783          	lw	a5,-60(s0)
     f00:	f0f04ae3          	bgtz	a5,e14 <altera_avalon_jtag_uart_write+0x30>
     f04:	0080006f          	j	f0c <altera_avalon_jtag_uart_write+0x128>
        break;
     f08:	00000013          	nop
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
     f0c:	00800793          	li	a5,8
     f10:	3007b7f3          	csrrc	a5,mstatus,a5
     f14:	fef42623          	sw	a5,-20(s0)
    return context;
     f18:	fec42783          	lw	a5,-20(s0)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
     f1c:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     f20:	fcc42783          	lw	a5,-52(s0)
     f24:	0207a783          	lw	a5,32(a5)
     f28:	0027e713          	ori	a4,a5,2
     f2c:	fcc42783          	lw	a5,-52(s0)
     f30:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     f34:	fcc42783          	lw	a5,-52(s0)
     f38:	0207a783          	lw	a5,32(a5)
     f3c:	fef42223          	sw	a5,-28(s0)
     f40:	fcc42783          	lw	a5,-52(s0)
     f44:	0007a783          	lw	a5,0(a5)
     f48:	00478793          	addi	a5,a5,4
     f4c:	00078713          	mv	a4,a5
     f50:	fe442783          	lw	a5,-28(s0)
     f54:	00f72023          	sw	a5,0(a4)
     f58:	fe042783          	lw	a5,-32(s0)
     f5c:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
     f60:	fe842783          	lw	a5,-24(s0)
     f64:	0087f793          	andi	a5,a5,8
     f68:	3007a073          	csrs	mstatus,a5
}
     f6c:	00000013          	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
     f70:	fc442783          	lw	a5,-60(s0)
     f74:	04f05463          	blez	a5,fbc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
     f78:	fc042703          	lw	a4,-64(s0)
     f7c:	000047b7          	lui	a5,0x4
     f80:	00f777b3          	and	a5,a4,a5
     f84:	04079263          	bnez	a5,fc8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     f88:	00000013          	nop
     f8c:	fcc42783          	lw	a5,-52(s0)
     f90:	0347a783          	lw	a5,52(a5) # 4034 <_fwalk+0x10>
     f94:	fd042703          	lw	a4,-48(s0)
     f98:	00f71c63          	bne	a4,a5,fb0 <altera_avalon_jtag_uart_write+0x1cc>
     f9c:	fcc42783          	lw	a5,-52(s0)
     fa0:	0247a703          	lw	a4,36(a5)
     fa4:	fcc42783          	lw	a5,-52(s0)
     fa8:	0047a783          	lw	a5,4(a5)
     fac:	fef760e3          	bltu	a4,a5,f8c <altera_avalon_jtag_uart_write+0x1a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
     fb0:	fcc42783          	lw	a5,-52(s0)
     fb4:	0247a783          	lw	a5,36(a5)
     fb8:	00079c63          	bnez	a5,fd0 <altera_avalon_jtag_uart_write+0x1ec>
         break;
    }
  }
  while (count > 0);
     fbc:	fc442783          	lw	a5,-60(s0)
     fc0:	f2f04ee3          	bgtz	a5,efc <altera_avalon_jtag_uart_write+0x118>
     fc4:	0100006f          	j	fd4 <altera_avalon_jtag_uart_write+0x1f0>
        break;
     fc8:	00000013          	nop
     fcc:	0080006f          	j	fd4 <altera_avalon_jtag_uart_write+0x1f0>
         break;
     fd0:	00000013          	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
     fd4:	fc842703          	lw	a4,-56(s0)
     fd8:	fd842783          	lw	a5,-40(s0)
     fdc:	00f70a63          	beq	a4,a5,ff0 <altera_avalon_jtag_uart_write+0x20c>
    return ptr - start;
     fe0:	fc842703          	lw	a4,-56(s0)
     fe4:	fd842783          	lw	a5,-40(s0)
     fe8:	40f707b3          	sub	a5,a4,a5
     fec:	0200006f          	j	100c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
     ff0:	fc042703          	lw	a4,-64(s0)
     ff4:	000047b7          	lui	a5,0x4
     ff8:	00f777b3          	and	a5,a4,a5
     ffc:	00078663          	beqz	a5,1008 <altera_avalon_jtag_uart_write+0x224>
    return -EWOULDBLOCK;
    1000:	ff500793          	li	a5,-11
    1004:	0080006f          	j	100c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1008:	ffb00793          	li	a5,-5
}
    100c:	00078513          	mv	a0,a5
    1010:	03c12083          	lw	ra,60(sp)
    1014:	03812403          	lw	s0,56(sp)
    1018:	04010113          	addi	sp,sp,64
    101c:	00008067          	ret

00001020 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1020:	fd010113          	addi	sp,sp,-48
    1024:	02112623          	sw	ra,44(sp)
    1028:	02812423          	sw	s0,40(sp)
    102c:	03010413          	addi	s0,sp,48
    1030:	fca42e23          	sw	a0,-36(s0)
    1034:	fcb42c23          	sw	a1,-40(s0)
    1038:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    103c:	fdc42783          	lw	a5,-36(s0)
    1040:	0007a783          	lw	a5,0(a5) # 4000 <_free_r+0x2e0>
    1044:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    1048:	fec42783          	lw	a5,-20(s0)
    104c:	02878713          	addi	a4,a5,40
    1050:	fdc42783          	lw	a5,-36(s0)
    1054:	0087a783          	lw	a5,8(a5)
    1058:	00078693          	mv	a3,a5
    105c:	fd442603          	lw	a2,-44(s0)
    1060:	fd842583          	lw	a1,-40(s0)
    1064:	00070513          	mv	a0,a4
    1068:	508000ef          	jal	ra,1570 <altera_avalon_uart_read>
    106c:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    1070:	00078513          	mv	a0,a5
    1074:	02c12083          	lw	ra,44(sp)
    1078:	02812403          	lw	s0,40(sp)
    107c:	03010113          	addi	sp,sp,48
    1080:	00008067          	ret

00001084 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1084:	fd010113          	addi	sp,sp,-48
    1088:	02112623          	sw	ra,44(sp)
    108c:	02812423          	sw	s0,40(sp)
    1090:	03010413          	addi	s0,sp,48
    1094:	fca42e23          	sw	a0,-36(s0)
    1098:	fcb42c23          	sw	a1,-40(s0)
    109c:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    10a0:	fdc42783          	lw	a5,-36(s0)
    10a4:	0007a783          	lw	a5,0(a5)
    10a8:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    10ac:	fec42783          	lw	a5,-20(s0)
    10b0:	02878713          	addi	a4,a5,40
    10b4:	fdc42783          	lw	a5,-36(s0)
    10b8:	0087a783          	lw	a5,8(a5)
    10bc:	00078693          	mv	a3,a5
    10c0:	fd442603          	lw	a2,-44(s0)
    10c4:	fd842583          	lw	a1,-40(s0)
    10c8:	00070513          	mv	a0,a4
    10cc:	6d0000ef          	jal	ra,179c <altera_avalon_uart_write>
    10d0:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    10d4:	00078513          	mv	a0,a5
    10d8:	02c12083          	lw	ra,44(sp)
    10dc:	02812403          	lw	s0,40(sp)
    10e0:	03010113          	addi	sp,sp,48
    10e4:	00008067          	ret

000010e8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    10e8:	fd010113          	addi	sp,sp,-48
    10ec:	02112623          	sw	ra,44(sp)
    10f0:	02812423          	sw	s0,40(sp)
    10f4:	03010413          	addi	s0,sp,48
    10f8:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    10fc:	fdc42783          	lw	a5,-36(s0)
    1100:	0007a783          	lw	a5,0(a5)
    1104:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    1108:	fec42783          	lw	a5,-20(s0)
    110c:	02878713          	addi	a4,a5,40
    1110:	fdc42783          	lw	a5,-36(s0)
    1114:	0087a783          	lw	a5,8(a5)
    1118:	00078593          	mv	a1,a5
    111c:	00070513          	mv	a0,a4
    1120:	3b8000ef          	jal	ra,14d8 <altera_avalon_uart_close>
    1124:	00050793          	mv	a5,a0
}
    1128:	00078513          	mv	a0,a5
    112c:	02c12083          	lw	ra,44(sp)
    1130:	02812403          	lw	s0,40(sp)
    1134:	03010113          	addi	sp,sp,48
    1138:	00008067          	ret

0000113c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    113c:	fd010113          	addi	sp,sp,-48
    1140:	02112623          	sw	ra,44(sp)
    1144:	02812423          	sw	s0,40(sp)
    1148:	03010413          	addi	s0,sp,48
    114c:	fca42e23          	sw	a0,-36(s0)
    1150:	fcb42c23          	sw	a1,-40(s0)
    1154:	fcc42a23          	sw	a2,-44(s0)
  void* base = sp->base;
    1158:	fdc42783          	lw	a5,-36(s0)
    115c:	0007a783          	lw	a5,0(a5)
    1160:	fef42223          	sw	a5,-28(s0)
    1164:	00000793          	li	a5,0
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    1168:	00079a63          	bnez	a5,117c <altera_avalon_uart_init+0x40>
    116c:	00000793          	li	a5,0
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    1170:	00079663          	bnez	a5,117c <altera_avalon_uart_init+0x40>
    1174:	00000793          	li	a5,0
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    1178:	00078663          	beqz	a5,1184 <altera_avalon_uart_init+0x48>
    117c:	00100793          	li	a5,1
    1180:	0080006f          	j	1188 <altera_avalon_uart_init+0x4c>
    1184:	00000793          	li	a5,0
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    1188:	fef42423          	sw	a5,-24(s0)
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    118c:	fe842783          	lw	a5,-24(s0)
    1190:	04079663          	bnez	a5,11dc <altera_avalon_uart_init+0xa0>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    1194:	fdc42783          	lw	a5,-36(s0)
    1198:	00001737          	lui	a4,0x1
    119c:	c8070713          	addi	a4,a4,-896 # c80 <altera_avalon_jtag_uart_read+0xc8>
    11a0:	00e7a223          	sw	a4,4(a5)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    11a4:	fdc42783          	lw	a5,-36(s0)
    11a8:	0047a783          	lw	a5,4(a5)
    11ac:	fef42623          	sw	a5,-20(s0)
    11b0:	fe442783          	lw	a5,-28(s0)
    11b4:	00c78793          	addi	a5,a5,12
    11b8:	fec42703          	lw	a4,-20(s0)
    11bc:	00e7a023          	sw	a4,0(a5)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    11c0:	00000713          	li	a4,0
    11c4:	fdc42683          	lw	a3,-36(s0)
    11c8:	000017b7          	lui	a5,0x1
    11cc:	1f078613          	addi	a2,a5,496 # 11f0 <altera_avalon_uart_irq>
    11d0:	fd442583          	lw	a1,-44(s0)
    11d4:	fd842503          	lw	a0,-40(s0)
    11d8:	7b8010ef          	jal	ra,2990 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    11dc:	00000013          	nop
    11e0:	02c12083          	lw	ra,44(sp)
    11e4:	02812403          	lw	s0,40(sp)
    11e8:	03010113          	addi	sp,sp,48
    11ec:	00008067          	ret

000011f0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    11f0:	fc010113          	addi	sp,sp,-64
    11f4:	02112e23          	sw	ra,60(sp)
    11f8:	02812c23          	sw	s0,56(sp)
    11fc:	04010413          	addi	s0,sp,64
    1200:	fca42623          	sw	a0,-52(s0)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    1204:	fcc42783          	lw	a5,-52(s0)
    1208:	fcf42c23          	sw	a5,-40(s0)
  void* base               = sp->base;
    120c:	fd842783          	lw	a5,-40(s0)
    1210:	0007a783          	lw	a5,0(a5)
    1214:	fcf42e23          	sw	a5,-36(s0)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    1218:	fdc42783          	lw	a5,-36(s0)
    121c:	00878793          	addi	a5,a5,8
    1220:	0007a783          	lw	a5,0(a5)
    1224:	fef42023          	sw	a5,-32(s0)
    1228:	fe042783          	lw	a5,-32(s0)
    122c:	fef42223          	sw	a5,-28(s0)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    1230:	fe042423          	sw	zero,-24(s0)
    1234:	fdc42783          	lw	a5,-36(s0)
    1238:	00878793          	addi	a5,a5,8
    123c:	fe842703          	lw	a4,-24(s0)
    1240:	00e7a023          	sw	a4,0(a5)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    1244:	fdc42783          	lw	a5,-36(s0)
    1248:	00878793          	addi	a5,a5,8
    124c:	0007a783          	lw	a5,0(a5)
    1250:	fef42623          	sw	a5,-20(s0)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    1254:	fe442783          	lw	a5,-28(s0)
    1258:	0807f793          	andi	a5,a5,128
    125c:	00078863          	beqz	a5,126c <altera_avalon_uart_irq+0x7c>
  {
    altera_avalon_uart_rxirq(sp, status);
    1260:	fe442583          	lw	a1,-28(s0)
    1264:	fd842503          	lw	a0,-40(s0)
    1268:	030000ef          	jal	ra,1298 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    126c:	fe442783          	lw	a5,-28(s0)
    1270:	4407f793          	andi	a5,a5,1088
    1274:	00078863          	beqz	a5,1284 <altera_avalon_uart_irq+0x94>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    1278:	fe442583          	lw	a1,-28(s0)
    127c:	fd842503          	lw	a0,-40(s0)
    1280:	100000ef          	jal	ra,1380 <altera_avalon_uart_txirq>
  }
  

}
    1284:	00000013          	nop
    1288:	03c12083          	lw	ra,60(sp)
    128c:	03812403          	lw	s0,56(sp)
    1290:	04010113          	addi	sp,sp,64
    1294:	00008067          	ret

00001298 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    1298:	fd010113          	addi	sp,sp,-48
    129c:	02812623          	sw	s0,44(sp)
    12a0:	03010413          	addi	s0,sp,48
    12a4:	fca42e23          	sw	a0,-36(s0)
    12a8:	fcb42c23          	sw	a1,-40(s0)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    12ac:	fd842783          	lw	a5,-40(s0)
    12b0:	0037f793          	andi	a5,a5,3
    12b4:	0a079e63          	bnez	a5,1370 <altera_avalon_uart_rxirq+0xd8>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    12b8:	fdc42783          	lw	a5,-36(s0)
    12bc:	00c7a783          	lw	a5,12(a5)
    12c0:	fdc42783          	lw	a5,-36(s0)
    12c4:	0087a783          	lw	a5,8(a5)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, ALT_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    12c8:	fdc42783          	lw	a5,-36(s0)
    12cc:	00c7a783          	lw	a5,12(a5)
    12d0:	00178793          	addi	a5,a5,1
    12d4:	03f7f793          	andi	a5,a5,63
    12d8:	fef42223          	sw	a5,-28(s0)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    12dc:	fdc42783          	lw	a5,-36(s0)
    12e0:	0007a783          	lw	a5,0(a5)
    12e4:	0007a783          	lw	a5,0(a5)
    12e8:	fef42423          	sw	a5,-24(s0)
    12ec:	fe842703          	lw	a4,-24(s0)
    12f0:	fdc42783          	lw	a5,-36(s0)
    12f4:	00c7a783          	lw	a5,12(a5)
    12f8:	0ff77713          	zext.b	a4,a4
    12fc:	fdc42683          	lw	a3,-36(s0)
    1300:	00f687b3          	add	a5,a3,a5
    1304:	00e78e23          	sb	a4,28(a5)

  sp->rx_end = next;
    1308:	fdc42783          	lw	a5,-36(s0)
    130c:	fe442703          	lw	a4,-28(s0)
    1310:	00e7a623          	sw	a4,12(a5)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    1314:	fdc42783          	lw	a5,-36(s0)
    1318:	00c7a783          	lw	a5,12(a5)
    131c:	00178793          	addi	a5,a5,1
    1320:	03f7f793          	andi	a5,a5,63
    1324:	fef42223          	sw	a5,-28(s0)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    1328:	fdc42783          	lw	a5,-36(s0)
    132c:	0087a783          	lw	a5,8(a5)
    1330:	fe442703          	lw	a4,-28(s0)
    1334:	04f71063          	bne	a4,a5,1374 <altera_avalon_uart_rxirq+0xdc>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    1338:	fdc42783          	lw	a5,-36(s0)
    133c:	0047a783          	lw	a5,4(a5)
    1340:	f7f7f713          	andi	a4,a5,-129
    1344:	fdc42783          	lw	a5,-36(s0)
    1348:	00e7a223          	sw	a4,4(a5)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    134c:	fdc42783          	lw	a5,-36(s0)
    1350:	0047a783          	lw	a5,4(a5)
    1354:	fef42623          	sw	a5,-20(s0)
    1358:	fdc42783          	lw	a5,-36(s0)
    135c:	0007a783          	lw	a5,0(a5)
    1360:	00c78793          	addi	a5,a5,12
    1364:	fec42703          	lw	a4,-20(s0)
    1368:	00e7a023          	sw	a4,0(a5)
    136c:	0080006f          	j	1374 <altera_avalon_uart_rxirq+0xdc>
    return;
    1370:	00000013          	nop
  }   
}
    1374:	02c12403          	lw	s0,44(sp)
    1378:	03010113          	addi	sp,sp,48
    137c:	00008067          	ret

00001380 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    1380:	fd010113          	addi	sp,sp,-48
    1384:	02812623          	sw	s0,44(sp)
    1388:	03010413          	addi	s0,sp,48
    138c:	fca42e23          	sw	a0,-36(s0)
    1390:	fcb42c23          	sw	a1,-40(s0)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    1394:	fdc42783          	lw	a5,-36(s0)
    1398:	0107a703          	lw	a4,16(a5)
    139c:	fdc42783          	lw	a5,-36(s0)
    13a0:	0147a783          	lw	a5,20(a5)
    13a4:	0cf70e63          	beq	a4,a5,1480 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    13a8:	fdc42783          	lw	a5,-36(s0)
    13ac:	0187a783          	lw	a5,24(a5)
    13b0:	0027f793          	andi	a5,a5,2
    13b4:	00078c63          	beqz	a5,13cc <altera_avalon_uart_txirq+0x4c>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    13b8:	fd842703          	lw	a4,-40(s0)
    13bc:	000017b7          	lui	a5,0x1
    13c0:	80078793          	addi	a5,a5,-2048 # 800 <altera_avalon_jtag_uart_irq+0xa4>
    13c4:	00f777b3          	and	a5,a4,a5
    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    13c8:	06078a63          	beqz	a5,143c <altera_avalon_uart_txirq+0xbc>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    13cc:	fdc42783          	lw	a5,-36(s0)
    13d0:	0107a783          	lw	a5,16(a5)
    13d4:	fdc42783          	lw	a5,-36(s0)
    13d8:	0147a783          	lw	a5,20(a5)
                       ALT_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    13dc:	fdc42783          	lw	a5,-36(s0)
    13e0:	0107a783          	lw	a5,16(a5)
    13e4:	fdc42703          	lw	a4,-36(s0)
    13e8:	00f707b3          	add	a5,a4,a5
    13ec:	05c7c783          	lbu	a5,92(a5)
    13f0:	0ff7f793          	zext.b	a5,a5
    13f4:	fef42423          	sw	a5,-24(s0)
    13f8:	fdc42783          	lw	a5,-36(s0)
    13fc:	0007a783          	lw	a5,0(a5)
    1400:	00478793          	addi	a5,a5,4
    1404:	fe842703          	lw	a4,-24(s0)
    1408:	00e7a023          	sw	a4,0(a5)

      sp->tx_start = ((sp->tx_start) + 1) & ALT_AVALON_UART_BUF_MSK;
    140c:	fdc42783          	lw	a5,-36(s0)
    1410:	0107a783          	lw	a5,16(a5)
    1414:	00178793          	addi	a5,a5,1
    1418:	03f7f713          	andi	a4,a5,63
    141c:	fdc42783          	lw	a5,-36(s0)
    1420:	00e7a823          	sw	a4,16(a5)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    1424:	fdc42783          	lw	a5,-36(s0)
    1428:	0047a783          	lw	a5,4(a5)
    142c:	0407e713          	ori	a4,a5,64
    1430:	fdc42783          	lw	a5,-36(s0)
    1434:	00e7a223          	sw	a4,4(a5)
    1438:	0480006f          	j	1480 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    143c:	fdc42783          	lw	a5,-36(s0)
    1440:	0007a783          	lw	a5,0(a5)
    1444:	00878793          	addi	a5,a5,8
    1448:	0007a783          	lw	a5,0(a5)
    144c:	fef42223          	sw	a5,-28(s0)
    1450:	fe442783          	lw	a5,-28(s0)
    1454:	fcf42c23          	sw	a5,-40(s0)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    1458:	fd842703          	lw	a4,-40(s0)
    145c:	000017b7          	lui	a5,0x1
    1460:	80078793          	addi	a5,a5,-2048 # 800 <altera_avalon_jtag_uart_irq+0xa4>
    1464:	00f777b3          	and	a5,a4,a5
    1468:	00079c63          	bnez	a5,1480 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    146c:	fdc42783          	lw	a5,-36(s0)
    1470:	0047a783          	lw	a5,4(a5)
    1474:	fbf7f713          	andi	a4,a5,-65
    1478:	fdc42783          	lw	a5,-36(s0)
    147c:	00e7a223          	sw	a4,4(a5)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    1480:	fdc42783          	lw	a5,-36(s0)
    1484:	0107a703          	lw	a4,16(a5)
    1488:	fdc42783          	lw	a5,-36(s0)
    148c:	0147a783          	lw	a5,20(a5)
    1490:	00f71c63          	bne	a4,a5,14a8 <altera_avalon_uart_txirq+0x128>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    1494:	fdc42783          	lw	a5,-36(s0)
    1498:	0047a783          	lw	a5,4(a5)
    149c:	bbf7f713          	andi	a4,a5,-1089
    14a0:	fdc42783          	lw	a5,-36(s0)
    14a4:	00e7a223          	sw	a4,4(a5)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    14a8:	fdc42783          	lw	a5,-36(s0)
    14ac:	0047a783          	lw	a5,4(a5)
    14b0:	fef42623          	sw	a5,-20(s0)
    14b4:	fdc42783          	lw	a5,-36(s0)
    14b8:	0007a783          	lw	a5,0(a5)
    14bc:	00c78793          	addi	a5,a5,12
    14c0:	fec42703          	lw	a4,-20(s0)
    14c4:	00e7a023          	sw	a4,0(a5)
}
    14c8:	00000013          	nop
    14cc:	02c12403          	lw	s0,44(sp)
    14d0:	03010113          	addi	sp,sp,48
    14d4:	00008067          	ret

000014d8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    14d8:	fe010113          	addi	sp,sp,-32
    14dc:	00812e23          	sw	s0,28(sp)
    14e0:	02010413          	addi	s0,sp,32
    14e4:	fea42623          	sw	a0,-20(s0)
    14e8:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    14ec:	01c0006f          	j	1508 <altera_avalon_uart_close+0x30>
    if (flags & O_NONBLOCK) {
    14f0:	fe842703          	lw	a4,-24(s0)
    14f4:	000047b7          	lui	a5,0x4
    14f8:	00f777b3          	and	a5,a4,a5
    14fc:	00078663          	beqz	a5,1508 <altera_avalon_uart_close+0x30>
      return -EWOULDBLOCK; 
    1500:	ff500793          	li	a5,-11
    1504:	01c0006f          	j	1520 <altera_avalon_uart_close+0x48>
  while (sp->tx_start != sp->tx_end) {
    1508:	fec42783          	lw	a5,-20(s0)
    150c:	0107a703          	lw	a4,16(a5) # 4010 <_free_r+0x2f0>
    1510:	fec42783          	lw	a5,-20(s0)
    1514:	0147a783          	lw	a5,20(a5)
    1518:	fcf71ce3          	bne	a4,a5,14f0 <altera_avalon_uart_close+0x18>
    }
  }

  return 0;
    151c:	00000793          	li	a5,0
}
    1520:	00078513          	mv	a0,a5
    1524:	01c12403          	lw	s0,28(sp)
    1528:	02010113          	addi	sp,sp,32
    152c:	00008067          	ret

00001530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1530:	ff010113          	addi	sp,sp,-16
    1534:	00112623          	sw	ra,12(sp)
    1538:	00812423          	sw	s0,8(sp)
    153c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    1540:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    1544:	00078a63          	beqz	a5,1558 <alt_get_errno+0x28>
    1548:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    154c:	000780e7          	jalr	a5
    1550:	00050793          	mv	a5,a0
    1554:	0080006f          	j	155c <alt_get_errno+0x2c>
    1558:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    155c:	00078513          	mv	a0,a5
    1560:	00c12083          	lw	ra,12(sp)
    1564:	00812403          	lw	s0,8(sp)
    1568:	01010113          	addi	sp,sp,16
    156c:	00008067          	ret

00001570 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    1570:	fb010113          	addi	sp,sp,-80
    1574:	04112623          	sw	ra,76(sp)
    1578:	04812423          	sw	s0,72(sp)
    157c:	05010413          	addi	s0,sp,80
    1580:	faa42e23          	sw	a0,-68(s0)
    1584:	fab42c23          	sw	a1,-72(s0)
    1588:	fac42a23          	sw	a2,-76(s0)
    158c:	fad42823          	sw	a3,-80(s0)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
    1590:	fc0405a3          	sb	zero,-53(s0)
  int             count = 0;
    1594:	fc042623          	sw	zero,-52(s0)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    1598:	fb042703          	lw	a4,-80(s0)
    159c:	000047b7          	lui	a5,0x4
    15a0:	00f777b3          	and	a5,a4,a5
    15a4:	0017b793          	seqz	a5,a5
    15a8:	0ff7f793          	zext.b	a5,a5
    15ac:	fcf42823          	sw	a5,-48(s0)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    15b0:	0500006f          	j	1600 <altera_avalon_uart_read+0x90>
    {
      count++;
    15b4:	fcc42783          	lw	a5,-52(s0)
    15b8:	00178793          	addi	a5,a5,1 # 4001 <_free_r+0x2e1>
    15bc:	fcf42623          	sw	a5,-52(s0)
      *ptr++ = sp->rx_buf[sp->rx_start];
    15c0:	fbc42783          	lw	a5,-68(s0)
    15c4:	0087a703          	lw	a4,8(a5)
    15c8:	fb842783          	lw	a5,-72(s0)
    15cc:	00178693          	addi	a3,a5,1
    15d0:	fad42c23          	sw	a3,-72(s0)
    15d4:	fbc42683          	lw	a3,-68(s0)
    15d8:	00e68733          	add	a4,a3,a4
    15dc:	01c74703          	lbu	a4,28(a4)
    15e0:	0ff77713          	zext.b	a4,a4
    15e4:	00e78023          	sb	a4,0(a5)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
    15e8:	fbc42783          	lw	a5,-68(s0)
    15ec:	0087a783          	lw	a5,8(a5)
    15f0:	00178793          	addi	a5,a5,1
    15f4:	03f7f713          	andi	a4,a5,63
    15f8:	fbc42783          	lw	a5,-68(s0)
    15fc:	00e7a423          	sw	a4,8(a5)
    while ((count < len) && (sp->rx_start != sp->rx_end))
    1600:	fcc42703          	lw	a4,-52(s0)
    1604:	fb442783          	lw	a5,-76(s0)
    1608:	00f75c63          	bge	a4,a5,1620 <altera_avalon_uart_read+0xb0>
    160c:	fbc42783          	lw	a5,-68(s0)
    1610:	0087a703          	lw	a4,8(a5)
    1614:	fbc42783          	lw	a5,-68(s0)
    1618:	00c7a783          	lw	a5,12(a5)
    161c:	f8f71ce3          	bne	a4,a5,15b4 <altera_avalon_uart_read+0x44>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    1620:	fcc42783          	lw	a5,-52(s0)
    1624:	0a079063          	bnez	a5,16c4 <altera_avalon_uart_read+0x154>
    1628:	fbc42783          	lw	a5,-68(s0)
    162c:	0087a703          	lw	a4,8(a5)
    1630:	fbc42783          	lw	a5,-68(s0)
    1634:	00c7a783          	lw	a5,12(a5)
    1638:	08f71663          	bne	a4,a5,16c4 <altera_avalon_uart_read+0x154>
    {
      if (!block)
    163c:	fd042783          	lw	a5,-48(s0)
    1640:	02079063          	bnez	a5,1660 <altera_avalon_uart_read+0xf0>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    1644:	eedff0ef          	jal	ra,1530 <alt_get_errno>
    1648:	00050713          	mv	a4,a0
    164c:	00b00793          	li	a5,11
    1650:	00f72023          	sw	a5,0(a4)
        read_would_block = 1;
    1654:	00100793          	li	a5,1
    1658:	fcf405a3          	sb	a5,-53(s0)
        break;
    165c:	0780006f          	j	16d4 <altera_avalon_uart_read+0x164>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1660:	00800793          	li	a5,8
    1664:	3007b7f3          	csrrc	a5,mstatus,a5
    1668:	fef42223          	sw	a5,-28(s0)
    return context;
    166c:	fe442783          	lw	a5,-28(s0)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    1670:	fcf42a23          	sw	a5,-44(s0)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    1674:	fbc42783          	lw	a5,-68(s0)
    1678:	0047a783          	lw	a5,4(a5)
    167c:	0807e713          	ori	a4,a5,128
    1680:	fbc42783          	lw	a5,-68(s0)
    1684:	00e7a223          	sw	a4,4(a5)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1688:	fbc42783          	lw	a5,-68(s0)
    168c:	0047a783          	lw	a5,4(a5)
    1690:	fcf42c23          	sw	a5,-40(s0)
    1694:	fbc42783          	lw	a5,-68(s0)
    1698:	0007a783          	lw	a5,0(a5)
    169c:	00c78793          	addi	a5,a5,12
    16a0:	fd842703          	lw	a4,-40(s0)
    16a4:	00e7a023          	sw	a4,0(a5)
    16a8:	fd442783          	lw	a5,-44(s0)
    16ac:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    16b0:	fe042783          	lw	a5,-32(s0)
    16b4:	0087f793          	andi	a5,a5,8
    16b8:	3007a073          	csrs	mstatus,a5
}
    16bc:	00000013          	nop
    16c0:	00000013          	nop
                      ALT_FLAG_WAIT_SET_ANY_WITH_CONSUME,
                      ALT_FLAG_WAIT_MAX_TIMEOUT);
      }
    }
  }
  while (!count && len);
    16c4:	fcc42783          	lw	a5,-52(s0)
    16c8:	00079663          	bnez	a5,16d4 <altera_avalon_uart_read+0x164>
    16cc:	fb442783          	lw	a5,-76(s0)
    16d0:	f20798e3          	bnez	a5,1600 <altera_avalon_uart_read+0x90>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    16d4:	00800793          	li	a5,8
    16d8:	3007b7f3          	csrrc	a5,mstatus,a5
    16dc:	fef42623          	sw	a5,-20(s0)
    return context;
    16e0:	fec42783          	lw	a5,-20(s0)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    16e4:	fcf42a23          	sw	a5,-44(s0)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    16e8:	fbc42783          	lw	a5,-68(s0)
    16ec:	0047a783          	lw	a5,4(a5)
    16f0:	0807e713          	ori	a4,a5,128
    16f4:	fbc42783          	lw	a5,-68(s0)
    16f8:	00e7a223          	sw	a4,4(a5)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    16fc:	fbc42783          	lw	a5,-68(s0)
    1700:	0047a783          	lw	a5,4(a5)
    1704:	fcf42e23          	sw	a5,-36(s0)
    1708:	fbc42783          	lw	a5,-68(s0)
    170c:	0007a783          	lw	a5,0(a5)
    1710:	00c78793          	addi	a5,a5,12
    1714:	fdc42703          	lw	a4,-36(s0)
    1718:	00e7a023          	sw	a4,0(a5)
    171c:	fd442783          	lw	a5,-44(s0)
    1720:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1724:	fe842783          	lw	a5,-24(s0)
    1728:	0087f793          	andi	a5,a5,8
    172c:	3007a073          	csrs	mstatus,a5
}
    1730:	00000013          	nop
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    1734:	fcb44783          	lbu	a5,-53(s0)
    1738:	00078663          	beqz	a5,1744 <altera_avalon_uart_read+0x1d4>
    return -EWOULDBLOCK;
    173c:	ff500793          	li	a5,-11
    1740:	0080006f          	j	1748 <altera_avalon_uart_read+0x1d8>
  }
  else {
    return count;
    1744:	fcc42783          	lw	a5,-52(s0)
  }
}
    1748:	00078513          	mv	a0,a5
    174c:	04c12083          	lw	ra,76(sp)
    1750:	04812403          	lw	s0,72(sp)
    1754:	05010113          	addi	sp,sp,80
    1758:	00008067          	ret

0000175c <alt_get_errno>:
{
    175c:	ff010113          	addi	sp,sp,-16
    1760:	00112623          	sw	ra,12(sp)
    1764:	00812423          	sw	s0,8(sp)
    1768:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    176c:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    1770:	00078a63          	beqz	a5,1784 <alt_get_errno+0x28>
    1774:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    1778:	000780e7          	jalr	a5
    177c:	00050793          	mv	a5,a0
    1780:	0080006f          	j	1788 <alt_get_errno+0x2c>
    1784:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    1788:	00078513          	mv	a0,a5
    178c:	00c12083          	lw	ra,12(sp)
    1790:	00812403          	lw	s0,8(sp)
    1794:	01010113          	addi	sp,sp,16
    1798:	00008067          	ret

0000179c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    179c:	fb010113          	addi	sp,sp,-80
    17a0:	04112623          	sw	ra,76(sp)
    17a4:	04812423          	sw	s0,72(sp)
    17a8:	05010413          	addi	s0,sp,80
    17ac:	faa42e23          	sw	a0,-68(s0)
    17b0:	fab42c23          	sw	a1,-72(s0)
    17b4:	fac42a23          	sw	a2,-76(s0)
    17b8:	fad42823          	sw	a3,-80(s0)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    17bc:	fb442783          	lw	a5,-76(s0)
    17c0:	fcf42423          	sw	a5,-56(s0)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    17c4:	fb042703          	lw	a4,-80(s0)
    17c8:	000047b7          	lui	a5,0x4
    17cc:	00f777b3          	and	a5,a4,a5
    17d0:	fcf42623          	sw	a5,-52(s0)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    17d4:	0f40006f          	j	18c8 <altera_avalon_uart_write+0x12c>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    17d8:	fbc42783          	lw	a5,-68(s0)
    17dc:	0147a783          	lw	a5,20(a5) # 4014 <_free_r+0x2f4>
    17e0:	00178793          	addi	a5,a5,1
    17e4:	03f7f793          	andi	a5,a5,63
    17e8:	fcf42823          	sw	a5,-48(s0)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    17ec:	fbc42783          	lw	a5,-68(s0)
    17f0:	0107a783          	lw	a5,16(a5)
    17f4:	fd042703          	lw	a4,-48(s0)
    17f8:	08f71a63          	bne	a4,a5,188c <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    17fc:	fcc42783          	lw	a5,-52(s0)
    1800:	00078c63          	beqz	a5,1818 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    1804:	f59ff0ef          	jal	ra,175c <alt_get_errno>
    1808:	00050713          	mv	a4,a0
    180c:	00b00793          	li	a5,11
    1810:	00f72023          	sw	a5,0(a4)
        break;
    1814:	0bc0006f          	j	18d0 <altera_avalon_uart_write+0x134>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1818:	00800793          	li	a5,8
    181c:	3007b7f3          	csrrc	a5,mstatus,a5
    1820:	fef42223          	sw	a5,-28(s0)
    return context;
    1824:	fe442783          	lw	a5,-28(s0)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    1828:	fcf42a23          	sw	a5,-44(s0)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    182c:	fbc42783          	lw	a5,-68(s0)
    1830:	0047a783          	lw	a5,4(a5)
    1834:	4407e713          	ori	a4,a5,1088
    1838:	fbc42783          	lw	a5,-68(s0)
    183c:	00e7a223          	sw	a4,4(a5)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    1840:	fbc42783          	lw	a5,-68(s0)
    1844:	0047a783          	lw	a5,4(a5)
    1848:	fcf42c23          	sw	a5,-40(s0)
    184c:	fbc42783          	lw	a5,-68(s0)
    1850:	0007a783          	lw	a5,0(a5)
    1854:	00c78793          	addi	a5,a5,12
    1858:	fd842703          	lw	a4,-40(s0)
    185c:	00e7a023          	sw	a4,0(a5)
    1860:	fd442783          	lw	a5,-44(s0)
    1864:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1868:	fe042783          	lw	a5,-32(s0)
    186c:	0087f793          	andi	a5,a5,8
    1870:	3007a073          	csrs	mstatus,a5
}
    1874:	00000013          	nop
    1878:	00000013          	nop
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         ALT_FLAG_WAIT_SET_ANY_WITH_CONSUME,
                         ALT_FLAG_WAIT_MAX_TIMEOUT);
        }
        while ((next == sp->tx_start));
    187c:	fbc42783          	lw	a5,-68(s0)
    1880:	0107a783          	lw	a5,16(a5)
    1884:	fd042703          	lw	a4,-48(s0)
    1888:	fef708e3          	beq	a4,a5,1878 <altera_avalon_uart_write+0xdc>
      }
    }

    count--;
    188c:	fc842783          	lw	a5,-56(s0)
    1890:	fff78793          	addi	a5,a5,-1
    1894:	fcf42423          	sw	a5,-56(s0)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    1898:	fb842783          	lw	a5,-72(s0)
    189c:	00178713          	addi	a4,a5,1
    18a0:	fae42c23          	sw	a4,-72(s0)
    18a4:	fbc42703          	lw	a4,-68(s0)
    18a8:	01472683          	lw	a3,20(a4)
    18ac:	0007c703          	lbu	a4,0(a5)
    18b0:	fbc42783          	lw	a5,-68(s0)
    18b4:	00d787b3          	add	a5,a5,a3
    18b8:	04e78e23          	sb	a4,92(a5)
    sp->tx_end = next;
    18bc:	fbc42783          	lw	a5,-68(s0)
    18c0:	fd042703          	lw	a4,-48(s0)
    18c4:	00e7aa23          	sw	a4,20(a5)
  while (count)
    18c8:	fc842783          	lw	a5,-56(s0)
    18cc:	f00796e3          	bnez	a5,17d8 <altera_avalon_uart_write+0x3c>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    18d0:	00800793          	li	a5,8
    18d4:	3007b7f3          	csrrc	a5,mstatus,a5
    18d8:	fef42623          	sw	a5,-20(s0)
    return context;
    18dc:	fec42783          	lw	a5,-20(s0)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    18e0:	fcf42a23          	sw	a5,-44(s0)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    18e4:	fbc42783          	lw	a5,-68(s0)
    18e8:	0047a783          	lw	a5,4(a5)
    18ec:	4407e713          	ori	a4,a5,1088
    18f0:	fbc42783          	lw	a5,-68(s0)
    18f4:	00e7a223          	sw	a4,4(a5)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    18f8:	fbc42783          	lw	a5,-68(s0)
    18fc:	0047a783          	lw	a5,4(a5)
    1900:	fcf42e23          	sw	a5,-36(s0)
    1904:	fbc42783          	lw	a5,-68(s0)
    1908:	0007a783          	lw	a5,0(a5)
    190c:	00c78793          	addi	a5,a5,12
    1910:	fdc42703          	lw	a4,-36(s0)
    1914:	00e7a023          	sw	a4,0(a5)
    1918:	fd442783          	lw	a5,-44(s0)
    191c:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1920:	fe842783          	lw	a5,-24(s0)
    1924:	0087f793          	andi	a5,a5,8
    1928:	3007a073          	csrs	mstatus,a5
}
    192c:	00000013          	nop
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    1930:	fb442703          	lw	a4,-76(s0)
    1934:	fc842783          	lw	a5,-56(s0)
    1938:	40f707b3          	sub	a5,a4,a5
}
    193c:	00078513          	mv	a0,a5
    1940:	04c12083          	lw	ra,76(sp)
    1944:	04812403          	lw	s0,72(sp)
    1948:	05010113          	addi	sp,sp,80
    194c:	00008067          	ret

00001950 <alt_epcq_controller_lock>:
  * -EINVAL -> Invalid arguments
  * -ETIME  -> Time out and skipping the looping after 0.7 sec.
  * -ENOLCK -> Sectors lock failed.
**/
int alt_epcq_controller_lock(alt_flash_dev *flash_info, alt_u32 sectors_to_lock)
{
    1950:	fc010113          	addi	sp,sp,-64
    1954:	02112e23          	sw	ra,60(sp)
    1958:	02812c23          	sw	s0,56(sp)
    195c:	04010413          	addi	s0,sp,64
    1960:	fca42623          	sw	a0,-52(s0)
    1964:	fcb42423          	sw	a1,-56(s0)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
    1968:	fc042c23          	sw	zero,-40(s0)
    alt_epcq_controller_dev* epcq_flash_info = NULL;
    196c:	fc042e23          	sw	zero,-36(s0)
    alt_u32 result = 0;
    1970:	fe042023          	sw	zero,-32(s0)
    alt_32 status = 0;
    1974:	fe042223          	sw	zero,-28(s0)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info || 0 > sectors_to_lock)
    1978:	fcc42783          	lw	a5,-52(s0)
    197c:	00079663          	bnez	a5,1988 <alt_epcq_controller_lock+0x38>
    {
    	return -EINVAL;
    1980:	fea00793          	li	a5,-22
    1984:	0d80006f          	j	1a5c <alt_epcq_controller_lock+0x10c>
    }
	
    epcq_flash_info = (alt_epcq_controller_dev*)flash_info;
    1988:	fcc42783          	lw	a5,-52(s0)
    198c:	fcf42e23          	sw	a5,-36(s0)

    /* sector value should occupy bits 17:8 */
    mem_op_value = sectors_to_lock << 8;
    1990:	fc842783          	lw	a5,-56(s0)
    1994:	00879793          	slli	a5,a5,0x8
    1998:	fcf42c23          	sw	a5,-40(s0)

    /* sector protect commands 0b11 occupies lower 2 bits */
    mem_op_value |= ALTERA_EPCQ_CONTROLLER_MEM_OP_SECTOR_PROTECT_CMD;
    199c:	fd842783          	lw	a5,-40(s0)
    19a0:	0037e793          	ori	a5,a5,3
    19a4:	fcf42c23          	sw	a5,-40(s0)

    /* write sector protect command to EPCQ_MEM_OP register to protect sectors */
    IOWR_ALTERA_EPCQ_CONTROLLER_MEM_OP(epcq_flash_info->csr_base, mem_op_value);
    19a8:	fd842783          	lw	a5,-40(s0)
    19ac:	fef42423          	sw	a5,-24(s0)
    19b0:	fdc42783          	lw	a5,-36(s0)
    19b4:	0c07a783          	lw	a5,192(a5)
    19b8:	00c78793          	addi	a5,a5,12
    19bc:	00078713          	mv	a4,a5
    19c0:	fe842783          	lw	a5,-24(s0)
    19c4:	00f72023          	sw	a5,0(a4)
    
    /* poll write in progress to make sure no operation is in progress */
    status = alt_epcq_poll_for_write_in_progress(epcq_flash_info);
    19c8:	fdc42503          	lw	a0,-36(s0)
    19cc:	245000ef          	jal	ra,2410 <alt_epcq_poll_for_write_in_progress>
    19d0:	fea42223          	sw	a0,-28(s0)
    if(status != 0)
    19d4:	fe442783          	lw	a5,-28(s0)
    19d8:	00078663          	beqz	a5,19e4 <alt_epcq_controller_lock+0x94>
    {
    	return status;
    19dc:	fe442783          	lw	a5,-28(s0)
    19e0:	07c0006f          	j	1a5c <alt_epcq_controller_lock+0x10c>
    }
	
	status = IORD_ALTERA_EPCQ_CONTROLLER_STATUS(epcq_flash_info->csr_base);
    19e4:	fdc42783          	lw	a5,-36(s0)
    19e8:	0c07a783          	lw	a5,192(a5)
    19ec:	0007a783          	lw	a5,0(a5)
    19f0:	fef42623          	sw	a5,-20(s0)
    19f4:	fec42783          	lw	a5,-20(s0)
    19f8:	fef42223          	sw	a5,-28(s0)
	result |= (status >> 2) & 0x07; /* extract out BP3 - BP0 */
    19fc:	fe442783          	lw	a5,-28(s0)
    1a00:	4027d793          	srai	a5,a5,0x2
    1a04:	0077f793          	andi	a5,a5,7
    1a08:	fe042703          	lw	a4,-32(s0)
    1a0c:	00f767b3          	or	a5,a4,a5
    1a10:	fef42023          	sw	a5,-32(s0)
	result |= (status >> 3) & 0x08; /* extract out BP4 */
    1a14:	fe442783          	lw	a5,-28(s0)
    1a18:	4037d793          	srai	a5,a5,0x3
    1a1c:	0087f793          	andi	a5,a5,8
    1a20:	fe042703          	lw	a4,-32(s0)
    1a24:	00f767b3          	or	a5,a4,a5
    1a28:	fef42023          	sw	a5,-32(s0)
    result |= (status >> 1) & 0x10; /* extract out TOP/BOTTOM bit */
    1a2c:	fe442783          	lw	a5,-28(s0)
    1a30:	4017d793          	srai	a5,a5,0x1
    1a34:	0107f793          	andi	a5,a5,16
    1a38:	fe042703          	lw	a4,-32(s0)
    1a3c:	00f767b3          	or	a5,a4,a5
    1a40:	fef42023          	sw	a5,-32(s0)

	if(result != sectors_to_lock)
    1a44:	fe042703          	lw	a4,-32(s0)
    1a48:	fc842783          	lw	a5,-56(s0)
    1a4c:	00f70663          	beq	a4,a5,1a58 <alt_epcq_controller_lock+0x108>
	{
		return -ENOLCK;
    1a50:	fd200793          	li	a5,-46
    1a54:	0080006f          	j	1a5c <alt_epcq_controller_lock+0x10c>
	}

    return 0;
    1a58:	00000793          	li	a5,0
}
    1a5c:	00078513          	mv	a0,a5
    1a60:	03c12083          	lw	ra,60(sp)
    1a64:	03812403          	lw	s0,56(sp)
    1a68:	04010113          	addi	sp,sp,64
    1a6c:	00008067          	ret

00001a70 <alt_epcq_controller_get_info>:
(
    alt_flash_fd *fd, /** flash device descriptor */
    flash_region **info, /** pointer to flash_region will be stored here */
    int *number_of_regions /** number of regions will be stored here */
)
{
    1a70:	fd010113          	addi	sp,sp,-48
    1a74:	02812623          	sw	s0,44(sp)
    1a78:	03010413          	addi	s0,sp,48
    1a7c:	fca42e23          	sw	a0,-36(s0)
    1a80:	fcb42c23          	sw	a1,-40(s0)
    1a84:	fcc42a23          	sw	a2,-44(s0)
	alt_flash_dev* flash = NULL;
    1a88:	fe042623          	sw	zero,-20(s0)
	
	/* return -EINVAL if fd,info and number_of_regions are NULL */
	if(NULL == fd || NULL == info || NULL == number_of_regions)
    1a8c:	fdc42783          	lw	a5,-36(s0)
    1a90:	00078a63          	beqz	a5,1aa4 <alt_epcq_controller_get_info+0x34>
    1a94:	fd842783          	lw	a5,-40(s0)
    1a98:	00078663          	beqz	a5,1aa4 <alt_epcq_controller_get_info+0x34>
    1a9c:	fd442783          	lw	a5,-44(s0)
    1aa0:	00079663          	bnez	a5,1aac <alt_epcq_controller_get_info+0x3c>
    {
    	return -EINVAL;
    1aa4:	fea00793          	li	a5,-22
    1aa8:	0440006f          	j	1aec <alt_epcq_controller_get_info+0x7c>
    }

    flash = (alt_flash_dev*)fd;
    1aac:	fdc42783          	lw	a5,-36(s0)
    1ab0:	fef42623          	sw	a5,-20(s0)

    *number_of_regions = flash->number_of_regions;
    1ab4:	fec42783          	lw	a5,-20(s0)
    1ab8:	0307a703          	lw	a4,48(a5)
    1abc:	fd442783          	lw	a5,-44(s0)
    1ac0:	00e7a023          	sw	a4,0(a5)

    if (!flash->number_of_regions)
    1ac4:	fec42783          	lw	a5,-20(s0)
    1ac8:	0307a783          	lw	a5,48(a5)
    1acc:	00079663          	bnez	a5,1ad8 <alt_epcq_controller_get_info+0x68>
    {
      return -EIO;
    1ad0:	ffb00793          	li	a5,-5
    1ad4:	0180006f          	j	1aec <alt_epcq_controller_get_info+0x7c>
    }
    else
    {
      *info = &flash->region_info[0];
    1ad8:	fec42783          	lw	a5,-20(s0)
    1adc:	03478713          	addi	a4,a5,52
    1ae0:	fd842783          	lw	a5,-40(s0)
    1ae4:	00e7a023          	sw	a4,0(a5)
    }

    return 0;
    1ae8:	00000793          	li	a5,0
}
    1aec:	00078513          	mv	a0,a5
    1af0:	02c12403          	lw	s0,44(sp)
    1af4:	03010113          	addi	sp,sp,48
    1af8:	00008067          	ret

00001afc <alt_epcq_controller_erase_block>:
  * 0 -> success
  * -EINVAL -> Invalid arguments
  * -EIO -> write failed, sector might be protected 
**/
int alt_epcq_controller_erase_block(alt_flash_dev *flash_info, int block_offset)
{
    1afc:	fc010113          	addi	sp,sp,-64
    1b00:	02112e23          	sw	ra,60(sp)
    1b04:	02812c23          	sw	s0,56(sp)
    1b08:	04010413          	addi	s0,sp,64
    1b0c:	fca42623          	sw	a0,-52(s0)
    1b10:	fcb42423          	sw	a1,-56(s0)
    alt_32 ret_code = 0;
    1b14:	fc042a23          	sw	zero,-44(s0)
    alt_u32 mem_op_value = 0; /* value to write to EPCQ_MEM_OP register */
    1b18:	fc042c23          	sw	zero,-40(s0)
    alt_epcq_controller_dev* epcq_flash_info = NULL;
    1b1c:	fc042e23          	sw	zero,-36(s0)
    alt_u32 sector_number = 0; 
    1b20:	fe042023          	sw	zero,-32(s0)

    /* return -EINVAL if flash_info is NULL */
    if(NULL == flash_info)
    1b24:	fcc42783          	lw	a5,-52(s0)
    1b28:	00079663          	bnez	a5,1b34 <alt_epcq_controller_erase_block+0x38>
    {
    	return -EINVAL;
    1b2c:	fea00793          	li	a5,-22
    1b30:	0f80006f          	j	1c28 <alt_epcq_controller_erase_block+0x12c>
    }
	
    epcq_flash_info = (alt_epcq_controller_dev*)flash_info;
    1b34:	fcc42783          	lw	a5,-52(s0)
    1b38:	fcf42e23          	sw	a5,-36(s0)
    /* 
     * Sanity checks that block_offset is within the flash memory span and that the 
     * block offset is sector aligned.
     *
     */
    if((block_offset < 0) 
    1b3c:	fc842783          	lw	a5,-56(s0)
    1b40:	0207c663          	bltz	a5,1b6c <alt_epcq_controller_erase_block+0x70>
        || (block_offset >= epcq_flash_info->size_in_bytes)
    1b44:	fdc42783          	lw	a5,-36(s0)
    1b48:	0c47a703          	lw	a4,196(a5)
    1b4c:	fc842783          	lw	a5,-56(s0)
    1b50:	00e7fe63          	bgeu	a5,a4,1b6c <alt_epcq_controller_erase_block+0x70>
        || (block_offset & (epcq_flash_info->sector_size - 1)) != 0)
    1b54:	fdc42783          	lw	a5,-36(s0)
    1b58:	0d07a783          	lw	a5,208(a5)
    1b5c:	fff78713          	addi	a4,a5,-1
    1b60:	fc842783          	lw	a5,-56(s0)
    1b64:	00f777b3          	and	a5,a4,a5
    1b68:	00078663          	beqz	a5,1b74 <alt_epcq_controller_erase_block+0x78>
    {
    	return -EINVAL;
    1b6c:	fea00793          	li	a5,-22
    1b70:	0b80006f          	j	1c28 <alt_epcq_controller_erase_block+0x12c>
    }

    /* calculate current sector/block number */
    sector_number = (block_offset/(epcq_flash_info->sector_size));
    1b74:	fc842703          	lw	a4,-56(s0)
    1b78:	fdc42783          	lw	a5,-36(s0)
    1b7c:	0d07a783          	lw	a5,208(a5)
    1b80:	00078593          	mv	a1,a5
    1b84:	00070513          	mv	a0,a4
    1b88:	23c050ef          	jal	ra,6dc4 <__hidden___udivsi3>
    1b8c:	00050793          	mv	a5,a0
    1b90:	fef42023          	sw	a5,-32(s0)

    /* sector value should occupy bits 23:8 */
    mem_op_value = (sector_number << 8) & ALTERA_EPCQ_CONTROLLER_MEM_OP_SECTOR_VALUE_MASK;
    1b94:	fe042783          	lw	a5,-32(s0)
    1b98:	00879713          	slli	a4,a5,0x8
    1b9c:	010007b7          	lui	a5,0x1000
    1ba0:	f0078793          	addi	a5,a5,-256 # ffff00 <__global_pointer$+0xff5d98>
    1ba4:	00f777b3          	and	a5,a4,a5
    1ba8:	fcf42c23          	sw	a5,-40(s0)

    /* sector erase commands 0b10 occupies lower 2 bits */
    mem_op_value |= ALTERA_EPCQ_CONTROLLER_MEM_OP_SECTOR_ERASE_CMD;
    1bac:	fd842783          	lw	a5,-40(s0)
    1bb0:	0027e793          	ori	a5,a5,2
    1bb4:	fcf42c23          	sw	a5,-40(s0)

    /* write sector erase command to EPCQ_MEM_OP register to erase sector "sector_number" */
    IOWR_ALTERA_EPCQ_CONTROLLER_MEM_OP(epcq_flash_info->csr_base, mem_op_value);
    1bb8:	fd842783          	lw	a5,-40(s0)
    1bbc:	fef42223          	sw	a5,-28(s0)
    1bc0:	fdc42783          	lw	a5,-36(s0)
    1bc4:	0c07a783          	lw	a5,192(a5)
    1bc8:	00c78793          	addi	a5,a5,12
    1bcc:	00078713          	mv	a4,a5
    1bd0:	fe442783          	lw	a5,-28(s0)
    1bd4:	00f72023          	sw	a5,0(a4)
	
    /* check whether erase triggered a illegal erase interrupt  */
    if((IORD_ALTERA_EPCQ_CONTROLLER_ISR(epcq_flash_info->csr_base) &
    1bd8:	fdc42783          	lw	a5,-36(s0)
    1bdc:	0c07a783          	lw	a5,192(a5)
    1be0:	01078793          	addi	a5,a5,16
    1be4:	0007a783          	lw	a5,0(a5)
    1be8:	fef42423          	sw	a5,-24(s0)
    1bec:	fe842783          	lw	a5,-24(s0)
    1bf0:	0017f713          	andi	a4,a5,1
    1bf4:	00100793          	li	a5,1
    1bf8:	02f71663          	bne	a4,a5,1c24 <alt_epcq_controller_erase_block+0x128>
            		ALTERA_EPCQ_CONTROLLER_ISR_ILLEGAL_ERASE_MASK) ==
            				ALTERA_EPCQ_CONTROLLER_ISR_ILLEGAL_ERASE_ACTIVE)
    {
	    /* clear register */
	    /* EPCQ_ISR access is write one to clear (W1C) */
    	IOWR_ALTERA_EPCQ_CONTROLLER_ISR(epcq_flash_info->csr_base,
    1bfc:	00100793          	li	a5,1
    1c00:	fef42623          	sw	a5,-20(s0)
    1c04:	fdc42783          	lw	a5,-36(s0)
    1c08:	0c07a783          	lw	a5,192(a5)
    1c0c:	01078793          	addi	a5,a5,16
    1c10:	00078713          	mv	a4,a5
    1c14:	fec42783          	lw	a5,-20(s0)
    1c18:	00f72023          	sw	a5,0(a4)
    		ALTERA_EPCQ_CONTROLLER_ISR_ILLEGAL_ERASE_MASK );
    	return -EIO; /* erase failed, sector might be protected */
    1c1c:	ffb00793          	li	a5,-5
    1c20:	0080006f          	j	1c28 <alt_epcq_controller_erase_block+0x12c>
    }

    return ret_code;
    1c24:	fd442783          	lw	a5,-44(s0)
}
    1c28:	00078513          	mv	a0,a5
    1c2c:	03c12083          	lw	ra,60(sp)
    1c30:	03812403          	lw	s0,56(sp)
    1c34:	04010113          	addi	sp,sp,64
    1c38:	00008067          	ret

00001c3c <alt_epcq_controller_write_block>:
    int block_offset, /** sector/block offset in byte addressing */
    int data_offset, /** offset of write from base address */
    const void *data, /** data to be written */
    int length /** bytes of data to be written, >0 */
)
{
    1c3c:	fa010113          	addi	sp,sp,-96
    1c40:	04112e23          	sw	ra,92(sp)
    1c44:	04812c23          	sw	s0,88(sp)
    1c48:	06010413          	addi	s0,sp,96
    1c4c:	faa42e23          	sw	a0,-68(s0)
    1c50:	fab42c23          	sw	a1,-72(s0)
    1c54:	fac42a23          	sw	a2,-76(s0)
    1c58:	fad42823          	sw	a3,-80(s0)
    1c5c:	fae42623          	sw	a4,-84(s0)
    1c60:	8a41a703          	lw	a4,-1884(gp) # 9a0c <__stack_chk_guard>
    1c64:	fee42623          	sw	a4,-20(s0)
    1c68:	00000713          	li	a4,0
    alt_u32 buffer_offset = 0; /** offset into data buffer to get write data */
    1c6c:	fc042423          	sw	zero,-56(s0)
    alt_u32 remaining_length = length; /** length left to write */
    1c70:	fac42783          	lw	a5,-84(s0)
    1c74:	fcf42623          	sw	a5,-52(s0)
    alt_u32 write_offset = data_offset; /** offset into flash to write too */
    1c78:	fb442783          	lw	a5,-76(s0)
    1c7c:	fcf42823          	sw	a5,-48(s0)

    alt_epcq_controller_dev *epcq_flash_info = (alt_epcq_controller_dev*)flash_info;
    1c80:	fbc42783          	lw	a5,-68(s0)
    1c84:	fcf42e23          	sw	a5,-36(s0)
    /* 
     * Sanity checks that data offset is not larger then a sector, that block offset is 
     * sector aligned and within the valid flash memory range and a write doesn't spill into 
     * the adjacent flash sector.
     */
    if(block_offset < 0
    1c88:	fb842783          	lw	a5,-72(s0)
    1c8c:	0607ce63          	bltz	a5,1d08 <alt_epcq_controller_write_block+0xcc>
        || data_offset < 0
    1c90:	fb442783          	lw	a5,-76(s0)
    1c94:	0607ca63          	bltz	a5,1d08 <alt_epcq_controller_write_block+0xcc>
        || NULL == flash_info
    1c98:	fbc42783          	lw	a5,-68(s0)
    1c9c:	06078663          	beqz	a5,1d08 <alt_epcq_controller_write_block+0xcc>
        || NULL == data
    1ca0:	fb042783          	lw	a5,-80(s0)
    1ca4:	06078263          	beqz	a5,1d08 <alt_epcq_controller_write_block+0xcc>
        || data_offset >= epcq_flash_info->size_in_bytes
    1ca8:	fdc42783          	lw	a5,-36(s0)
    1cac:	0c47a703          	lw	a4,196(a5)
    1cb0:	fb442783          	lw	a5,-76(s0)
    1cb4:	04e7fa63          	bgeu	a5,a4,1d08 <alt_epcq_controller_write_block+0xcc>
        || block_offset >= epcq_flash_info->size_in_bytes
    1cb8:	fdc42783          	lw	a5,-36(s0)
    1cbc:	0c47a703          	lw	a4,196(a5)
    1cc0:	fb842783          	lw	a5,-72(s0)
    1cc4:	04e7f263          	bgeu	a5,a4,1d08 <alt_epcq_controller_write_block+0xcc>
        || length > (epcq_flash_info->sector_size - (data_offset - block_offset))
    1cc8:	fdc42783          	lw	a5,-36(s0)
    1ccc:	0d07a783          	lw	a5,208(a5)
    1cd0:	fb442683          	lw	a3,-76(s0)
    1cd4:	fb842703          	lw	a4,-72(s0)
    1cd8:	40e68733          	sub	a4,a3,a4
    1cdc:	40e78733          	sub	a4,a5,a4
    1ce0:	fac42783          	lw	a5,-84(s0)
    1ce4:	02f76263          	bltu	a4,a5,1d08 <alt_epcq_controller_write_block+0xcc>
        || length < 0
    1ce8:	fac42783          	lw	a5,-84(s0)
    1cec:	0007ce63          	bltz	a5,1d08 <alt_epcq_controller_write_block+0xcc>
        || (block_offset & (epcq_flash_info->sector_size - 1)) != 0) 
    1cf0:	fdc42783          	lw	a5,-36(s0)
    1cf4:	0d07a783          	lw	a5,208(a5)
    1cf8:	fff78713          	addi	a4,a5,-1
    1cfc:	fb842783          	lw	a5,-72(s0)
    1d00:	00f777b3          	and	a5,a4,a5
    1d04:	14078c63          	beqz	a5,1e5c <alt_epcq_controller_write_block+0x220>
    {
    	return -EINVAL;
    1d08:	fea00793          	li	a5,-22
    1d0c:	15c0006f          	j	1e68 <alt_epcq_controller_write_block+0x22c>
     * We need to make sure that we pad the first few bytes so they're word aligned if they are
     * not already.
     */
    while (remaining_length > 0)
    {
    	alt_u32 word_to_write = 0xFFFFFFFF; /** initialize word to write to blank word */
    1d10:	fff00793          	li	a5,-1
    1d14:	fcf42223          	sw	a5,-60(s0)
    	alt_u32 padding = 0; /** bytes to pad the next word that is written */
    1d18:	fc042a23          	sw	zero,-44(s0)
    	alt_u32 bytes_to_copy = sizeof(alt_u32); /** number of bytes from source to copy */
    1d1c:	00400793          	li	a5,4
    1d20:	fcf42c23          	sw	a5,-40(s0)

        /*
         * we need to make sure the write is word aligned
    	 * this should only be true at most 1 time
    	 */
        if (0 != (write_offset & (sizeof(alt_u32) - 1)))
    1d24:	fd042783          	lw	a5,-48(s0)
    1d28:	0037f793          	andi	a5,a5,3
    1d2c:	04078c63          	beqz	a5,1d84 <alt_epcq_controller_write_block+0x148>
        {
        	/*
        	 * data is not word aligned
        	 * calculate padding bytes need to add before start of a data offset
        	 */
            padding = write_offset & (sizeof(alt_u32) - 1);
    1d30:	fd042783          	lw	a5,-48(s0)
    1d34:	0037f793          	andi	a5,a5,3
    1d38:	fcf42a23          	sw	a5,-44(s0)

            /* update variables to account for padding being added */
            bytes_to_copy -= padding;
    1d3c:	fd842703          	lw	a4,-40(s0)
    1d40:	fd442783          	lw	a5,-44(s0)
    1d44:	40f707b3          	sub	a5,a4,a5
    1d48:	fcf42c23          	sw	a5,-40(s0)

            if(bytes_to_copy > remaining_length)
    1d4c:	fd842703          	lw	a4,-40(s0)
    1d50:	fcc42783          	lw	a5,-52(s0)
    1d54:	00e7f663          	bgeu	a5,a4,1d60 <alt_epcq_controller_write_block+0x124>
            {
            	bytes_to_copy = remaining_length;
    1d58:	fcc42783          	lw	a5,-52(s0)
    1d5c:	fcf42c23          	sw	a5,-40(s0)
            }

            write_offset = write_offset - padding;
    1d60:	fd042703          	lw	a4,-48(s0)
    1d64:	fd442783          	lw	a5,-44(s0)
    1d68:	40f707b3          	sub	a5,a4,a5
    1d6c:	fcf42823          	sw	a5,-48(s0)
            if(0 != (write_offset & (sizeof(alt_u32) - 1)))
    1d70:	fd042783          	lw	a5,-48(s0)
    1d74:	0037f793          	andi	a5,a5,3
    1d78:	02078063          	beqz	a5,1d98 <alt_epcq_controller_write_block+0x15c>
            {
            	return -EINVAL;
    1d7c:	fea00793          	li	a5,-22
    1d80:	0e80006f          	j	1e68 <alt_epcq_controller_write_block+0x22c>
            }
        }
        else
        {
            if(bytes_to_copy > remaining_length)
    1d84:	fd842703          	lw	a4,-40(s0)
    1d88:	fcc42783          	lw	a5,-52(s0)
    1d8c:	00e7f663          	bgeu	a5,a4,1d98 <alt_epcq_controller_write_block+0x15c>
            {
            	bytes_to_copy = remaining_length;
    1d90:	fcc42783          	lw	a5,-52(s0)
    1d94:	fcf42c23          	sw	a5,-40(s0)
            }
        }

        /* prepare the word to be written */
        memcpy((((void*)&word_to_write)) + padding, ((void*)data) + buffer_offset, bytes_to_copy);
    1d98:	fc440713          	addi	a4,s0,-60
    1d9c:	fd442783          	lw	a5,-44(s0)
    1da0:	00f706b3          	add	a3,a4,a5
    1da4:	fb042703          	lw	a4,-80(s0)
    1da8:	fc842783          	lw	a5,-56(s0)
    1dac:	00f707b3          	add	a5,a4,a5
    1db0:	fd842603          	lw	a2,-40(s0)
    1db4:	00078593          	mv	a1,a5
    1db8:	00068513          	mv	a0,a3
    1dbc:	37d020ef          	jal	ra,4938 <memcpy>

        /* update offset and length variables */
        buffer_offset += bytes_to_copy;
    1dc0:	fc842703          	lw	a4,-56(s0)
    1dc4:	fd842783          	lw	a5,-40(s0)
    1dc8:	00f707b3          	add	a5,a4,a5
    1dcc:	fcf42423          	sw	a5,-56(s0)
        remaining_length -= bytes_to_copy;
    1dd0:	fcc42703          	lw	a4,-52(s0)
    1dd4:	fd842783          	lw	a5,-40(s0)
    1dd8:	40f707b3          	sub	a5,a4,a5
    1ddc:	fcf42623          	sw	a5,-52(s0)

        /* write to flash 32 bits at a time */
        IOWR_32DIRECT(epcq_flash_info->data_base, write_offset, word_to_write);
    1de0:	fc442783          	lw	a5,-60(s0)
    1de4:	fef42023          	sw	a5,-32(s0)
    1de8:	fdc42783          	lw	a5,-36(s0)
    1dec:	0b87a703          	lw	a4,184(a5)
    1df0:	fd042783          	lw	a5,-48(s0)
    1df4:	00f707b3          	add	a5,a4,a5
    1df8:	00078713          	mv	a4,a5
    1dfc:	fe042783          	lw	a5,-32(s0)
    1e00:	00f72023          	sw	a5,0(a4)

        /* check whether write triggered a illegal write interrupt */
        if((IORD_ALTERA_EPCQ_CONTROLLER_ISR(epcq_flash_info->csr_base) &
    1e04:	fdc42783          	lw	a5,-36(s0)
    1e08:	0c07a783          	lw	a5,192(a5)
    1e0c:	01078793          	addi	a5,a5,16
    1e10:	0007a783          	lw	a5,0(a5)
    1e14:	fef42223          	sw	a5,-28(s0)
    1e18:	fe442783          	lw	a5,-28(s0)
    1e1c:	0027f713          	andi	a4,a5,2
    1e20:	00200793          	li	a5,2
    1e24:	02f71663          	bne	a4,a5,1e50 <alt_epcq_controller_write_block+0x214>
        		ALTERA_EPCQ_CONTROLLER_ISR_ILLEGAL_WRITE_MASK) ==
        				ALTERA_EPCQ_CONTROLLER_ISR_ILLEGAL_WRITE_ACTIVE)
        {
		    /* clear register */
        	IOWR_ALTERA_EPCQ_CONTROLLER_ISR(epcq_flash_info->csr_base,
    1e28:	00200793          	li	a5,2
    1e2c:	fef42423          	sw	a5,-24(s0)
    1e30:	fdc42783          	lw	a5,-36(s0)
    1e34:	0c07a783          	lw	a5,192(a5)
    1e38:	01078793          	addi	a5,a5,16
    1e3c:	00078713          	mv	a4,a5
    1e40:	fe842783          	lw	a5,-24(s0)
    1e44:	00f72023          	sw	a5,0(a4)
			ALTERA_EPCQ_CONTROLLER_ISR_ILLEGAL_WRITE_MASK );
        	return -EIO; /** write failed, sector might be protected */
    1e48:	ffb00793          	li	a5,-5
    1e4c:	01c0006f          	j	1e68 <alt_epcq_controller_write_block+0x22c>
        }

        /* update current offset */
        write_offset = write_offset + sizeof(alt_u32);
    1e50:	fd042783          	lw	a5,-48(s0)
    1e54:	00478793          	addi	a5,a5,4
    1e58:	fcf42823          	sw	a5,-48(s0)
    while (remaining_length > 0)
    1e5c:	fcc42783          	lw	a5,-52(s0)
    1e60:	ea0798e3          	bnez	a5,1d10 <alt_epcq_controller_write_block+0xd4>
    }

    return 0;
    1e64:	00000793          	li	a5,0
}
    1e68:	00078713          	mv	a4,a5
    1e6c:	fec42683          	lw	a3,-20(s0)
    1e70:	8a41a783          	lw	a5,-1884(gp) # 9a0c <__stack_chk_guard>
    1e74:	00f6c7b3          	xor	a5,a3,a5
    1e78:	00000693          	li	a3,0
    1e7c:	00078463          	beqz	a5,1e84 <alt_epcq_controller_write_block+0x248>
    1e80:	080030ef          	jal	ra,4f00 <__stack_chk_fail>
    1e84:	00070513          	mv	a0,a4
    1e88:	05c12083          	lw	ra,92(sp)
    1e8c:	05812403          	lw	s0,88(sp)
    1e90:	06010113          	addi	sp,sp,96
    1e94:	00008067          	ret

00001e98 <alt_epcq_controller_write>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of write from base address */
    const void *src_addr, /** source buffer */
    int length /** size of writing */
)
{
    1e98:	fb010113          	addi	sp,sp,-80
    1e9c:	04112623          	sw	ra,76(sp)
    1ea0:	04812423          	sw	s0,72(sp)
    1ea4:	05010413          	addi	s0,sp,80
    1ea8:	faa42e23          	sw	a0,-68(s0)
    1eac:	fab42c23          	sw	a1,-72(s0)
    1eb0:	fac42a23          	sw	a2,-76(s0)
    1eb4:	fad42823          	sw	a3,-80(s0)
    alt_32 ret_code = 0;
    1eb8:	fc042623          	sw	zero,-52(s0)

    alt_epcq_controller_dev *epcq_flash_info = NULL;
    1ebc:	fe042223          	sw	zero,-28(s0)

    alt_u32 write_offset = offset; /** address of next byte to write */
    1ec0:	fb842783          	lw	a5,-72(s0)
    1ec4:	fcf42823          	sw	a5,-48(s0)
    alt_u32 remaining_length = length; /** length of write data left to be written */
    1ec8:	fb042783          	lw	a5,-80(s0)
    1ecc:	fcf42a23          	sw	a5,-44(s0)
    alt_u32 buffer_offset = 0; /** offset into source buffer to get write data */
    1ed0:	fc042c23          	sw	zero,-40(s0)
    alt_u32 i = 0;
    1ed4:	fc042e23          	sw	zero,-36(s0)

    /* return -EINVAL if flash_info and src_addr are NULL */
	if(NULL == flash_info || NULL == src_addr)
    1ed8:	fbc42783          	lw	a5,-68(s0)
    1edc:	00078663          	beqz	a5,1ee8 <alt_epcq_controller_write+0x50>
    1ee0:	fb442783          	lw	a5,-76(s0)
    1ee4:	00079663          	bnez	a5,1ef0 <alt_epcq_controller_write+0x58>
    {
    	return -EINVAL;
    1ee8:	fea00793          	li	a5,-22
    1eec:	1780006f          	j	2064 <alt_epcq_controller_write+0x1cc>
    }
	
	epcq_flash_info = (alt_epcq_controller_dev*)flash_info;
    1ef0:	fbc42783          	lw	a5,-68(s0)
    1ef4:	fef42223          	sw	a5,-28(s0)
	
    /* make sure the write parameters are within the bounds of the flash */
    ret_code = alt_epcq_validate_read_write_arguments(epcq_flash_info, offset, length);
    1ef8:	fb842783          	lw	a5,-72(s0)
    1efc:	fb042703          	lw	a4,-80(s0)
    1f00:	00070613          	mv	a2,a4
    1f04:	00078593          	mv	a1,a5
    1f08:	fe442503          	lw	a0,-28(s0)
    1f0c:	468000ef          	jal	ra,2374 <alt_epcq_validate_read_write_arguments>
    1f10:	fca42623          	sw	a0,-52(s0)

	if(0 != ret_code)
    1f14:	fcc42783          	lw	a5,-52(s0)
    1f18:	00078663          	beqz	a5,1f24 <alt_epcq_controller_write+0x8c>
	{
		return ret_code;
    1f1c:	fcc42783          	lw	a5,-52(s0)
    1f20:	1440006f          	j	2064 <alt_epcq_controller_write+0x1cc>

    /*
     * This loop erases and writes data one sector at a time. We check for write completion 
     * before starting the next sector.
     */
    for(i = offset/epcq_flash_info->sector_size ; i < epcq_flash_info->number_of_sectors; i++)
    1f24:	fb842703          	lw	a4,-72(s0)
    1f28:	fe442783          	lw	a5,-28(s0)
    1f2c:	0d07a783          	lw	a5,208(a5)
    1f30:	00078593          	mv	a1,a5
    1f34:	00070513          	mv	a0,a4
    1f38:	68d040ef          	jal	ra,6dc4 <__hidden___udivsi3>
    1f3c:	00050793          	mv	a5,a0
    1f40:	fcf42e23          	sw	a5,-36(s0)
    1f44:	1040006f          	j	2048 <alt_epcq_controller_write+0x1b0>
    {
        alt_u32 block_offset = 0; /** block offset in byte addressing */
    1f48:	fe042423          	sw	zero,-24(s0)
    	alt_u32 offset_within_current_sector = 0; /** offset into current sector to write */
    1f4c:	fe042023          	sw	zero,-32(s0)
        alt_u32 length_to_write = 0; /** length to write to current sector */
    1f50:	fe042623          	sw	zero,-20(s0)

    	if(0 >= remaining_length)
    1f54:	fd442783          	lw	a5,-44(s0)
    1f58:	10078263          	beqz	a5,205c <alt_epcq_controller_write+0x1c4>
    	{
    		break; /* out of data to write */
    	}

        /* calculate current sector/block offset in byte addressing */
        block_offset = write_offset & ~(epcq_flash_info->sector_size - 1);
    1f5c:	fe442783          	lw	a5,-28(s0)
    1f60:	0d07a783          	lw	a5,208(a5)
    1f64:	40f007b3          	neg	a5,a5
    1f68:	fd042703          	lw	a4,-48(s0)
    1f6c:	00f777b3          	and	a5,a4,a5
    1f70:	fef42423          	sw	a5,-24(s0)
           
        /* calculate offset into sector/block if there is one */
        if(block_offset != write_offset)
    1f74:	fe842703          	lw	a4,-24(s0)
    1f78:	fd042783          	lw	a5,-48(s0)
    1f7c:	00f70a63          	beq	a4,a5,1f90 <alt_epcq_controller_write+0xf8>
        {
            offset_within_current_sector = write_offset - block_offset;
    1f80:	fd042703          	lw	a4,-48(s0)
    1f84:	fe842783          	lw	a5,-24(s0)
    1f88:	40f707b3          	sub	a5,a4,a5
    1f8c:	fef42023          	sw	a5,-32(s0)
        }

        /* erase sector */
        ret_code = alt_epcq_controller_erase_block(flash_info, block_offset);
    1f90:	fe842783          	lw	a5,-24(s0)
    1f94:	00078593          	mv	a1,a5
    1f98:	fbc42503          	lw	a0,-68(s0)
    1f9c:	b61ff0ef          	jal	ra,1afc <alt_epcq_controller_erase_block>
    1fa0:	fca42623          	sw	a0,-52(s0)

        if(0 != ret_code)
    1fa4:	fcc42783          	lw	a5,-52(s0)
    1fa8:	00078663          	beqz	a5,1fb4 <alt_epcq_controller_write+0x11c>
        {
            return ret_code;
    1fac:	fcc42783          	lw	a5,-52(s0)
    1fb0:	0b40006f          	j	2064 <alt_epcq_controller_write+0x1cc>
        }

        /* calculate the byte size of data to be written in a sector */
        length_to_write = MIN(epcq_flash_info->sector_size - offset_within_current_sector, 
    1fb4:	fe442783          	lw	a5,-28(s0)
    1fb8:	0d07a703          	lw	a4,208(a5)
    1fbc:	fe042783          	lw	a5,-32(s0)
    1fc0:	40f70733          	sub	a4,a4,a5
    1fc4:	fd442783          	lw	a5,-44(s0)
    1fc8:	00f77463          	bgeu	a4,a5,1fd0 <alt_epcq_controller_write+0x138>
    1fcc:	00070793          	mv	a5,a4
    1fd0:	fef42623          	sw	a5,-20(s0)
                remaining_length);

        /* write data to erased block */
        ret_code = alt_epcq_controller_write_block(flash_info, block_offset, write_offset,
    1fd4:	fe842583          	lw	a1,-24(s0)
    1fd8:	fd042603          	lw	a2,-48(s0)
    1fdc:	fb442703          	lw	a4,-76(s0)
    1fe0:	fd842783          	lw	a5,-40(s0)
    1fe4:	00f707b3          	add	a5,a4,a5
    1fe8:	fec42703          	lw	a4,-20(s0)
    1fec:	00078693          	mv	a3,a5
    1ff0:	fbc42503          	lw	a0,-68(s0)
    1ff4:	c49ff0ef          	jal	ra,1c3c <alt_epcq_controller_write_block>
    1ff8:	fca42623          	sw	a0,-52(s0)
            src_addr + buffer_offset, length_to_write);


        if(0 != ret_code)
    1ffc:	fcc42783          	lw	a5,-52(s0)
    2000:	00078663          	beqz	a5,200c <alt_epcq_controller_write+0x174>
        {
            return ret_code;
    2004:	fcc42783          	lw	a5,-52(s0)
    2008:	05c0006f          	j	2064 <alt_epcq_controller_write+0x1cc>
        }

        /* update remaining length and buffer_offset pointer */
        remaining_length -= length_to_write;
    200c:	fd442703          	lw	a4,-44(s0)
    2010:	fec42783          	lw	a5,-20(s0)
    2014:	40f707b3          	sub	a5,a4,a5
    2018:	fcf42a23          	sw	a5,-44(s0)
        buffer_offset += length_to_write;
    201c:	fd842703          	lw	a4,-40(s0)
    2020:	fec42783          	lw	a5,-20(s0)
    2024:	00f707b3          	add	a5,a4,a5
    2028:	fcf42c23          	sw	a5,-40(s0)
        write_offset += length_to_write; 
    202c:	fd042703          	lw	a4,-48(s0)
    2030:	fec42783          	lw	a5,-20(s0)
    2034:	00f707b3          	add	a5,a4,a5
    2038:	fcf42823          	sw	a5,-48(s0)
    for(i = offset/epcq_flash_info->sector_size ; i < epcq_flash_info->number_of_sectors; i++)
    203c:	fdc42783          	lw	a5,-36(s0)
    2040:	00178793          	addi	a5,a5,1
    2044:	fcf42e23          	sw	a5,-36(s0)
    2048:	fe442783          	lw	a5,-28(s0)
    204c:	0cc7a783          	lw	a5,204(a5)
    2050:	fdc42703          	lw	a4,-36(s0)
    2054:	eef76ae3          	bltu	a4,a5,1f48 <alt_epcq_controller_write+0xb0>
    2058:	0080006f          	j	2060 <alt_epcq_controller_write+0x1c8>
    		break; /* out of data to write */
    205c:	00000013          	nop
    }

    return ret_code;
    2060:	fcc42783          	lw	a5,-52(s0)
}
    2064:	00078513          	mv	a0,a5
    2068:	04c12083          	lw	ra,76(sp)
    206c:	04812403          	lw	s0,72(sp)
    2070:	05010113          	addi	sp,sp,80
    2074:	00008067          	ret

00002078 <alt_epcq_controller_read>:
    alt_flash_dev *flash_info, /** device info */
    int offset, /** offset of read from base address */
    void *dest_addr, /** destination buffer */
    int length /** size of read */
)
{
    2078:	fd010113          	addi	sp,sp,-48
    207c:	02112623          	sw	ra,44(sp)
    2080:	02812423          	sw	s0,40(sp)
    2084:	03010413          	addi	s0,sp,48
    2088:	fca42e23          	sw	a0,-36(s0)
    208c:	fcb42c23          	sw	a1,-40(s0)
    2090:	fcc42a23          	sw	a2,-44(s0)
    2094:	fcd42823          	sw	a3,-48(s0)
    alt_32 ret_code = 0;
    2098:	fe042423          	sw	zero,-24(s0)
	alt_epcq_controller_dev *epcq_flash_info = NULL;
    209c:	fe042623          	sw	zero,-20(s0)
	
	/* return -EINVAL if flash_info and dest_addr are NULL */
	if(NULL == flash_info || NULL == dest_addr)
    20a0:	fdc42783          	lw	a5,-36(s0)
    20a4:	00078663          	beqz	a5,20b0 <alt_epcq_controller_read+0x38>
    20a8:	fd442783          	lw	a5,-44(s0)
    20ac:	00079663          	bnez	a5,20b8 <alt_epcq_controller_read+0x40>
    {
    	return -EINVAL;
    20b0:	fea00793          	li	a5,-22
    20b4:	05c0006f          	j	2110 <alt_epcq_controller_read+0x98>
    }
	
    epcq_flash_info = (alt_epcq_controller_dev*)flash_info;
    20b8:	fdc42783          	lw	a5,-36(s0)
    20bc:	fef42623          	sw	a5,-20(s0)

	/* validate arguments */
	ret_code = alt_epcq_validate_read_write_arguments(epcq_flash_info, offset, length);
    20c0:	fd842783          	lw	a5,-40(s0)
    20c4:	fd042703          	lw	a4,-48(s0)
    20c8:	00070613          	mv	a2,a4
    20cc:	00078593          	mv	a1,a5
    20d0:	fec42503          	lw	a0,-20(s0)
    20d4:	2a0000ef          	jal	ra,2374 <alt_epcq_validate_read_write_arguments>
    20d8:	fea42423          	sw	a0,-24(s0)

	/* copy data from flash to destination address */
	if(0 == ret_code)
    20dc:	fe842783          	lw	a5,-24(s0)
    20e0:	02079663          	bnez	a5,210c <alt_epcq_controller_read+0x94>
	{
		memcpy(dest_addr, (alt_u8*)epcq_flash_info->data_base + offset, length);
    20e4:	fec42783          	lw	a5,-20(s0)
    20e8:	0b87a703          	lw	a4,184(a5)
    20ec:	fd842783          	lw	a5,-40(s0)
    20f0:	00f707b3          	add	a5,a4,a5
    20f4:	00078713          	mv	a4,a5
    20f8:	fd042783          	lw	a5,-48(s0)
    20fc:	00078613          	mv	a2,a5
    2100:	00070593          	mv	a1,a4
    2104:	fd442503          	lw	a0,-44(s0)
    2108:	031020ef          	jal	ra,4938 <memcpy>
	}

    return ret_code;
    210c:	fe842783          	lw	a5,-24(s0)
}
    2110:	00078513          	mv	a0,a5
    2114:	02c12083          	lw	ra,44(sp)
    2118:	02812403          	lw	s0,40(sp)
    211c:	03010113          	addi	sp,sp,48
    2120:	00008067          	ret

00002124 <altera_epcq_controller_init>:
 * 0 -> success
 * -EINVAL -> Invalid arguments.
 * -ENODEV -> System is configured incorrectly.
**/
alt_32 altera_epcq_controller_init(alt_epcq_controller_dev *flash)
{
    2124:	fc010113          	addi	sp,sp,-64
    2128:	02112e23          	sw	ra,60(sp)
    212c:	02812c23          	sw	s0,56(sp)
    2130:	04010413          	addi	s0,sp,64
    2134:	fca42623          	sw	a0,-52(s0)
	alt_u32 silicon_id = 0;
    2138:	fc042e23          	sw	zero,-36(s0)
	alt_u32 size_in_bytes = 0;
    213c:	fe042223          	sw	zero,-28(s0)
	alt_u32 number_of_sectors = 0;
    2140:	fe042023          	sw	zero,-32(s0)

    /* return -EINVAL if flash is NULL */
	if(NULL == flash)
    2144:	fcc42783          	lw	a5,-52(s0)
    2148:	00079663          	bnez	a5,2154 <altera_epcq_controller_init+0x30>
    {
    	return -EINVAL;
    214c:	fea00793          	li	a5,-22
    2150:	2100006f          	j	2360 <altera_epcq_controller_init+0x23c>
    }
	
	/* return -ENODEV if CSR slave is not attached */
	if(NULL == (void *)flash->csr_base)
    2154:	fcc42783          	lw	a5,-52(s0)
    2158:	0c07a783          	lw	a5,192(a5)
    215c:	00079663          	bnez	a5,2168 <altera_epcq_controller_init+0x44>
	{
		return -ENODEV;
    2160:	fed00793          	li	a5,-19
    2164:	1fc0006f          	j	2360 <altera_epcq_controller_init+0x23c>
	 *
	 * In both cases, we can determine the number of sectors, which we can use
	 * to calculate a size. We compare that size to the system.h value to make sure
	 * the EPCQ soft IP was configured correctly.
	 */
	if(0 == flash->is_epcs)
    2168:	fcc42783          	lw	a5,-52(s0)
    216c:	0c87a783          	lw	a5,200(a5)
    2170:	0a079a63          	bnez	a5,2224 <altera_epcq_controller_init+0x100>
	{
		/* If we're an EPCQ, we read EPCQ_RD_RDID for the silicon ID */
		silicon_id = IORD_ALTERA_EPCQ_CONTROLLER_RDID(flash->csr_base);
    2174:	fcc42783          	lw	a5,-52(s0)
    2178:	0c07a783          	lw	a5,192(a5)
    217c:	00878793          	addi	a5,a5,8
    2180:	0007a783          	lw	a5,0(a5)
    2184:	fef42623          	sw	a5,-20(s0)
    2188:	fec42783          	lw	a5,-20(s0)
    218c:	fcf42e23          	sw	a5,-36(s0)
		silicon_id &= ALTERA_EPCQ_CONTROLLER_RDID_MASK;
    2190:	fdc42783          	lw	a5,-36(s0)
    2194:	0ff7f793          	zext.b	a5,a5
    2198:	fcf42e23          	sw	a5,-36(s0)

		/* Determine which EPCQ device so we can figure out the number of sectors */
		/* EPCQ share the same ID for the same capacity*/
		switch(silicon_id)
    219c:	fdc42783          	lw	a5,-36(s0)
    21a0:	feb78793          	addi	a5,a5,-21
    21a4:	00c00713          	li	a4,12
    21a8:	06f76a63          	bltu	a4,a5,221c <altera_epcq_controller_init+0xf8>
    21ac:	00279713          	slli	a4,a5,0x2
    21b0:	000087b7          	lui	a5,0x8
    21b4:	d1478793          	addi	a5,a5,-748 # 7d14 <__fini_array_end+0xb8>
    21b8:	00f707b3          	add	a5,a4,a5
    21bc:	0007a783          	lw	a5,0(a5)
    21c0:	00078067          	jr	a5
		{
			case ALTERA_EPCQ_CONTROLLER_RDID_EPCQ16:
			{
				number_of_sectors = 32;
    21c4:	02000793          	li	a5,32
    21c8:	fef42023          	sw	a5,-32(s0)
				break;
    21cc:	0e00006f          	j	22ac <altera_epcq_controller_init+0x188>
			}
			case ALTERA_EPCQ_CONTROLLER_RDID_EPCQ32:
			{
				number_of_sectors = 64;
    21d0:	04000793          	li	a5,64
    21d4:	fef42023          	sw	a5,-32(s0)
				break;
    21d8:	0d40006f          	j	22ac <altera_epcq_controller_init+0x188>
			}
			case ALTERA_EPCQ_CONTROLLER_RDID_EPCQ64:
			{
				number_of_sectors = 128;
    21dc:	08000793          	li	a5,128
    21e0:	fef42023          	sw	a5,-32(s0)
				break;
    21e4:	0c80006f          	j	22ac <altera_epcq_controller_init+0x188>
			}
			case ALTERA_EPCQ_CONTROLLER_RDID_EPCQ128:
			{
				number_of_sectors = 256;
    21e8:	10000793          	li	a5,256
    21ec:	fef42023          	sw	a5,-32(s0)
				break;
    21f0:	0bc0006f          	j	22ac <altera_epcq_controller_init+0x188>
			}
			case ALTERA_EPCQ_CONTROLLER_RDID_EPCQ256:
			{
				number_of_sectors = 512;
    21f4:	20000793          	li	a5,512
    21f8:	fef42023          	sw	a5,-32(s0)
				break;
    21fc:	0b00006f          	j	22ac <altera_epcq_controller_init+0x188>
			}
			case ALTERA_EPCQ_CONTROLLER_RDID_EPCQ512:
			{
				number_of_sectors = 1024;
    2200:	40000793          	li	a5,1024
    2204:	fef42023          	sw	a5,-32(s0)
				break;
    2208:	0a40006f          	j	22ac <altera_epcq_controller_init+0x188>
			}
			case ALTERA_EPCQ_CONTROLLER_RDID_EPCQ1024:
			{
				number_of_sectors = 2048;
    220c:	000017b7          	lui	a5,0x1
    2210:	80078793          	addi	a5,a5,-2048 # 800 <altera_avalon_jtag_uart_irq+0xa4>
    2214:	fef42023          	sw	a5,-32(s0)
				break;
    2218:	0940006f          	j	22ac <altera_epcq_controller_init+0x188>
			}
			default:
			{
				return -ENODEV;
    221c:	fed00793          	li	a5,-19
    2220:	1400006f          	j	2360 <altera_epcq_controller_init+0x23c>
			}
		}
	}
	else {
		/* If we're an EPCS, we read EPCQ_RD_SID for the silicon ID */
		silicon_id = IORD_ALTERA_EPCQ_CONTROLLER_SID(flash->csr_base);
    2224:	fcc42783          	lw	a5,-52(s0)
    2228:	0c07a783          	lw	a5,192(a5)
    222c:	00478793          	addi	a5,a5,4
    2230:	0007a783          	lw	a5,0(a5)
    2234:	fef42423          	sw	a5,-24(s0)
    2238:	fe842783          	lw	a5,-24(s0)
    223c:	fcf42e23          	sw	a5,-36(s0)
		silicon_id &= ALTERA_EPCQ_CONTROLLER_SID_MASK;
    2240:	fdc42783          	lw	a5,-36(s0)
    2244:	0ff7f793          	zext.b	a5,a5
    2248:	fcf42e23          	sw	a5,-36(s0)

		/* Determine which EPCS device so we can figure out various properties */
		switch(silicon_id)
    224c:	fdc42703          	lw	a4,-36(s0)
    2250:	01800793          	li	a5,24
    2254:	04f70263          	beq	a4,a5,2298 <altera_epcq_controller_init+0x174>
    2258:	fdc42703          	lw	a4,-36(s0)
    225c:	01800793          	li	a5,24
    2260:	04e7e263          	bltu	a5,a4,22a4 <altera_epcq_controller_init+0x180>
    2264:	fdc42703          	lw	a4,-36(s0)
    2268:	01400793          	li	a5,20
    226c:	00f70a63          	beq	a4,a5,2280 <altera_epcq_controller_init+0x15c>
    2270:	fdc42703          	lw	a4,-36(s0)
    2274:	01600793          	li	a5,22
    2278:	00f70a63          	beq	a4,a5,228c <altera_epcq_controller_init+0x168>
    227c:	0280006f          	j	22a4 <altera_epcq_controller_init+0x180>
		{
			case ALTERA_EPCQ_CONTROLLER_SID_EPCS16:
			{
				number_of_sectors = 32;
    2280:	02000793          	li	a5,32
    2284:	fef42023          	sw	a5,-32(s0)
				break;
    2288:	0240006f          	j	22ac <altera_epcq_controller_init+0x188>
			}
			case ALTERA_EPCQ_CONTROLLER_SID_EPCS64:
			{
				number_of_sectors = 128;
    228c:	08000793          	li	a5,128
    2290:	fef42023          	sw	a5,-32(s0)
				break;
    2294:	0180006f          	j	22ac <altera_epcq_controller_init+0x188>
			}
			case ALTERA_EPCQ_CONTROLLER_SID_EPCS128:
			{
				number_of_sectors = 256;
    2298:	10000793          	li	a5,256
    229c:	fef42023          	sw	a5,-32(s0)
				break;
    22a0:	00c0006f          	j	22ac <altera_epcq_controller_init+0x188>
			}
			default:
			{
				return -ENODEV;
    22a4:	fed00793          	li	a5,-19
    22a8:	0b80006f          	j	2360 <altera_epcq_controller_init+0x23c>
			}
		}
	}

	/* Calculate size of flash based on number of sectors */
	size_in_bytes = number_of_sectors * flash->sector_size;
    22ac:	fcc42783          	lw	a5,-52(s0)
    22b0:	0d07a783          	lw	a5,208(a5)
    22b4:	00078593          	mv	a1,a5
    22b8:	fe042503          	lw	a0,-32(s0)
    22bc:	2dd040ef          	jal	ra,6d98 <__mulsi3>
    22c0:	00050793          	mv	a5,a0
    22c4:	fef42223          	sw	a5,-28(s0)
	/*
	 * Make sure calculated size is the same size given in system.h
	 * Also check number of sectors is the same number given in system.h
	 * Otherwise the EPCQ IP was not configured correctly
	 */
	if(	size_in_bytes != flash->size_in_bytes ||
    22c8:	fcc42783          	lw	a5,-52(s0)
    22cc:	0c47a783          	lw	a5,196(a5)
    22d0:	fe442703          	lw	a4,-28(s0)
    22d4:	00f71a63          	bne	a4,a5,22e8 <altera_epcq_controller_init+0x1c4>
			number_of_sectors != flash->number_of_sectors)
    22d8:	fcc42783          	lw	a5,-52(s0)
    22dc:	0cc7a783          	lw	a5,204(a5)
	if(	size_in_bytes != flash->size_in_bytes ||
    22e0:	fe042703          	lw	a4,-32(s0)
    22e4:	00f70a63          	beq	a4,a5,22f8 <altera_epcq_controller_init+0x1d4>
	{
		flash->dev.number_of_regions = 0;
    22e8:	fcc42783          	lw	a5,-52(s0)
    22ec:	0207a823          	sw	zero,48(a5)
		return -ENODEV;
    22f0:	fed00793          	li	a5,-19
    22f4:	06c0006f          	j	2360 <altera_epcq_controller_init+0x23c>
	}
	else
	{
		flash->silicon_id = silicon_id;
    22f8:	fcc42783          	lw	a5,-52(s0)
    22fc:	fdc42703          	lw	a4,-36(s0)
    2300:	0ce7ac23          	sw	a4,216(a5)
		flash->number_of_sectors = number_of_sectors;
    2304:	fcc42783          	lw	a5,-52(s0)
    2308:	fe042703          	lw	a4,-32(s0)
    230c:	0ce7a623          	sw	a4,204(a5)

		/*
		 * populate fields of region_info required to conform to HAL API
		 * create 1 region that composed of "number_of_sectors" blocks
		 */
		flash->dev.number_of_regions = 1;
    2310:	fcc42783          	lw	a5,-52(s0)
    2314:	00100713          	li	a4,1
    2318:	02e7a823          	sw	a4,48(a5)
		flash->dev.region_info[0].offset = 0;
    231c:	fcc42783          	lw	a5,-52(s0)
    2320:	0207aa23          	sw	zero,52(a5)
		flash->dev.region_info[0].region_size = size_in_bytes;
    2324:	fe442703          	lw	a4,-28(s0)
    2328:	fcc42783          	lw	a5,-52(s0)
    232c:	02e7ac23          	sw	a4,56(a5)
		flash->dev.region_info[0].number_of_blocks = number_of_sectors;
    2330:	fe042703          	lw	a4,-32(s0)
    2334:	fcc42783          	lw	a5,-52(s0)
    2338:	02e7ae23          	sw	a4,60(a5)
		flash->dev.region_info[0].block_size = flash->sector_size;
    233c:	fcc42783          	lw	a5,-52(s0)
    2340:	0d07a783          	lw	a5,208(a5)
    2344:	00078713          	mv	a4,a5
    2348:	fcc42783          	lw	a5,-52(s0)
    234c:	04e7a023          	sw	a4,64(a5)
    /*
     * Register this device as a valid flash device type
     *
     * Only register the device if it's configured correctly.
     */
		alt_flash_device_register(&(flash->dev));
    2350:	fcc42783          	lw	a5,-52(s0)
    2354:	00078513          	mv	a0,a5
    2358:	600000ef          	jal	ra,2958 <alt_flash_device_register>


    return 0;
    235c:	00000793          	li	a5,0
}
    2360:	00078513          	mv	a0,a5
    2364:	03c12083          	lw	ra,60(sp)
    2368:	03812403          	lw	s0,56(sp)
    236c:	04010113          	addi	sp,sp,64
    2370:	00008067          	ret

00002374 <alt_epcq_validate_read_write_arguments>:
(
		alt_epcq_controller_dev *flash_info, /** device info */
		alt_u32 offset, /** offset of read/write */
		alt_u32 length /** length of read/write */
)
{
    2374:	fd010113          	addi	sp,sp,-48
    2378:	02812623          	sw	s0,44(sp)
    237c:	03010413          	addi	s0,sp,48
    2380:	fca42e23          	sw	a0,-36(s0)
    2384:	fcb42c23          	sw	a1,-40(s0)
    2388:	fcc42a23          	sw	a2,-44(s0)
    alt_epcq_controller_dev *epcq_flash_info = NULL;
    238c:	fe042223          	sw	zero,-28(s0)
    alt_u32 start_address = 0;
    2390:	fe042423          	sw	zero,-24(s0)
    alt_32 end_address = 0;
    2394:	fe042623          	sw	zero,-20(s0)
	
  /* return -EINVAL if flash_info is NULL */
   if(NULL == flash_info)
    2398:	fdc42783          	lw	a5,-36(s0)
    239c:	00079663          	bnez	a5,23a8 <alt_epcq_validate_read_write_arguments+0x34>
   {
    	return -EINVAL;
    23a0:	fea00793          	li	a5,-22
    23a4:	05c0006f          	j	2400 <alt_epcq_validate_read_write_arguments+0x8c>
   }
	
  epcq_flash_info = (alt_epcq_controller_dev*)flash_info;
    23a8:	fdc42783          	lw	a5,-36(s0)
    23ac:	fef42223          	sw	a5,-28(s0)

  start_address = epcq_flash_info->data_base + offset; /** first address of read or write */
    23b0:	fe442783          	lw	a5,-28(s0)
    23b4:	0b87a783          	lw	a5,184(a5)
    23b8:	fd842703          	lw	a4,-40(s0)
    23bc:	00f707b3          	add	a5,a4,a5
    23c0:	fef42423          	sw	a5,-24(s0)
  end_address = start_address + length; /** last address of read or write (not inclusive) */
    23c4:	fe842703          	lw	a4,-24(s0)
    23c8:	fd442783          	lw	a5,-44(s0)
    23cc:	00f707b3          	add	a5,a4,a5
    23d0:	fef42623          	sw	a5,-20(s0)

  /* make sure start and end address is less then the end address of the flash */
  if(
		  start_address >= epcq_flash_info->data_end ||
    23d4:	fe442783          	lw	a5,-28(s0)
    23d8:	0bc7a783          	lw	a5,188(a5)
  if(
    23dc:	fe842703          	lw	a4,-24(s0)
    23e0:	00f77a63          	bgeu	a4,a5,23f4 <alt_epcq_validate_read_write_arguments+0x80>
		  end_address > epcq_flash_info->data_end ||
    23e4:	fe442783          	lw	a5,-28(s0)
    23e8:	0bc7a703          	lw	a4,188(a5)
    23ec:	fec42783          	lw	a5,-20(s0)
		  offset < 0 ||
    23f0:	00f77663          	bgeu	a4,a5,23fc <alt_epcq_validate_read_write_arguments+0x88>
		  length < 0
  )
  {
	  return -EINVAL;
    23f4:	fea00793          	li	a5,-22
    23f8:	0080006f          	j	2400 <alt_epcq_validate_read_write_arguments+0x8c>
  }

  return 0;
    23fc:	00000793          	li	a5,0
}
    2400:	00078513          	mv	a0,a5
    2404:	02c12403          	lw	s0,44(sp)
    2408:	03010113          	addi	sp,sp,48
    240c:	00008067          	ret

00002410 <alt_epcq_poll_for_write_in_progress>:
 * 0 -> success
 * -EINVAL -> Invalid arguments
 * -ETIME  -> Time out and skipping the looping after 0.7 sec.
 */
alt_32 static alt_epcq_poll_for_write_in_progress(alt_epcq_controller_dev* epcq_flash_info)
{  
    2410:	fd010113          	addi	sp,sp,-48
    2414:	02112623          	sw	ra,44(sp)
    2418:	02812423          	sw	s0,40(sp)
    241c:	03010413          	addi	s0,sp,48
    2420:	fca42e23          	sw	a0,-36(s0)
    /* we'll want to implement timeout if a timeout value is specified */
#if ALTERA_EPCQ_CONTROLLER_1US_TIMEOUT_VALUE > 0
	alt_u32 timeout = ALTERA_EPCQ_CONTROLLER_1US_TIMEOUT_VALUE;
    2424:	000ab7b7          	lui	a5,0xab
    2428:	e6078793          	addi	a5,a5,-416 # aae60 <__global_pointer$+0xa0cf8>
    242c:	fef42423          	sw	a5,-24(s0)
	alt_u16 counter = 0;
    2430:	fe041323          	sh	zero,-26(s0)
#endif

    /* return -EINVAL if epcq_flash_info is NULL */
	if(NULL == epcq_flash_info)
    2434:	fdc42783          	lw	a5,-36(s0)
    2438:	02079a63          	bnez	a5,246c <alt_epcq_poll_for_write_in_progress+0x5c>
    {
    	return -EINVAL;
    243c:	fea00793          	li	a5,-22
    2440:	0500006f          	j	2490 <alt_epcq_poll_for_write_in_progress+0x80>
	/* while Write in Progress bit is set, we wait */
	while((IORD_ALTERA_EPCQ_CONTROLLER_STATUS(epcq_flash_info->csr_base) &
			ALTERA_EPCQ_CONTROLLER_STATUS_WIP_MASK) ==
			ALTERA_EPCQ_CONTROLLER_STATUS_WIP_BUSY)
	{
        alt_busy_sleep(1); /* delay 1us */
    2444:	00100513          	li	a0,1
    2448:	1bc000ef          	jal	ra,2604 <alt_busy_sleep>
#if ALTERA_EPCQ_CONTROLLER_1US_TIMEOUT_VALUE > 0
		if(timeout <= counter )
    244c:	fe645783          	lhu	a5,-26(s0)
    2450:	fe842703          	lw	a4,-24(s0)
    2454:	00e7e663          	bltu	a5,a4,2460 <alt_epcq_poll_for_write_in_progress+0x50>
		{
			return -ETIME;
    2458:	fc200793          	li	a5,-62
    245c:	0340006f          	j	2490 <alt_epcq_poll_for_write_in_progress+0x80>
		}
		
		counter++;
    2460:	fe645783          	lhu	a5,-26(s0)
    2464:	00178793          	addi	a5,a5,1
    2468:	fef41323          	sh	a5,-26(s0)
	while((IORD_ALTERA_EPCQ_CONTROLLER_STATUS(epcq_flash_info->csr_base) &
    246c:	fdc42783          	lw	a5,-36(s0)
    2470:	0c07a783          	lw	a5,192(a5)
    2474:	0007a783          	lw	a5,0(a5)
    2478:	fef42623          	sw	a5,-20(s0)
    247c:	fec42783          	lw	a5,-20(s0)
    2480:	0017f713          	andi	a4,a5,1
			ALTERA_EPCQ_CONTROLLER_STATUS_WIP_MASK) ==
    2484:	00100793          	li	a5,1
    2488:	faf70ee3          	beq	a4,a5,2444 <alt_epcq_poll_for_write_in_progress+0x34>
#endif

	}

	return 0;
    248c:	00000793          	li	a5,0
}
    2490:	00078513          	mv	a0,a5
    2494:	02c12083          	lw	ra,44(sp)
    2498:	02812403          	lw	s0,40(sp)
    249c:	03010113          	addi	sp,sp,48
    24a0:	00008067          	ret

000024a4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    24a4:	fc010113          	addi	sp,sp,-64
    24a8:	02812e23          	sw	s0,60(sp)
    24ac:	04010413          	addi	s0,sp,64
    24b0:	fca42623          	sw	a0,-52(s0)
    24b4:	fcb42423          	sw	a1,-56(s0)
    24b8:	fcc42223          	sw	a2,-60(s0)
    24bc:	fcd42023          	sw	a3,-64(s0)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    24c0:	00000713          	li	a4,0
    24c4:	00000793          	li	a5,0
    24c8:	fee42423          	sw	a4,-24(s0)
    24cc:	fef42623          	sw	a5,-20(s0)
    24d0:	8581a783          	lw	a5,-1960(gp) # 99c0 <_alt_tick_rate>
  
  if (alt_ticks_per_second ())
    24d4:	10078e63          	beqz	a5,25f0 <alt_alarm_start+0x14c>
  {
    if (alarm)
    24d8:	fcc42783          	lw	a5,-52(s0)
    24dc:	10078663          	beqz	a5,25e8 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
    24e0:	fcc42783          	lw	a5,-52(s0)
    24e4:	fc442703          	lw	a4,-60(s0)
    24e8:	00e7a823          	sw	a4,16(a5)
      alarm->context  = context;
    24ec:	fcc42783          	lw	a5,-52(s0)
    24f0:	fc042703          	lw	a4,-64(s0)
    24f4:	00e7aa23          	sw	a4,20(a5)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    24f8:	00800793          	li	a5,8
    24fc:	3007b7f3          	csrrc	a5,mstatus,a5
    2500:	fef42223          	sw	a5,-28(s0)
    return context;
    2504:	fe442783          	lw	a5,-28(s0)
 
      irq_context = alt_irq_disable_all ();
    2508:	fcf42a23          	sw	a5,-44(s0)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    250c:	8601a703          	lw	a4,-1952(gp) # 99c8 <_alt_nticks>
    2510:	8641a783          	lw	a5,-1948(gp) # 99cc <_alt_nticks+0x4>
      
      current_nticks = alt_nticks();
    2514:	fee42423          	sw	a4,-24(s0)
    2518:	fef42623          	sw	a5,-20(s0)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    251c:	fc842783          	lw	a5,-56(s0)
    2520:	00078813          	mv	a6,a5
    2524:	00000893          	li	a7,0
    2528:	fe842603          	lw	a2,-24(s0)
    252c:	fec42683          	lw	a3,-20(s0)
    2530:	00c80733          	add	a4,a6,a2
    2534:	00070593          	mv	a1,a4
    2538:	0105b5b3          	sltu	a1,a1,a6
    253c:	00d887b3          	add	a5,a7,a3
    2540:	00f586b3          	add	a3,a1,a5
    2544:	00068793          	mv	a5,a3
    2548:	00070613          	mv	a2,a4
    254c:	00078693          	mv	a3,a5
    2550:	00100513          	li	a0,1
    2554:	00000593          	li	a1,0
    2558:	00a60733          	add	a4,a2,a0
    255c:	00070813          	mv	a6,a4
    2560:	00c83833          	sltu	a6,a6,a2
    2564:	00b687b3          	add	a5,a3,a1
    2568:	00f806b3          	add	a3,a6,a5
    256c:	00068793          	mv	a5,a3
    2570:	fcc42683          	lw	a3,-52(s0)
    2574:	00e6a423          	sw	a4,8(a3)
    2578:	00f6a623          	sw	a5,12(a3)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    257c:	fcc42783          	lw	a5,-52(s0)
    2580:	82018713          	addi	a4,gp,-2016 # 9988 <alt_alarm_list>
    2584:	fce42e23          	sw	a4,-36(s0)
    2588:	fef42023          	sw	a5,-32(s0)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    258c:	fe042783          	lw	a5,-32(s0)
    2590:	fdc42703          	lw	a4,-36(s0)
    2594:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    2598:	fdc42783          	lw	a5,-36(s0)
    259c:	0007a703          	lw	a4,0(a5)
    25a0:	fe042783          	lw	a5,-32(s0)
    25a4:	00e7a023          	sw	a4,0(a5)

  list->next->previous = entry;
    25a8:	fdc42783          	lw	a5,-36(s0)
    25ac:	0007a783          	lw	a5,0(a5)
    25b0:	fe042703          	lw	a4,-32(s0)
    25b4:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    25b8:	fdc42783          	lw	a5,-36(s0)
    25bc:	fe042703          	lw	a4,-32(s0)
    25c0:	00e7a023          	sw	a4,0(a5)
}
    25c4:	00000013          	nop
    25c8:	fd442783          	lw	a5,-44(s0)
    25cc:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    25d0:	fd842783          	lw	a5,-40(s0)
    25d4:	0087f793          	andi	a5,a5,8
    25d8:	3007a073          	csrs	mstatus,a5
}
    25dc:	00000013          	nop
      alt_irq_enable_all (irq_context);

      return 0;
    25e0:	00000793          	li	a5,0
    25e4:	0100006f          	j	25f4 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
    25e8:	fea00793          	li	a5,-22
    25ec:	0080006f          	j	25f4 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
    25f0:	f7a00793          	li	a5,-134
  }
}
    25f4:	00078513          	mv	a0,a5
    25f8:	03c12403          	lw	s0,60(sp)
    25fc:	04010113          	addi	sp,sp,64
    2600:	00008067          	ret

00002604 <alt_busy_sleep>:

// For a 50 Mhz clock, this is 1,202,590,842.
#define US_PER_OUTER_LOOP ((alt_u64)CLOCKS_PER_OUTER_LOOP / (alt_u64)CPU_FREQUENCY_MHZ)

unsigned int alt_busy_sleep (unsigned int us)
{
    2604:	fd010113          	addi	sp,sp,-48
    2608:	02112623          	sw	ra,44(sp)
    260c:	02812423          	sw	s0,40(sp)
    2610:	03010413          	addi	s0,sp,48
    2614:	fca42e23          	sw	a0,-36(s0)
 * is connected, use that. If no timer agent is connected, fallback to a low accuracy busy
 * loop. If accurate timing is desired for busy sleep (used by usleep), please be sure to
 * provide a timestamp source, or connect the timer agent.
 */
#if HAL_TIMESTAMP_ENABLED
    alt_timestamp_start();
    2618:	111000ef          	jal	ra,2f28 <alt_timestamp_start>
    const alt_timestamp_type end_time = (CPU_FREQUENCY_MHZ * us);
    261c:	fdc42703          	lw	a4,-36(s0)
    2620:	00070793          	mv	a5,a4
    2624:	00179793          	slli	a5,a5,0x1
    2628:	00e787b3          	add	a5,a5,a4
    262c:	00379793          	slli	a5,a5,0x3
    2630:	00e787b3          	add	a5,a5,a4
    2634:	00279793          	slli	a5,a5,0x2
    2638:	fef42423          	sw	a5,-24(s0)
    263c:	fe042623          	sw	zero,-20(s0)
    while (alt_timestamp() < end_time) {
    2640:	00000013          	nop
    2644:	121000ef          	jal	ra,2f64 <alt_timestamp>
    2648:	00050713          	mv	a4,a0
    264c:	00058793          	mv	a5,a1
    2650:	fec42683          	lw	a3,-20(s0)
    2654:	00078613          	mv	a2,a5
    2658:	fed666e3          	bltu	a2,a3,2644 <alt_busy_sleep+0x40>
    265c:	fec42683          	lw	a3,-20(s0)
    2660:	00078613          	mv	a2,a5
    2664:	00c69863          	bne	a3,a2,2674 <alt_busy_sleep+0x70>
    2668:	fe842683          	lw	a3,-24(s0)
    266c:	00070793          	mv	a5,a4
    2670:	fcd7eae3          	bltu	a5,a3,2644 <alt_busy_sleep+0x40>
        );
    }
#endif
#endif /* #ifndef ALT_SIM_OPTIMIZE */

  return 0;
    2674:	00000793          	li	a5,0
}
    2678:	00078513          	mv	a0,a5
    267c:	02c12083          	lw	ra,44(sp)
    2680:	02812403          	lw	s0,40(sp)
    2684:	03010113          	addi	sp,sp,48
    2688:	00008067          	ret

0000268c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    268c:	fe010113          	addi	sp,sp,-32
    2690:	00812e23          	sw	s0,28(sp)
    2694:	02010413          	addi	s0,sp,32
    2698:	fea42623          	sw	a0,-20(s0)
    269c:	feb42423          	sw	a1,-24(s0)
    26a0:	fec42223          	sw	a2,-28(s0)
  return len;
    26a4:	fe442783          	lw	a5,-28(s0)
}
    26a8:	00078513          	mv	a0,a5
    26ac:	01c12403          	lw	s0,28(sp)
    26b0:	02010113          	addi	sp,sp,32
    26b4:	00008067          	ret

000026b8 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
    26b8:	fe010113          	addi	sp,sp,-32
    26bc:	00112e23          	sw	ra,28(sp)
    26c0:	00812c23          	sw	s0,24(sp)
    26c4:	02010413          	addi	s0,sp,32
    26c8:	fea42623          	sw	a0,-20(s0)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    26cc:	0000a7b7          	lui	a5,0xa
    26d0:	97078593          	addi	a1,a5,-1680 # 9970 <alt_dev_list>
    26d4:	fec42503          	lw	a0,-20(s0)
    26d8:	05c000ef          	jal	ra,2734 <alt_dev_llist_insert>
    26dc:	00050793          	mv	a5,a0
}
    26e0:	00078513          	mv	a0,a5
    26e4:	01c12083          	lw	ra,28(sp)
    26e8:	01812403          	lw	s0,24(sp)
    26ec:	02010113          	addi	sp,sp,32
    26f0:	00008067          	ret

000026f4 <alt_get_errno>:
{
    26f4:	ff010113          	addi	sp,sp,-16
    26f8:	00112623          	sw	ra,12(sp)
    26fc:	00812423          	sw	s0,8(sp)
    2700:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    2704:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    2708:	00078a63          	beqz	a5,271c <alt_get_errno+0x28>
    270c:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    2710:	000780e7          	jalr	a5
    2714:	00050793          	mv	a5,a0
    2718:	0080006f          	j	2720 <alt_get_errno+0x2c>
    271c:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    2720:	00078513          	mv	a0,a5
    2724:	00c12083          	lw	ra,12(sp)
    2728:	00812403          	lw	s0,8(sp)
    272c:	01010113          	addi	sp,sp,16
    2730:	00008067          	ret

00002734 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2734:	fd010113          	addi	sp,sp,-48
    2738:	02112623          	sw	ra,44(sp)
    273c:	02812423          	sw	s0,40(sp)
    2740:	03010413          	addi	s0,sp,48
    2744:	fca42e23          	sw	a0,-36(s0)
    2748:	fcb42c23          	sw	a1,-40(s0)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    274c:	fdc42783          	lw	a5,-36(s0)
    2750:	00078863          	beqz	a5,2760 <alt_dev_llist_insert+0x2c>
    2754:	fdc42783          	lw	a5,-36(s0)
    2758:	0087a783          	lw	a5,8(a5)
    275c:	00079e63          	bnez	a5,2778 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    2760:	f95ff0ef          	jal	ra,26f4 <alt_get_errno>
    2764:	00050713          	mv	a4,a0
    2768:	01600793          	li	a5,22
    276c:	00f72023          	sw	a5,0(a4)
    return -EINVAL;
    2770:	fea00793          	li	a5,-22
    2774:	0540006f          	j	27c8 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    2778:	fdc42783          	lw	a5,-36(s0)
    277c:	fd842703          	lw	a4,-40(s0)
    2780:	fee42423          	sw	a4,-24(s0)
    2784:	fef42623          	sw	a5,-20(s0)
  entry->previous = list;
    2788:	fec42783          	lw	a5,-20(s0)
    278c:	fe842703          	lw	a4,-24(s0)
    2790:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    2794:	fe842783          	lw	a5,-24(s0)
    2798:	0007a703          	lw	a4,0(a5)
    279c:	fec42783          	lw	a5,-20(s0)
    27a0:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    27a4:	fe842783          	lw	a5,-24(s0)
    27a8:	0007a783          	lw	a5,0(a5)
    27ac:	fec42703          	lw	a4,-20(s0)
    27b0:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    27b4:	fe842783          	lw	a5,-24(s0)
    27b8:	fec42703          	lw	a4,-20(s0)
    27bc:	00e7a023          	sw	a4,0(a5)
}
    27c0:	00000013          	nop

  return 0;  
    27c4:	00000793          	li	a5,0
}
    27c8:	00078513          	mv	a0,a5
    27cc:	02c12083          	lw	ra,44(sp)
    27d0:	02812403          	lw	s0,40(sp)
    27d4:	03010113          	addi	sp,sp,48
    27d8:	00008067          	ret

000027dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    27dc:	fe010113          	addi	sp,sp,-32
    27e0:	00112e23          	sw	ra,28(sp)
    27e4:	00812c23          	sw	s0,24(sp)
    27e8:	02010413          	addi	s0,sp,32
  constructor* ctor;

  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    27ec:	000087b7          	lui	a5,0x8
    27f0:	c5878793          	addi	a5,a5,-936 # 7c58 <__init_array_start+0x4>
    27f4:	fef42623          	sw	a5,-20(s0)
    27f8:	01c0006f          	j	2814 <_do_ctors+0x38>
        (*ctor) (); 
    27fc:	fec42783          	lw	a5,-20(s0)
    2800:	0007a783          	lw	a5,0(a5)
    2804:	000780e7          	jalr	a5
  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    2808:	fec42783          	lw	a5,-20(s0)
    280c:	ffc78793          	addi	a5,a5,-4
    2810:	fef42623          	sw	a5,-20(s0)
    2814:	fec42703          	lw	a4,-20(s0)
    2818:	000087b7          	lui	a5,0x8
    281c:	c5478793          	addi	a5,a5,-940 # 7c54 <__init_array_start>
    2820:	fcf77ee3          	bgeu	a4,a5,27fc <_do_ctors+0x20>
}
    2824:	00000013          	nop
    2828:	00000013          	nop
    282c:	01c12083          	lw	ra,28(sp)
    2830:	01812403          	lw	s0,24(sp)
    2834:	02010113          	addi	sp,sp,32
    2838:	00008067          	ret

0000283c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    283c:	fe010113          	addi	sp,sp,-32
    2840:	00112e23          	sw	ra,28(sp)
    2844:	00812c23          	sw	s0,24(sp)
    2848:	02010413          	addi	s0,sp,32
  destructor* dtor;

  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    284c:	000087b7          	lui	a5,0x8
    2850:	c5878793          	addi	a5,a5,-936 # 7c58 <__init_array_start+0x4>
    2854:	fef42623          	sw	a5,-20(s0)
    2858:	01c0006f          	j	2874 <_do_dtors+0x38>
        (*dtor) (); 
    285c:	fec42783          	lw	a5,-20(s0)
    2860:	0007a783          	lw	a5,0(a5)
    2864:	000780e7          	jalr	a5
  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    2868:	fec42783          	lw	a5,-20(s0)
    286c:	ffc78793          	addi	a5,a5,-4
    2870:	fef42623          	sw	a5,-20(s0)
    2874:	fec42703          	lw	a4,-20(s0)
    2878:	000087b7          	lui	a5,0x8
    287c:	c5c78793          	addi	a5,a5,-932 # 7c5c <__fini_array_end>
    2880:	fcf77ee3          	bgeu	a4,a5,285c <_do_dtors+0x20>
}
    2884:	00000013          	nop
    2888:	00000013          	nop
    288c:	01c12083          	lw	ra,28(sp)
    2890:	01812403          	lw	s0,24(sp)
    2894:	02010113          	addi	sp,sp,32
    2898:	00008067          	ret

0000289c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    289c:	fd010113          	addi	sp,sp,-48
    28a0:	02112623          	sw	ra,44(sp)
    28a4:	02812423          	sw	s0,40(sp)
    28a8:	03010413          	addi	s0,sp,48
    28ac:	fca42e23          	sw	a0,-36(s0)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    28b0:	81818593          	addi	a1,gp,-2024 # 9980 <alt_flash_dev_list>
    28b4:	fdc42503          	lw	a0,-36(s0)
    28b8:	159000ef          	jal	ra,3210 <alt_find_dev>
    28bc:	fea42623          	sw	a0,-20(s0)

  if ((dev) && dev->open)
    28c0:	fec42783          	lw	a5,-20(s0)
    28c4:	02078663          	beqz	a5,28f0 <alt_flash_open_dev+0x54>
    28c8:	fec42783          	lw	a5,-20(s0)
    28cc:	00c7a783          	lw	a5,12(a5)
    28d0:	02078063          	beqz	a5,28f0 <alt_flash_open_dev+0x54>
  {
    return dev->open(dev, name);
    28d4:	fec42783          	lw	a5,-20(s0)
    28d8:	00c7a783          	lw	a5,12(a5)
    28dc:	fdc42583          	lw	a1,-36(s0)
    28e0:	fec42503          	lw	a0,-20(s0)
    28e4:	000780e7          	jalr	a5
    28e8:	00050793          	mv	a5,a0
    28ec:	0080006f          	j	28f4 <alt_flash_open_dev+0x58>
  }

  return dev;
    28f0:	fec42783          	lw	a5,-20(s0)
}
    28f4:	00078513          	mv	a0,a5
    28f8:	02c12083          	lw	ra,44(sp)
    28fc:	02812403          	lw	s0,40(sp)
    2900:	03010113          	addi	sp,sp,48
    2904:	00008067          	ret

00002908 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    2908:	fe010113          	addi	sp,sp,-32
    290c:	00112e23          	sw	ra,28(sp)
    2910:	00812c23          	sw	s0,24(sp)
    2914:	02010413          	addi	s0,sp,32
    2918:	fea42623          	sw	a0,-20(s0)
  if (fd && fd->close)
    291c:	fec42783          	lw	a5,-20(s0)
    2920:	02078263          	beqz	a5,2944 <alt_flash_close_dev+0x3c>
    2924:	fec42783          	lw	a5,-20(s0)
    2928:	0107a783          	lw	a5,16(a5)
    292c:	00078c63          	beqz	a5,2944 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
    2930:	fec42783          	lw	a5,-20(s0)
    2934:	0107a783          	lw	a5,16(a5)
    2938:	fec42503          	lw	a0,-20(s0)
    293c:	000780e7          	jalr	a5
  }
  return;
    2940:	00000013          	nop
    2944:	00000013          	nop
}
    2948:	01c12083          	lw	ra,28(sp)
    294c:	01812403          	lw	s0,24(sp)
    2950:	02010113          	addi	sp,sp,32
    2954:	00008067          	ret

00002958 <alt_flash_device_register>:

int alt_flash_device_register( alt_flash_fd* fd)
{
    2958:	fe010113          	addi	sp,sp,-32
    295c:	00112e23          	sw	ra,28(sp)
    2960:	00812c23          	sw	s0,24(sp)
    2964:	02010413          	addi	s0,sp,32
    2968:	fea42623          	sw	a0,-20(s0)
  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    296c:	81818593          	addi	a1,gp,-2024 # 9980 <alt_flash_dev_list>
    2970:	fec42503          	lw	a0,-20(s0)
    2974:	dc1ff0ef          	jal	ra,2734 <alt_dev_llist_insert>
    2978:	00050793          	mv	a5,a0
}
    297c:	00078513          	mv	a0,a5
    2980:	01c12083          	lw	ra,28(sp)
    2984:	01812403          	lw	s0,24(sp)
    2988:	02010113          	addi	sp,sp,32
    298c:	00008067          	ret

00002990 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int 
alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2990:	fd010113          	addi	sp,sp,-48
    2994:	02112623          	sw	ra,44(sp)
    2998:	02812423          	sw	s0,40(sp)
    299c:	03010413          	addi	s0,sp,48
    29a0:	fea42623          	sw	a0,-20(s0)
    29a4:	feb42423          	sw	a1,-24(s0)
    29a8:	fec42223          	sw	a2,-28(s0)
    29ac:	fed42023          	sw	a3,-32(s0)
    29b0:	fce42e23          	sw	a4,-36(s0)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    29b4:	fdc42703          	lw	a4,-36(s0)
    29b8:	fe042683          	lw	a3,-32(s0)
    29bc:	fe442603          	lw	a2,-28(s0)
    29c0:	fe842583          	lw	a1,-24(s0)
    29c4:	fec42503          	lw	a0,-20(s0)
    29c8:	01c000ef          	jal	ra,29e4 <alt_iic_isr_register>
    29cc:	00050793          	mv	a5,a0
}  
    29d0:	00078513          	mv	a0,a5
    29d4:	02c12083          	lw	ra,44(sp)
    29d8:	02812403          	lw	s0,40(sp)
    29dc:	03010113          	addi	sp,sp,48
    29e0:	00008067          	ret

000029e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    29e4:	fa010113          	addi	sp,sp,-96
    29e8:	04812e23          	sw	s0,92(sp)
    29ec:	06010413          	addi	s0,sp,96
    29f0:	faa42e23          	sw	a0,-68(s0)
    29f4:	fab42c23          	sw	a1,-72(s0)
    29f8:	fac42a23          	sw	a2,-76(s0)
    29fc:	fad42823          	sw	a3,-80(s0)
    2a00:	fae42623          	sw	a4,-84(s0)
  int rc = -EINVAL;  
    2a04:	fea00793          	li	a5,-22
    2a08:	fcf42223          	sw	a5,-60(s0)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    2a0c:	fb842783          	lw	a5,-72(s0)
    2a10:	fcf42423          	sw	a5,-56(s0)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2a14:	fc842703          	lw	a4,-56(s0)
    2a18:	00f00793          	li	a5,15
    2a1c:	12e7c463          	blt	a5,a4,2b44 <alt_iic_isr_register+0x160>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    2a20:	00800793          	li	a5,8
    2a24:	3007b7f3          	csrrc	a5,mstatus,a5
    2a28:	fcf42823          	sw	a5,-48(s0)
    return context;
    2a2c:	fd042783          	lw	a5,-48(s0)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    2a30:	fcf42623          	sw	a5,-52(s0)

    alt_irq[id].handler = isr;
    2a34:	8a818713          	addi	a4,gp,-1880 # 9a10 <alt_irq>
    2a38:	fc842783          	lw	a5,-56(s0)
    2a3c:	00379793          	slli	a5,a5,0x3
    2a40:	00f707b3          	add	a5,a4,a5
    2a44:	fb442703          	lw	a4,-76(s0)
    2a48:	00e7a023          	sw	a4,0(a5)
    alt_irq[id].context = isr_context;
    2a4c:	8a818713          	addi	a4,gp,-1880 # 9a10 <alt_irq>
    2a50:	fc842783          	lw	a5,-56(s0)
    2a54:	00379793          	slli	a5,a5,0x3
    2a58:	00f707b3          	add	a5,a4,a5
    2a5c:	fb042703          	lw	a4,-80(s0)
    2a60:	00e7a223          	sw	a4,4(a5)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2a64:	fb442783          	lw	a5,-76(s0)
    2a68:	06078263          	beqz	a5,2acc <alt_iic_isr_register+0xe8>
    2a6c:	fc842783          	lw	a5,-56(s0)
    2a70:	fbc42703          	lw	a4,-68(s0)
    2a74:	fce42a23          	sw	a4,-44(s0)
    2a78:	fcf42c23          	sw	a5,-40(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    2a7c:	fd842703          	lw	a4,-40(s0)
    2a80:	00f00793          	li	a5,15
    2a84:	00e7e863          	bltu	a5,a4,2a94 <alt_iic_isr_register+0xb0>
    2a88:	fd842783          	lw	a5,-40(s0)
    2a8c:	01078793          	addi	a5,a5,16
    2a90:	0080006f          	j	2a98 <alt_iic_isr_register+0xb4>
    2a94:	fff00793          	li	a5,-1
    2a98:	fcf42e23          	sw	a5,-36(s0)
    if (rc < 0)
    2a9c:	fdc42783          	lw	a5,-36(s0)
    2aa0:	0007d663          	bgez	a5,2aac <alt_iic_isr_register+0xc8>
        return rc;
    2aa4:	fdc42783          	lw	a5,-36(s0)
    2aa8:	0800006f          	j	2b28 <alt_iic_isr_register+0x144>
        irq = (alt_u32)rc;
    2aac:	fdc42783          	lw	a5,-36(s0)
    2ab0:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    2ab4:	fd842783          	lw	a5,-40(s0)
    2ab8:	00100713          	li	a4,1
    2abc:	00f717b3          	sll	a5,a4,a5
    2ac0:	3047a073          	csrs	mie,a5
    return 0;
    2ac4:	00000793          	li	a5,0
    2ac8:	0600006f          	j	2b28 <alt_iic_isr_register+0x144>
    2acc:	fc842783          	lw	a5,-56(s0)
    2ad0:	fbc42703          	lw	a4,-68(s0)
    2ad4:	fee42023          	sw	a4,-32(s0)
    2ad8:	fef42223          	sw	a5,-28(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    2adc:	fe442703          	lw	a4,-28(s0)
    2ae0:	00f00793          	li	a5,15
    2ae4:	00e7e863          	bltu	a5,a4,2af4 <alt_iic_isr_register+0x110>
    2ae8:	fe442783          	lw	a5,-28(s0)
    2aec:	01078793          	addi	a5,a5,16
    2af0:	0080006f          	j	2af8 <alt_iic_isr_register+0x114>
    2af4:	fff00793          	li	a5,-1
    2af8:	fef42423          	sw	a5,-24(s0)
    if (rc < 0)
    2afc:	fe842783          	lw	a5,-24(s0)
    2b00:	0007d663          	bgez	a5,2b0c <alt_iic_isr_register+0x128>
        return rc;
    2b04:	fe842783          	lw	a5,-24(s0)
    2b08:	0200006f          	j	2b28 <alt_iic_isr_register+0x144>
        irq = (alt_u32)rc;
    2b0c:	fe842783          	lw	a5,-24(s0)
    2b10:	fef42223          	sw	a5,-28(s0)
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    2b14:	fe442783          	lw	a5,-28(s0)
    2b18:	00100713          	li	a4,1
    2b1c:	00f717b3          	sll	a5,a4,a5
    2b20:	3047b073          	csrc	mie,a5
    return 0;
    2b24:	00000793          	li	a5,0
    2b28:	fcf42223          	sw	a5,-60(s0)
    2b2c:	fcc42783          	lw	a5,-52(s0)
    2b30:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    2b34:	fec42783          	lw	a5,-20(s0)
    2b38:	0087f793          	andi	a5,a5,8
    2b3c:	3007a073          	csrs	mstatus,a5
}
    2b40:	00000013          	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    2b44:	fc442783          	lw	a5,-60(s0)
}
    2b48:	00078513          	mv	a0,a5
    2b4c:	05c12403          	lw	s0,92(sp)
    2b50:	06010113          	addi	sp,sp,96
    2b54:	00008067          	ret

00002b58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2b58:	fd010113          	addi	sp,sp,-48
    2b5c:	02112623          	sw	ra,44(sp)
    2b60:	02812423          	sw	s0,40(sp)
    2b64:	03010413          	addi	s0,sp,48
    2b68:	fca42e23          	sw	a0,-36(s0)
    2b6c:	fcb42c23          	sw	a1,-40(s0)
    2b70:	fcc42a23          	sw	a2,-44(s0)
    2b74:	fcd42823          	sw	a3,-48(s0)
  int old;

  old = open (name, flags, mode);
    2b78:	fd042603          	lw	a2,-48(s0)
    2b7c:	fd442583          	lw	a1,-44(s0)
    2b80:	fd842503          	lw	a0,-40(s0)
    2b84:	63c020ef          	jal	ra,51c0 <open>
    2b88:	fea42623          	sw	a0,-20(s0)

  if (old >= 0)
    2b8c:	fec42783          	lw	a5,-20(s0)
    2b90:	0807c863          	bltz	a5,2c20 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    2b94:	000097b7          	lui	a5,0x9
    2b98:	fb878693          	addi	a3,a5,-72 # 8fb8 <alt_fd_list>
    2b9c:	fec42703          	lw	a4,-20(s0)
    2ba0:	00070793          	mv	a5,a4
    2ba4:	00179793          	slli	a5,a5,0x1
    2ba8:	00e787b3          	add	a5,a5,a4
    2bac:	00279793          	slli	a5,a5,0x2
    2bb0:	00f687b3          	add	a5,a3,a5
    2bb4:	0007a703          	lw	a4,0(a5)
    2bb8:	fdc42783          	lw	a5,-36(s0)
    2bbc:	00e7a023          	sw	a4,0(a5)
    fd->priv     = alt_fd_list[old].priv;
    2bc0:	000097b7          	lui	a5,0x9
    2bc4:	fb878693          	addi	a3,a5,-72 # 8fb8 <alt_fd_list>
    2bc8:	fec42703          	lw	a4,-20(s0)
    2bcc:	00070793          	mv	a5,a4
    2bd0:	00179793          	slli	a5,a5,0x1
    2bd4:	00e787b3          	add	a5,a5,a4
    2bd8:	00279793          	slli	a5,a5,0x2
    2bdc:	00f687b3          	add	a5,a3,a5
    2be0:	0047a703          	lw	a4,4(a5)
    2be4:	fdc42783          	lw	a5,-36(s0)
    2be8:	00e7a223          	sw	a4,4(a5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2bec:	000097b7          	lui	a5,0x9
    2bf0:	fb878693          	addi	a3,a5,-72 # 8fb8 <alt_fd_list>
    2bf4:	fec42703          	lw	a4,-20(s0)
    2bf8:	00070793          	mv	a5,a4
    2bfc:	00179793          	slli	a5,a5,0x1
    2c00:	00e787b3          	add	a5,a5,a4
    2c04:	00279793          	slli	a5,a5,0x2
    2c08:	00f687b3          	add	a5,a3,a5
    2c0c:	0087a703          	lw	a4,8(a5)
    2c10:	fdc42783          	lw	a5,-36(s0)
    2c14:	00e7a423          	sw	a4,8(a5)

    alt_release_fd (old);
    2c18:	fec42503          	lw	a0,-20(s0)
    2c1c:	090000ef          	jal	ra,2cac <alt_release_fd>
  }
} 
    2c20:	00000013          	nop
    2c24:	02c12083          	lw	ra,44(sp)
    2c28:	02812403          	lw	s0,40(sp)
    2c2c:	03010113          	addi	sp,sp,48
    2c30:	00008067          	ret

00002c34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2c34:	fe010113          	addi	sp,sp,-32
    2c38:	00112e23          	sw	ra,28(sp)
    2c3c:	00812c23          	sw	s0,24(sp)
    2c40:	02010413          	addi	s0,sp,32
    2c44:	fea42623          	sw	a0,-20(s0)
    2c48:	feb42423          	sw	a1,-24(s0)
    2c4c:	fec42223          	sw	a2,-28(s0)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2c50:	1ff00693          	li	a3,511
    2c54:	00100613          	li	a2,1
    2c58:	fec42583          	lw	a1,-20(s0)
    2c5c:	000097b7          	lui	a5,0x9
    2c60:	fc478513          	addi	a0,a5,-60 # 8fc4 <alt_fd_list+0xc>
    2c64:	ef5ff0ef          	jal	ra,2b58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2c68:	1ff00693          	li	a3,511
    2c6c:	00000613          	li	a2,0
    2c70:	fe842583          	lw	a1,-24(s0)
    2c74:	000097b7          	lui	a5,0x9
    2c78:	fb878513          	addi	a0,a5,-72 # 8fb8 <alt_fd_list>
    2c7c:	eddff0ef          	jal	ra,2b58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2c80:	1ff00693          	li	a3,511
    2c84:	00100613          	li	a2,1
    2c88:	fe442583          	lw	a1,-28(s0)
    2c8c:	000097b7          	lui	a5,0x9
    2c90:	fd078513          	addi	a0,a5,-48 # 8fd0 <alt_fd_list+0x18>
    2c94:	ec5ff0ef          	jal	ra,2b58 <alt_open_fd>
}  
    2c98:	00000013          	nop
    2c9c:	01c12083          	lw	ra,28(sp)
    2ca0:	01812403          	lw	s0,24(sp)
    2ca4:	02010113          	addi	sp,sp,32
    2ca8:	00008067          	ret

00002cac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2cac:	fe010113          	addi	sp,sp,-32
    2cb0:	00812e23          	sw	s0,28(sp)
    2cb4:	02010413          	addi	s0,sp,32
    2cb8:	fea42623          	sw	a0,-20(s0)
  if (fd > 2)
    2cbc:	fec42703          	lw	a4,-20(s0)
    2cc0:	00200793          	li	a5,2
    2cc4:	04e7d663          	bge	a5,a4,2d10 <alt_release_fd+0x64>
  {
    alt_fd_list[fd].fd_flags = 0;
    2cc8:	000097b7          	lui	a5,0x9
    2ccc:	fb878693          	addi	a3,a5,-72 # 8fb8 <alt_fd_list>
    2cd0:	fec42703          	lw	a4,-20(s0)
    2cd4:	00070793          	mv	a5,a4
    2cd8:	00179793          	slli	a5,a5,0x1
    2cdc:	00e787b3          	add	a5,a5,a4
    2ce0:	00279793          	slli	a5,a5,0x2
    2ce4:	00f687b3          	add	a5,a3,a5
    2ce8:	0007a423          	sw	zero,8(a5)
    alt_fd_list[fd].dev      = 0;
    2cec:	000097b7          	lui	a5,0x9
    2cf0:	fb878693          	addi	a3,a5,-72 # 8fb8 <alt_fd_list>
    2cf4:	fec42703          	lw	a4,-20(s0)
    2cf8:	00070793          	mv	a5,a4
    2cfc:	00179793          	slli	a5,a5,0x1
    2d00:	00e787b3          	add	a5,a5,a4
    2d04:	00279793          	slli	a5,a5,0x2
    2d08:	00f687b3          	add	a5,a3,a5
    2d0c:	0007a023          	sw	zero,0(a5)
  }
}
    2d10:	00000013          	nop
    2d14:	01c12403          	lw	s0,28(sp)
    2d18:	02010113          	addi	sp,sp,32
    2d1c:	00008067          	ret

00002d20 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2d20:	fd010113          	addi	sp,sp,-48
    2d24:	02812623          	sw	s0,44(sp)
    2d28:	03010413          	addi	s0,sp,48
    2d2c:	fca42e23          	sw	a0,-36(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    2d30:	00800793          	li	a5,8
    2d34:	3007b7f3          	csrrc	a5,mstatus,a5
    2d38:	fef42623          	sw	a5,-20(s0)
    return context;
    2d3c:	fec42783          	lw	a5,-20(s0)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2d40:	fef42023          	sw	a5,-32(s0)
  alt_llist_remove (&alarm->llist);
    2d44:	fdc42783          	lw	a5,-36(s0)
    2d48:	fef42423          	sw	a5,-24(s0)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2d4c:	fe842783          	lw	a5,-24(s0)
    2d50:	0007a783          	lw	a5,0(a5)
    2d54:	fe842703          	lw	a4,-24(s0)
    2d58:	00472703          	lw	a4,4(a4)
    2d5c:	00e7a223          	sw	a4,4(a5)
  entry->previous->next = entry->next;
    2d60:	fe842783          	lw	a5,-24(s0)
    2d64:	0047a783          	lw	a5,4(a5)
    2d68:	fe842703          	lw	a4,-24(s0)
    2d6c:	00072703          	lw	a4,0(a4)
    2d70:	00e7a023          	sw	a4,0(a5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2d74:	fe842783          	lw	a5,-24(s0)
    2d78:	fe842703          	lw	a4,-24(s0)
    2d7c:	00e7a223          	sw	a4,4(a5)
  entry->next     = entry;
    2d80:	fe842783          	lw	a5,-24(s0)
    2d84:	fe842703          	lw	a4,-24(s0)
    2d88:	00e7a023          	sw	a4,0(a5)
} 
    2d8c:	00000013          	nop
    2d90:	fe042783          	lw	a5,-32(s0)
    2d94:	fef42223          	sw	a5,-28(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    2d98:	fe442783          	lw	a5,-28(s0)
    2d9c:	0087f793          	andi	a5,a5,8
    2da0:	3007a073          	csrs	mstatus,a5
}
    2da4:	00000013          	nop
  alt_irq_enable_all (irq_context);
}
    2da8:	00000013          	nop
    2dac:	02c12403          	lw	s0,44(sp)
    2db0:	03010113          	addi	sp,sp,48
    2db4:	00008067          	ret

00002db8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2db8:	fe010113          	addi	sp,sp,-32
    2dbc:	00112e23          	sw	ra,28(sp)
    2dc0:	00812c23          	sw	s0,24(sp)
    2dc4:	01212a23          	sw	s2,20(sp)
    2dc8:	01312823          	sw	s3,16(sp)
    2dcc:	02010413          	addi	s0,sp,32
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2dd0:	82018793          	addi	a5,gp,-2016 # 9988 <alt_alarm_list>
    2dd4:	0007a783          	lw	a5,0(a5)
    2dd8:	fef42223          	sw	a5,-28(s0)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2ddc:	8601a703          	lw	a4,-1952(gp) # 99c8 <_alt_nticks>
    2de0:	8641a783          	lw	a5,-1948(gp) # 99cc <_alt_nticks+0x4>
    2de4:	00100513          	li	a0,1
    2de8:	00000593          	li	a1,0
    2dec:	00a70633          	add	a2,a4,a0
    2df0:	00060813          	mv	a6,a2
    2df4:	00e83833          	sltu	a6,a6,a4
    2df8:	00b786b3          	add	a3,a5,a1
    2dfc:	00d807b3          	add	a5,a6,a3
    2e00:	00078693          	mv	a3,a5
    2e04:	00060713          	mv	a4,a2
    2e08:	00068793          	mv	a5,a3
    2e0c:	86e1a023          	sw	a4,-1952(gp) # 99c8 <_alt_nticks>
    2e10:	86f1a223          	sw	a5,-1948(gp) # 99cc <_alt_nticks+0x4>
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2e14:	0c40006f          	j	2ed8 <alt_tick+0x120>
  {
    next = (alt_alarm*) alarm->llist.next;
    2e18:	fe442783          	lw	a5,-28(s0)
    2e1c:	0007a783          	lw	a5,0(a5)
    2e20:	fef42423          	sw	a5,-24(s0)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    2e24:	fe442783          	lw	a5,-28(s0)
    2e28:	0087a603          	lw	a2,8(a5)
    2e2c:	00c7a683          	lw	a3,12(a5)
    2e30:	8601a703          	lw	a4,-1952(gp) # 99c8 <_alt_nticks>
    2e34:	8641a783          	lw	a5,-1948(gp) # 99cc <_alt_nticks+0x4>
    2e38:	00068513          	mv	a0,a3
    2e3c:	00078593          	mv	a1,a5
    2e40:	08a5e863          	bltu	a1,a0,2ed0 <alt_tick+0x118>
    2e44:	00068513          	mv	a0,a3
    2e48:	00078593          	mv	a1,a5
    2e4c:	00b51863          	bne	a0,a1,2e5c <alt_tick+0xa4>
    2e50:	00060693          	mv	a3,a2
    2e54:	00070793          	mv	a5,a4
    2e58:	06d7ec63          	bltu	a5,a3,2ed0 <alt_tick+0x118>
    {
      next_callback = alarm->callback (alarm->context);
    2e5c:	fe442783          	lw	a5,-28(s0)
    2e60:	0107a783          	lw	a5,16(a5)
    2e64:	fe442703          	lw	a4,-28(s0)
    2e68:	01472703          	lw	a4,20(a4)
    2e6c:	00070513          	mv	a0,a4
    2e70:	000780e7          	jalr	a5
    2e74:	fea42623          	sw	a0,-20(s0)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2e78:	fec42783          	lw	a5,-20(s0)
    2e7c:	00079863          	bnez	a5,2e8c <alt_tick+0xd4>
      {
        alt_alarm_stop (alarm);
    2e80:	fe442503          	lw	a0,-28(s0)
    2e84:	e9dff0ef          	jal	ra,2d20 <alt_alarm_stop>
    2e88:	0480006f          	j	2ed0 <alt_tick+0x118>
      }
      else
      {
        alarm->time += next_callback;
    2e8c:	fe442783          	lw	a5,-28(s0)
    2e90:	0087a703          	lw	a4,8(a5)
    2e94:	00c7a783          	lw	a5,12(a5)
    2e98:	fec42683          	lw	a3,-20(s0)
    2e9c:	00068913          	mv	s2,a3
    2ea0:	00000993          	li	s3,0
    2ea4:	01270633          	add	a2,a4,s2
    2ea8:	00060593          	mv	a1,a2
    2eac:	00e5b5b3          	sltu	a1,a1,a4
    2eb0:	013786b3          	add	a3,a5,s3
    2eb4:	00d587b3          	add	a5,a1,a3
    2eb8:	00078693          	mv	a3,a5
    2ebc:	00060713          	mv	a4,a2
    2ec0:	00068793          	mv	a5,a3
    2ec4:	fe442683          	lw	a3,-28(s0)
    2ec8:	00e6a423          	sw	a4,8(a3)
    2ecc:	00f6a623          	sw	a5,12(a3)
      }
    }
    alarm = next;
    2ed0:	fe842783          	lw	a5,-24(s0)
    2ed4:	fef42223          	sw	a5,-28(s0)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    2ed8:	fe442703          	lw	a4,-28(s0)
    2edc:	82018793          	addi	a5,gp,-2016 # 9988 <alt_alarm_list>
    2ee0:	f2f71ce3          	bne	a4,a5,2e18 <alt_tick+0x60>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    2ee4:	00000013          	nop
}
    2ee8:	00000013          	nop
    2eec:	01c12083          	lw	ra,28(sp)
    2ef0:	01812403          	lw	s0,24(sp)
    2ef4:	01412903          	lw	s2,20(sp)
    2ef8:	01012983          	lw	s3,16(sp)
    2efc:	02010113          	addi	sp,sp,32
    2f00:	00008067          	ret

00002f04 <intel_niosv_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the mie
 * register so that all possible IRQs are disabled.
 */
void intel_niosv_irq_init(void) 
{
    2f04:	ff010113          	addi	sp,sp,-16
    2f08:	00812623          	sw	s0,12(sp)
    2f0c:	01010413          	addi	s0,sp,16
#if ALT_HAS_IRQ_SUPPORT
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, NIOSV_MIE_MASK);
    2f10:	fff00793          	li	a5,-1
    2f14:	3047b073          	csrc	mie,a5
#endif
}
    2f18:	00000013          	nop
    2f1c:	00c12403          	lw	s0,12(sp)
    2f20:	01010113          	addi	sp,sp,16
    2f24:	00008067          	ret

00002f28 <alt_timestamp_start>:
#define INTEL_NIOSV_TIMER_DEVICE_TYPE 2

#if (ALT_TIMESTAMP_CLK_TIMER_DEVICE_TYPE == INTEL_NIOSV_TIMER_DEVICE_TYPE)
alt_u64 alt_niosv_timestamp_offset = 0;

int alt_timestamp_start() {
    2f28:	ff010113          	addi	sp,sp,-16
    2f2c:	00112623          	sw	ra,12(sp)
    2f30:	00812423          	sw	s0,8(sp)
    2f34:	01010413          	addi	s0,sp,16
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval);

extern alt_u64 alt_niosv_timestamp_offset;

static ALT_INLINE int ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_start() {
    alt_niosv_timestamp_offset = alt_niosv_mtime_get();
    2f38:	0a4000ef          	jal	ra,2fdc <alt_niosv_mtime_get>
    2f3c:	00050713          	mv	a4,a0
    2f40:	00058793          	mv	a5,a1
    2f44:	86e1a423          	sw	a4,-1944(gp) # 99d0 <alt_niosv_timestamp_offset>
    2f48:	86f1a623          	sw	a5,-1940(gp) # 99d4 <alt_niosv_timestamp_offset+0x4>
    return 0;
    2f4c:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_start();
}
    2f50:	00078513          	mv	a0,a5
    2f54:	00c12083          	lw	ra,12(sp)
    2f58:	00812403          	lw	s0,8(sp)
    2f5c:	01010113          	addi	sp,sp,16
    2f60:	00008067          	ret

00002f64 <alt_timestamp>:

alt_timestamp_type alt_timestamp() {
    2f64:	ff010113          	addi	sp,sp,-16
    2f68:	00112623          	sw	ra,12(sp)
    2f6c:	00812423          	sw	s0,8(sp)
    2f70:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp() {
    return alt_niosv_mtime_get() - alt_niosv_timestamp_offset;
    2f74:	068000ef          	jal	ra,2fdc <alt_niosv_mtime_get>
    2f78:	00050613          	mv	a2,a0
    2f7c:	00058693          	mv	a3,a1
    2f80:	8681a503          	lw	a0,-1944(gp) # 99d0 <alt_niosv_timestamp_offset>
    2f84:	86c1a583          	lw	a1,-1940(gp) # 99d4 <alt_niosv_timestamp_offset+0x4>
    2f88:	40a60733          	sub	a4,a2,a0
    2f8c:	00070813          	mv	a6,a4
    2f90:	01063833          	sltu	a6,a2,a6
    2f94:	40b687b3          	sub	a5,a3,a1
    2f98:	410786b3          	sub	a3,a5,a6
    2f9c:	00068793          	mv	a5,a3
    return alt_niosv_timer_timestamp();
}
    2fa0:	00070513          	mv	a0,a4
    2fa4:	00078593          	mv	a1,a5
    2fa8:	00c12083          	lw	ra,12(sp)
    2fac:	00812403          	lw	s0,8(sp)
    2fb0:	01010113          	addi	sp,sp,16
    2fb4:	00008067          	ret

00002fb8 <alt_timestamp_freq>:

alt_u32 alt_timestamp_freq() {
    2fb8:	ff010113          	addi	sp,sp,-16
    2fbc:	00812623          	sw	s0,12(sp)
    2fc0:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_freq() {
    return ALT_CPU_CPU_FREQ;
    2fc4:	05f5e7b7          	lui	a5,0x5f5e
    2fc8:	10078793          	addi	a5,a5,256 # 5f5e100 <__alt_data_end+0x3f5e100>
    return alt_niosv_timer_timestamp_freq();
}
    2fcc:	00078513          	mv	a0,a5
    2fd0:	00c12403          	lw	s0,12(sp)
    2fd4:	01010113          	addi	sp,sp,16
    2fd8:	00008067          	ret

00002fdc <alt_niosv_mtime_get>:
#endif

alt_u64 alt_niosv_mtime_get() {
    2fdc:	fe010113          	addi	sp,sp,-32
    2fe0:	00812e23          	sw	s0,28(sp)
    2fe4:	02010413          	addi	s0,sp,32
    alt_u32 lowbits;
    alt_u32 highbits;

    // Guard against rollover while acquiring each word
    do {
        highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4));
    2fe8:	02810337          	lui	t1,0x2810
    2fec:	00c30313          	addi	t1,t1,12 # 281000c <__alt_data_end+0x81000c>
    2ff0:	00032303          	lw	t1,0(t1)
    2ff4:	fe642423          	sw	t1,-24(s0)
        lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIME_ADDR);
    2ff8:	02810337          	lui	t1,0x2810
    2ffc:	00830313          	addi	t1,t1,8 # 2810008 <__alt_data_end+0x810008>
    3000:	00032303          	lw	t1,0(t1)
    3004:	fe642623          	sw	t1,-20(s0)
    } while (ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4)) != highbits);
    3008:	02810337          	lui	t1,0x2810
    300c:	00c30313          	addi	t1,t1,12 # 281000c <__alt_data_end+0x81000c>
    3010:	00032303          	lw	t1,0(t1)
    3014:	fe842e03          	lw	t3,-24(s0)
    3018:	fc6e18e3          	bne	t3,t1,2fe8 <alt_niosv_mtime_get+0xc>

    return (((alt_u64)highbits) << 32) | lowbits;
    301c:	fe842303          	lw	t1,-24(s0)
    3020:	00030813          	mv	a6,t1
    3024:	00000893          	li	a7,0
    3028:	00081793          	slli	a5,a6,0x0
    302c:	00000713          	li	a4,0
    3030:	fec42803          	lw	a6,-20(s0)
    3034:	00080613          	mv	a2,a6
    3038:	00000693          	li	a3,0
    303c:	00c76533          	or	a0,a4,a2
    3040:	00d7e5b3          	or	a1,a5,a3
    3044:	00050713          	mv	a4,a0
    3048:	00058793          	mv	a5,a1
}
    304c:	00070513          	mv	a0,a4
    3050:	00078593          	mv	a1,a5
    3054:	01c12403          	lw	s0,28(sp)
    3058:	02010113          	addi	sp,sp,32
    305c:	00008067          	ret

00003060 <alt_niosv_mtimecmp_set>:

void alt_niosv_mtimecmp_set(alt_u64 time) {
    3060:	fe010113          	addi	sp,sp,-32
    3064:	00812e23          	sw	s0,28(sp)
    3068:	02010413          	addi	s0,sp,32
    306c:	fea42423          	sw	a0,-24(s0)
    3070:	feb42623          	sw	a1,-20(s0)
    // Make sure to set the high word to a max value first to prevent triggering inadvertently
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = 0xFFFFFFFF;
    3074:	028106b7          	lui	a3,0x2810
    3078:	00468693          	addi	a3,a3,4 # 2810004 <__alt_data_end+0x810004>
    307c:	fff00613          	li	a2,-1
    3080:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR) = (alt_u32)time;
    3084:	028106b7          	lui	a3,0x2810
    3088:	fe842603          	lw	a2,-24(s0)
    308c:	00c6a023          	sw	a2,0(a3) # 2810000 <__alt_data_end+0x810000>
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = (alt_u32)(time >> 32);
    3090:	fec42683          	lw	a3,-20(s0)
    3094:	0006d713          	srli	a4,a3,0x0
    3098:	00000793          	li	a5,0
    309c:	028106b7          	lui	a3,0x2810
    30a0:	00468693          	addi	a3,a3,4 # 2810004 <__alt_data_end+0x810004>
    30a4:	00070793          	mv	a5,a4
    30a8:	00f6a023          	sw	a5,0(a3)
}
    30ac:	00000013          	nop
    30b0:	01c12403          	lw	s0,28(sp)
    30b4:	02010113          	addi	sp,sp,32
    30b8:	00008067          	ret

000030bc <alt_niosv_mtimecmp_get>:

alt_u64 alt_niosv_mtimecmp_get() {
    30bc:	fe010113          	addi	sp,sp,-32
    30c0:	00812e23          	sw	s0,28(sp)
    30c4:	02010413          	addi	s0,sp,32
    alt_u32 lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR);
    30c8:	02810337          	lui	t1,0x2810
    30cc:	00032303          	lw	t1,0(t1) # 2810000 <__alt_data_end+0x810000>
    30d0:	fe642423          	sw	t1,-24(s0)
    alt_u32 highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4));
    30d4:	02810337          	lui	t1,0x2810
    30d8:	00430313          	addi	t1,t1,4 # 2810004 <__alt_data_end+0x810004>
    30dc:	00032303          	lw	t1,0(t1)
    30e0:	fe642623          	sw	t1,-20(s0)
    return (((alt_u64)highbits) << 32) | lowbits;
    30e4:	fec42303          	lw	t1,-20(s0)
    30e8:	00030813          	mv	a6,t1
    30ec:	00000893          	li	a7,0
    30f0:	00081793          	slli	a5,a6,0x0
    30f4:	00000713          	li	a4,0
    30f8:	fe842803          	lw	a6,-24(s0)
    30fc:	00080613          	mv	a2,a6
    3100:	00000693          	li	a3,0
    3104:	00c76533          	or	a0,a4,a2
    3108:	00d7e5b3          	or	a1,a5,a3
    310c:	00050713          	mv	a4,a0
    3110:	00058793          	mv	a5,a1
}
    3114:	00070513          	mv	a0,a4
    3118:	00078593          	mv	a1,a5
    311c:	01c12403          	lw	s0,28(sp)
    3120:	02010113          	addi	sp,sp,32
    3124:	00008067          	ret

00003128 <alt_niosv_timer_sc_isr>:
// Let's the OS port handles the machine timer configuration and interrupt if
// the OS port has it (ex: FreeRTOS).
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {}
void alt_niosv_mtimecmp_interrupt_init() {}
#else
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {
    3128:	fc010113          	addi	sp,sp,-64
    312c:	02112e23          	sw	ra,60(sp)
    3130:	02812c23          	sw	s0,56(sp)
    3134:	04010413          	addi	s0,sp,64
    3138:	fca42623          	sw	a0,-52(s0)
    313c:	fcb42423          	sw	a1,-56(s0)
    3140:	fcc42223          	sw	a2,-60(s0)
    // Schedule the next interrupt.  This is done first since who knows how long
    // the following code takes, and the contract is ticks per second, irrespective
    // of how long a given clock tick may take.

    alt_u64 curr_time = alt_niosv_mtime_get();
    3144:	e99ff0ef          	jal	ra,2fdc <alt_niosv_mtime_get>
    3148:	fea42423          	sw	a0,-24(s0)
    314c:	feb42623          	sw	a1,-20(s0)
    alt_niosv_mtimecmp_set(curr_time + MTIMECMP_DELTA_AMT);
    3150:	fe842703          	lw	a4,-24(s0)
    3154:	fec42783          	lw	a5,-20(s0)
    3158:	00018537          	lui	a0,0x18
    315c:	6a050513          	addi	a0,a0,1696 # 186a0 <__global_pointer$+0xe538>
    3160:	00000593          	li	a1,0
    3164:	00a70633          	add	a2,a4,a0
    3168:	00060813          	mv	a6,a2
    316c:	00e83833          	sltu	a6,a6,a4
    3170:	00b786b3          	add	a3,a5,a1
    3174:	00d807b3          	add	a5,a6,a3
    3178:	00078693          	mv	a3,a5
    317c:	00060713          	mv	a4,a2
    3180:	00068793          	mv	a5,a3
    3184:	00070513          	mv	a0,a4
    3188:	00078593          	mv	a1,a5
    318c:	ed5ff0ef          	jal	ra,3060 <alt_niosv_mtimecmp_set>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    3190:	00800793          	li	a5,8
    3194:	3007b7f3          	csrrc	a5,mstatus,a5
    3198:	fef42223          	sw	a5,-28(s0)
    return context;
    319c:	fe442783          	lw	a5,-28(s0)

    /* 
    * Notify the system of a clock tick. disable interrupts 
    * during this time to safely support ISR preemption
    */
    alt_irq_context cpu_sr = alt_irq_disable_all();
    31a0:	fcf42e23          	sw	a5,-36(s0)
    alt_tick();
    31a4:	c15ff0ef          	jal	ra,2db8 <alt_tick>
    31a8:	fdc42783          	lw	a5,-36(s0)
    31ac:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    31b0:	fe042783          	lw	a5,-32(s0)
    31b4:	0087f793          	andi	a5,a5,8
    31b8:	3007a073          	csrs	mstatus,a5
}
    31bc:	00000013          	nop
    alt_irq_enable_all(cpu_sr);
}
    31c0:	00000013          	nop
    31c4:	03c12083          	lw	ra,60(sp)
    31c8:	03812403          	lw	s0,56(sp)
    31cc:	04010113          	addi	sp,sp,64
    31d0:	00008067          	ret

000031d4 <alt_niosv_mtimecmp_interrupt_init>:

void alt_niosv_mtimecmp_interrupt_init() {
    31d4:	ff010113          	addi	sp,sp,-16
    31d8:	00112623          	sw	ra,12(sp)
    31dc:	00812423          	sw	s0,8(sp)
    31e0:	01010413          	addi	s0,sp,16
    alt_niosv_mtimecmp_set(MTIMECMP_MAX_VALUE);
    31e4:	fff00513          	li	a0,-1
    31e8:	fff00593          	li	a1,-1
    31ec:	e75ff0ef          	jal	ra,3060 <alt_niosv_mtimecmp_set>
    NIOSV_SET_CSR(NIOSV_MIE_CSR, (0x1 << NIOSV_TIMER_IRQ));
    31f0:	08000793          	li	a5,128
    31f4:	3047a073          	csrs	mie,a5
}
    31f8:	00000013          	nop
    alt_niosv_enable_timer_interrupt();
}
    31fc:	00000013          	nop
    3200:	00c12083          	lw	ra,12(sp)
    3204:	00812403          	lw	s0,8(sp)
    3208:	01010113          	addi	sp,sp,16
    320c:	00008067          	ret

00003210 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    3210:	fd010113          	addi	sp,sp,-48
    3214:	02812623          	sw	s0,44(sp)
    3218:	03010413          	addi	s0,sp,48
    321c:	fca42e23          	sw	a0,-36(s0)
    3220:	fcb42c23          	sw	a1,-40(s0)
    alt_dev* next=NULL; 
    3224:	fe042223          	sw	zero,-28(s0)
    alt_32   len=0;
    3228:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    322c:	3e800793          	li	a5,1000
    3230:	fef42623          	sw	a5,-20(s0)
    
    if (llist == NULL) { return NULL; }
    3234:	fd842783          	lw	a5,-40(s0)
    3238:	00079663          	bnez	a5,3244 <alt_find_dev+0x34>
    323c:	00000793          	li	a5,0
    3240:	0e00006f          	j	3320 <alt_find_dev+0x110>
    next = (alt_dev*) llist->next;
    3244:	fd842783          	lw	a5,-40(s0)
    3248:	0007a783          	lw	a5,0(a5)
    324c:	fef42223          	sw	a5,-28(s0)
    /*
     * Check each list entry in turn, until a match is found, or we reach the
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
    3250:	0c00006f          	j	3310 <alt_find_dev+0x100>
    {
        len=0;
    3254:	fe042423          	sw	zero,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    3258:	0380006f          	j	3290 <alt_find_dev+0x80>
        {
            if (next->name[len] != name[len]) { break; }
    325c:	fe442783          	lw	a5,-28(s0)
    3260:	0087a703          	lw	a4,8(a5)
    3264:	fe842783          	lw	a5,-24(s0)
    3268:	00f707b3          	add	a5,a4,a5
    326c:	0007c703          	lbu	a4,0(a5)
    3270:	fe842783          	lw	a5,-24(s0)
    3274:	fdc42683          	lw	a3,-36(s0)
    3278:	00f687b3          	add	a5,a3,a5
    327c:	0007c783          	lbu	a5,0(a5)
    3280:	04f71663          	bne	a4,a5,32cc <alt_find_dev+0xbc>
            len++;
    3284:	fe842783          	lw	a5,-24(s0)
    3288:	00178793          	addi	a5,a5,1
    328c:	fef42423          	sw	a5,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    3290:	fe842783          	lw	a5,-24(s0)
    3294:	fdc42703          	lw	a4,-36(s0)
    3298:	00f707b3          	add	a5,a4,a5
    329c:	0007c783          	lbu	a5,0(a5)
    32a0:	02078863          	beqz	a5,32d0 <alt_find_dev+0xc0>
    32a4:	fe442783          	lw	a5,-28(s0)
    32a8:	0087a703          	lw	a4,8(a5)
    32ac:	fe842783          	lw	a5,-24(s0)
    32b0:	00f707b3          	add	a5,a4,a5
    32b4:	0007c783          	lbu	a5,0(a5)
    32b8:	00078c63          	beqz	a5,32d0 <alt_find_dev+0xc0>
    32bc:	fe842703          	lw	a4,-24(s0)
    32c0:	fec42783          	lw	a5,-20(s0)
    32c4:	f8f74ce3          	blt	a4,a5,325c <alt_find_dev+0x4c>
    32c8:	0080006f          	j	32d0 <alt_find_dev+0xc0>
            if (next->name[len] != name[len]) { break; }
    32cc:	00000013          	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
    32d0:	fe842783          	lw	a5,-24(s0)
    32d4:	fdc42703          	lw	a4,-36(s0)
    32d8:	00f707b3          	add	a5,a4,a5
    32dc:	0007c783          	lbu	a5,0(a5)
    32e0:	02079263          	bnez	a5,3304 <alt_find_dev+0xf4>
    32e4:	fe442783          	lw	a5,-28(s0)
    32e8:	0087a703          	lw	a4,8(a5)
    32ec:	fe842783          	lw	a5,-24(s0)
    32f0:	00f707b3          	add	a5,a4,a5
    32f4:	0007c783          	lbu	a5,0(a5)
    32f8:	00079663          	bnez	a5,3304 <alt_find_dev+0xf4>
    32fc:	fe442783          	lw	a5,-28(s0)
    3300:	0200006f          	j	3320 <alt_find_dev+0x110>

        next = (alt_dev*) next->llist.next;
    3304:	fe442783          	lw	a5,-28(s0)
    3308:	0007a783          	lw	a5,0(a5)
    330c:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) llist)
    3310:	fe442703          	lw	a4,-28(s0)
    3314:	fd842783          	lw	a5,-40(s0)
    3318:	f2f71ee3          	bne	a4,a5,3254 <alt_find_dev+0x44>
    }
  
    /* No match found */
  
    return NULL;
    331c:	00000793          	li	a5,0
}
    3320:	00078513          	mv	a0,a5
    3324:	02c12403          	lw	s0,44(sp)
    3328:	03010113          	addi	sp,sp,48
    332c:	00008067          	ret

00003330 <atexit>:
    3330:	00050593          	mv	a1,a0
    3334:	00000693          	li	a3,0
    3338:	00000613          	li	a2,0
    333c:	00000513          	li	a0,0
    3340:	7390106f          	j	5278 <__register_exitproc>

00003344 <exit>:
    3344:	ff010113          	addi	sp,sp,-16
    3348:	00000593          	li	a1,0
    334c:	00812423          	sw	s0,8(sp)
    3350:	00112623          	sw	ra,12(sp)
    3354:	00050413          	mv	s0,a0
    3358:	008020ef          	jal	ra,5360 <__call_exitprocs>
    335c:	00005517          	auipc	a0,0x5
    3360:	a2c52503          	lw	a0,-1492(a0) # 7d88 <_global_impure_ptr>
    3364:	03c52783          	lw	a5,60(a0)
    3368:	00078463          	beqz	a5,3370 <exit+0x2c>
    336c:	000780e7          	jalr	a5
    3370:	00040513          	mv	a0,s0
    3374:	41d030ef          	jal	ra,6f90 <_exit>

00003378 <__sflush_r>:
    3378:	00c59783          	lh	a5,12(a1)
    337c:	fe010113          	addi	sp,sp,-32
    3380:	00812c23          	sw	s0,24(sp)
    3384:	01312623          	sw	s3,12(sp)
    3388:	00112e23          	sw	ra,28(sp)
    338c:	00912a23          	sw	s1,20(sp)
    3390:	01212823          	sw	s2,16(sp)
    3394:	0087f713          	andi	a4,a5,8
    3398:	00058413          	mv	s0,a1
    339c:	00050993          	mv	s3,a0
    33a0:	12071263          	bnez	a4,34c4 <__sflush_r+0x14c>
    33a4:	00001737          	lui	a4,0x1
    33a8:	80070713          	addi	a4,a4,-2048 # 800 <altera_avalon_jtag_uart_irq+0xa4>
    33ac:	0045a683          	lw	a3,4(a1)
    33b0:	00e7e733          	or	a4,a5,a4
    33b4:	00e59623          	sh	a4,12(a1)
    33b8:	18d05863          	blez	a3,3548 <__sflush_r+0x1d0>
    33bc:	02842803          	lw	a6,40(s0)
    33c0:	0e080263          	beqz	a6,34a4 <__sflush_r+0x12c>
    33c4:	00c7d793          	srli	a5,a5,0xc
    33c8:	0009a483          	lw	s1,0(s3)
    33cc:	0017f793          	andi	a5,a5,1
    33d0:	0009a023          	sw	zero,0(s3)
    33d4:	01c42583          	lw	a1,28(s0)
    33d8:	18079063          	bnez	a5,3558 <__sflush_r+0x1e0>
    33dc:	00000613          	li	a2,0
    33e0:	00100693          	li	a3,1
    33e4:	00098513          	mv	a0,s3
    33e8:	000800e7          	jalr	a6
    33ec:	fff00793          	li	a5,-1
    33f0:	00050613          	mv	a2,a0
    33f4:	1af50063          	beq	a0,a5,3594 <__sflush_r+0x21c>
    33f8:	00c41703          	lh	a4,12(s0)
    33fc:	02842803          	lw	a6,40(s0)
    3400:	01c42583          	lw	a1,28(s0)
    3404:	00477713          	andi	a4,a4,4
    3408:	00070e63          	beqz	a4,3424 <__sflush_r+0xac>
    340c:	00442703          	lw	a4,4(s0)
    3410:	03042783          	lw	a5,48(s0)
    3414:	40e60633          	sub	a2,a2,a4
    3418:	00078663          	beqz	a5,3424 <__sflush_r+0xac>
    341c:	03c42783          	lw	a5,60(s0)
    3420:	40f60633          	sub	a2,a2,a5
    3424:	00000693          	li	a3,0
    3428:	00098513          	mv	a0,s3
    342c:	000800e7          	jalr	a6
    3430:	fff00793          	li	a5,-1
    3434:	12f51663          	bne	a0,a5,3560 <__sflush_r+0x1e8>
    3438:	0009a683          	lw	a3,0(s3)
    343c:	01d00793          	li	a5,29
    3440:	0cd7ee63          	bltu	a5,a3,351c <__sflush_r+0x1a4>
    3444:	dfc00737          	lui	a4,0xdfc00
    3448:	ffe70713          	addi	a4,a4,-2 # dfbffffe <__alt_data_end+0xddbffffe>
    344c:	40d75733          	sra	a4,a4,a3
    3450:	00177713          	andi	a4,a4,1
    3454:	00c41783          	lh	a5,12(s0)
    3458:	0c071463          	bnez	a4,3520 <__sflush_r+0x1a8>
    345c:	01042603          	lw	a2,16(s0)
    3460:	fffff737          	lui	a4,0xfffff
    3464:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfdfff7ff>
    3468:	00e7f733          	and	a4,a5,a4
    346c:	00c7d793          	srli	a5,a5,0xc
    3470:	00e41623          	sh	a4,12(s0)
    3474:	00042223          	sw	zero,4(s0)
    3478:	00c42023          	sw	a2,0(s0)
    347c:	0017f793          	andi	a5,a5,1
    3480:	12079c63          	bnez	a5,35b8 <__sflush_r+0x240>
    3484:	03042583          	lw	a1,48(s0)
    3488:	0099a023          	sw	s1,0(s3)
    348c:	00058c63          	beqz	a1,34a4 <__sflush_r+0x12c>
    3490:	04040793          	addi	a5,s0,64
    3494:	00f58663          	beq	a1,a5,34a0 <__sflush_r+0x128>
    3498:	00098513          	mv	a0,s3
    349c:	085000ef          	jal	ra,3d20 <_free_r>
    34a0:	02042823          	sw	zero,48(s0)
    34a4:	00000513          	li	a0,0
    34a8:	01c12083          	lw	ra,28(sp)
    34ac:	01812403          	lw	s0,24(sp)
    34b0:	01412483          	lw	s1,20(sp)
    34b4:	01012903          	lw	s2,16(sp)
    34b8:	00c12983          	lw	s3,12(sp)
    34bc:	02010113          	addi	sp,sp,32
    34c0:	00008067          	ret
    34c4:	0105a903          	lw	s2,16(a1)
    34c8:	fc090ee3          	beqz	s2,34a4 <__sflush_r+0x12c>
    34cc:	0005a483          	lw	s1,0(a1)
    34d0:	0037f793          	andi	a5,a5,3
    34d4:	0125a023          	sw	s2,0(a1)
    34d8:	412484b3          	sub	s1,s1,s2
    34dc:	00000713          	li	a4,0
    34e0:	00079463          	bnez	a5,34e8 <__sflush_r+0x170>
    34e4:	0145a703          	lw	a4,20(a1)
    34e8:	00e42423          	sw	a4,8(s0)
    34ec:	00904863          	bgtz	s1,34fc <__sflush_r+0x184>
    34f0:	fb5ff06f          	j	34a4 <__sflush_r+0x12c>
    34f4:	00a90933          	add	s2,s2,a0
    34f8:	fa9056e3          	blez	s1,34a4 <__sflush_r+0x12c>
    34fc:	02442783          	lw	a5,36(s0)
    3500:	01c42583          	lw	a1,28(s0)
    3504:	00048693          	mv	a3,s1
    3508:	00090613          	mv	a2,s2
    350c:	00098513          	mv	a0,s3
    3510:	000780e7          	jalr	a5
    3514:	40a484b3          	sub	s1,s1,a0
    3518:	fca04ee3          	bgtz	a0,34f4 <__sflush_r+0x17c>
    351c:	00c41783          	lh	a5,12(s0)
    3520:	0407e793          	ori	a5,a5,64
    3524:	01c12083          	lw	ra,28(sp)
    3528:	00f41623          	sh	a5,12(s0)
    352c:	01812403          	lw	s0,24(sp)
    3530:	01412483          	lw	s1,20(sp)
    3534:	01012903          	lw	s2,16(sp)
    3538:	00c12983          	lw	s3,12(sp)
    353c:	fff00513          	li	a0,-1
    3540:	02010113          	addi	sp,sp,32
    3544:	00008067          	ret
    3548:	03c5a683          	lw	a3,60(a1)
    354c:	e6d048e3          	bgtz	a3,33bc <__sflush_r+0x44>
    3550:	00000513          	li	a0,0
    3554:	f55ff06f          	j	34a8 <__sflush_r+0x130>
    3558:	05042603          	lw	a2,80(s0)
    355c:	ea9ff06f          	j	3404 <__sflush_r+0x8c>
    3560:	00c41783          	lh	a5,12(s0)
    3564:	01042683          	lw	a3,16(s0)
    3568:	fffff737          	lui	a4,0xfffff
    356c:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfdfff7ff>
    3570:	00e7f733          	and	a4,a5,a4
    3574:	00c7d793          	srli	a5,a5,0xc
    3578:	00e41623          	sh	a4,12(s0)
    357c:	00042223          	sw	zero,4(s0)
    3580:	00d42023          	sw	a3,0(s0)
    3584:	0017f793          	andi	a5,a5,1
    3588:	ee078ee3          	beqz	a5,3484 <__sflush_r+0x10c>
    358c:	04a42823          	sw	a0,80(s0)
    3590:	ef5ff06f          	j	3484 <__sflush_r+0x10c>
    3594:	0009a783          	lw	a5,0(s3)
    3598:	e60780e3          	beqz	a5,33f8 <__sflush_r+0x80>
    359c:	01d00713          	li	a4,29
    35a0:	00e78663          	beq	a5,a4,35ac <__sflush_r+0x234>
    35a4:	01600713          	li	a4,22
    35a8:	f6e79ae3          	bne	a5,a4,351c <__sflush_r+0x1a4>
    35ac:	0099a023          	sw	s1,0(s3)
    35b0:	00000513          	li	a0,0
    35b4:	ef5ff06f          	j	34a8 <__sflush_r+0x130>
    35b8:	ec0696e3          	bnez	a3,3484 <__sflush_r+0x10c>
    35bc:	04a42823          	sw	a0,80(s0)
    35c0:	ec5ff06f          	j	3484 <__sflush_r+0x10c>

000035c4 <_fflush_r>:
    35c4:	ff010113          	addi	sp,sp,-16
    35c8:	00812423          	sw	s0,8(sp)
    35cc:	00912223          	sw	s1,4(sp)
    35d0:	00112623          	sw	ra,12(sp)
    35d4:	01212023          	sw	s2,0(sp)
    35d8:	00050493          	mv	s1,a0
    35dc:	00058413          	mv	s0,a1
    35e0:	00050663          	beqz	a0,35ec <_fflush_r+0x28>
    35e4:	03852783          	lw	a5,56(a0)
    35e8:	06078463          	beqz	a5,3650 <_fflush_r+0x8c>
    35ec:	00c41783          	lh	a5,12(s0)
    35f0:	00000913          	li	s2,0
    35f4:	04078063          	beqz	a5,3634 <_fflush_r+0x70>
    35f8:	06442703          	lw	a4,100(s0)
    35fc:	00177713          	andi	a4,a4,1
    3600:	00071663          	bnez	a4,360c <_fflush_r+0x48>
    3604:	2007f793          	andi	a5,a5,512
    3608:	04078863          	beqz	a5,3658 <_fflush_r+0x94>
    360c:	00040593          	mv	a1,s0
    3610:	00048513          	mv	a0,s1
    3614:	d65ff0ef          	jal	ra,3378 <__sflush_r>
    3618:	06442783          	lw	a5,100(s0)
    361c:	00050913          	mv	s2,a0
    3620:	0017f793          	andi	a5,a5,1
    3624:	00079863          	bnez	a5,3634 <_fflush_r+0x70>
    3628:	00c45783          	lhu	a5,12(s0)
    362c:	2007f793          	andi	a5,a5,512
    3630:	04078863          	beqz	a5,3680 <_fflush_r+0xbc>
    3634:	00c12083          	lw	ra,12(sp)
    3638:	00812403          	lw	s0,8(sp)
    363c:	00412483          	lw	s1,4(sp)
    3640:	00090513          	mv	a0,s2
    3644:	00012903          	lw	s2,0(sp)
    3648:	01010113          	addi	sp,sp,16
    364c:	00008067          	ret
    3650:	234000ef          	jal	ra,3884 <__sinit>
    3654:	f99ff06f          	j	35ec <_fflush_r+0x28>
    3658:	05842503          	lw	a0,88(s0)
    365c:	335000ef          	jal	ra,4190 <__retarget_lock_acquire_recursive>
    3660:	00040593          	mv	a1,s0
    3664:	00048513          	mv	a0,s1
    3668:	d11ff0ef          	jal	ra,3378 <__sflush_r>
    366c:	06442783          	lw	a5,100(s0)
    3670:	00050913          	mv	s2,a0
    3674:	0017f793          	andi	a5,a5,1
    3678:	fa079ee3          	bnez	a5,3634 <_fflush_r+0x70>
    367c:	fadff06f          	j	3628 <_fflush_r+0x64>
    3680:	05842503          	lw	a0,88(s0)
    3684:	325000ef          	jal	ra,41a8 <__retarget_lock_release_recursive>
    3688:	00c12083          	lw	ra,12(sp)
    368c:	00812403          	lw	s0,8(sp)
    3690:	00412483          	lw	s1,4(sp)
    3694:	00090513          	mv	a0,s2
    3698:	00012903          	lw	s2,0(sp)
    369c:	01010113          	addi	sp,sp,16
    36a0:	00008067          	ret

000036a4 <fflush>:
    36a4:	0a050a63          	beqz	a0,3758 <fflush+0xb4>
    36a8:	ff010113          	addi	sp,sp,-16
    36ac:	00812423          	sw	s0,8(sp)
    36b0:	01212023          	sw	s2,0(sp)
    36b4:	00112623          	sw	ra,12(sp)
    36b8:	00912223          	sw	s1,4(sp)
    36bc:	8281a903          	lw	s2,-2008(gp) # 9990 <_impure_ptr>
    36c0:	00050413          	mv	s0,a0
    36c4:	00090663          	beqz	s2,36d0 <fflush+0x2c>
    36c8:	03892783          	lw	a5,56(s2)
    36cc:	06078463          	beqz	a5,3734 <fflush+0x90>
    36d0:	00c41783          	lh	a5,12(s0)
    36d4:	00000493          	li	s1,0
    36d8:	04078063          	beqz	a5,3718 <fflush+0x74>
    36dc:	06442703          	lw	a4,100(s0)
    36e0:	00177713          	andi	a4,a4,1
    36e4:	00071663          	bnez	a4,36f0 <fflush+0x4c>
    36e8:	2007f793          	andi	a5,a5,512
    36ec:	04078a63          	beqz	a5,3740 <fflush+0x9c>
    36f0:	00040593          	mv	a1,s0
    36f4:	00090513          	mv	a0,s2
    36f8:	c81ff0ef          	jal	ra,3378 <__sflush_r>
    36fc:	06442783          	lw	a5,100(s0)
    3700:	00050493          	mv	s1,a0
    3704:	0017f793          	andi	a5,a5,1
    3708:	00079863          	bnez	a5,3718 <fflush+0x74>
    370c:	00c45783          	lhu	a5,12(s0)
    3710:	2007f793          	andi	a5,a5,512
    3714:	02078c63          	beqz	a5,374c <fflush+0xa8>
    3718:	00c12083          	lw	ra,12(sp)
    371c:	00812403          	lw	s0,8(sp)
    3720:	00012903          	lw	s2,0(sp)
    3724:	00048513          	mv	a0,s1
    3728:	00412483          	lw	s1,4(sp)
    372c:	01010113          	addi	sp,sp,16
    3730:	00008067          	ret
    3734:	00090513          	mv	a0,s2
    3738:	14c000ef          	jal	ra,3884 <__sinit>
    373c:	f95ff06f          	j	36d0 <fflush+0x2c>
    3740:	05842503          	lw	a0,88(s0)
    3744:	24d000ef          	jal	ra,4190 <__retarget_lock_acquire_recursive>
    3748:	fa9ff06f          	j	36f0 <fflush+0x4c>
    374c:	05842503          	lw	a0,88(s0)
    3750:	259000ef          	jal	ra,41a8 <__retarget_lock_release_recursive>
    3754:	fc5ff06f          	j	3718 <fflush+0x74>
    3758:	00000597          	auipc	a1,0x0
    375c:	e6c58593          	addi	a1,a1,-404 # 35c4 <_fflush_r>
    3760:	00004517          	auipc	a0,0x4
    3764:	62852503          	lw	a0,1576(a0) # 7d88 <_global_impure_ptr>
    3768:	1610006f          	j	40c8 <_fwalk_reent>

0000376c <_cleanup_r>:
    376c:	00002597          	auipc	a1,0x2
    3770:	d9858593          	addi	a1,a1,-616 # 5504 <_fclose_r>
    3774:	1550006f          	j	40c8 <_fwalk_reent>

00003778 <__fp_lock>:
    3778:	06452783          	lw	a5,100(a0)
    377c:	0017f793          	andi	a5,a5,1
    3780:	00079863          	bnez	a5,3790 <__fp_lock+0x18>
    3784:	00c55783          	lhu	a5,12(a0)
    3788:	2007f793          	andi	a5,a5,512
    378c:	00078663          	beqz	a5,3798 <__fp_lock+0x20>
    3790:	00000513          	li	a0,0
    3794:	00008067          	ret
    3798:	05852503          	lw	a0,88(a0)
    379c:	ff010113          	addi	sp,sp,-16
    37a0:	00112623          	sw	ra,12(sp)
    37a4:	1ed000ef          	jal	ra,4190 <__retarget_lock_acquire_recursive>
    37a8:	00c12083          	lw	ra,12(sp)
    37ac:	00000513          	li	a0,0
    37b0:	01010113          	addi	sp,sp,16
    37b4:	00008067          	ret

000037b8 <__fp_unlock>:
    37b8:	06452783          	lw	a5,100(a0)
    37bc:	0017f793          	andi	a5,a5,1
    37c0:	00079863          	bnez	a5,37d0 <__fp_unlock+0x18>
    37c4:	00c55783          	lhu	a5,12(a0)
    37c8:	2007f793          	andi	a5,a5,512
    37cc:	00078663          	beqz	a5,37d8 <__fp_unlock+0x20>
    37d0:	00000513          	li	a0,0
    37d4:	00008067          	ret
    37d8:	05852503          	lw	a0,88(a0)
    37dc:	ff010113          	addi	sp,sp,-16
    37e0:	00112623          	sw	ra,12(sp)
    37e4:	1c5000ef          	jal	ra,41a8 <__retarget_lock_release_recursive>
    37e8:	00c12083          	lw	ra,12(sp)
    37ec:	00000513          	li	a0,0
    37f0:	01010113          	addi	sp,sp,16
    37f4:	00008067          	ret

000037f8 <__sfmoreglue>:
    37f8:	ff010113          	addi	sp,sp,-16
    37fc:	fff58793          	addi	a5,a1,-1
    3800:	00812423          	sw	s0,8(sp)
    3804:	00179413          	slli	s0,a5,0x1
    3808:	00f40433          	add	s0,s0,a5
    380c:	00241413          	slli	s0,s0,0x2
    3810:	00f40433          	add	s0,s0,a5
    3814:	00341413          	slli	s0,s0,0x3
    3818:	01212023          	sw	s2,0(sp)
    381c:	00058913          	mv	s2,a1
    3820:	07440593          	addi	a1,s0,116
    3824:	00912223          	sw	s1,4(sp)
    3828:	00112623          	sw	ra,12(sp)
    382c:	181000ef          	jal	ra,41ac <_malloc_r>
    3830:	00050493          	mv	s1,a0
    3834:	02050063          	beqz	a0,3854 <__sfmoreglue+0x5c>
    3838:	00c50513          	addi	a0,a0,12
    383c:	0004a023          	sw	zero,0(s1)
    3840:	0124a223          	sw	s2,4(s1)
    3844:	00a4a423          	sw	a0,8(s1)
    3848:	06840613          	addi	a2,s0,104
    384c:	00000593          	li	a1,0
    3850:	28c010ef          	jal	ra,4adc <memset>
    3854:	00c12083          	lw	ra,12(sp)
    3858:	00812403          	lw	s0,8(sp)
    385c:	00012903          	lw	s2,0(sp)
    3860:	00048513          	mv	a0,s1
    3864:	00412483          	lw	s1,4(sp)
    3868:	01010113          	addi	sp,sp,16
    386c:	00008067          	ret

00003870 <_cleanup>:
    3870:	00002597          	auipc	a1,0x2
    3874:	c9458593          	addi	a1,a1,-876 # 5504 <_fclose_r>
    3878:	00004517          	auipc	a0,0x4
    387c:	51052503          	lw	a0,1296(a0) # 7d88 <_global_impure_ptr>
    3880:	0490006f          	j	40c8 <_fwalk_reent>

00003884 <__sinit>:
    3884:	fe010113          	addi	sp,sp,-32
    3888:	00912a23          	sw	s1,20(sp)
    388c:	00050493          	mv	s1,a0
    3890:	89018513          	addi	a0,gp,-1904 # 99f8 <__lock___sinit_recursive_mutex>
    3894:	00112e23          	sw	ra,28(sp)
    3898:	00812c23          	sw	s0,24(sp)
    389c:	01212823          	sw	s2,16(sp)
    38a0:	01312623          	sw	s3,12(sp)
    38a4:	01412423          	sw	s4,8(sp)
    38a8:	01512223          	sw	s5,4(sp)
    38ac:	0e5000ef          	jal	ra,4190 <__retarget_lock_acquire_recursive>
    38b0:	0384a783          	lw	a5,56(s1)
    38b4:	14079863          	bnez	a5,3a04 <__sinit+0x180>
    38b8:	0044a403          	lw	s0,4(s1)
    38bc:	00000717          	auipc	a4,0x0
    38c0:	eb070713          	addi	a4,a4,-336 # 376c <_cleanup_r>
    38c4:	02e4ae23          	sw	a4,60(s1)
    38c8:	2ec48793          	addi	a5,s1,748
    38cc:	00300713          	li	a4,3
    38d0:	2ee4a223          	sw	a4,740(s1)
    38d4:	2ef4a423          	sw	a5,744(s1)
    38d8:	2e04a023          	sw	zero,736(s1)
    38dc:	00400793          	li	a5,4
    38e0:	00f42623          	sw	a5,12(s0)
    38e4:	00800613          	li	a2,8
    38e8:	00000593          	li	a1,0
    38ec:	00042023          	sw	zero,0(s0)
    38f0:	00042223          	sw	zero,4(s0)
    38f4:	00042423          	sw	zero,8(s0)
    38f8:	06042223          	sw	zero,100(s0)
    38fc:	00042823          	sw	zero,16(s0)
    3900:	00042a23          	sw	zero,20(s0)
    3904:	00042c23          	sw	zero,24(s0)
    3908:	05c40513          	addi	a0,s0,92
    390c:	1d0010ef          	jal	ra,4adc <memset>
    3910:	00001a97          	auipc	s5,0x1
    3914:	6aca8a93          	addi	s5,s5,1708 # 4fbc <__sread>
    3918:	00001a17          	auipc	s4,0x1
    391c:	708a0a13          	addi	s4,s4,1800 # 5020 <__swrite>
    3920:	00001997          	auipc	s3,0x1
    3924:	78898993          	addi	s3,s3,1928 # 50a8 <__sseek>
    3928:	00001917          	auipc	s2,0x1
    392c:	7f890913          	addi	s2,s2,2040 # 5120 <__sclose>
    3930:	05840513          	addi	a0,s0,88
    3934:	00842e23          	sw	s0,28(s0)
    3938:	03542023          	sw	s5,32(s0)
    393c:	03442223          	sw	s4,36(s0)
    3940:	03342423          	sw	s3,40(s0)
    3944:	03242623          	sw	s2,44(s0)
    3948:	039000ef          	jal	ra,4180 <__retarget_lock_init_recursive>
    394c:	0084a403          	lw	s0,8(s1)
    3950:	000107b7          	lui	a5,0x10
    3954:	00878793          	addi	a5,a5,8 # 10008 <__global_pointer$+0x5ea0>
    3958:	00f42623          	sw	a5,12(s0)
    395c:	00800613          	li	a2,8
    3960:	00000593          	li	a1,0
    3964:	00042023          	sw	zero,0(s0)
    3968:	00042223          	sw	zero,4(s0)
    396c:	00042423          	sw	zero,8(s0)
    3970:	06042223          	sw	zero,100(s0)
    3974:	00042823          	sw	zero,16(s0)
    3978:	00042a23          	sw	zero,20(s0)
    397c:	00042c23          	sw	zero,24(s0)
    3980:	05c40513          	addi	a0,s0,92
    3984:	158010ef          	jal	ra,4adc <memset>
    3988:	05840513          	addi	a0,s0,88
    398c:	00842e23          	sw	s0,28(s0)
    3990:	03542023          	sw	s5,32(s0)
    3994:	03442223          	sw	s4,36(s0)
    3998:	03342423          	sw	s3,40(s0)
    399c:	03242623          	sw	s2,44(s0)
    39a0:	7e0000ef          	jal	ra,4180 <__retarget_lock_init_recursive>
    39a4:	00c4a403          	lw	s0,12(s1)
    39a8:	000207b7          	lui	a5,0x20
    39ac:	01278793          	addi	a5,a5,18 # 20012 <__global_pointer$+0x15eaa>
    39b0:	00f42623          	sw	a5,12(s0)
    39b4:	00800613          	li	a2,8
    39b8:	00000593          	li	a1,0
    39bc:	00042023          	sw	zero,0(s0)
    39c0:	00042223          	sw	zero,4(s0)
    39c4:	00042423          	sw	zero,8(s0)
    39c8:	06042223          	sw	zero,100(s0)
    39cc:	00042823          	sw	zero,16(s0)
    39d0:	00042a23          	sw	zero,20(s0)
    39d4:	00042c23          	sw	zero,24(s0)
    39d8:	05c40513          	addi	a0,s0,92
    39dc:	100010ef          	jal	ra,4adc <memset>
    39e0:	05840513          	addi	a0,s0,88
    39e4:	00842e23          	sw	s0,28(s0)
    39e8:	03542023          	sw	s5,32(s0)
    39ec:	03442223          	sw	s4,36(s0)
    39f0:	03342423          	sw	s3,40(s0)
    39f4:	03242623          	sw	s2,44(s0)
    39f8:	788000ef          	jal	ra,4180 <__retarget_lock_init_recursive>
    39fc:	00100793          	li	a5,1
    3a00:	02f4ac23          	sw	a5,56(s1)
    3a04:	01812403          	lw	s0,24(sp)
    3a08:	01c12083          	lw	ra,28(sp)
    3a0c:	01412483          	lw	s1,20(sp)
    3a10:	01012903          	lw	s2,16(sp)
    3a14:	00c12983          	lw	s3,12(sp)
    3a18:	00812a03          	lw	s4,8(sp)
    3a1c:	00412a83          	lw	s5,4(sp)
    3a20:	89018513          	addi	a0,gp,-1904 # 99f8 <__lock___sinit_recursive_mutex>
    3a24:	02010113          	addi	sp,sp,32
    3a28:	7800006f          	j	41a8 <__retarget_lock_release_recursive>

00003a2c <__sfp>:
    3a2c:	fe010113          	addi	sp,sp,-32
    3a30:	01312623          	sw	s3,12(sp)
    3a34:	00050993          	mv	s3,a0
    3a38:	88c18513          	addi	a0,gp,-1908 # 99f4 <__lock___sfp_recursive_mutex>
    3a3c:	01212823          	sw	s2,16(sp)
    3a40:	00112e23          	sw	ra,28(sp)
    3a44:	00812c23          	sw	s0,24(sp)
    3a48:	00912a23          	sw	s1,20(sp)
    3a4c:	744000ef          	jal	ra,4190 <__retarget_lock_acquire_recursive>
    3a50:	00004917          	auipc	s2,0x4
    3a54:	33892903          	lw	s2,824(s2) # 7d88 <_global_impure_ptr>
    3a58:	03892783          	lw	a5,56(s2)
    3a5c:	0a078e63          	beqz	a5,3b18 <__sfp+0xec>
    3a60:	2e090913          	addi	s2,s2,736
    3a64:	fff00493          	li	s1,-1
    3a68:	00492783          	lw	a5,4(s2)
    3a6c:	00892403          	lw	s0,8(s2)
    3a70:	fff78793          	addi	a5,a5,-1
    3a74:	0007d863          	bgez	a5,3a84 <__sfp+0x58>
    3a78:	0900006f          	j	3b08 <__sfp+0xdc>
    3a7c:	06840413          	addi	s0,s0,104
    3a80:	08978463          	beq	a5,s1,3b08 <__sfp+0xdc>
    3a84:	00c41703          	lh	a4,12(s0)
    3a88:	fff78793          	addi	a5,a5,-1
    3a8c:	fe0718e3          	bnez	a4,3a7c <__sfp+0x50>
    3a90:	ffff07b7          	lui	a5,0xffff0
    3a94:	00178793          	addi	a5,a5,1 # ffff0001 <__alt_data_end+0xfdff0001>
    3a98:	00f42623          	sw	a5,12(s0)
    3a9c:	05840513          	addi	a0,s0,88
    3aa0:	06042223          	sw	zero,100(s0)
    3aa4:	6dc000ef          	jal	ra,4180 <__retarget_lock_init_recursive>
    3aa8:	88c18513          	addi	a0,gp,-1908 # 99f4 <__lock___sfp_recursive_mutex>
    3aac:	6fc000ef          	jal	ra,41a8 <__retarget_lock_release_recursive>
    3ab0:	00800613          	li	a2,8
    3ab4:	00042023          	sw	zero,0(s0)
    3ab8:	00042423          	sw	zero,8(s0)
    3abc:	00042223          	sw	zero,4(s0)
    3ac0:	00042823          	sw	zero,16(s0)
    3ac4:	00042a23          	sw	zero,20(s0)
    3ac8:	00042c23          	sw	zero,24(s0)
    3acc:	00000593          	li	a1,0
    3ad0:	05c40513          	addi	a0,s0,92
    3ad4:	008010ef          	jal	ra,4adc <memset>
    3ad8:	02042823          	sw	zero,48(s0)
    3adc:	02042a23          	sw	zero,52(s0)
    3ae0:	04042223          	sw	zero,68(s0)
    3ae4:	04042423          	sw	zero,72(s0)
    3ae8:	01c12083          	lw	ra,28(sp)
    3aec:	00040513          	mv	a0,s0
    3af0:	01812403          	lw	s0,24(sp)
    3af4:	01412483          	lw	s1,20(sp)
    3af8:	01012903          	lw	s2,16(sp)
    3afc:	00c12983          	lw	s3,12(sp)
    3b00:	02010113          	addi	sp,sp,32
    3b04:	00008067          	ret
    3b08:	00092403          	lw	s0,0(s2)
    3b0c:	00040c63          	beqz	s0,3b24 <__sfp+0xf8>
    3b10:	00040913          	mv	s2,s0
    3b14:	f55ff06f          	j	3a68 <__sfp+0x3c>
    3b18:	00090513          	mv	a0,s2
    3b1c:	d69ff0ef          	jal	ra,3884 <__sinit>
    3b20:	f41ff06f          	j	3a60 <__sfp+0x34>
    3b24:	1ac00593          	li	a1,428
    3b28:	00098513          	mv	a0,s3
    3b2c:	680000ef          	jal	ra,41ac <_malloc_r>
    3b30:	00050413          	mv	s0,a0
    3b34:	02050863          	beqz	a0,3b64 <__sfp+0x138>
    3b38:	00c50513          	addi	a0,a0,12
    3b3c:	00400793          	li	a5,4
    3b40:	00042023          	sw	zero,0(s0)
    3b44:	00f42223          	sw	a5,4(s0)
    3b48:	00a42423          	sw	a0,8(s0)
    3b4c:	1a000613          	li	a2,416
    3b50:	00000593          	li	a1,0
    3b54:	789000ef          	jal	ra,4adc <memset>
    3b58:	00892023          	sw	s0,0(s2)
    3b5c:	00040913          	mv	s2,s0
    3b60:	f09ff06f          	j	3a68 <__sfp+0x3c>
    3b64:	00092023          	sw	zero,0(s2)
    3b68:	88c18513          	addi	a0,gp,-1908 # 99f4 <__lock___sfp_recursive_mutex>
    3b6c:	63c000ef          	jal	ra,41a8 <__retarget_lock_release_recursive>
    3b70:	00c00793          	li	a5,12
    3b74:	00f9a023          	sw	a5,0(s3)
    3b78:	f71ff06f          	j	3ae8 <__sfp+0xbc>

00003b7c <__sfp_lock_acquire>:
    3b7c:	88c18513          	addi	a0,gp,-1908 # 99f4 <__lock___sfp_recursive_mutex>
    3b80:	6100006f          	j	4190 <__retarget_lock_acquire_recursive>

00003b84 <__sfp_lock_release>:
    3b84:	88c18513          	addi	a0,gp,-1908 # 99f4 <__lock___sfp_recursive_mutex>
    3b88:	6200006f          	j	41a8 <__retarget_lock_release_recursive>

00003b8c <__sinit_lock_acquire>:
    3b8c:	89018513          	addi	a0,gp,-1904 # 99f8 <__lock___sinit_recursive_mutex>
    3b90:	6000006f          	j	4190 <__retarget_lock_acquire_recursive>

00003b94 <__sinit_lock_release>:
    3b94:	89018513          	addi	a0,gp,-1904 # 99f8 <__lock___sinit_recursive_mutex>
    3b98:	6100006f          	j	41a8 <__retarget_lock_release_recursive>

00003b9c <__fp_lock_all>:
    3b9c:	ff010113          	addi	sp,sp,-16
    3ba0:	88c18513          	addi	a0,gp,-1908 # 99f4 <__lock___sfp_recursive_mutex>
    3ba4:	00112623          	sw	ra,12(sp)
    3ba8:	5e8000ef          	jal	ra,4190 <__retarget_lock_acquire_recursive>
    3bac:	00c12083          	lw	ra,12(sp)
    3bb0:	8281a503          	lw	a0,-2008(gp) # 9990 <_impure_ptr>
    3bb4:	00000597          	auipc	a1,0x0
    3bb8:	bc458593          	addi	a1,a1,-1084 # 3778 <__fp_lock>
    3bbc:	01010113          	addi	sp,sp,16
    3bc0:	4640006f          	j	4024 <_fwalk>

00003bc4 <__fp_unlock_all>:
    3bc4:	ff010113          	addi	sp,sp,-16
    3bc8:	00000597          	auipc	a1,0x0
    3bcc:	bf058593          	addi	a1,a1,-1040 # 37b8 <__fp_unlock>
    3bd0:	8281a503          	lw	a0,-2008(gp) # 9990 <_impure_ptr>
    3bd4:	00112623          	sw	ra,12(sp)
    3bd8:	44c000ef          	jal	ra,4024 <_fwalk>
    3bdc:	00c12083          	lw	ra,12(sp)
    3be0:	88c18513          	addi	a0,gp,-1908 # 99f4 <__lock___sfp_recursive_mutex>
    3be4:	01010113          	addi	sp,sp,16
    3be8:	5c00006f          	j	41a8 <__retarget_lock_release_recursive>

00003bec <_malloc_trim_r>:
    3bec:	fe010113          	addi	sp,sp,-32
    3bf0:	00812c23          	sw	s0,24(sp)
    3bf4:	00912a23          	sw	s1,20(sp)
    3bf8:	01212823          	sw	s2,16(sp)
    3bfc:	01312623          	sw	s3,12(sp)
    3c00:	01412423          	sw	s4,8(sp)
    3c04:	00058993          	mv	s3,a1
    3c08:	00112e23          	sw	ra,28(sp)
    3c0c:	00006a17          	auipc	s4,0x6
    3c10:	954a0a13          	addi	s4,s4,-1708 # 9560 <__malloc_av_>
    3c14:	00050913          	mv	s2,a0
    3c18:	7a1000ef          	jal	ra,4bb8 <__malloc_lock>
    3c1c:	008a2703          	lw	a4,8(s4)
    3c20:	000017b7          	lui	a5,0x1
    3c24:	fef78413          	addi	s0,a5,-17 # fef <altera_avalon_jtag_uart_write+0x20b>
    3c28:	00472483          	lw	s1,4(a4)
    3c2c:	ffc4f493          	andi	s1,s1,-4
    3c30:	00848433          	add	s0,s1,s0
    3c34:	41340433          	sub	s0,s0,s3
    3c38:	00c45413          	srli	s0,s0,0xc
    3c3c:	fff40413          	addi	s0,s0,-1
    3c40:	00c41413          	slli	s0,s0,0xc
    3c44:	00f44e63          	blt	s0,a5,3c60 <_malloc_trim_r+0x74>
    3c48:	00000593          	li	a1,0
    3c4c:	00090513          	mv	a0,s2
    3c50:	260010ef          	jal	ra,4eb0 <_sbrk_r>
    3c54:	008a2783          	lw	a5,8(s4)
    3c58:	009787b3          	add	a5,a5,s1
    3c5c:	02f50863          	beq	a0,a5,3c8c <_malloc_trim_r+0xa0>
    3c60:	00090513          	mv	a0,s2
    3c64:	75d000ef          	jal	ra,4bc0 <__malloc_unlock>
    3c68:	01c12083          	lw	ra,28(sp)
    3c6c:	01812403          	lw	s0,24(sp)
    3c70:	01412483          	lw	s1,20(sp)
    3c74:	01012903          	lw	s2,16(sp)
    3c78:	00c12983          	lw	s3,12(sp)
    3c7c:	00812a03          	lw	s4,8(sp)
    3c80:	00000513          	li	a0,0
    3c84:	02010113          	addi	sp,sp,32
    3c88:	00008067          	ret
    3c8c:	408005b3          	neg	a1,s0
    3c90:	00090513          	mv	a0,s2
    3c94:	21c010ef          	jal	ra,4eb0 <_sbrk_r>
    3c98:	fff00793          	li	a5,-1
    3c9c:	04f50863          	beq	a0,a5,3cec <_malloc_trim_r+0x100>
    3ca0:	92818713          	addi	a4,gp,-1752 # 9a90 <__malloc_current_mallinfo>
    3ca4:	00072783          	lw	a5,0(a4)
    3ca8:	008a2683          	lw	a3,8(s4)
    3cac:	408484b3          	sub	s1,s1,s0
    3cb0:	0014e493          	ori	s1,s1,1
    3cb4:	408787b3          	sub	a5,a5,s0
    3cb8:	00090513          	mv	a0,s2
    3cbc:	0096a223          	sw	s1,4(a3)
    3cc0:	00f72023          	sw	a5,0(a4)
    3cc4:	6fd000ef          	jal	ra,4bc0 <__malloc_unlock>
    3cc8:	01c12083          	lw	ra,28(sp)
    3ccc:	01812403          	lw	s0,24(sp)
    3cd0:	01412483          	lw	s1,20(sp)
    3cd4:	01012903          	lw	s2,16(sp)
    3cd8:	00c12983          	lw	s3,12(sp)
    3cdc:	00812a03          	lw	s4,8(sp)
    3ce0:	00100513          	li	a0,1
    3ce4:	02010113          	addi	sp,sp,32
    3ce8:	00008067          	ret
    3cec:	00000593          	li	a1,0
    3cf0:	00090513          	mv	a0,s2
    3cf4:	1bc010ef          	jal	ra,4eb0 <_sbrk_r>
    3cf8:	008a2703          	lw	a4,8(s4)
    3cfc:	00f00693          	li	a3,15
    3d00:	40e507b3          	sub	a5,a0,a4
    3d04:	f4f6dee3          	bge	a3,a5,3c60 <_malloc_trim_r+0x74>
    3d08:	82c1a683          	lw	a3,-2004(gp) # 9994 <__malloc_sbrk_base>
    3d0c:	40d50533          	sub	a0,a0,a3
    3d10:	0017e793          	ori	a5,a5,1
    3d14:	92a1a423          	sw	a0,-1752(gp) # 9a90 <__malloc_current_mallinfo>
    3d18:	00f72223          	sw	a5,4(a4)
    3d1c:	f45ff06f          	j	3c60 <_malloc_trim_r+0x74>

00003d20 <_free_r>:
    3d20:	18058263          	beqz	a1,3ea4 <_free_r+0x184>
    3d24:	ff010113          	addi	sp,sp,-16
    3d28:	00812423          	sw	s0,8(sp)
    3d2c:	00912223          	sw	s1,4(sp)
    3d30:	00058413          	mv	s0,a1
    3d34:	00050493          	mv	s1,a0
    3d38:	00112623          	sw	ra,12(sp)
    3d3c:	67d000ef          	jal	ra,4bb8 <__malloc_lock>
    3d40:	ffc42583          	lw	a1,-4(s0)
    3d44:	ff840713          	addi	a4,s0,-8
    3d48:	00006517          	auipc	a0,0x6
    3d4c:	81850513          	addi	a0,a0,-2024 # 9560 <__malloc_av_>
    3d50:	ffe5f793          	andi	a5,a1,-2
    3d54:	00f70633          	add	a2,a4,a5
    3d58:	00462683          	lw	a3,4(a2)
    3d5c:	00852803          	lw	a6,8(a0)
    3d60:	ffc6f693          	andi	a3,a3,-4
    3d64:	1ac80263          	beq	a6,a2,3f08 <_free_r+0x1e8>
    3d68:	00d62223          	sw	a3,4(a2)
    3d6c:	0015f593          	andi	a1,a1,1
    3d70:	00d60833          	add	a6,a2,a3
    3d74:	0a059063          	bnez	a1,3e14 <_free_r+0xf4>
    3d78:	ff842303          	lw	t1,-8(s0)
    3d7c:	00482583          	lw	a1,4(a6)
    3d80:	00005897          	auipc	a7,0x5
    3d84:	7e888893          	addi	a7,a7,2024 # 9568 <__malloc_av_+0x8>
    3d88:	40670733          	sub	a4,a4,t1
    3d8c:	00872803          	lw	a6,8(a4)
    3d90:	006787b3          	add	a5,a5,t1
    3d94:	0015f593          	andi	a1,a1,1
    3d98:	15180263          	beq	a6,a7,3edc <_free_r+0x1bc>
    3d9c:	00c72303          	lw	t1,12(a4)
    3da0:	00682623          	sw	t1,12(a6)
    3da4:	01032423          	sw	a6,8(t1)
    3da8:	1a058663          	beqz	a1,3f54 <_free_r+0x234>
    3dac:	0017e693          	ori	a3,a5,1
    3db0:	00d72223          	sw	a3,4(a4)
    3db4:	00f62023          	sw	a5,0(a2)
    3db8:	1ff00693          	li	a3,511
    3dbc:	06f6ec63          	bltu	a3,a5,3e34 <_free_r+0x114>
    3dc0:	ff87f693          	andi	a3,a5,-8
    3dc4:	00868693          	addi	a3,a3,8
    3dc8:	00452583          	lw	a1,4(a0)
    3dcc:	00d506b3          	add	a3,a0,a3
    3dd0:	0006a603          	lw	a2,0(a3)
    3dd4:	0057d813          	srli	a6,a5,0x5
    3dd8:	00100793          	li	a5,1
    3ddc:	010797b3          	sll	a5,a5,a6
    3de0:	00b7e7b3          	or	a5,a5,a1
    3de4:	ff868593          	addi	a1,a3,-8
    3de8:	00b72623          	sw	a1,12(a4)
    3dec:	00c72423          	sw	a2,8(a4)
    3df0:	00f52223          	sw	a5,4(a0)
    3df4:	00e6a023          	sw	a4,0(a3)
    3df8:	00e62623          	sw	a4,12(a2)
    3dfc:	00812403          	lw	s0,8(sp)
    3e00:	00c12083          	lw	ra,12(sp)
    3e04:	00048513          	mv	a0,s1
    3e08:	00412483          	lw	s1,4(sp)
    3e0c:	01010113          	addi	sp,sp,16
    3e10:	5b10006f          	j	4bc0 <__malloc_unlock>
    3e14:	00482583          	lw	a1,4(a6)
    3e18:	0015f593          	andi	a1,a1,1
    3e1c:	08058663          	beqz	a1,3ea8 <_free_r+0x188>
    3e20:	0017e693          	ori	a3,a5,1
    3e24:	fed42e23          	sw	a3,-4(s0)
    3e28:	00f62023          	sw	a5,0(a2)
    3e2c:	1ff00693          	li	a3,511
    3e30:	f8f6f8e3          	bgeu	a3,a5,3dc0 <_free_r+0xa0>
    3e34:	0097d693          	srli	a3,a5,0x9
    3e38:	00400613          	li	a2,4
    3e3c:	12d66063          	bltu	a2,a3,3f5c <_free_r+0x23c>
    3e40:	0067d693          	srli	a3,a5,0x6
    3e44:	03968593          	addi	a1,a3,57
    3e48:	03868613          	addi	a2,a3,56
    3e4c:	00359593          	slli	a1,a1,0x3
    3e50:	00b505b3          	add	a1,a0,a1
    3e54:	0005a683          	lw	a3,0(a1)
    3e58:	ff858593          	addi	a1,a1,-8
    3e5c:	00d59863          	bne	a1,a3,3e6c <_free_r+0x14c>
    3e60:	1540006f          	j	3fb4 <_free_r+0x294>
    3e64:	0086a683          	lw	a3,8(a3)
    3e68:	00d58863          	beq	a1,a3,3e78 <_free_r+0x158>
    3e6c:	0046a603          	lw	a2,4(a3)
    3e70:	ffc67613          	andi	a2,a2,-4
    3e74:	fec7e8e3          	bltu	a5,a2,3e64 <_free_r+0x144>
    3e78:	00c6a583          	lw	a1,12(a3)
    3e7c:	00b72623          	sw	a1,12(a4)
    3e80:	00d72423          	sw	a3,8(a4)
    3e84:	00812403          	lw	s0,8(sp)
    3e88:	00c12083          	lw	ra,12(sp)
    3e8c:	00e5a423          	sw	a4,8(a1)
    3e90:	00048513          	mv	a0,s1
    3e94:	00412483          	lw	s1,4(sp)
    3e98:	00e6a623          	sw	a4,12(a3)
    3e9c:	01010113          	addi	sp,sp,16
    3ea0:	5210006f          	j	4bc0 <__malloc_unlock>
    3ea4:	00008067          	ret
    3ea8:	00d787b3          	add	a5,a5,a3
    3eac:	00005897          	auipc	a7,0x5
    3eb0:	6bc88893          	addi	a7,a7,1724 # 9568 <__malloc_av_+0x8>
    3eb4:	00862683          	lw	a3,8(a2)
    3eb8:	0d168c63          	beq	a3,a7,3f90 <_free_r+0x270>
    3ebc:	00c62803          	lw	a6,12(a2)
    3ec0:	0017e593          	ori	a1,a5,1
    3ec4:	00f70633          	add	a2,a4,a5
    3ec8:	0106a623          	sw	a6,12(a3)
    3ecc:	00d82423          	sw	a3,8(a6)
    3ed0:	00b72223          	sw	a1,4(a4)
    3ed4:	00f62023          	sw	a5,0(a2)
    3ed8:	ee1ff06f          	j	3db8 <_free_r+0x98>
    3edc:	12059c63          	bnez	a1,4014 <_free_r+0x2f4>
    3ee0:	00862583          	lw	a1,8(a2)
    3ee4:	00c62603          	lw	a2,12(a2)
    3ee8:	00f686b3          	add	a3,a3,a5
    3eec:	0016e793          	ori	a5,a3,1
    3ef0:	00c5a623          	sw	a2,12(a1)
    3ef4:	00b62423          	sw	a1,8(a2)
    3ef8:	00f72223          	sw	a5,4(a4)
    3efc:	00d70733          	add	a4,a4,a3
    3f00:	00d72023          	sw	a3,0(a4)
    3f04:	ef9ff06f          	j	3dfc <_free_r+0xdc>
    3f08:	0015f593          	andi	a1,a1,1
    3f0c:	00d786b3          	add	a3,a5,a3
    3f10:	02059063          	bnez	a1,3f30 <_free_r+0x210>
    3f14:	ff842583          	lw	a1,-8(s0)
    3f18:	40b70733          	sub	a4,a4,a1
    3f1c:	00c72783          	lw	a5,12(a4)
    3f20:	00872603          	lw	a2,8(a4)
    3f24:	00b686b3          	add	a3,a3,a1
    3f28:	00f62623          	sw	a5,12(a2)
    3f2c:	00c7a423          	sw	a2,8(a5)
    3f30:	0016e793          	ori	a5,a3,1
    3f34:	00f72223          	sw	a5,4(a4)
    3f38:	00e52423          	sw	a4,8(a0)
    3f3c:	8301a783          	lw	a5,-2000(gp) # 9998 <__malloc_trim_threshold>
    3f40:	eaf6eee3          	bltu	a3,a5,3dfc <_free_r+0xdc>
    3f44:	89c1a583          	lw	a1,-1892(gp) # 9a04 <__malloc_top_pad>
    3f48:	00048513          	mv	a0,s1
    3f4c:	ca1ff0ef          	jal	ra,3bec <_malloc_trim_r>
    3f50:	eadff06f          	j	3dfc <_free_r+0xdc>
    3f54:	00d787b3          	add	a5,a5,a3
    3f58:	f5dff06f          	j	3eb4 <_free_r+0x194>
    3f5c:	01400613          	li	a2,20
    3f60:	02d67063          	bgeu	a2,a3,3f80 <_free_r+0x260>
    3f64:	05400613          	li	a2,84
    3f68:	06d66463          	bltu	a2,a3,3fd0 <_free_r+0x2b0>
    3f6c:	00c7d693          	srli	a3,a5,0xc
    3f70:	06f68593          	addi	a1,a3,111
    3f74:	06e68613          	addi	a2,a3,110
    3f78:	00359593          	slli	a1,a1,0x3
    3f7c:	ed5ff06f          	j	3e50 <_free_r+0x130>
    3f80:	05c68593          	addi	a1,a3,92
    3f84:	05b68613          	addi	a2,a3,91
    3f88:	00359593          	slli	a1,a1,0x3
    3f8c:	ec5ff06f          	j	3e50 <_free_r+0x130>
    3f90:	00e52a23          	sw	a4,20(a0)
    3f94:	00e52823          	sw	a4,16(a0)
    3f98:	0017e693          	ori	a3,a5,1
    3f9c:	01172623          	sw	a7,12(a4)
    3fa0:	01172423          	sw	a7,8(a4)
    3fa4:	00d72223          	sw	a3,4(a4)
    3fa8:	00f70733          	add	a4,a4,a5
    3fac:	00f72023          	sw	a5,0(a4)
    3fb0:	e4dff06f          	j	3dfc <_free_r+0xdc>
    3fb4:	00452803          	lw	a6,4(a0)
    3fb8:	40265613          	srai	a2,a2,0x2
    3fbc:	00100793          	li	a5,1
    3fc0:	00c797b3          	sll	a5,a5,a2
    3fc4:	0107e7b3          	or	a5,a5,a6
    3fc8:	00f52223          	sw	a5,4(a0)
    3fcc:	eb1ff06f          	j	3e7c <_free_r+0x15c>
    3fd0:	15400613          	li	a2,340
    3fd4:	00d66c63          	bltu	a2,a3,3fec <_free_r+0x2cc>
    3fd8:	00f7d693          	srli	a3,a5,0xf
    3fdc:	07868593          	addi	a1,a3,120
    3fe0:	07768613          	addi	a2,a3,119
    3fe4:	00359593          	slli	a1,a1,0x3
    3fe8:	e69ff06f          	j	3e50 <_free_r+0x130>
    3fec:	55400613          	li	a2,1364
    3ff0:	00d66c63          	bltu	a2,a3,4008 <_free_r+0x2e8>
    3ff4:	0127d693          	srli	a3,a5,0x12
    3ff8:	07d68593          	addi	a1,a3,125
    3ffc:	07c68613          	addi	a2,a3,124
    4000:	00359593          	slli	a1,a1,0x3
    4004:	e4dff06f          	j	3e50 <_free_r+0x130>
    4008:	3f800593          	li	a1,1016
    400c:	07e00613          	li	a2,126
    4010:	e41ff06f          	j	3e50 <_free_r+0x130>
    4014:	0017e693          	ori	a3,a5,1
    4018:	00d72223          	sw	a3,4(a4)
    401c:	00f62023          	sw	a5,0(a2)
    4020:	dddff06f          	j	3dfc <_free_r+0xdc>

00004024 <_fwalk>:
    4024:	fe010113          	addi	sp,sp,-32
    4028:	01212823          	sw	s2,16(sp)
    402c:	01312623          	sw	s3,12(sp)
    4030:	01412423          	sw	s4,8(sp)
    4034:	01512223          	sw	s5,4(sp)
    4038:	01612023          	sw	s6,0(sp)
    403c:	00112e23          	sw	ra,28(sp)
    4040:	00812c23          	sw	s0,24(sp)
    4044:	00912a23          	sw	s1,20(sp)
    4048:	00058b13          	mv	s6,a1
    404c:	2e050a93          	addi	s5,a0,736
    4050:	00000a13          	li	s4,0
    4054:	00100993          	li	s3,1
    4058:	fff00913          	li	s2,-1
    405c:	004aa483          	lw	s1,4(s5)
    4060:	008aa403          	lw	s0,8(s5)
    4064:	fff48493          	addi	s1,s1,-1
    4068:	0204c663          	bltz	s1,4094 <_fwalk+0x70>
    406c:	00c45783          	lhu	a5,12(s0)
    4070:	fff48493          	addi	s1,s1,-1
    4074:	00f9fc63          	bgeu	s3,a5,408c <_fwalk+0x68>
    4078:	00e41783          	lh	a5,14(s0)
    407c:	00040513          	mv	a0,s0
    4080:	01278663          	beq	a5,s2,408c <_fwalk+0x68>
    4084:	000b00e7          	jalr	s6
    4088:	00aa6a33          	or	s4,s4,a0
    408c:	06840413          	addi	s0,s0,104
    4090:	fd249ee3          	bne	s1,s2,406c <_fwalk+0x48>
    4094:	000aaa83          	lw	s5,0(s5)
    4098:	fc0a92e3          	bnez	s5,405c <_fwalk+0x38>
    409c:	01c12083          	lw	ra,28(sp)
    40a0:	01812403          	lw	s0,24(sp)
    40a4:	01412483          	lw	s1,20(sp)
    40a8:	01012903          	lw	s2,16(sp)
    40ac:	00c12983          	lw	s3,12(sp)
    40b0:	00412a83          	lw	s5,4(sp)
    40b4:	00012b03          	lw	s6,0(sp)
    40b8:	000a0513          	mv	a0,s4
    40bc:	00812a03          	lw	s4,8(sp)
    40c0:	02010113          	addi	sp,sp,32
    40c4:	00008067          	ret

000040c8 <_fwalk_reent>:
    40c8:	fd010113          	addi	sp,sp,-48
    40cc:	03212023          	sw	s2,32(sp)
    40d0:	01312e23          	sw	s3,28(sp)
    40d4:	01412c23          	sw	s4,24(sp)
    40d8:	01512a23          	sw	s5,20(sp)
    40dc:	01612823          	sw	s6,16(sp)
    40e0:	01712623          	sw	s7,12(sp)
    40e4:	02112623          	sw	ra,44(sp)
    40e8:	02812423          	sw	s0,40(sp)
    40ec:	02912223          	sw	s1,36(sp)
    40f0:	00050a93          	mv	s5,a0
    40f4:	00058b93          	mv	s7,a1
    40f8:	2e050b13          	addi	s6,a0,736
    40fc:	00000a13          	li	s4,0
    4100:	00100993          	li	s3,1
    4104:	fff00913          	li	s2,-1
    4108:	004b2483          	lw	s1,4(s6)
    410c:	008b2403          	lw	s0,8(s6)
    4110:	fff48493          	addi	s1,s1,-1
    4114:	0204c863          	bltz	s1,4144 <_fwalk_reent+0x7c>
    4118:	00c45783          	lhu	a5,12(s0)
    411c:	fff48493          	addi	s1,s1,-1
    4120:	00f9fe63          	bgeu	s3,a5,413c <_fwalk_reent+0x74>
    4124:	00e41783          	lh	a5,14(s0)
    4128:	00040593          	mv	a1,s0
    412c:	000a8513          	mv	a0,s5
    4130:	01278663          	beq	a5,s2,413c <_fwalk_reent+0x74>
    4134:	000b80e7          	jalr	s7
    4138:	00aa6a33          	or	s4,s4,a0
    413c:	06840413          	addi	s0,s0,104
    4140:	fd249ce3          	bne	s1,s2,4118 <_fwalk_reent+0x50>
    4144:	000b2b03          	lw	s6,0(s6)
    4148:	fc0b10e3          	bnez	s6,4108 <_fwalk_reent+0x40>
    414c:	02c12083          	lw	ra,44(sp)
    4150:	02812403          	lw	s0,40(sp)
    4154:	02412483          	lw	s1,36(sp)
    4158:	02012903          	lw	s2,32(sp)
    415c:	01c12983          	lw	s3,28(sp)
    4160:	01412a83          	lw	s5,20(sp)
    4164:	01012b03          	lw	s6,16(sp)
    4168:	00c12b83          	lw	s7,12(sp)
    416c:	000a0513          	mv	a0,s4
    4170:	01812a03          	lw	s4,24(sp)
    4174:	03010113          	addi	sp,sp,48
    4178:	00008067          	ret

0000417c <__retarget_lock_init>:
    417c:	00008067          	ret

00004180 <__retarget_lock_init_recursive>:
    4180:	00008067          	ret

00004184 <__retarget_lock_close>:
    4184:	00008067          	ret

00004188 <__retarget_lock_close_recursive>:
    4188:	00008067          	ret

0000418c <__retarget_lock_acquire>:
    418c:	00008067          	ret

00004190 <__retarget_lock_acquire_recursive>:
    4190:	00008067          	ret

00004194 <__retarget_lock_try_acquire>:
    4194:	00100513          	li	a0,1
    4198:	00008067          	ret

0000419c <__retarget_lock_try_acquire_recursive>:
    419c:	00100513          	li	a0,1
    41a0:	00008067          	ret

000041a4 <__retarget_lock_release>:
    41a4:	00008067          	ret

000041a8 <__retarget_lock_release_recursive>:
    41a8:	00008067          	ret

000041ac <_malloc_r>:
    41ac:	fd010113          	addi	sp,sp,-48
    41b0:	03212023          	sw	s2,32(sp)
    41b4:	02112623          	sw	ra,44(sp)
    41b8:	02812423          	sw	s0,40(sp)
    41bc:	02912223          	sw	s1,36(sp)
    41c0:	01312e23          	sw	s3,28(sp)
    41c4:	01412c23          	sw	s4,24(sp)
    41c8:	01512a23          	sw	s5,20(sp)
    41cc:	01612823          	sw	s6,16(sp)
    41d0:	01712623          	sw	s7,12(sp)
    41d4:	01812423          	sw	s8,8(sp)
    41d8:	01912223          	sw	s9,4(sp)
    41dc:	00b58793          	addi	a5,a1,11
    41e0:	01600713          	li	a4,22
    41e4:	00050913          	mv	s2,a0
    41e8:	08f76e63          	bltu	a4,a5,4284 <_malloc_r+0xd8>
    41ec:	01000793          	li	a5,16
    41f0:	22b7e063          	bltu	a5,a1,4410 <_malloc_r+0x264>
    41f4:	1c5000ef          	jal	ra,4bb8 <__malloc_lock>
    41f8:	01000493          	li	s1,16
    41fc:	01800793          	li	a5,24
    4200:	00200593          	li	a1,2
    4204:	00005997          	auipc	s3,0x5
    4208:	35c98993          	addi	s3,s3,860 # 9560 <__malloc_av_>
    420c:	00f987b3          	add	a5,s3,a5
    4210:	0047a403          	lw	s0,4(a5)
    4214:	ff878713          	addi	a4,a5,-8
    4218:	30e40a63          	beq	s0,a4,452c <_malloc_r+0x380>
    421c:	00442783          	lw	a5,4(s0)
    4220:	00c42683          	lw	a3,12(s0)
    4224:	00842603          	lw	a2,8(s0)
    4228:	ffc7f793          	andi	a5,a5,-4
    422c:	00f407b3          	add	a5,s0,a5
    4230:	0047a703          	lw	a4,4(a5)
    4234:	00d62623          	sw	a3,12(a2)
    4238:	00c6a423          	sw	a2,8(a3)
    423c:	00176713          	ori	a4,a4,1
    4240:	00090513          	mv	a0,s2
    4244:	00e7a223          	sw	a4,4(a5)
    4248:	179000ef          	jal	ra,4bc0 <__malloc_unlock>
    424c:	00840513          	addi	a0,s0,8
    4250:	02c12083          	lw	ra,44(sp)
    4254:	02812403          	lw	s0,40(sp)
    4258:	02412483          	lw	s1,36(sp)
    425c:	02012903          	lw	s2,32(sp)
    4260:	01c12983          	lw	s3,28(sp)
    4264:	01812a03          	lw	s4,24(sp)
    4268:	01412a83          	lw	s5,20(sp)
    426c:	01012b03          	lw	s6,16(sp)
    4270:	00c12b83          	lw	s7,12(sp)
    4274:	00812c03          	lw	s8,8(sp)
    4278:	00412c83          	lw	s9,4(sp)
    427c:	03010113          	addi	sp,sp,48
    4280:	00008067          	ret
    4284:	ff87f493          	andi	s1,a5,-8
    4288:	1807c463          	bltz	a5,4410 <_malloc_r+0x264>
    428c:	18b4e263          	bltu	s1,a1,4410 <_malloc_r+0x264>
    4290:	129000ef          	jal	ra,4bb8 <__malloc_lock>
    4294:	1f700793          	li	a5,503
    4298:	3a97f463          	bgeu	a5,s1,4640 <_malloc_r+0x494>
    429c:	0094d793          	srli	a5,s1,0x9
    42a0:	18078063          	beqz	a5,4420 <_malloc_r+0x274>
    42a4:	00400713          	li	a4,4
    42a8:	2ef76a63          	bltu	a4,a5,459c <_malloc_r+0x3f0>
    42ac:	0064d793          	srli	a5,s1,0x6
    42b0:	03978593          	addi	a1,a5,57
    42b4:	03878513          	addi	a0,a5,56
    42b8:	00359693          	slli	a3,a1,0x3
    42bc:	00005997          	auipc	s3,0x5
    42c0:	2a498993          	addi	s3,s3,676 # 9560 <__malloc_av_>
    42c4:	00d986b3          	add	a3,s3,a3
    42c8:	0046a403          	lw	s0,4(a3)
    42cc:	ff868693          	addi	a3,a3,-8
    42d0:	02868663          	beq	a3,s0,42fc <_malloc_r+0x150>
    42d4:	00f00613          	li	a2,15
    42d8:	0100006f          	j	42e8 <_malloc_r+0x13c>
    42dc:	24075263          	bgez	a4,4520 <_malloc_r+0x374>
    42e0:	00c42403          	lw	s0,12(s0)
    42e4:	00868c63          	beq	a3,s0,42fc <_malloc_r+0x150>
    42e8:	00442783          	lw	a5,4(s0)
    42ec:	ffc7f793          	andi	a5,a5,-4
    42f0:	40978733          	sub	a4,a5,s1
    42f4:	fee654e3          	bge	a2,a4,42dc <_malloc_r+0x130>
    42f8:	00050593          	mv	a1,a0
    42fc:	0109a403          	lw	s0,16(s3)
    4300:	00005897          	auipc	a7,0x5
    4304:	26888893          	addi	a7,a7,616 # 9568 <__malloc_av_+0x8>
    4308:	1f140463          	beq	s0,a7,44f0 <_malloc_r+0x344>
    430c:	00442783          	lw	a5,4(s0)
    4310:	00f00693          	li	a3,15
    4314:	ffc7f793          	andi	a5,a5,-4
    4318:	40978733          	sub	a4,a5,s1
    431c:	32e6c863          	blt	a3,a4,464c <_malloc_r+0x4a0>
    4320:	0119aa23          	sw	a7,20(s3)
    4324:	0119a823          	sw	a7,16(s3)
    4328:	2e075c63          	bgez	a4,4620 <_malloc_r+0x474>
    432c:	1ff00713          	li	a4,511
    4330:	0049a503          	lw	a0,4(s3)
    4334:	20f76463          	bltu	a4,a5,453c <_malloc_r+0x390>
    4338:	ff87f713          	andi	a4,a5,-8
    433c:	00870713          	addi	a4,a4,8
    4340:	00e98733          	add	a4,s3,a4
    4344:	00072683          	lw	a3,0(a4)
    4348:	0057d613          	srli	a2,a5,0x5
    434c:	00100793          	li	a5,1
    4350:	00c797b3          	sll	a5,a5,a2
    4354:	00f56533          	or	a0,a0,a5
    4358:	ff870793          	addi	a5,a4,-8
    435c:	00f42623          	sw	a5,12(s0)
    4360:	00d42423          	sw	a3,8(s0)
    4364:	00a9a223          	sw	a0,4(s3)
    4368:	00872023          	sw	s0,0(a4)
    436c:	0086a623          	sw	s0,12(a3)
    4370:	4025d793          	srai	a5,a1,0x2
    4374:	00100613          	li	a2,1
    4378:	00f61633          	sll	a2,a2,a5
    437c:	0ac56a63          	bltu	a0,a2,4430 <_malloc_r+0x284>
    4380:	00a677b3          	and	a5,a2,a0
    4384:	02079463          	bnez	a5,43ac <_malloc_r+0x200>
    4388:	00161613          	slli	a2,a2,0x1
    438c:	ffc5f593          	andi	a1,a1,-4
    4390:	00a677b3          	and	a5,a2,a0
    4394:	00458593          	addi	a1,a1,4
    4398:	00079a63          	bnez	a5,43ac <_malloc_r+0x200>
    439c:	00161613          	slli	a2,a2,0x1
    43a0:	00a677b3          	and	a5,a2,a0
    43a4:	00458593          	addi	a1,a1,4
    43a8:	fe078ae3          	beqz	a5,439c <_malloc_r+0x1f0>
    43ac:	00f00813          	li	a6,15
    43b0:	00359313          	slli	t1,a1,0x3
    43b4:	00698333          	add	t1,s3,t1
    43b8:	00030513          	mv	a0,t1
    43bc:	00c52783          	lw	a5,12(a0)
    43c0:	00058e13          	mv	t3,a1
    43c4:	1ef50e63          	beq	a0,a5,45c0 <_malloc_r+0x414>
    43c8:	0047a703          	lw	a4,4(a5)
    43cc:	00078413          	mv	s0,a5
    43d0:	00c7a783          	lw	a5,12(a5)
    43d4:	ffc77713          	andi	a4,a4,-4
    43d8:	409706b3          	sub	a3,a4,s1
    43dc:	1ed84e63          	blt	a6,a3,45d8 <_malloc_r+0x42c>
    43e0:	fe06c2e3          	bltz	a3,43c4 <_malloc_r+0x218>
    43e4:	00e40733          	add	a4,s0,a4
    43e8:	00472683          	lw	a3,4(a4)
    43ec:	00842603          	lw	a2,8(s0)
    43f0:	00090513          	mv	a0,s2
    43f4:	0016e693          	ori	a3,a3,1
    43f8:	00d72223          	sw	a3,4(a4)
    43fc:	00f62623          	sw	a5,12(a2)
    4400:	00c7a423          	sw	a2,8(a5)
    4404:	7bc000ef          	jal	ra,4bc0 <__malloc_unlock>
    4408:	00840513          	addi	a0,s0,8
    440c:	e45ff06f          	j	4250 <_malloc_r+0xa4>
    4410:	00c00793          	li	a5,12
    4414:	00f92023          	sw	a5,0(s2)
    4418:	00000513          	li	a0,0
    441c:	e35ff06f          	j	4250 <_malloc_r+0xa4>
    4420:	20000693          	li	a3,512
    4424:	04000593          	li	a1,64
    4428:	03f00513          	li	a0,63
    442c:	e91ff06f          	j	42bc <_malloc_r+0x110>
    4430:	0089a403          	lw	s0,8(s3)
    4434:	00442783          	lw	a5,4(s0)
    4438:	ffc7fb13          	andi	s6,a5,-4
    443c:	009b6863          	bltu	s6,s1,444c <_malloc_r+0x2a0>
    4440:	409b0733          	sub	a4,s6,s1
    4444:	00f00793          	li	a5,15
    4448:	0ae7c863          	blt	a5,a4,44f8 <_malloc_r+0x34c>
    444c:	82c18c93          	addi	s9,gp,-2004 # 9994 <__malloc_sbrk_base>
    4450:	000ca703          	lw	a4,0(s9)
    4454:	89c1aa83          	lw	s5,-1892(gp) # 9a04 <__malloc_top_pad>
    4458:	fff00793          	li	a5,-1
    445c:	01640a33          	add	s4,s0,s6
    4460:	01548ab3          	add	s5,s1,s5
    4464:	3af70863          	beq	a4,a5,4814 <_malloc_r+0x668>
    4468:	000017b7          	lui	a5,0x1
    446c:	00f78793          	addi	a5,a5,15 # 100f <altera_avalon_jtag_uart_write+0x22b>
    4470:	00fa8ab3          	add	s5,s5,a5
    4474:	fffff7b7          	lui	a5,0xfffff
    4478:	00fafab3          	and	s5,s5,a5
    447c:	000a8593          	mv	a1,s5
    4480:	00090513          	mv	a0,s2
    4484:	22d000ef          	jal	ra,4eb0 <_sbrk_r>
    4488:	fff00793          	li	a5,-1
    448c:	00050b93          	mv	s7,a0
    4490:	20f50863          	beq	a0,a5,46a0 <_malloc_r+0x4f4>
    4494:	21456463          	bltu	a0,s4,469c <_malloc_r+0x4f0>
    4498:	92818c13          	addi	s8,gp,-1752 # 9a90 <__malloc_current_mallinfo>
    449c:	000c2583          	lw	a1,0(s8)
    44a0:	00ba85b3          	add	a1,s5,a1
    44a4:	00bc2023          	sw	a1,0(s8)
    44a8:	00058713          	mv	a4,a1
    44ac:	28aa1a63          	bne	s4,a0,4740 <_malloc_r+0x594>
    44b0:	01451793          	slli	a5,a0,0x14
    44b4:	28079663          	bnez	a5,4740 <_malloc_r+0x594>
    44b8:	0089ab83          	lw	s7,8(s3)
    44bc:	015b07b3          	add	a5,s6,s5
    44c0:	0017e793          	ori	a5,a5,1
    44c4:	00fba223          	sw	a5,4(s7)
    44c8:	89818713          	addi	a4,gp,-1896 # 9a00 <__malloc_max_sbrked_mem>
    44cc:	00072683          	lw	a3,0(a4)
    44d0:	00b6f463          	bgeu	a3,a1,44d8 <_malloc_r+0x32c>
    44d4:	00b72023          	sw	a1,0(a4)
    44d8:	89418713          	addi	a4,gp,-1900 # 99fc <__malloc_max_total_mem>
    44dc:	00072683          	lw	a3,0(a4)
    44e0:	00b6f463          	bgeu	a3,a1,44e8 <_malloc_r+0x33c>
    44e4:	00b72023          	sw	a1,0(a4)
    44e8:	000b8413          	mv	s0,s7
    44ec:	1bc0006f          	j	46a8 <_malloc_r+0x4fc>
    44f0:	0049a503          	lw	a0,4(s3)
    44f4:	e7dff06f          	j	4370 <_malloc_r+0x1c4>
    44f8:	0014e793          	ori	a5,s1,1
    44fc:	00f42223          	sw	a5,4(s0)
    4500:	009404b3          	add	s1,s0,s1
    4504:	0099a423          	sw	s1,8(s3)
    4508:	00176713          	ori	a4,a4,1
    450c:	00090513          	mv	a0,s2
    4510:	00e4a223          	sw	a4,4(s1)
    4514:	6ac000ef          	jal	ra,4bc0 <__malloc_unlock>
    4518:	00840513          	addi	a0,s0,8
    451c:	d35ff06f          	j	4250 <_malloc_r+0xa4>
    4520:	00c42683          	lw	a3,12(s0)
    4524:	00842603          	lw	a2,8(s0)
    4528:	d05ff06f          	j	422c <_malloc_r+0x80>
    452c:	00c7a403          	lw	s0,12(a5) # fffff00c <__alt_data_end+0xfdfff00c>
    4530:	00258593          	addi	a1,a1,2
    4534:	dc8784e3          	beq	a5,s0,42fc <_malloc_r+0x150>
    4538:	ce5ff06f          	j	421c <_malloc_r+0x70>
    453c:	0097d713          	srli	a4,a5,0x9
    4540:	00400693          	li	a3,4
    4544:	14e6f263          	bgeu	a3,a4,4688 <_malloc_r+0x4dc>
    4548:	01400693          	li	a3,20
    454c:	30e6ea63          	bltu	a3,a4,4860 <_malloc_r+0x6b4>
    4550:	05c70613          	addi	a2,a4,92
    4554:	05b70693          	addi	a3,a4,91
    4558:	00361613          	slli	a2,a2,0x3
    455c:	00c98633          	add	a2,s3,a2
    4560:	00062703          	lw	a4,0(a2)
    4564:	ff860613          	addi	a2,a2,-8
    4568:	00e61863          	bne	a2,a4,4578 <_malloc_r+0x3cc>
    456c:	2b00006f          	j	481c <_malloc_r+0x670>
    4570:	00872703          	lw	a4,8(a4)
    4574:	00e60863          	beq	a2,a4,4584 <_malloc_r+0x3d8>
    4578:	00472683          	lw	a3,4(a4)
    457c:	ffc6f693          	andi	a3,a3,-4
    4580:	fed7e8e3          	bltu	a5,a3,4570 <_malloc_r+0x3c4>
    4584:	00c72603          	lw	a2,12(a4)
    4588:	00c42623          	sw	a2,12(s0)
    458c:	00e42423          	sw	a4,8(s0)
    4590:	00862423          	sw	s0,8(a2)
    4594:	00872623          	sw	s0,12(a4)
    4598:	dd9ff06f          	j	4370 <_malloc_r+0x1c4>
    459c:	01400713          	li	a4,20
    45a0:	12f77663          	bgeu	a4,a5,46cc <_malloc_r+0x520>
    45a4:	05400713          	li	a4,84
    45a8:	2cf76a63          	bltu	a4,a5,487c <_malloc_r+0x6d0>
    45ac:	00c4d793          	srli	a5,s1,0xc
    45b0:	06f78593          	addi	a1,a5,111
    45b4:	06e78513          	addi	a0,a5,110
    45b8:	00359693          	slli	a3,a1,0x3
    45bc:	d01ff06f          	j	42bc <_malloc_r+0x110>
    45c0:	001e0e13          	addi	t3,t3,1
    45c4:	003e7793          	andi	a5,t3,3
    45c8:	00850513          	addi	a0,a0,8
    45cc:	10078e63          	beqz	a5,46e8 <_malloc_r+0x53c>
    45d0:	00c52783          	lw	a5,12(a0)
    45d4:	df1ff06f          	j	43c4 <_malloc_r+0x218>
    45d8:	00842603          	lw	a2,8(s0)
    45dc:	0014e593          	ori	a1,s1,1
    45e0:	00b42223          	sw	a1,4(s0)
    45e4:	00f62623          	sw	a5,12(a2)
    45e8:	00c7a423          	sw	a2,8(a5)
    45ec:	009404b3          	add	s1,s0,s1
    45f0:	0099aa23          	sw	s1,20(s3)
    45f4:	0099a823          	sw	s1,16(s3)
    45f8:	0016e793          	ori	a5,a3,1
    45fc:	0114a623          	sw	a7,12(s1)
    4600:	0114a423          	sw	a7,8(s1)
    4604:	00f4a223          	sw	a5,4(s1)
    4608:	00e40733          	add	a4,s0,a4
    460c:	00090513          	mv	a0,s2
    4610:	00d72023          	sw	a3,0(a4)
    4614:	5ac000ef          	jal	ra,4bc0 <__malloc_unlock>
    4618:	00840513          	addi	a0,s0,8
    461c:	c35ff06f          	j	4250 <_malloc_r+0xa4>
    4620:	00f407b3          	add	a5,s0,a5
    4624:	0047a703          	lw	a4,4(a5)
    4628:	00090513          	mv	a0,s2
    462c:	00176713          	ori	a4,a4,1
    4630:	00e7a223          	sw	a4,4(a5)
    4634:	58c000ef          	jal	ra,4bc0 <__malloc_unlock>
    4638:	00840513          	addi	a0,s0,8
    463c:	c15ff06f          	j	4250 <_malloc_r+0xa4>
    4640:	0034d593          	srli	a1,s1,0x3
    4644:	00848793          	addi	a5,s1,8
    4648:	bbdff06f          	j	4204 <_malloc_r+0x58>
    464c:	0014e693          	ori	a3,s1,1
    4650:	00d42223          	sw	a3,4(s0)
    4654:	009404b3          	add	s1,s0,s1
    4658:	0099aa23          	sw	s1,20(s3)
    465c:	0099a823          	sw	s1,16(s3)
    4660:	00176693          	ori	a3,a4,1
    4664:	0114a623          	sw	a7,12(s1)
    4668:	0114a423          	sw	a7,8(s1)
    466c:	00d4a223          	sw	a3,4(s1)
    4670:	00f407b3          	add	a5,s0,a5
    4674:	00090513          	mv	a0,s2
    4678:	00e7a023          	sw	a4,0(a5)
    467c:	544000ef          	jal	ra,4bc0 <__malloc_unlock>
    4680:	00840513          	addi	a0,s0,8
    4684:	bcdff06f          	j	4250 <_malloc_r+0xa4>
    4688:	0067d713          	srli	a4,a5,0x6
    468c:	03970613          	addi	a2,a4,57
    4690:	03870693          	addi	a3,a4,56
    4694:	00361613          	slli	a2,a2,0x3
    4698:	ec5ff06f          	j	455c <_malloc_r+0x3b0>
    469c:	09340a63          	beq	s0,s3,4730 <_malloc_r+0x584>
    46a0:	0089a403          	lw	s0,8(s3)
    46a4:	00442783          	lw	a5,4(s0)
    46a8:	ffc7f793          	andi	a5,a5,-4
    46ac:	40978733          	sub	a4,a5,s1
    46b0:	0097e663          	bltu	a5,s1,46bc <_malloc_r+0x510>
    46b4:	00f00793          	li	a5,15
    46b8:	e4e7c0e3          	blt	a5,a4,44f8 <_malloc_r+0x34c>
    46bc:	00090513          	mv	a0,s2
    46c0:	500000ef          	jal	ra,4bc0 <__malloc_unlock>
    46c4:	00000513          	li	a0,0
    46c8:	b89ff06f          	j	4250 <_malloc_r+0xa4>
    46cc:	05c78593          	addi	a1,a5,92
    46d0:	05b78513          	addi	a0,a5,91
    46d4:	00359693          	slli	a3,a1,0x3
    46d8:	be5ff06f          	j	42bc <_malloc_r+0x110>
    46dc:	00832783          	lw	a5,8(t1)
    46e0:	fff58593          	addi	a1,a1,-1
    46e4:	24679663          	bne	a5,t1,4930 <_malloc_r+0x784>
    46e8:	0035f793          	andi	a5,a1,3
    46ec:	ff830313          	addi	t1,t1,-8
    46f0:	fe0796e3          	bnez	a5,46dc <_malloc_r+0x530>
    46f4:	0049a703          	lw	a4,4(s3)
    46f8:	fff64793          	not	a5,a2
    46fc:	00e7f7b3          	and	a5,a5,a4
    4700:	00f9a223          	sw	a5,4(s3)
    4704:	00161613          	slli	a2,a2,0x1
    4708:	d2c7e4e3          	bltu	a5,a2,4430 <_malloc_r+0x284>
    470c:	d20602e3          	beqz	a2,4430 <_malloc_r+0x284>
    4710:	00f67733          	and	a4,a2,a5
    4714:	00071a63          	bnez	a4,4728 <_malloc_r+0x57c>
    4718:	00161613          	slli	a2,a2,0x1
    471c:	00f67733          	and	a4,a2,a5
    4720:	004e0e13          	addi	t3,t3,4
    4724:	fe070ae3          	beqz	a4,4718 <_malloc_r+0x56c>
    4728:	000e0593          	mv	a1,t3
    472c:	c85ff06f          	j	43b0 <_malloc_r+0x204>
    4730:	92818c13          	addi	s8,gp,-1752 # 9a90 <__malloc_current_mallinfo>
    4734:	000c2703          	lw	a4,0(s8)
    4738:	00ea8733          	add	a4,s5,a4
    473c:	00ec2023          	sw	a4,0(s8)
    4740:	000ca683          	lw	a3,0(s9)
    4744:	fff00793          	li	a5,-1
    4748:	14f68863          	beq	a3,a5,4898 <_malloc_r+0x6ec>
    474c:	414b87b3          	sub	a5,s7,s4
    4750:	00e787b3          	add	a5,a5,a4
    4754:	00fc2023          	sw	a5,0(s8)
    4758:	007bfc93          	andi	s9,s7,7
    475c:	0c0c8c63          	beqz	s9,4834 <_malloc_r+0x688>
    4760:	00001737          	lui	a4,0x1
    4764:	419b8bb3          	sub	s7,s7,s9
    4768:	00870593          	addi	a1,a4,8 # 1008 <altera_avalon_jtag_uart_write+0x224>
    476c:	008b8b93          	addi	s7,s7,8
    4770:	419585b3          	sub	a1,a1,s9
    4774:	015b8ab3          	add	s5,s7,s5
    4778:	415585b3          	sub	a1,a1,s5
    477c:	fff70713          	addi	a4,a4,-1
    4780:	00e5fa33          	and	s4,a1,a4
    4784:	000a0593          	mv	a1,s4
    4788:	00090513          	mv	a0,s2
    478c:	724000ef          	jal	ra,4eb0 <_sbrk_r>
    4790:	fff00793          	li	a5,-1
    4794:	14f50863          	beq	a0,a5,48e4 <_malloc_r+0x738>
    4798:	41750533          	sub	a0,a0,s7
    479c:	01450ab3          	add	s5,a0,s4
    47a0:	000c2703          	lw	a4,0(s8)
    47a4:	0179a423          	sw	s7,8(s3)
    47a8:	001ae793          	ori	a5,s5,1
    47ac:	00ea05b3          	add	a1,s4,a4
    47b0:	00bc2023          	sw	a1,0(s8)
    47b4:	00fba223          	sw	a5,4(s7)
    47b8:	d13408e3          	beq	s0,s3,44c8 <_malloc_r+0x31c>
    47bc:	00f00693          	li	a3,15
    47c0:	0f66f063          	bgeu	a3,s6,48a0 <_malloc_r+0x6f4>
    47c4:	00442703          	lw	a4,4(s0)
    47c8:	ff4b0793          	addi	a5,s6,-12
    47cc:	ff87f793          	andi	a5,a5,-8
    47d0:	00177713          	andi	a4,a4,1
    47d4:	00f76733          	or	a4,a4,a5
    47d8:	00e42223          	sw	a4,4(s0)
    47dc:	00500613          	li	a2,5
    47e0:	00f40733          	add	a4,s0,a5
    47e4:	00c72223          	sw	a2,4(a4)
    47e8:	00c72423          	sw	a2,8(a4)
    47ec:	00f6e663          	bltu	a3,a5,47f8 <_malloc_r+0x64c>
    47f0:	004ba783          	lw	a5,4(s7)
    47f4:	cd5ff06f          	j	44c8 <_malloc_r+0x31c>
    47f8:	00840593          	addi	a1,s0,8
    47fc:	00090513          	mv	a0,s2
    4800:	d20ff0ef          	jal	ra,3d20 <_free_r>
    4804:	0089ab83          	lw	s7,8(s3)
    4808:	000c2583          	lw	a1,0(s8)
    480c:	004ba783          	lw	a5,4(s7)
    4810:	cb9ff06f          	j	44c8 <_malloc_r+0x31c>
    4814:	010a8a93          	addi	s5,s5,16
    4818:	c65ff06f          	j	447c <_malloc_r+0x2d0>
    481c:	4026d693          	srai	a3,a3,0x2
    4820:	00100793          	li	a5,1
    4824:	00d797b3          	sll	a5,a5,a3
    4828:	00f56533          	or	a0,a0,a5
    482c:	00a9a223          	sw	a0,4(s3)
    4830:	d59ff06f          	j	4588 <_malloc_r+0x3dc>
    4834:	015b85b3          	add	a1,s7,s5
    4838:	40b005b3          	neg	a1,a1
    483c:	01459593          	slli	a1,a1,0x14
    4840:	0145da13          	srli	s4,a1,0x14
    4844:	000a0593          	mv	a1,s4
    4848:	00090513          	mv	a0,s2
    484c:	664000ef          	jal	ra,4eb0 <_sbrk_r>
    4850:	fff00793          	li	a5,-1
    4854:	f4f512e3          	bne	a0,a5,4798 <_malloc_r+0x5ec>
    4858:	00000a13          	li	s4,0
    485c:	f45ff06f          	j	47a0 <_malloc_r+0x5f4>
    4860:	05400693          	li	a3,84
    4864:	04e6e463          	bltu	a3,a4,48ac <_malloc_r+0x700>
    4868:	00c7d713          	srli	a4,a5,0xc
    486c:	06f70613          	addi	a2,a4,111
    4870:	06e70693          	addi	a3,a4,110
    4874:	00361613          	slli	a2,a2,0x3
    4878:	ce5ff06f          	j	455c <_malloc_r+0x3b0>
    487c:	15400713          	li	a4,340
    4880:	04f76463          	bltu	a4,a5,48c8 <_malloc_r+0x71c>
    4884:	00f4d793          	srli	a5,s1,0xf
    4888:	07878593          	addi	a1,a5,120
    488c:	07778513          	addi	a0,a5,119
    4890:	00359693          	slli	a3,a1,0x3
    4894:	a29ff06f          	j	42bc <_malloc_r+0x110>
    4898:	017ca023          	sw	s7,0(s9)
    489c:	ebdff06f          	j	4758 <_malloc_r+0x5ac>
    48a0:	00100793          	li	a5,1
    48a4:	00fba223          	sw	a5,4(s7)
    48a8:	e15ff06f          	j	46bc <_malloc_r+0x510>
    48ac:	15400693          	li	a3,340
    48b0:	04e6e463          	bltu	a3,a4,48f8 <_malloc_r+0x74c>
    48b4:	00f7d713          	srli	a4,a5,0xf
    48b8:	07870613          	addi	a2,a4,120
    48bc:	07770693          	addi	a3,a4,119
    48c0:	00361613          	slli	a2,a2,0x3
    48c4:	c99ff06f          	j	455c <_malloc_r+0x3b0>
    48c8:	55400713          	li	a4,1364
    48cc:	04f76463          	bltu	a4,a5,4914 <_malloc_r+0x768>
    48d0:	0124d793          	srli	a5,s1,0x12
    48d4:	07d78593          	addi	a1,a5,125
    48d8:	07c78513          	addi	a0,a5,124
    48dc:	00359693          	slli	a3,a1,0x3
    48e0:	9ddff06f          	j	42bc <_malloc_r+0x110>
    48e4:	ff8c8c93          	addi	s9,s9,-8
    48e8:	019a8ab3          	add	s5,s5,s9
    48ec:	417a8ab3          	sub	s5,s5,s7
    48f0:	00000a13          	li	s4,0
    48f4:	eadff06f          	j	47a0 <_malloc_r+0x5f4>
    48f8:	55400693          	li	a3,1364
    48fc:	02e6e463          	bltu	a3,a4,4924 <_malloc_r+0x778>
    4900:	0127d713          	srli	a4,a5,0x12
    4904:	07d70613          	addi	a2,a4,125
    4908:	07c70693          	addi	a3,a4,124
    490c:	00361613          	slli	a2,a2,0x3
    4910:	c4dff06f          	j	455c <_malloc_r+0x3b0>
    4914:	3f800693          	li	a3,1016
    4918:	07f00593          	li	a1,127
    491c:	07e00513          	li	a0,126
    4920:	99dff06f          	j	42bc <_malloc_r+0x110>
    4924:	3f800613          	li	a2,1016
    4928:	07e00693          	li	a3,126
    492c:	c31ff06f          	j	455c <_malloc_r+0x3b0>
    4930:	0049a783          	lw	a5,4(s3)
    4934:	dd1ff06f          	j	4704 <_malloc_r+0x558>

00004938 <memcpy>:
    4938:	00b547b3          	xor	a5,a0,a1
    493c:	0037f793          	andi	a5,a5,3
    4940:	00c508b3          	add	a7,a0,a2
    4944:	06079463          	bnez	a5,49ac <memcpy+0x74>
    4948:	00300793          	li	a5,3
    494c:	06c7f063          	bgeu	a5,a2,49ac <memcpy+0x74>
    4950:	00357793          	andi	a5,a0,3
    4954:	00050713          	mv	a4,a0
    4958:	06079a63          	bnez	a5,49cc <memcpy+0x94>
    495c:	ffc8f613          	andi	a2,a7,-4
    4960:	40e606b3          	sub	a3,a2,a4
    4964:	02000793          	li	a5,32
    4968:	08d7ce63          	blt	a5,a3,4a04 <memcpy+0xcc>
    496c:	00058693          	mv	a3,a1
    4970:	00070793          	mv	a5,a4
    4974:	02c77863          	bgeu	a4,a2,49a4 <memcpy+0x6c>
    4978:	0006a803          	lw	a6,0(a3)
    497c:	00478793          	addi	a5,a5,4
    4980:	00468693          	addi	a3,a3,4
    4984:	ff07ae23          	sw	a6,-4(a5)
    4988:	fec7e8e3          	bltu	a5,a2,4978 <memcpy+0x40>
    498c:	fff60793          	addi	a5,a2,-1
    4990:	40e787b3          	sub	a5,a5,a4
    4994:	ffc7f793          	andi	a5,a5,-4
    4998:	00478793          	addi	a5,a5,4
    499c:	00f70733          	add	a4,a4,a5
    49a0:	00f585b3          	add	a1,a1,a5
    49a4:	01176863          	bltu	a4,a7,49b4 <memcpy+0x7c>
    49a8:	00008067          	ret
    49ac:	00050713          	mv	a4,a0
    49b0:	05157863          	bgeu	a0,a7,4a00 <memcpy+0xc8>
    49b4:	0005c783          	lbu	a5,0(a1)
    49b8:	00170713          	addi	a4,a4,1
    49bc:	00158593          	addi	a1,a1,1
    49c0:	fef70fa3          	sb	a5,-1(a4)
    49c4:	fee898e3          	bne	a7,a4,49b4 <memcpy+0x7c>
    49c8:	00008067          	ret
    49cc:	0005c683          	lbu	a3,0(a1)
    49d0:	00170713          	addi	a4,a4,1
    49d4:	00377793          	andi	a5,a4,3
    49d8:	fed70fa3          	sb	a3,-1(a4)
    49dc:	00158593          	addi	a1,a1,1
    49e0:	f6078ee3          	beqz	a5,495c <memcpy+0x24>
    49e4:	0005c683          	lbu	a3,0(a1)
    49e8:	00170713          	addi	a4,a4,1
    49ec:	00377793          	andi	a5,a4,3
    49f0:	fed70fa3          	sb	a3,-1(a4)
    49f4:	00158593          	addi	a1,a1,1
    49f8:	fc079ae3          	bnez	a5,49cc <memcpy+0x94>
    49fc:	f61ff06f          	j	495c <memcpy+0x24>
    4a00:	00008067          	ret
    4a04:	ff010113          	addi	sp,sp,-16
    4a08:	00812623          	sw	s0,12(sp)
    4a0c:	02000413          	li	s0,32
    4a10:	0005a383          	lw	t2,0(a1)
    4a14:	0045a283          	lw	t0,4(a1)
    4a18:	0085af83          	lw	t6,8(a1)
    4a1c:	00c5af03          	lw	t5,12(a1)
    4a20:	0105ae83          	lw	t4,16(a1)
    4a24:	0145ae03          	lw	t3,20(a1)
    4a28:	0185a303          	lw	t1,24(a1)
    4a2c:	01c5a803          	lw	a6,28(a1)
    4a30:	0205a683          	lw	a3,32(a1)
    4a34:	02470713          	addi	a4,a4,36
    4a38:	40e607b3          	sub	a5,a2,a4
    4a3c:	fc772e23          	sw	t2,-36(a4)
    4a40:	fe572023          	sw	t0,-32(a4)
    4a44:	fff72223          	sw	t6,-28(a4)
    4a48:	ffe72423          	sw	t5,-24(a4)
    4a4c:	ffd72623          	sw	t4,-20(a4)
    4a50:	ffc72823          	sw	t3,-16(a4)
    4a54:	fe672a23          	sw	t1,-12(a4)
    4a58:	ff072c23          	sw	a6,-8(a4)
    4a5c:	fed72e23          	sw	a3,-4(a4)
    4a60:	02458593          	addi	a1,a1,36
    4a64:	faf446e3          	blt	s0,a5,4a10 <memcpy+0xd8>
    4a68:	00058693          	mv	a3,a1
    4a6c:	00070793          	mv	a5,a4
    4a70:	02c77863          	bgeu	a4,a2,4aa0 <memcpy+0x168>
    4a74:	0006a803          	lw	a6,0(a3)
    4a78:	00478793          	addi	a5,a5,4
    4a7c:	00468693          	addi	a3,a3,4
    4a80:	ff07ae23          	sw	a6,-4(a5)
    4a84:	fec7e8e3          	bltu	a5,a2,4a74 <memcpy+0x13c>
    4a88:	fff60793          	addi	a5,a2,-1
    4a8c:	40e787b3          	sub	a5,a5,a4
    4a90:	ffc7f793          	andi	a5,a5,-4
    4a94:	00478793          	addi	a5,a5,4
    4a98:	00f70733          	add	a4,a4,a5
    4a9c:	00f585b3          	add	a1,a1,a5
    4aa0:	01176863          	bltu	a4,a7,4ab0 <memcpy+0x178>
    4aa4:	00c12403          	lw	s0,12(sp)
    4aa8:	01010113          	addi	sp,sp,16
    4aac:	00008067          	ret
    4ab0:	0005c783          	lbu	a5,0(a1)
    4ab4:	00170713          	addi	a4,a4,1
    4ab8:	00158593          	addi	a1,a1,1
    4abc:	fef70fa3          	sb	a5,-1(a4)
    4ac0:	fee882e3          	beq	a7,a4,4aa4 <memcpy+0x16c>
    4ac4:	0005c783          	lbu	a5,0(a1)
    4ac8:	00170713          	addi	a4,a4,1
    4acc:	00158593          	addi	a1,a1,1
    4ad0:	fef70fa3          	sb	a5,-1(a4)
    4ad4:	fce89ee3          	bne	a7,a4,4ab0 <memcpy+0x178>
    4ad8:	fcdff06f          	j	4aa4 <memcpy+0x16c>

00004adc <memset>:
    4adc:	00f00313          	li	t1,15
    4ae0:	00050713          	mv	a4,a0
    4ae4:	02c37e63          	bgeu	t1,a2,4b20 <memset+0x44>
    4ae8:	00f77793          	andi	a5,a4,15
    4aec:	0a079063          	bnez	a5,4b8c <memset+0xb0>
    4af0:	08059263          	bnez	a1,4b74 <memset+0x98>
    4af4:	ff067693          	andi	a3,a2,-16
    4af8:	00f67613          	andi	a2,a2,15
    4afc:	00e686b3          	add	a3,a3,a4
    4b00:	00b72023          	sw	a1,0(a4)
    4b04:	00b72223          	sw	a1,4(a4)
    4b08:	00b72423          	sw	a1,8(a4)
    4b0c:	00b72623          	sw	a1,12(a4)
    4b10:	01070713          	addi	a4,a4,16
    4b14:	fed766e3          	bltu	a4,a3,4b00 <memset+0x24>
    4b18:	00061463          	bnez	a2,4b20 <memset+0x44>
    4b1c:	00008067          	ret
    4b20:	40c306b3          	sub	a3,t1,a2
    4b24:	00269693          	slli	a3,a3,0x2
    4b28:	00000297          	auipc	t0,0x0
    4b2c:	005686b3          	add	a3,a3,t0
    4b30:	00c68067          	jr	12(a3)
    4b34:	00b70723          	sb	a1,14(a4)
    4b38:	00b706a3          	sb	a1,13(a4)
    4b3c:	00b70623          	sb	a1,12(a4)
    4b40:	00b705a3          	sb	a1,11(a4)
    4b44:	00b70523          	sb	a1,10(a4)
    4b48:	00b704a3          	sb	a1,9(a4)
    4b4c:	00b70423          	sb	a1,8(a4)
    4b50:	00b703a3          	sb	a1,7(a4)
    4b54:	00b70323          	sb	a1,6(a4)
    4b58:	00b702a3          	sb	a1,5(a4)
    4b5c:	00b70223          	sb	a1,4(a4)
    4b60:	00b701a3          	sb	a1,3(a4)
    4b64:	00b70123          	sb	a1,2(a4)
    4b68:	00b700a3          	sb	a1,1(a4)
    4b6c:	00b70023          	sb	a1,0(a4)
    4b70:	00008067          	ret
    4b74:	0ff5f593          	zext.b	a1,a1
    4b78:	00859693          	slli	a3,a1,0x8
    4b7c:	00d5e5b3          	or	a1,a1,a3
    4b80:	01059693          	slli	a3,a1,0x10
    4b84:	00d5e5b3          	or	a1,a1,a3
    4b88:	f6dff06f          	j	4af4 <memset+0x18>
    4b8c:	00279693          	slli	a3,a5,0x2
    4b90:	00000297          	auipc	t0,0x0
    4b94:	005686b3          	add	a3,a3,t0
    4b98:	00008293          	mv	t0,ra
    4b9c:	fa0680e7          	jalr	-96(a3)
    4ba0:	00028093          	mv	ra,t0
    4ba4:	ff078793          	addi	a5,a5,-16
    4ba8:	40f70733          	sub	a4,a4,a5
    4bac:	00f60633          	add	a2,a2,a5
    4bb0:	f6c378e3          	bgeu	t1,a2,4b20 <memset+0x44>
    4bb4:	f3dff06f          	j	4af0 <memset+0x14>

00004bb8 <__malloc_lock>:
    4bb8:	88018513          	addi	a0,gp,-1920 # 99e8 <__lock___malloc_recursive_mutex>
    4bbc:	dd4ff06f          	j	4190 <__retarget_lock_acquire_recursive>

00004bc0 <__malloc_unlock>:
    4bc0:	88018513          	addi	a0,gp,-1920 # 99e8 <__lock___malloc_recursive_mutex>
    4bc4:	de4ff06f          	j	41a8 <__retarget_lock_release_recursive>

00004bc8 <_puts_r>:
    4bc8:	fd010113          	addi	sp,sp,-48
    4bcc:	02812423          	sw	s0,40(sp)
    4bd0:	00050413          	mv	s0,a0
    4bd4:	00058513          	mv	a0,a1
    4bd8:	02912223          	sw	s1,36(sp)
    4bdc:	02112623          	sw	ra,44(sp)
    4be0:	00058493          	mv	s1,a1
    4be4:	544000ef          	jal	ra,5128 <strlen>
    4be8:	00150713          	addi	a4,a0,1
    4bec:	00003697          	auipc	a3,0x3
    4bf0:	16868693          	addi	a3,a3,360 # 7d54 <__fini_array_end+0xf8>
    4bf4:	00e12623          	sw	a4,12(sp)
    4bf8:	03842783          	lw	a5,56(s0)
    4bfc:	01010713          	addi	a4,sp,16
    4c00:	00d12c23          	sw	a3,24(sp)
    4c04:	00e12223          	sw	a4,4(sp)
    4c08:	00100693          	li	a3,1
    4c0c:	00200713          	li	a4,2
    4c10:	00912823          	sw	s1,16(sp)
    4c14:	00a12a23          	sw	a0,20(sp)
    4c18:	00d12e23          	sw	a3,28(sp)
    4c1c:	00e12423          	sw	a4,8(sp)
    4c20:	00842483          	lw	s1,8(s0)
    4c24:	08078a63          	beqz	a5,4cb8 <_puts_r+0xf0>
    4c28:	0644a703          	lw	a4,100(s1)
    4c2c:	00c49783          	lh	a5,12(s1)
    4c30:	00177713          	andi	a4,a4,1
    4c34:	00071663          	bnez	a4,4c40 <_puts_r+0x78>
    4c38:	2007f713          	andi	a4,a5,512
    4c3c:	0a070463          	beqz	a4,4ce4 <_puts_r+0x11c>
    4c40:	01279713          	slli	a4,a5,0x12
    4c44:	02074263          	bltz	a4,4c68 <_puts_r+0xa0>
    4c48:	0644a703          	lw	a4,100(s1)
    4c4c:	000026b7          	lui	a3,0x2
    4c50:	00d7e7b3          	or	a5,a5,a3
    4c54:	ffffe6b7          	lui	a3,0xffffe
    4c58:	fff68693          	addi	a3,a3,-1 # ffffdfff <__alt_data_end+0xfdffdfff>
    4c5c:	00d77733          	and	a4,a4,a3
    4c60:	00f49623          	sh	a5,12(s1)
    4c64:	06e4a223          	sw	a4,100(s1)
    4c68:	00040513          	mv	a0,s0
    4c6c:	00410613          	addi	a2,sp,4
    4c70:	00048593          	mv	a1,s1
    4c74:	271000ef          	jal	ra,56e4 <__sfvwrite_r>
    4c78:	0644a783          	lw	a5,100(s1)
    4c7c:	00153413          	seqz	s0,a0
    4c80:	40800433          	neg	s0,s0
    4c84:	00b47413          	andi	s0,s0,11
    4c88:	0017f793          	andi	a5,a5,1
    4c8c:	fff40413          	addi	s0,s0,-1
    4c90:	00079863          	bnez	a5,4ca0 <_puts_r+0xd8>
    4c94:	00c4d783          	lhu	a5,12(s1)
    4c98:	2007f793          	andi	a5,a5,512
    4c9c:	02078463          	beqz	a5,4cc4 <_puts_r+0xfc>
    4ca0:	02c12083          	lw	ra,44(sp)
    4ca4:	00040513          	mv	a0,s0
    4ca8:	02812403          	lw	s0,40(sp)
    4cac:	02412483          	lw	s1,36(sp)
    4cb0:	03010113          	addi	sp,sp,48
    4cb4:	00008067          	ret
    4cb8:	00040513          	mv	a0,s0
    4cbc:	bc9fe0ef          	jal	ra,3884 <__sinit>
    4cc0:	f69ff06f          	j	4c28 <_puts_r+0x60>
    4cc4:	0584a503          	lw	a0,88(s1)
    4cc8:	ce0ff0ef          	jal	ra,41a8 <__retarget_lock_release_recursive>
    4ccc:	02c12083          	lw	ra,44(sp)
    4cd0:	00040513          	mv	a0,s0
    4cd4:	02812403          	lw	s0,40(sp)
    4cd8:	02412483          	lw	s1,36(sp)
    4cdc:	03010113          	addi	sp,sp,48
    4ce0:	00008067          	ret
    4ce4:	0584a503          	lw	a0,88(s1)
    4ce8:	ca8ff0ef          	jal	ra,4190 <__retarget_lock_acquire_recursive>
    4cec:	00c49783          	lh	a5,12(s1)
    4cf0:	f51ff06f          	j	4c40 <_puts_r+0x78>

00004cf4 <puts>:
    4cf4:	00050593          	mv	a1,a0
    4cf8:	8281a503          	lw	a0,-2008(gp) # 9990 <_impure_ptr>
    4cfc:	ecdff06f          	j	4bc8 <_puts_r>

00004d00 <cleanup_glue>:
    4d00:	fe010113          	addi	sp,sp,-32
    4d04:	01212823          	sw	s2,16(sp)
    4d08:	0005a903          	lw	s2,0(a1)
    4d0c:	00812c23          	sw	s0,24(sp)
    4d10:	00912a23          	sw	s1,20(sp)
    4d14:	00112e23          	sw	ra,28(sp)
    4d18:	01312623          	sw	s3,12(sp)
    4d1c:	01412423          	sw	s4,8(sp)
    4d20:	00058413          	mv	s0,a1
    4d24:	00050493          	mv	s1,a0
    4d28:	04090263          	beqz	s2,4d6c <cleanup_glue+0x6c>
    4d2c:	00092983          	lw	s3,0(s2)
    4d30:	02098863          	beqz	s3,4d60 <cleanup_glue+0x60>
    4d34:	0009aa03          	lw	s4,0(s3)
    4d38:	000a0e63          	beqz	s4,4d54 <cleanup_glue+0x54>
    4d3c:	000a2583          	lw	a1,0(s4)
    4d40:	00058463          	beqz	a1,4d48 <cleanup_glue+0x48>
    4d44:	fbdff0ef          	jal	ra,4d00 <cleanup_glue>
    4d48:	000a0593          	mv	a1,s4
    4d4c:	00048513          	mv	a0,s1
    4d50:	fd1fe0ef          	jal	ra,3d20 <_free_r>
    4d54:	00098593          	mv	a1,s3
    4d58:	00048513          	mv	a0,s1
    4d5c:	fc5fe0ef          	jal	ra,3d20 <_free_r>
    4d60:	00090593          	mv	a1,s2
    4d64:	00048513          	mv	a0,s1
    4d68:	fb9fe0ef          	jal	ra,3d20 <_free_r>
    4d6c:	00040593          	mv	a1,s0
    4d70:	01812403          	lw	s0,24(sp)
    4d74:	01c12083          	lw	ra,28(sp)
    4d78:	01012903          	lw	s2,16(sp)
    4d7c:	00c12983          	lw	s3,12(sp)
    4d80:	00812a03          	lw	s4,8(sp)
    4d84:	00048513          	mv	a0,s1
    4d88:	01412483          	lw	s1,20(sp)
    4d8c:	02010113          	addi	sp,sp,32
    4d90:	f91fe06f          	j	3d20 <_free_r>

00004d94 <_reclaim_reent>:
    4d94:	8281a783          	lw	a5,-2008(gp) # 9990 <_impure_ptr>
    4d98:	10a78a63          	beq	a5,a0,4eac <_reclaim_reent+0x118>
    4d9c:	04c52583          	lw	a1,76(a0)
    4da0:	fe010113          	addi	sp,sp,-32
    4da4:	00912a23          	sw	s1,20(sp)
    4da8:	00112e23          	sw	ra,28(sp)
    4dac:	00812c23          	sw	s0,24(sp)
    4db0:	01212823          	sw	s2,16(sp)
    4db4:	01312623          	sw	s3,12(sp)
    4db8:	00050493          	mv	s1,a0
    4dbc:	04058063          	beqz	a1,4dfc <_reclaim_reent+0x68>
    4dc0:	00000913          	li	s2,0
    4dc4:	08000993          	li	s3,128
    4dc8:	012587b3          	add	a5,a1,s2
    4dcc:	0007a403          	lw	s0,0(a5)
    4dd0:	00040e63          	beqz	s0,4dec <_reclaim_reent+0x58>
    4dd4:	00040593          	mv	a1,s0
    4dd8:	00042403          	lw	s0,0(s0)
    4ddc:	00048513          	mv	a0,s1
    4de0:	f41fe0ef          	jal	ra,3d20 <_free_r>
    4de4:	fe0418e3          	bnez	s0,4dd4 <_reclaim_reent+0x40>
    4de8:	04c4a583          	lw	a1,76(s1)
    4dec:	00490913          	addi	s2,s2,4
    4df0:	fd391ce3          	bne	s2,s3,4dc8 <_reclaim_reent+0x34>
    4df4:	00048513          	mv	a0,s1
    4df8:	f29fe0ef          	jal	ra,3d20 <_free_r>
    4dfc:	0404a583          	lw	a1,64(s1)
    4e00:	00058663          	beqz	a1,4e0c <_reclaim_reent+0x78>
    4e04:	00048513          	mv	a0,s1
    4e08:	f19fe0ef          	jal	ra,3d20 <_free_r>
    4e0c:	1484a403          	lw	s0,328(s1)
    4e10:	02040063          	beqz	s0,4e30 <_reclaim_reent+0x9c>
    4e14:	14c48913          	addi	s2,s1,332
    4e18:	01240c63          	beq	s0,s2,4e30 <_reclaim_reent+0x9c>
    4e1c:	00040593          	mv	a1,s0
    4e20:	00042403          	lw	s0,0(s0)
    4e24:	00048513          	mv	a0,s1
    4e28:	ef9fe0ef          	jal	ra,3d20 <_free_r>
    4e2c:	fe8918e3          	bne	s2,s0,4e1c <_reclaim_reent+0x88>
    4e30:	0544a583          	lw	a1,84(s1)
    4e34:	00058663          	beqz	a1,4e40 <_reclaim_reent+0xac>
    4e38:	00048513          	mv	a0,s1
    4e3c:	ee5fe0ef          	jal	ra,3d20 <_free_r>
    4e40:	0384a783          	lw	a5,56(s1)
    4e44:	04078663          	beqz	a5,4e90 <_reclaim_reent+0xfc>
    4e48:	03c4a783          	lw	a5,60(s1)
    4e4c:	00048513          	mv	a0,s1
    4e50:	000780e7          	jalr	a5
    4e54:	2e04a403          	lw	s0,736(s1)
    4e58:	02040c63          	beqz	s0,4e90 <_reclaim_reent+0xfc>
    4e5c:	00042583          	lw	a1,0(s0)
    4e60:	00058663          	beqz	a1,4e6c <_reclaim_reent+0xd8>
    4e64:	00048513          	mv	a0,s1
    4e68:	e99ff0ef          	jal	ra,4d00 <cleanup_glue>
    4e6c:	00040593          	mv	a1,s0
    4e70:	01812403          	lw	s0,24(sp)
    4e74:	01c12083          	lw	ra,28(sp)
    4e78:	01012903          	lw	s2,16(sp)
    4e7c:	00c12983          	lw	s3,12(sp)
    4e80:	00048513          	mv	a0,s1
    4e84:	01412483          	lw	s1,20(sp)
    4e88:	02010113          	addi	sp,sp,32
    4e8c:	e95fe06f          	j	3d20 <_free_r>
    4e90:	01c12083          	lw	ra,28(sp)
    4e94:	01812403          	lw	s0,24(sp)
    4e98:	01412483          	lw	s1,20(sp)
    4e9c:	01012903          	lw	s2,16(sp)
    4ea0:	00c12983          	lw	s3,12(sp)
    4ea4:	02010113          	addi	sp,sp,32
    4ea8:	00008067          	ret
    4eac:	00008067          	ret

00004eb0 <_sbrk_r>:
    4eb0:	ff010113          	addi	sp,sp,-16
    4eb4:	00812423          	sw	s0,8(sp)
    4eb8:	00050413          	mv	s0,a0
    4ebc:	00058513          	mv	a0,a1
    4ec0:	8a01a023          	sw	zero,-1888(gp) # 9a08 <errno>
    4ec4:	00112623          	sw	ra,12(sp)
    4ec8:	189020ef          	jal	ra,7850 <_sbrk>
    4ecc:	fff00793          	li	a5,-1
    4ed0:	00f50a63          	beq	a0,a5,4ee4 <_sbrk_r+0x34>
    4ed4:	00c12083          	lw	ra,12(sp)
    4ed8:	00812403          	lw	s0,8(sp)
    4edc:	01010113          	addi	sp,sp,16
    4ee0:	00008067          	ret
    4ee4:	8a01a783          	lw	a5,-1888(gp) # 9a08 <errno>
    4ee8:	fe0786e3          	beqz	a5,4ed4 <_sbrk_r+0x24>
    4eec:	00c12083          	lw	ra,12(sp)
    4ef0:	00f42023          	sw	a5,0(s0)
    4ef4:	00812403          	lw	s0,8(sp)
    4ef8:	01010113          	addi	sp,sp,16
    4efc:	00008067          	ret

00004f00 <__stack_chk_fail>:
    4f00:	00003797          	auipc	a5,0x3
    4f04:	e5878793          	addi	a5,a5,-424 # 7d58 <__fini_array_end+0xfc>
    4f08:	0007af83          	lw	t6,0(a5)
    4f0c:	0047af03          	lw	t5,4(a5)
    4f10:	0087ae83          	lw	t4,8(a5)
    4f14:	00c7ae03          	lw	t3,12(a5)
    4f18:	0107a303          	lw	t1,16(a5)
    4f1c:	0147a883          	lw	a7,20(a5)
    4f20:	0187a803          	lw	a6,24(a5)
    4f24:	0247a683          	lw	a3,36(a5)
    4f28:	0287a703          	lw	a4,40(a5)
    4f2c:	01c7a583          	lw	a1,28(a5)
    4f30:	0207a603          	lw	a2,32(a5)
    4f34:	02c7c783          	lbu	a5,44(a5)
    4f38:	fc010113          	addi	sp,sp,-64
    4f3c:	00010513          	mv	a0,sp
    4f40:	02112e23          	sw	ra,60(sp)
    4f44:	01f12023          	sw	t6,0(sp)
    4f48:	01e12223          	sw	t5,4(sp)
    4f4c:	01d12423          	sw	t4,8(sp)
    4f50:	01c12623          	sw	t3,12(sp)
    4f54:	00612823          	sw	t1,16(sp)
    4f58:	01112a23          	sw	a7,20(sp)
    4f5c:	01012c23          	sw	a6,24(sp)
    4f60:	02d12223          	sw	a3,36(sp)
    4f64:	02e12423          	sw	a4,40(sp)
    4f68:	02f10623          	sb	a5,44(sp)
    4f6c:	00b12e23          	sw	a1,28(sp)
    4f70:	02c12023          	sw	a2,32(sp)
    4f74:	1b4000ef          	jal	ra,5128 <strlen>
    4f78:	00050613          	mv	a2,a0
    4f7c:	00010593          	mv	a1,sp
    4f80:	00200513          	li	a0,2
    4f84:	284000ef          	jal	ra,5208 <write>
    4f88:	00600513          	li	a0,6
    4f8c:	6d4010ef          	jal	ra,6660 <raise>
    4f90:	07f00513          	li	a0,127
    4f94:	7fd010ef          	jal	ra,6f90 <_exit>

00004f98 <__stack_chk_fail_local>:
    4f98:	ff010113          	addi	sp,sp,-16
    4f9c:	00112623          	sw	ra,12(sp)
    4fa0:	f61ff0ef          	jal	ra,4f00 <__stack_chk_fail>

00004fa4 <__stack_chk_init>:
    4fa4:	8a418793          	addi	a5,gp,-1884 # 9a0c <__stack_chk_guard>
    4fa8:	0007a703          	lw	a4,0(a5)
    4fac:	00071663          	bnez	a4,4fb8 <__stack_chk_init+0x14>
    4fb0:	ff0a0737          	lui	a4,0xff0a0
    4fb4:	00e7a023          	sw	a4,0(a5)
    4fb8:	00008067          	ret

00004fbc <__sread>:
    4fbc:	ff010113          	addi	sp,sp,-16
    4fc0:	00812423          	sw	s0,8(sp)
    4fc4:	00058413          	mv	s0,a1
    4fc8:	00e59583          	lh	a1,14(a1)
    4fcc:	00112623          	sw	ra,12(sp)
    4fd0:	64d000ef          	jal	ra,5e1c <_read_r>
    4fd4:	02054063          	bltz	a0,4ff4 <__sread+0x38>
    4fd8:	05042783          	lw	a5,80(s0)
    4fdc:	00c12083          	lw	ra,12(sp)
    4fe0:	00a787b3          	add	a5,a5,a0
    4fe4:	04f42823          	sw	a5,80(s0)
    4fe8:	00812403          	lw	s0,8(sp)
    4fec:	01010113          	addi	sp,sp,16
    4ff0:	00008067          	ret
    4ff4:	00c45783          	lhu	a5,12(s0)
    4ff8:	fffff737          	lui	a4,0xfffff
    4ffc:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfdffefff>
    5000:	00e7f7b3          	and	a5,a5,a4
    5004:	00c12083          	lw	ra,12(sp)
    5008:	00f41623          	sh	a5,12(s0)
    500c:	00812403          	lw	s0,8(sp)
    5010:	01010113          	addi	sp,sp,16
    5014:	00008067          	ret

00005018 <__seofread>:
    5018:	00000513          	li	a0,0
    501c:	00008067          	ret

00005020 <__swrite>:
    5020:	00c59783          	lh	a5,12(a1)
    5024:	fe010113          	addi	sp,sp,-32
    5028:	00812c23          	sw	s0,24(sp)
    502c:	00912a23          	sw	s1,20(sp)
    5030:	01212823          	sw	s2,16(sp)
    5034:	01312623          	sw	s3,12(sp)
    5038:	00112e23          	sw	ra,28(sp)
    503c:	1007f713          	andi	a4,a5,256
    5040:	00058413          	mv	s0,a1
    5044:	00050493          	mv	s1,a0
    5048:	00060913          	mv	s2,a2
    504c:	00068993          	mv	s3,a3
    5050:	04071063          	bnez	a4,5090 <__swrite+0x70>
    5054:	fffff737          	lui	a4,0xfffff
    5058:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfdffefff>
    505c:	00e7f7b3          	and	a5,a5,a4
    5060:	00e41583          	lh	a1,14(s0)
    5064:	00f41623          	sh	a5,12(s0)
    5068:	01812403          	lw	s0,24(sp)
    506c:	01c12083          	lw	ra,28(sp)
    5070:	00098693          	mv	a3,s3
    5074:	00090613          	mv	a2,s2
    5078:	00c12983          	lw	s3,12(sp)
    507c:	01012903          	lw	s2,16(sp)
    5080:	00048513          	mv	a0,s1
    5084:	01412483          	lw	s1,20(sp)
    5088:	02010113          	addi	sp,sp,32
    508c:	1900006f          	j	521c <_write_r>
    5090:	00e59583          	lh	a1,14(a1)
    5094:	00200693          	li	a3,2
    5098:	00000613          	li	a2,0
    509c:	2e9000ef          	jal	ra,5b84 <_lseek_r>
    50a0:	00c41783          	lh	a5,12(s0)
    50a4:	fb1ff06f          	j	5054 <__swrite+0x34>

000050a8 <__sseek>:
    50a8:	ff010113          	addi	sp,sp,-16
    50ac:	00812423          	sw	s0,8(sp)
    50b0:	00058413          	mv	s0,a1
    50b4:	00e59583          	lh	a1,14(a1)
    50b8:	00112623          	sw	ra,12(sp)
    50bc:	2c9000ef          	jal	ra,5b84 <_lseek_r>
    50c0:	fff00793          	li	a5,-1
    50c4:	02f50863          	beq	a0,a5,50f4 <__sseek+0x4c>
    50c8:	00c45783          	lhu	a5,12(s0)
    50cc:	00001737          	lui	a4,0x1
    50d0:	00c12083          	lw	ra,12(sp)
    50d4:	00e7e7b3          	or	a5,a5,a4
    50d8:	01079793          	slli	a5,a5,0x10
    50dc:	4107d793          	srai	a5,a5,0x10
    50e0:	04a42823          	sw	a0,80(s0)
    50e4:	00f41623          	sh	a5,12(s0)
    50e8:	00812403          	lw	s0,8(sp)
    50ec:	01010113          	addi	sp,sp,16
    50f0:	00008067          	ret
    50f4:	00c45783          	lhu	a5,12(s0)
    50f8:	fffff737          	lui	a4,0xfffff
    50fc:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfdffefff>
    5100:	00e7f7b3          	and	a5,a5,a4
    5104:	01079793          	slli	a5,a5,0x10
    5108:	4107d793          	srai	a5,a5,0x10
    510c:	00c12083          	lw	ra,12(sp)
    5110:	00f41623          	sh	a5,12(s0)
    5114:	00812403          	lw	s0,8(sp)
    5118:	01010113          	addi	sp,sp,16
    511c:	00008067          	ret

00005120 <__sclose>:
    5120:	00e59583          	lh	a1,14(a1)
    5124:	3900006f          	j	54b4 <_close_r>

00005128 <strlen>:
    5128:	00357793          	andi	a5,a0,3
    512c:	00050713          	mv	a4,a0
    5130:	04079c63          	bnez	a5,5188 <strlen+0x60>
    5134:	7f7f86b7          	lui	a3,0x7f7f8
    5138:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__alt_data_end+0x7d7f7f7f>
    513c:	fff00593          	li	a1,-1
    5140:	00072603          	lw	a2,0(a4)
    5144:	00470713          	addi	a4,a4,4
    5148:	00d677b3          	and	a5,a2,a3
    514c:	00d787b3          	add	a5,a5,a3
    5150:	00c7e7b3          	or	a5,a5,a2
    5154:	00d7e7b3          	or	a5,a5,a3
    5158:	feb784e3          	beq	a5,a1,5140 <strlen+0x18>
    515c:	ffc74683          	lbu	a3,-4(a4)
    5160:	40a707b3          	sub	a5,a4,a0
    5164:	04068463          	beqz	a3,51ac <strlen+0x84>
    5168:	ffd74683          	lbu	a3,-3(a4)
    516c:	02068c63          	beqz	a3,51a4 <strlen+0x7c>
    5170:	ffe74503          	lbu	a0,-2(a4)
    5174:	00a03533          	snez	a0,a0
    5178:	00f50533          	add	a0,a0,a5
    517c:	ffe50513          	addi	a0,a0,-2
    5180:	00008067          	ret
    5184:	fa0688e3          	beqz	a3,5134 <strlen+0xc>
    5188:	00074783          	lbu	a5,0(a4)
    518c:	00170713          	addi	a4,a4,1
    5190:	00377693          	andi	a3,a4,3
    5194:	fe0798e3          	bnez	a5,5184 <strlen+0x5c>
    5198:	40a70733          	sub	a4,a4,a0
    519c:	fff70513          	addi	a0,a4,-1
    51a0:	00008067          	ret
    51a4:	ffd78513          	addi	a0,a5,-3
    51a8:	00008067          	ret
    51ac:	ffc78513          	addi	a0,a5,-4
    51b0:	00008067          	ret

000051b4 <close>:
    51b4:	00050593          	mv	a1,a0
    51b8:	8281a503          	lw	a0,-2008(gp) # 9990 <_impure_ptr>
    51bc:	2f80006f          	j	54b4 <_close_r>

000051c0 <open>:
    51c0:	fc010113          	addi	sp,sp,-64
    51c4:	02c12423          	sw	a2,40(sp)
    51c8:	02d12623          	sw	a3,44(sp)
    51cc:	02f12a23          	sw	a5,52(sp)
    51d0:	00060693          	mv	a3,a2
    51d4:	02810793          	addi	a5,sp,40
    51d8:	00058613          	mv	a2,a1
    51dc:	00050593          	mv	a1,a0
    51e0:	8281a503          	lw	a0,-2008(gp) # 9990 <_impure_ptr>
    51e4:	00112e23          	sw	ra,28(sp)
    51e8:	02e12823          	sw	a4,48(sp)
    51ec:	03012c23          	sw	a6,56(sp)
    51f0:	03112e23          	sw	a7,60(sp)
    51f4:	00f12623          	sw	a5,12(sp)
    51f8:	3c9000ef          	jal	ra,5dc0 <_open_r>
    51fc:	01c12083          	lw	ra,28(sp)
    5200:	04010113          	addi	sp,sp,64
    5204:	00008067          	ret

00005208 <write>:
    5208:	00060693          	mv	a3,a2
    520c:	00058613          	mv	a2,a1
    5210:	00050593          	mv	a1,a0
    5214:	8281a503          	lw	a0,-2008(gp) # 9990 <_impure_ptr>
    5218:	0040006f          	j	521c <_write_r>

0000521c <_write_r>:
    521c:	ff010113          	addi	sp,sp,-16
    5220:	00058713          	mv	a4,a1
    5224:	00812423          	sw	s0,8(sp)
    5228:	00060593          	mv	a1,a2
    522c:	00050413          	mv	s0,a0
    5230:	00068613          	mv	a2,a3
    5234:	00070513          	mv	a0,a4
    5238:	8a01a023          	sw	zero,-1888(gp) # 9a08 <errno>
    523c:	00112623          	sw	ra,12(sp)
    5240:	704020ef          	jal	ra,7944 <_write>
    5244:	fff00793          	li	a5,-1
    5248:	00f50a63          	beq	a0,a5,525c <_write_r+0x40>
    524c:	00c12083          	lw	ra,12(sp)
    5250:	00812403          	lw	s0,8(sp)
    5254:	01010113          	addi	sp,sp,16
    5258:	00008067          	ret
    525c:	8a01a783          	lw	a5,-1888(gp) # 9a08 <errno>
    5260:	fe0786e3          	beqz	a5,524c <_write_r+0x30>
    5264:	00c12083          	lw	ra,12(sp)
    5268:	00f42023          	sw	a5,0(s0)
    526c:	00812403          	lw	s0,8(sp)
    5270:	01010113          	addi	sp,sp,16
    5274:	00008067          	ret

00005278 <__register_exitproc>:
    5278:	fe010113          	addi	sp,sp,-32
    527c:	01212823          	sw	s2,16(sp)
    5280:	83418913          	addi	s2,gp,-1996 # 999c <__atexit_recursive_mutex>
    5284:	00812c23          	sw	s0,24(sp)
    5288:	00050413          	mv	s0,a0
    528c:	00092503          	lw	a0,0(s2)
    5290:	00912a23          	sw	s1,20(sp)
    5294:	01312623          	sw	s3,12(sp)
    5298:	01412423          	sw	s4,8(sp)
    529c:	00112e23          	sw	ra,28(sp)
    52a0:	00058493          	mv	s1,a1
    52a4:	00060a13          	mv	s4,a2
    52a8:	00068993          	mv	s3,a3
    52ac:	ee5fe0ef          	jal	ra,4190 <__retarget_lock_acquire_recursive>
    52b0:	00003717          	auipc	a4,0x3
    52b4:	ad872703          	lw	a4,-1320(a4) # 7d88 <_global_impure_ptr>
    52b8:	14872783          	lw	a5,328(a4)
    52bc:	08078663          	beqz	a5,5348 <__register_exitproc+0xd0>
    52c0:	0047a703          	lw	a4,4(a5)
    52c4:	01f00593          	li	a1,31
    52c8:	00092503          	lw	a0,0(s2)
    52cc:	08e5c463          	blt	a1,a4,5354 <__register_exitproc+0xdc>
    52d0:	00271593          	slli	a1,a4,0x2
    52d4:	02041e63          	bnez	s0,5310 <__register_exitproc+0x98>
    52d8:	00170713          	addi	a4,a4,1
    52dc:	00e7a223          	sw	a4,4(a5)
    52e0:	00b787b3          	add	a5,a5,a1
    52e4:	0097a423          	sw	s1,8(a5)
    52e8:	ec1fe0ef          	jal	ra,41a8 <__retarget_lock_release_recursive>
    52ec:	00000513          	li	a0,0
    52f0:	01c12083          	lw	ra,28(sp)
    52f4:	01812403          	lw	s0,24(sp)
    52f8:	01412483          	lw	s1,20(sp)
    52fc:	01012903          	lw	s2,16(sp)
    5300:	00c12983          	lw	s3,12(sp)
    5304:	00812a03          	lw	s4,8(sp)
    5308:	02010113          	addi	sp,sp,32
    530c:	00008067          	ret
    5310:	00b78833          	add	a6,a5,a1
    5314:	09482423          	sw	s4,136(a6)
    5318:	1887a683          	lw	a3,392(a5)
    531c:	00100613          	li	a2,1
    5320:	00e61633          	sll	a2,a2,a4
    5324:	00c6e6b3          	or	a3,a3,a2
    5328:	18d7a423          	sw	a3,392(a5)
    532c:	11382423          	sw	s3,264(a6)
    5330:	00200693          	li	a3,2
    5334:	fad412e3          	bne	s0,a3,52d8 <__register_exitproc+0x60>
    5338:	18c7a683          	lw	a3,396(a5)
    533c:	00c6e6b3          	or	a3,a3,a2
    5340:	18d7a623          	sw	a3,396(a5)
    5344:	f95ff06f          	j	52d8 <__register_exitproc+0x60>
    5348:	14c70793          	addi	a5,a4,332
    534c:	14f72423          	sw	a5,328(a4)
    5350:	f71ff06f          	j	52c0 <__register_exitproc+0x48>
    5354:	e55fe0ef          	jal	ra,41a8 <__retarget_lock_release_recursive>
    5358:	fff00513          	li	a0,-1
    535c:	f95ff06f          	j	52f0 <__register_exitproc+0x78>

00005360 <__call_exitprocs>:
    5360:	fd010113          	addi	sp,sp,-48
    5364:	01712623          	sw	s7,12(sp)
    5368:	83418b93          	addi	s7,gp,-1996 # 999c <__atexit_recursive_mutex>
    536c:	01612823          	sw	s6,16(sp)
    5370:	00050b13          	mv	s6,a0
    5374:	000ba503          	lw	a0,0(s7)
    5378:	03212023          	sw	s2,32(sp)
    537c:	01312e23          	sw	s3,28(sp)
    5380:	01412c23          	sw	s4,24(sp)
    5384:	01512a23          	sw	s5,20(sp)
    5388:	01812423          	sw	s8,8(sp)
    538c:	02112623          	sw	ra,44(sp)
    5390:	02812423          	sw	s0,40(sp)
    5394:	02912223          	sw	s1,36(sp)
    5398:	01912223          	sw	s9,4(sp)
    539c:	00058c13          	mv	s8,a1
    53a0:	df1fe0ef          	jal	ra,4190 <__retarget_lock_acquire_recursive>
    53a4:	00003a17          	auipc	s4,0x3
    53a8:	9e4a2a03          	lw	s4,-1564(s4) # 7d88 <_global_impure_ptr>
    53ac:	148a2903          	lw	s2,328(s4)
    53b0:	00100a93          	li	s5,1
    53b4:	fff00993          	li	s3,-1
    53b8:	02090863          	beqz	s2,53e8 <__call_exitprocs+0x88>
    53bc:	00492483          	lw	s1,4(s2)
    53c0:	fff48413          	addi	s0,s1,-1
    53c4:	02044263          	bltz	s0,53e8 <__call_exitprocs+0x88>
    53c8:	00249493          	slli	s1,s1,0x2
    53cc:	009904b3          	add	s1,s2,s1
    53d0:	040c0863          	beqz	s8,5420 <__call_exitprocs+0xc0>
    53d4:	1044a783          	lw	a5,260(s1)
    53d8:	05878463          	beq	a5,s8,5420 <__call_exitprocs+0xc0>
    53dc:	fff40413          	addi	s0,s0,-1
    53e0:	ffc48493          	addi	s1,s1,-4
    53e4:	ff3416e3          	bne	s0,s3,53d0 <__call_exitprocs+0x70>
    53e8:	02812403          	lw	s0,40(sp)
    53ec:	000ba503          	lw	a0,0(s7)
    53f0:	02c12083          	lw	ra,44(sp)
    53f4:	02412483          	lw	s1,36(sp)
    53f8:	02012903          	lw	s2,32(sp)
    53fc:	01c12983          	lw	s3,28(sp)
    5400:	01812a03          	lw	s4,24(sp)
    5404:	01412a83          	lw	s5,20(sp)
    5408:	01012b03          	lw	s6,16(sp)
    540c:	00c12b83          	lw	s7,12(sp)
    5410:	00812c03          	lw	s8,8(sp)
    5414:	00412c83          	lw	s9,4(sp)
    5418:	03010113          	addi	sp,sp,48
    541c:	d8dfe06f          	j	41a8 <__retarget_lock_release_recursive>
    5420:	00492783          	lw	a5,4(s2)
    5424:	0044a683          	lw	a3,4(s1)
    5428:	fff78793          	addi	a5,a5,-1
    542c:	04878e63          	beq	a5,s0,5488 <__call_exitprocs+0x128>
    5430:	0004a223          	sw	zero,4(s1)
    5434:	fa0684e3          	beqz	a3,53dc <__call_exitprocs+0x7c>
    5438:	18892783          	lw	a5,392(s2)
    543c:	008a9733          	sll	a4,s5,s0
    5440:	00492c83          	lw	s9,4(s2)
    5444:	00f777b3          	and	a5,a4,a5
    5448:	02079263          	bnez	a5,546c <__call_exitprocs+0x10c>
    544c:	000680e7          	jalr	a3
    5450:	00492703          	lw	a4,4(s2)
    5454:	148a2783          	lw	a5,328(s4)
    5458:	01971463          	bne	a4,s9,5460 <__call_exitprocs+0x100>
    545c:	f92780e3          	beq	a5,s2,53dc <__call_exitprocs+0x7c>
    5460:	f80784e3          	beqz	a5,53e8 <__call_exitprocs+0x88>
    5464:	00078913          	mv	s2,a5
    5468:	f55ff06f          	j	53bc <__call_exitprocs+0x5c>
    546c:	18c92783          	lw	a5,396(s2)
    5470:	0844a583          	lw	a1,132(s1)
    5474:	00f77733          	and	a4,a4,a5
    5478:	00071c63          	bnez	a4,5490 <__call_exitprocs+0x130>
    547c:	000b0513          	mv	a0,s6
    5480:	000680e7          	jalr	a3
    5484:	fcdff06f          	j	5450 <__call_exitprocs+0xf0>
    5488:	00892223          	sw	s0,4(s2)
    548c:	fa9ff06f          	j	5434 <__call_exitprocs+0xd4>
    5490:	00058513          	mv	a0,a1
    5494:	000680e7          	jalr	a3
    5498:	fb9ff06f          	j	5450 <__call_exitprocs+0xf0>

0000549c <register_fini>:
    549c:	00000793          	li	a5,0
    54a0:	00078863          	beqz	a5,54b0 <register_fini+0x14>
    54a4:	00000517          	auipc	a0,0x0
    54a8:	1e450513          	addi	a0,a0,484 # 5688 <__libc_fini_array>
    54ac:	e85fd06f          	j	3330 <atexit>
    54b0:	00008067          	ret

000054b4 <_close_r>:
    54b4:	ff010113          	addi	sp,sp,-16
    54b8:	00812423          	sw	s0,8(sp)
    54bc:	00050413          	mv	s0,a0
    54c0:	00058513          	mv	a0,a1
    54c4:	8a01a023          	sw	zero,-1888(gp) # 9a08 <errno>
    54c8:	00112623          	sw	ra,12(sp)
    54cc:	1e5010ef          	jal	ra,6eb0 <_close>
    54d0:	fff00793          	li	a5,-1
    54d4:	00f50a63          	beq	a0,a5,54e8 <_close_r+0x34>
    54d8:	00c12083          	lw	ra,12(sp)
    54dc:	00812403          	lw	s0,8(sp)
    54e0:	01010113          	addi	sp,sp,16
    54e4:	00008067          	ret
    54e8:	8a01a783          	lw	a5,-1888(gp) # 9a08 <errno>
    54ec:	fe0786e3          	beqz	a5,54d8 <_close_r+0x24>
    54f0:	00c12083          	lw	ra,12(sp)
    54f4:	00f42023          	sw	a5,0(s0)
    54f8:	00812403          	lw	s0,8(sp)
    54fc:	01010113          	addi	sp,sp,16
    5500:	00008067          	ret

00005504 <_fclose_r>:
    5504:	ff010113          	addi	sp,sp,-16
    5508:	00112623          	sw	ra,12(sp)
    550c:	00812423          	sw	s0,8(sp)
    5510:	00912223          	sw	s1,4(sp)
    5514:	01212023          	sw	s2,0(sp)
    5518:	0c058a63          	beqz	a1,55ec <_fclose_r+0xe8>
    551c:	00058413          	mv	s0,a1
    5520:	00050493          	mv	s1,a0
    5524:	00050663          	beqz	a0,5530 <_fclose_r+0x2c>
    5528:	03852783          	lw	a5,56(a0)
    552c:	0e078063          	beqz	a5,560c <_fclose_r+0x108>
    5530:	06442783          	lw	a5,100(s0)
    5534:	00c41703          	lh	a4,12(s0)
    5538:	0017f793          	andi	a5,a5,1
    553c:	0a079663          	bnez	a5,55e8 <_fclose_r+0xe4>
    5540:	20077713          	andi	a4,a4,512
    5544:	10070063          	beqz	a4,5644 <_fclose_r+0x140>
    5548:	00040593          	mv	a1,s0
    554c:	00048513          	mv	a0,s1
    5550:	e29fd0ef          	jal	ra,3378 <__sflush_r>
    5554:	02c42783          	lw	a5,44(s0)
    5558:	00050913          	mv	s2,a0
    555c:	00078a63          	beqz	a5,5570 <_fclose_r+0x6c>
    5560:	01c42583          	lw	a1,28(s0)
    5564:	00048513          	mv	a0,s1
    5568:	000780e7          	jalr	a5
    556c:	0a054c63          	bltz	a0,5624 <_fclose_r+0x120>
    5570:	00c45783          	lhu	a5,12(s0)
    5574:	0807f793          	andi	a5,a5,128
    5578:	0a079e63          	bnez	a5,5634 <_fclose_r+0x130>
    557c:	03042583          	lw	a1,48(s0)
    5580:	00058c63          	beqz	a1,5598 <_fclose_r+0x94>
    5584:	04040793          	addi	a5,s0,64
    5588:	00f58663          	beq	a1,a5,5594 <_fclose_r+0x90>
    558c:	00048513          	mv	a0,s1
    5590:	f90fe0ef          	jal	ra,3d20 <_free_r>
    5594:	02042823          	sw	zero,48(s0)
    5598:	04442583          	lw	a1,68(s0)
    559c:	00058863          	beqz	a1,55ac <_fclose_r+0xa8>
    55a0:	00048513          	mv	a0,s1
    55a4:	f7cfe0ef          	jal	ra,3d20 <_free_r>
    55a8:	04042223          	sw	zero,68(s0)
    55ac:	dd0fe0ef          	jal	ra,3b7c <__sfp_lock_acquire>
    55b0:	06442783          	lw	a5,100(s0)
    55b4:	00041623          	sh	zero,12(s0)
    55b8:	0017f793          	andi	a5,a5,1
    55bc:	0a078a63          	beqz	a5,5670 <_fclose_r+0x16c>
    55c0:	05842503          	lw	a0,88(s0)
    55c4:	bc5fe0ef          	jal	ra,4188 <__retarget_lock_close_recursive>
    55c8:	dbcfe0ef          	jal	ra,3b84 <__sfp_lock_release>
    55cc:	00c12083          	lw	ra,12(sp)
    55d0:	00812403          	lw	s0,8(sp)
    55d4:	00412483          	lw	s1,4(sp)
    55d8:	00090513          	mv	a0,s2
    55dc:	00012903          	lw	s2,0(sp)
    55e0:	01010113          	addi	sp,sp,16
    55e4:	00008067          	ret
    55e8:	f60710e3          	bnez	a4,5548 <_fclose_r+0x44>
    55ec:	00000913          	li	s2,0
    55f0:	00c12083          	lw	ra,12(sp)
    55f4:	00812403          	lw	s0,8(sp)
    55f8:	00412483          	lw	s1,4(sp)
    55fc:	00090513          	mv	a0,s2
    5600:	00012903          	lw	s2,0(sp)
    5604:	01010113          	addi	sp,sp,16
    5608:	00008067          	ret
    560c:	a78fe0ef          	jal	ra,3884 <__sinit>
    5610:	06442783          	lw	a5,100(s0)
    5614:	00c41703          	lh	a4,12(s0)
    5618:	0017f793          	andi	a5,a5,1
    561c:	fc0796e3          	bnez	a5,55e8 <_fclose_r+0xe4>
    5620:	f21ff06f          	j	5540 <_fclose_r+0x3c>
    5624:	00c45783          	lhu	a5,12(s0)
    5628:	fff00913          	li	s2,-1
    562c:	0807f793          	andi	a5,a5,128
    5630:	f40786e3          	beqz	a5,557c <_fclose_r+0x78>
    5634:	01042583          	lw	a1,16(s0)
    5638:	00048513          	mv	a0,s1
    563c:	ee4fe0ef          	jal	ra,3d20 <_free_r>
    5640:	f3dff06f          	j	557c <_fclose_r+0x78>
    5644:	05842503          	lw	a0,88(s0)
    5648:	b49fe0ef          	jal	ra,4190 <__retarget_lock_acquire_recursive>
    564c:	00c41783          	lh	a5,12(s0)
    5650:	ee079ce3          	bnez	a5,5548 <_fclose_r+0x44>
    5654:	06442783          	lw	a5,100(s0)
    5658:	0017f793          	andi	a5,a5,1
    565c:	f80798e3          	bnez	a5,55ec <_fclose_r+0xe8>
    5660:	05842503          	lw	a0,88(s0)
    5664:	00000913          	li	s2,0
    5668:	b41fe0ef          	jal	ra,41a8 <__retarget_lock_release_recursive>
    566c:	f85ff06f          	j	55f0 <_fclose_r+0xec>
    5670:	05842503          	lw	a0,88(s0)
    5674:	b35fe0ef          	jal	ra,41a8 <__retarget_lock_release_recursive>
    5678:	f49ff06f          	j	55c0 <_fclose_r+0xbc>

0000567c <fclose>:
    567c:	00050593          	mv	a1,a0
    5680:	8281a503          	lw	a0,-2008(gp) # 9990 <_impure_ptr>
    5684:	e81ff06f          	j	5504 <_fclose_r>

00005688 <__libc_fini_array>:
    5688:	ff010113          	addi	sp,sp,-16
    568c:	00812423          	sw	s0,8(sp)
    5690:	00002797          	auipc	a5,0x2
    5694:	5cc78793          	addi	a5,a5,1484 # 7c5c <__fini_array_end>
    5698:	00002417          	auipc	s0,0x2
    569c:	5c440413          	addi	s0,s0,1476 # 7c5c <__fini_array_end>
    56a0:	40f40433          	sub	s0,s0,a5
    56a4:	00912223          	sw	s1,4(sp)
    56a8:	00112623          	sw	ra,12(sp)
    56ac:	40245493          	srai	s1,s0,0x2
    56b0:	02048063          	beqz	s1,56d0 <__libc_fini_array+0x48>
    56b4:	ffc40413          	addi	s0,s0,-4
    56b8:	00f40433          	add	s0,s0,a5
    56bc:	00042783          	lw	a5,0(s0)
    56c0:	fff48493          	addi	s1,s1,-1
    56c4:	ffc40413          	addi	s0,s0,-4
    56c8:	000780e7          	jalr	a5
    56cc:	fe0498e3          	bnez	s1,56bc <__libc_fini_array+0x34>
    56d0:	00c12083          	lw	ra,12(sp)
    56d4:	00812403          	lw	s0,8(sp)
    56d8:	00412483          	lw	s1,4(sp)
    56dc:	01010113          	addi	sp,sp,16
    56e0:	00008067          	ret

000056e4 <__sfvwrite_r>:
    56e4:	00862783          	lw	a5,8(a2)
    56e8:	30078a63          	beqz	a5,59fc <__sfvwrite_r+0x318>
    56ec:	00c59683          	lh	a3,12(a1)
    56f0:	fd010113          	addi	sp,sp,-48
    56f4:	02812423          	sw	s0,40(sp)
    56f8:	01412c23          	sw	s4,24(sp)
    56fc:	01612823          	sw	s6,16(sp)
    5700:	02112623          	sw	ra,44(sp)
    5704:	02912223          	sw	s1,36(sp)
    5708:	03212023          	sw	s2,32(sp)
    570c:	01312e23          	sw	s3,28(sp)
    5710:	01512a23          	sw	s5,20(sp)
    5714:	01712623          	sw	s7,12(sp)
    5718:	01812423          	sw	s8,8(sp)
    571c:	01912223          	sw	s9,4(sp)
    5720:	0086f793          	andi	a5,a3,8
    5724:	00060b13          	mv	s6,a2
    5728:	00050a13          	mv	s4,a0
    572c:	00058413          	mv	s0,a1
    5730:	08078663          	beqz	a5,57bc <__sfvwrite_r+0xd8>
    5734:	0105a783          	lw	a5,16(a1)
    5738:	08078263          	beqz	a5,57bc <__sfvwrite_r+0xd8>
    573c:	0026f793          	andi	a5,a3,2
    5740:	000b2483          	lw	s1,0(s6)
    5744:	08078c63          	beqz	a5,57dc <__sfvwrite_r+0xf8>
    5748:	02442783          	lw	a5,36(s0)
    574c:	01c42583          	lw	a1,28(s0)
    5750:	80000ab7          	lui	s5,0x80000
    5754:	00000993          	li	s3,0
    5758:	00000913          	li	s2,0
    575c:	c00aca93          	xori	s5,s5,-1024
    5760:	00098613          	mv	a2,s3
    5764:	000a0513          	mv	a0,s4
    5768:	04090263          	beqz	s2,57ac <__sfvwrite_r+0xc8>
    576c:	00090693          	mv	a3,s2
    5770:	012af463          	bgeu	s5,s2,5778 <__sfvwrite_r+0x94>
    5774:	000a8693          	mv	a3,s5
    5778:	000780e7          	jalr	a5
    577c:	26a05663          	blez	a0,59e8 <__sfvwrite_r+0x304>
    5780:	008b2783          	lw	a5,8(s6)
    5784:	00a989b3          	add	s3,s3,a0
    5788:	40a90933          	sub	s2,s2,a0
    578c:	40a787b3          	sub	a5,a5,a0
    5790:	00fb2423          	sw	a5,8(s6)
    5794:	20078663          	beqz	a5,59a0 <__sfvwrite_r+0x2bc>
    5798:	02442783          	lw	a5,36(s0)
    579c:	01c42583          	lw	a1,28(s0)
    57a0:	00098613          	mv	a2,s3
    57a4:	000a0513          	mv	a0,s4
    57a8:	fc0912e3          	bnez	s2,576c <__sfvwrite_r+0x88>
    57ac:	0004a983          	lw	s3,0(s1)
    57b0:	0044a903          	lw	s2,4(s1)
    57b4:	00848493          	addi	s1,s1,8
    57b8:	fa9ff06f          	j	5760 <__sfvwrite_r+0x7c>
    57bc:	00040593          	mv	a1,s0
    57c0:	000a0513          	mv	a0,s4
    57c4:	184010ef          	jal	ra,6948 <__swsetup_r>
    57c8:	22051663          	bnez	a0,59f4 <__sfvwrite_r+0x310>
    57cc:	00c41683          	lh	a3,12(s0)
    57d0:	000b2483          	lw	s1,0(s6)
    57d4:	0026f793          	andi	a5,a3,2
    57d8:	f60798e3          	bnez	a5,5748 <__sfvwrite_r+0x64>
    57dc:	0016f793          	andi	a5,a3,1
    57e0:	12079c63          	bnez	a5,5918 <__sfvwrite_r+0x234>
    57e4:	00042783          	lw	a5,0(s0)
    57e8:	00842703          	lw	a4,8(s0)
    57ec:	80000ab7          	lui	s5,0x80000
    57f0:	00000b93          	li	s7,0
    57f4:	00000993          	li	s3,0
    57f8:	fffaca93          	not	s5,s5
    57fc:	00078513          	mv	a0,a5
    5800:	00070c13          	mv	s8,a4
    5804:	10098263          	beqz	s3,5908 <__sfvwrite_r+0x224>
    5808:	2006f613          	andi	a2,a3,512
    580c:	24060c63          	beqz	a2,5a64 <__sfvwrite_r+0x380>
    5810:	00070c93          	mv	s9,a4
    5814:	2ee9e663          	bltu	s3,a4,5b00 <__sfvwrite_r+0x41c>
    5818:	4806f713          	andi	a4,a3,1152
    581c:	08070a63          	beqz	a4,58b0 <__sfvwrite_r+0x1cc>
    5820:	01442603          	lw	a2,20(s0)
    5824:	01042583          	lw	a1,16(s0)
    5828:	00161713          	slli	a4,a2,0x1
    582c:	00c70733          	add	a4,a4,a2
    5830:	40b78933          	sub	s2,a5,a1
    5834:	01f75c13          	srli	s8,a4,0x1f
    5838:	00ec0c33          	add	s8,s8,a4
    583c:	00190793          	addi	a5,s2,1
    5840:	401c5c13          	srai	s8,s8,0x1
    5844:	013787b3          	add	a5,a5,s3
    5848:	000c0613          	mv	a2,s8
    584c:	00fc7663          	bgeu	s8,a5,5858 <__sfvwrite_r+0x174>
    5850:	00078c13          	mv	s8,a5
    5854:	00078613          	mv	a2,a5
    5858:	4006f693          	andi	a3,a3,1024
    585c:	2c068e63          	beqz	a3,5b38 <__sfvwrite_r+0x454>
    5860:	00060593          	mv	a1,a2
    5864:	000a0513          	mv	a0,s4
    5868:	945fe0ef          	jal	ra,41ac <_malloc_r>
    586c:	00050c93          	mv	s9,a0
    5870:	30050263          	beqz	a0,5b74 <__sfvwrite_r+0x490>
    5874:	01042583          	lw	a1,16(s0)
    5878:	00090613          	mv	a2,s2
    587c:	8bcff0ef          	jal	ra,4938 <memcpy>
    5880:	00c45783          	lhu	a5,12(s0)
    5884:	b7f7f793          	andi	a5,a5,-1153
    5888:	0807e793          	ori	a5,a5,128
    588c:	00f41623          	sh	a5,12(s0)
    5890:	012c8533          	add	a0,s9,s2
    5894:	412c07b3          	sub	a5,s8,s2
    5898:	01942823          	sw	s9,16(s0)
    589c:	01842a23          	sw	s8,20(s0)
    58a0:	00a42023          	sw	a0,0(s0)
    58a4:	00098c13          	mv	s8,s3
    58a8:	00f42423          	sw	a5,8(s0)
    58ac:	00098c93          	mv	s9,s3
    58b0:	000c8613          	mv	a2,s9
    58b4:	000b8593          	mv	a1,s7
    58b8:	3ec000ef          	jal	ra,5ca4 <memmove>
    58bc:	00842703          	lw	a4,8(s0)
    58c0:	00042783          	lw	a5,0(s0)
    58c4:	00098913          	mv	s2,s3
    58c8:	41870733          	sub	a4,a4,s8
    58cc:	019787b3          	add	a5,a5,s9
    58d0:	00e42423          	sw	a4,8(s0)
    58d4:	00f42023          	sw	a5,0(s0)
    58d8:	00000993          	li	s3,0
    58dc:	008b2783          	lw	a5,8(s6)
    58e0:	012b8bb3          	add	s7,s7,s2
    58e4:	412787b3          	sub	a5,a5,s2
    58e8:	00fb2423          	sw	a5,8(s6)
    58ec:	0a078a63          	beqz	a5,59a0 <__sfvwrite_r+0x2bc>
    58f0:	00042783          	lw	a5,0(s0)
    58f4:	00842703          	lw	a4,8(s0)
    58f8:	00c41683          	lh	a3,12(s0)
    58fc:	00078513          	mv	a0,a5
    5900:	00070c13          	mv	s8,a4
    5904:	f00992e3          	bnez	s3,5808 <__sfvwrite_r+0x124>
    5908:	0004ab83          	lw	s7,0(s1)
    590c:	0044a983          	lw	s3,4(s1)
    5910:	00848493          	addi	s1,s1,8
    5914:	ee9ff06f          	j	57fc <__sfvwrite_r+0x118>
    5918:	00000a93          	li	s5,0
    591c:	00000513          	li	a0,0
    5920:	00000c13          	li	s8,0
    5924:	00000993          	li	s3,0
    5928:	0c098e63          	beqz	s3,5a04 <__sfvwrite_r+0x320>
    592c:	0e050663          	beqz	a0,5a18 <__sfvwrite_r+0x334>
    5930:	000a8793          	mv	a5,s5
    5934:	00098b93          	mv	s7,s3
    5938:	0137f463          	bgeu	a5,s3,5940 <__sfvwrite_r+0x25c>
    593c:	00078b93          	mv	s7,a5
    5940:	00042503          	lw	a0,0(s0)
    5944:	01042783          	lw	a5,16(s0)
    5948:	00842903          	lw	s2,8(s0)
    594c:	01442683          	lw	a3,20(s0)
    5950:	00a7f663          	bgeu	a5,a0,595c <__sfvwrite_r+0x278>
    5954:	00d90933          	add	s2,s2,a3
    5958:	0f794063          	blt	s2,s7,5a38 <__sfvwrite_r+0x354>
    595c:	1adbc863          	blt	s7,a3,5b0c <__sfvwrite_r+0x428>
    5960:	02442783          	lw	a5,36(s0)
    5964:	01c42583          	lw	a1,28(s0)
    5968:	000c0613          	mv	a2,s8
    596c:	000a0513          	mv	a0,s4
    5970:	000780e7          	jalr	a5
    5974:	00050913          	mv	s2,a0
    5978:	06a05863          	blez	a0,59e8 <__sfvwrite_r+0x304>
    597c:	412a8ab3          	sub	s5,s5,s2
    5980:	00100513          	li	a0,1
    5984:	040a8a63          	beqz	s5,59d8 <__sfvwrite_r+0x2f4>
    5988:	008b2783          	lw	a5,8(s6)
    598c:	012c0c33          	add	s8,s8,s2
    5990:	412989b3          	sub	s3,s3,s2
    5994:	412787b3          	sub	a5,a5,s2
    5998:	00fb2423          	sw	a5,8(s6)
    599c:	f80796e3          	bnez	a5,5928 <__sfvwrite_r+0x244>
    59a0:	00000513          	li	a0,0
    59a4:	02c12083          	lw	ra,44(sp)
    59a8:	02812403          	lw	s0,40(sp)
    59ac:	02412483          	lw	s1,36(sp)
    59b0:	02012903          	lw	s2,32(sp)
    59b4:	01c12983          	lw	s3,28(sp)
    59b8:	01812a03          	lw	s4,24(sp)
    59bc:	01412a83          	lw	s5,20(sp)
    59c0:	01012b03          	lw	s6,16(sp)
    59c4:	00c12b83          	lw	s7,12(sp)
    59c8:	00812c03          	lw	s8,8(sp)
    59cc:	00412c83          	lw	s9,4(sp)
    59d0:	03010113          	addi	sp,sp,48
    59d4:	00008067          	ret
    59d8:	00040593          	mv	a1,s0
    59dc:	000a0513          	mv	a0,s4
    59e0:	be5fd0ef          	jal	ra,35c4 <_fflush_r>
    59e4:	fa0502e3          	beqz	a0,5988 <__sfvwrite_r+0x2a4>
    59e8:	00c41783          	lh	a5,12(s0)
    59ec:	0407e793          	ori	a5,a5,64
    59f0:	00f41623          	sh	a5,12(s0)
    59f4:	fff00513          	li	a0,-1
    59f8:	fadff06f          	j	59a4 <__sfvwrite_r+0x2c0>
    59fc:	00000513          	li	a0,0
    5a00:	00008067          	ret
    5a04:	0044a983          	lw	s3,4(s1)
    5a08:	00048793          	mv	a5,s1
    5a0c:	00848493          	addi	s1,s1,8
    5a10:	fe098ae3          	beqz	s3,5a04 <__sfvwrite_r+0x320>
    5a14:	0007ac03          	lw	s8,0(a5)
    5a18:	00098613          	mv	a2,s3
    5a1c:	00a00593          	li	a1,10
    5a20:	000c0513          	mv	a0,s8
    5a24:	1bc000ef          	jal	ra,5be0 <memchr>
    5a28:	14050063          	beqz	a0,5b68 <__sfvwrite_r+0x484>
    5a2c:	00150513          	addi	a0,a0,1
    5a30:	41850ab3          	sub	s5,a0,s8
    5a34:	efdff06f          	j	5930 <__sfvwrite_r+0x24c>
    5a38:	000c0593          	mv	a1,s8
    5a3c:	00090613          	mv	a2,s2
    5a40:	264000ef          	jal	ra,5ca4 <memmove>
    5a44:	00042783          	lw	a5,0(s0)
    5a48:	00040593          	mv	a1,s0
    5a4c:	000a0513          	mv	a0,s4
    5a50:	012787b3          	add	a5,a5,s2
    5a54:	00f42023          	sw	a5,0(s0)
    5a58:	b6dfd0ef          	jal	ra,35c4 <_fflush_r>
    5a5c:	f20500e3          	beqz	a0,597c <__sfvwrite_r+0x298>
    5a60:	f89ff06f          	j	59e8 <__sfvwrite_r+0x304>
    5a64:	01042683          	lw	a3,16(s0)
    5a68:	04f6e463          	bltu	a3,a5,5ab0 <__sfvwrite_r+0x3cc>
    5a6c:	01442583          	lw	a1,20(s0)
    5a70:	04b9e063          	bltu	s3,a1,5ab0 <__sfvwrite_r+0x3cc>
    5a74:	00098913          	mv	s2,s3
    5a78:	013af463          	bgeu	s5,s3,5a80 <__sfvwrite_r+0x39c>
    5a7c:	000a8913          	mv	s2,s5
    5a80:	00090513          	mv	a0,s2
    5a84:	3bc010ef          	jal	ra,6e40 <__modsi3>
    5a88:	02442783          	lw	a5,36(s0)
    5a8c:	01c42583          	lw	a1,28(s0)
    5a90:	40a906b3          	sub	a3,s2,a0
    5a94:	000b8613          	mv	a2,s7
    5a98:	000a0513          	mv	a0,s4
    5a9c:	000780e7          	jalr	a5
    5aa0:	00050913          	mv	s2,a0
    5aa4:	f4a052e3          	blez	a0,59e8 <__sfvwrite_r+0x304>
    5aa8:	412989b3          	sub	s3,s3,s2
    5aac:	e31ff06f          	j	58dc <__sfvwrite_r+0x1f8>
    5ab0:	00070913          	mv	s2,a4
    5ab4:	00e9f463          	bgeu	s3,a4,5abc <__sfvwrite_r+0x3d8>
    5ab8:	00098913          	mv	s2,s3
    5abc:	00078513          	mv	a0,a5
    5ac0:	00090613          	mv	a2,s2
    5ac4:	000b8593          	mv	a1,s7
    5ac8:	1dc000ef          	jal	ra,5ca4 <memmove>
    5acc:	00842703          	lw	a4,8(s0)
    5ad0:	00042783          	lw	a5,0(s0)
    5ad4:	41270733          	sub	a4,a4,s2
    5ad8:	012787b3          	add	a5,a5,s2
    5adc:	00e42423          	sw	a4,8(s0)
    5ae0:	00f42023          	sw	a5,0(s0)
    5ae4:	fc0712e3          	bnez	a4,5aa8 <__sfvwrite_r+0x3c4>
    5ae8:	00040593          	mv	a1,s0
    5aec:	000a0513          	mv	a0,s4
    5af0:	ad5fd0ef          	jal	ra,35c4 <_fflush_r>
    5af4:	ee051ae3          	bnez	a0,59e8 <__sfvwrite_r+0x304>
    5af8:	412989b3          	sub	s3,s3,s2
    5afc:	de1ff06f          	j	58dc <__sfvwrite_r+0x1f8>
    5b00:	00098c13          	mv	s8,s3
    5b04:	00098c93          	mv	s9,s3
    5b08:	da9ff06f          	j	58b0 <__sfvwrite_r+0x1cc>
    5b0c:	000b8613          	mv	a2,s7
    5b10:	000c0593          	mv	a1,s8
    5b14:	190000ef          	jal	ra,5ca4 <memmove>
    5b18:	00842703          	lw	a4,8(s0)
    5b1c:	00042783          	lw	a5,0(s0)
    5b20:	000b8913          	mv	s2,s7
    5b24:	41770733          	sub	a4,a4,s7
    5b28:	017787b3          	add	a5,a5,s7
    5b2c:	00e42423          	sw	a4,8(s0)
    5b30:	00f42023          	sw	a5,0(s0)
    5b34:	e49ff06f          	j	597c <__sfvwrite_r+0x298>
    5b38:	000a0513          	mv	a0,s4
    5b3c:	33c000ef          	jal	ra,5e78 <_realloc_r>
    5b40:	00050c93          	mv	s9,a0
    5b44:	d40516e3          	bnez	a0,5890 <__sfvwrite_r+0x1ac>
    5b48:	01042583          	lw	a1,16(s0)
    5b4c:	000a0513          	mv	a0,s4
    5b50:	9d0fe0ef          	jal	ra,3d20 <_free_r>
    5b54:	00c41783          	lh	a5,12(s0)
    5b58:	00c00713          	li	a4,12
    5b5c:	00ea2023          	sw	a4,0(s4)
    5b60:	f7f7f793          	andi	a5,a5,-129
    5b64:	e89ff06f          	j	59ec <__sfvwrite_r+0x308>
    5b68:	00198793          	addi	a5,s3,1
    5b6c:	00078a93          	mv	s5,a5
    5b70:	dc5ff06f          	j	5934 <__sfvwrite_r+0x250>
    5b74:	00c00713          	li	a4,12
    5b78:	00c41783          	lh	a5,12(s0)
    5b7c:	00ea2023          	sw	a4,0(s4)
    5b80:	e6dff06f          	j	59ec <__sfvwrite_r+0x308>

00005b84 <_lseek_r>:
    5b84:	ff010113          	addi	sp,sp,-16
    5b88:	00058713          	mv	a4,a1
    5b8c:	00812423          	sw	s0,8(sp)
    5b90:	00060593          	mv	a1,a2
    5b94:	00050413          	mv	s0,a0
    5b98:	00068613          	mv	a2,a3
    5b9c:	00070513          	mv	a0,a4
    5ba0:	8a01a023          	sw	zero,-1888(gp) # 9a08 <errno>
    5ba4:	00112623          	sw	ra,12(sp)
    5ba8:	7f0010ef          	jal	ra,7398 <_lseek>
    5bac:	fff00793          	li	a5,-1
    5bb0:	00f50a63          	beq	a0,a5,5bc4 <_lseek_r+0x40>
    5bb4:	00c12083          	lw	ra,12(sp)
    5bb8:	00812403          	lw	s0,8(sp)
    5bbc:	01010113          	addi	sp,sp,16
    5bc0:	00008067          	ret
    5bc4:	8a01a783          	lw	a5,-1888(gp) # 9a08 <errno>
    5bc8:	fe0786e3          	beqz	a5,5bb4 <_lseek_r+0x30>
    5bcc:	00c12083          	lw	ra,12(sp)
    5bd0:	00f42023          	sw	a5,0(s0)
    5bd4:	00812403          	lw	s0,8(sp)
    5bd8:	01010113          	addi	sp,sp,16
    5bdc:	00008067          	ret

00005be0 <memchr>:
    5be0:	00357793          	andi	a5,a0,3
    5be4:	0ff5f693          	zext.b	a3,a1
    5be8:	02078e63          	beqz	a5,5c24 <memchr+0x44>
    5bec:	fff60793          	addi	a5,a2,-1
    5bf0:	02060663          	beqz	a2,5c1c <memchr+0x3c>
    5bf4:	fff00613          	li	a2,-1
    5bf8:	0180006f          	j	5c10 <memchr+0x30>
    5bfc:	00150513          	addi	a0,a0,1
    5c00:	00357713          	andi	a4,a0,3
    5c04:	02070263          	beqz	a4,5c28 <memchr+0x48>
    5c08:	fff78793          	addi	a5,a5,-1
    5c0c:	00c78863          	beq	a5,a2,5c1c <memchr+0x3c>
    5c10:	00054703          	lbu	a4,0(a0)
    5c14:	fed714e3          	bne	a4,a3,5bfc <memchr+0x1c>
    5c18:	00008067          	ret
    5c1c:	00000513          	li	a0,0
    5c20:	00008067          	ret
    5c24:	00060793          	mv	a5,a2
    5c28:	00300713          	li	a4,3
    5c2c:	04f77c63          	bgeu	a4,a5,5c84 <memchr+0xa4>
    5c30:	0ff5f593          	zext.b	a1,a1
    5c34:	00859713          	slli	a4,a1,0x8
    5c38:	00b705b3          	add	a1,a4,a1
    5c3c:	01059713          	slli	a4,a1,0x10
    5c40:	feff08b7          	lui	a7,0xfeff0
    5c44:	80808837          	lui	a6,0x80808
    5c48:	00e585b3          	add	a1,a1,a4
    5c4c:	eff88893          	addi	a7,a7,-257 # fefefeff <__alt_data_end+0xfcfefeff>
    5c50:	08080813          	addi	a6,a6,128 # 80808080 <__alt_data_end+0x7e808080>
    5c54:	00300313          	li	t1,3
    5c58:	0100006f          	j	5c68 <memchr+0x88>
    5c5c:	ffc78793          	addi	a5,a5,-4
    5c60:	00450513          	addi	a0,a0,4
    5c64:	02f37063          	bgeu	t1,a5,5c84 <memchr+0xa4>
    5c68:	00052703          	lw	a4,0(a0)
    5c6c:	00e5c733          	xor	a4,a1,a4
    5c70:	01170633          	add	a2,a4,a7
    5c74:	fff74713          	not	a4,a4
    5c78:	00e67733          	and	a4,a2,a4
    5c7c:	01077733          	and	a4,a4,a6
    5c80:	fc070ee3          	beqz	a4,5c5c <memchr+0x7c>
    5c84:	00f50733          	add	a4,a0,a5
    5c88:	00079863          	bnez	a5,5c98 <memchr+0xb8>
    5c8c:	f91ff06f          	j	5c1c <memchr+0x3c>
    5c90:	00150513          	addi	a0,a0,1
    5c94:	f8e504e3          	beq	a0,a4,5c1c <memchr+0x3c>
    5c98:	00054783          	lbu	a5,0(a0)
    5c9c:	fed79ae3          	bne	a5,a3,5c90 <memchr+0xb0>
    5ca0:	00008067          	ret

00005ca4 <memmove>:
    5ca4:	02a5f663          	bgeu	a1,a0,5cd0 <memmove+0x2c>
    5ca8:	00c58733          	add	a4,a1,a2
    5cac:	02e57263          	bgeu	a0,a4,5cd0 <memmove+0x2c>
    5cb0:	00c507b3          	add	a5,a0,a2
    5cb4:	04060663          	beqz	a2,5d00 <memmove+0x5c>
    5cb8:	fff74683          	lbu	a3,-1(a4)
    5cbc:	fff78793          	addi	a5,a5,-1
    5cc0:	fff70713          	addi	a4,a4,-1
    5cc4:	00d78023          	sb	a3,0(a5)
    5cc8:	fef518e3          	bne	a0,a5,5cb8 <memmove+0x14>
    5ccc:	00008067          	ret
    5cd0:	00f00793          	li	a5,15
    5cd4:	02c7e863          	bltu	a5,a2,5d04 <memmove+0x60>
    5cd8:	00050793          	mv	a5,a0
    5cdc:	fff60693          	addi	a3,a2,-1
    5ce0:	0c060a63          	beqz	a2,5db4 <memmove+0x110>
    5ce4:	00168693          	addi	a3,a3,1
    5ce8:	00d786b3          	add	a3,a5,a3
    5cec:	0005c703          	lbu	a4,0(a1)
    5cf0:	00178793          	addi	a5,a5,1
    5cf4:	00158593          	addi	a1,a1,1
    5cf8:	fee78fa3          	sb	a4,-1(a5)
    5cfc:	fed798e3          	bne	a5,a3,5cec <memmove+0x48>
    5d00:	00008067          	ret
    5d04:	00b567b3          	or	a5,a0,a1
    5d08:	0037f793          	andi	a5,a5,3
    5d0c:	08079e63          	bnez	a5,5da8 <memmove+0x104>
    5d10:	ff060893          	addi	a7,a2,-16
    5d14:	ff08f893          	andi	a7,a7,-16
    5d18:	01088893          	addi	a7,a7,16
    5d1c:	011507b3          	add	a5,a0,a7
    5d20:	00058693          	mv	a3,a1
    5d24:	00050713          	mv	a4,a0
    5d28:	0006a803          	lw	a6,0(a3)
    5d2c:	01068693          	addi	a3,a3,16
    5d30:	01070713          	addi	a4,a4,16
    5d34:	ff072823          	sw	a6,-16(a4)
    5d38:	ff46a803          	lw	a6,-12(a3)
    5d3c:	ff072a23          	sw	a6,-12(a4)
    5d40:	ff86a803          	lw	a6,-8(a3)
    5d44:	ff072c23          	sw	a6,-8(a4)
    5d48:	ffc6a803          	lw	a6,-4(a3)
    5d4c:	ff072e23          	sw	a6,-4(a4)
    5d50:	fcf71ce3          	bne	a4,a5,5d28 <memmove+0x84>
    5d54:	00c67713          	andi	a4,a2,12
    5d58:	011585b3          	add	a1,a1,a7
    5d5c:	00f67813          	andi	a6,a2,15
    5d60:	04070c63          	beqz	a4,5db8 <memmove+0x114>
    5d64:	00058693          	mv	a3,a1
    5d68:	00078713          	mv	a4,a5
    5d6c:	01078eb3          	add	t4,a5,a6
    5d70:	00300e13          	li	t3,3
    5d74:	0006a303          	lw	t1,0(a3)
    5d78:	00470713          	addi	a4,a4,4
    5d7c:	40ee88b3          	sub	a7,t4,a4
    5d80:	fe672e23          	sw	t1,-4(a4)
    5d84:	00468693          	addi	a3,a3,4
    5d88:	ff1e66e3          	bltu	t3,a7,5d74 <memmove+0xd0>
    5d8c:	ffc80713          	addi	a4,a6,-4
    5d90:	ffc77713          	andi	a4,a4,-4
    5d94:	00470713          	addi	a4,a4,4
    5d98:	00367613          	andi	a2,a2,3
    5d9c:	00e787b3          	add	a5,a5,a4
    5da0:	00e585b3          	add	a1,a1,a4
    5da4:	f39ff06f          	j	5cdc <memmove+0x38>
    5da8:	fff60693          	addi	a3,a2,-1
    5dac:	00050793          	mv	a5,a0
    5db0:	f35ff06f          	j	5ce4 <memmove+0x40>
    5db4:	00008067          	ret
    5db8:	00080613          	mv	a2,a6
    5dbc:	f21ff06f          	j	5cdc <memmove+0x38>

00005dc0 <_open_r>:
    5dc0:	ff010113          	addi	sp,sp,-16
    5dc4:	00058713          	mv	a4,a1
    5dc8:	00812423          	sw	s0,8(sp)
    5dcc:	00060593          	mv	a1,a2
    5dd0:	00050413          	mv	s0,a0
    5dd4:	00068613          	mv	a2,a3
    5dd8:	00070513          	mv	a0,a4
    5ddc:	8a01a023          	sw	zero,-1888(gp) # 9a08 <errno>
    5de0:	00112623          	sw	ra,12(sp)
    5de4:	7bc010ef          	jal	ra,75a0 <_open>
    5de8:	fff00793          	li	a5,-1
    5dec:	00f50a63          	beq	a0,a5,5e00 <_open_r+0x40>
    5df0:	00c12083          	lw	ra,12(sp)
    5df4:	00812403          	lw	s0,8(sp)
    5df8:	01010113          	addi	sp,sp,16
    5dfc:	00008067          	ret
    5e00:	8a01a783          	lw	a5,-1888(gp) # 9a08 <errno>
    5e04:	fe0786e3          	beqz	a5,5df0 <_open_r+0x30>
    5e08:	00c12083          	lw	ra,12(sp)
    5e0c:	00f42023          	sw	a5,0(s0)
    5e10:	00812403          	lw	s0,8(sp)
    5e14:	01010113          	addi	sp,sp,16
    5e18:	00008067          	ret

00005e1c <_read_r>:
    5e1c:	ff010113          	addi	sp,sp,-16
    5e20:	00058713          	mv	a4,a1
    5e24:	00812423          	sw	s0,8(sp)
    5e28:	00060593          	mv	a1,a2
    5e2c:	00050413          	mv	s0,a0
    5e30:	00068613          	mv	a2,a3
    5e34:	00070513          	mv	a0,a4
    5e38:	8a01a023          	sw	zero,-1888(gp) # 9a08 <errno>
    5e3c:	00112623          	sw	ra,12(sp)
    5e40:	109010ef          	jal	ra,7748 <_read>
    5e44:	fff00793          	li	a5,-1
    5e48:	00f50a63          	beq	a0,a5,5e5c <_read_r+0x40>
    5e4c:	00c12083          	lw	ra,12(sp)
    5e50:	00812403          	lw	s0,8(sp)
    5e54:	01010113          	addi	sp,sp,16
    5e58:	00008067          	ret
    5e5c:	8a01a783          	lw	a5,-1888(gp) # 9a08 <errno>
    5e60:	fe0786e3          	beqz	a5,5e4c <_read_r+0x30>
    5e64:	00c12083          	lw	ra,12(sp)
    5e68:	00f42023          	sw	a5,0(s0)
    5e6c:	00812403          	lw	s0,8(sp)
    5e70:	01010113          	addi	sp,sp,16
    5e74:	00008067          	ret

00005e78 <_realloc_r>:
    5e78:	fd010113          	addi	sp,sp,-48
    5e7c:	02912223          	sw	s1,36(sp)
    5e80:	02112623          	sw	ra,44(sp)
    5e84:	02812423          	sw	s0,40(sp)
    5e88:	03212023          	sw	s2,32(sp)
    5e8c:	01312e23          	sw	s3,28(sp)
    5e90:	01412c23          	sw	s4,24(sp)
    5e94:	01512a23          	sw	s5,20(sp)
    5e98:	01612823          	sw	s6,16(sp)
    5e9c:	01712623          	sw	s7,12(sp)
    5ea0:	01812423          	sw	s8,8(sp)
    5ea4:	00060493          	mv	s1,a2
    5ea8:	1c058263          	beqz	a1,606c <_realloc_r+0x1f4>
    5eac:	00058413          	mv	s0,a1
    5eb0:	00050913          	mv	s2,a0
    5eb4:	d05fe0ef          	jal	ra,4bb8 <__malloc_lock>
    5eb8:	ffc42703          	lw	a4,-4(s0)
    5ebc:	00b48793          	addi	a5,s1,11
    5ec0:	01600693          	li	a3,22
    5ec4:	ff840a93          	addi	s5,s0,-8
    5ec8:	ffc77993          	andi	s3,a4,-4
    5ecc:	0ef6f663          	bgeu	a3,a5,5fb8 <_realloc_r+0x140>
    5ed0:	ff87fa13          	andi	s4,a5,-8
    5ed4:	0e07c663          	bltz	a5,5fc0 <_realloc_r+0x148>
    5ed8:	0e9a6463          	bltu	s4,s1,5fc0 <_realloc_r+0x148>
    5edc:	1149d463          	bge	s3,s4,5fe4 <_realloc_r+0x16c>
    5ee0:	00003c17          	auipc	s8,0x3
    5ee4:	680c0c13          	addi	s8,s8,1664 # 9560 <__malloc_av_>
    5ee8:	008c2603          	lw	a2,8(s8)
    5eec:	013a86b3          	add	a3,s5,s3
    5ef0:	0046a783          	lw	a5,4(a3)
    5ef4:	1cd60e63          	beq	a2,a3,60d0 <_realloc_r+0x258>
    5ef8:	ffe7f613          	andi	a2,a5,-2
    5efc:	00c68633          	add	a2,a3,a2
    5f00:	00462603          	lw	a2,4(a2)
    5f04:	00167613          	andi	a2,a2,1
    5f08:	14061463          	bnez	a2,6050 <_realloc_r+0x1d8>
    5f0c:	ffc7f793          	andi	a5,a5,-4
    5f10:	00f98633          	add	a2,s3,a5
    5f14:	0b465e63          	bge	a2,s4,5fd0 <_realloc_r+0x158>
    5f18:	00177713          	andi	a4,a4,1
    5f1c:	02071463          	bnez	a4,5f44 <_realloc_r+0xcc>
    5f20:	ff842b83          	lw	s7,-8(s0)
    5f24:	417a8bb3          	sub	s7,s5,s7
    5f28:	004ba703          	lw	a4,4(s7)
    5f2c:	ffc77713          	andi	a4,a4,-4
    5f30:	00e787b3          	add	a5,a5,a4
    5f34:	01378b33          	add	s6,a5,s3
    5f38:	334b5463          	bge	s6,s4,6260 <_realloc_r+0x3e8>
    5f3c:	00e98b33          	add	s6,s3,a4
    5f40:	294b5663          	bge	s6,s4,61cc <_realloc_r+0x354>
    5f44:	00048593          	mv	a1,s1
    5f48:	00090513          	mv	a0,s2
    5f4c:	a60fe0ef          	jal	ra,41ac <_malloc_r>
    5f50:	00050493          	mv	s1,a0
    5f54:	40050263          	beqz	a0,6358 <_realloc_r+0x4e0>
    5f58:	ffc42783          	lw	a5,-4(s0)
    5f5c:	ff850713          	addi	a4,a0,-8
    5f60:	ffe7f793          	andi	a5,a5,-2
    5f64:	00fa87b3          	add	a5,s5,a5
    5f68:	24e78a63          	beq	a5,a4,61bc <_realloc_r+0x344>
    5f6c:	ffc98613          	addi	a2,s3,-4
    5f70:	02400793          	li	a5,36
    5f74:	2ec7e063          	bltu	a5,a2,6254 <_realloc_r+0x3dc>
    5f78:	01300713          	li	a4,19
    5f7c:	20c76e63          	bltu	a4,a2,6198 <_realloc_r+0x320>
    5f80:	00050793          	mv	a5,a0
    5f84:	00040713          	mv	a4,s0
    5f88:	00072683          	lw	a3,0(a4)
    5f8c:	00d7a023          	sw	a3,0(a5)
    5f90:	00472683          	lw	a3,4(a4)
    5f94:	00d7a223          	sw	a3,4(a5)
    5f98:	00872703          	lw	a4,8(a4)
    5f9c:	00e7a423          	sw	a4,8(a5)
    5fa0:	00090513          	mv	a0,s2
    5fa4:	00040593          	mv	a1,s0
    5fa8:	d79fd0ef          	jal	ra,3d20 <_free_r>
    5fac:	00090513          	mv	a0,s2
    5fb0:	c11fe0ef          	jal	ra,4bc0 <__malloc_unlock>
    5fb4:	0680006f          	j	601c <_realloc_r+0x1a4>
    5fb8:	01000a13          	li	s4,16
    5fbc:	f29a70e3          	bgeu	s4,s1,5edc <_realloc_r+0x64>
    5fc0:	00c00793          	li	a5,12
    5fc4:	00f92023          	sw	a5,0(s2)
    5fc8:	00000493          	li	s1,0
    5fcc:	0500006f          	j	601c <_realloc_r+0x1a4>
    5fd0:	00c6a783          	lw	a5,12(a3)
    5fd4:	0086a703          	lw	a4,8(a3)
    5fd8:	00060993          	mv	s3,a2
    5fdc:	00f72623          	sw	a5,12(a4)
    5fe0:	00e7a423          	sw	a4,8(a5)
    5fe4:	004aa783          	lw	a5,4(s5) # 80000004 <__alt_data_end+0x7e000004>
    5fe8:	414986b3          	sub	a3,s3,s4
    5fec:	00f00613          	li	a2,15
    5ff0:	0017f793          	andi	a5,a5,1
    5ff4:	013a8733          	add	a4,s5,s3
    5ff8:	0ad66463          	bltu	a2,a3,60a0 <_realloc_r+0x228>
    5ffc:	0137e7b3          	or	a5,a5,s3
    6000:	00faa223          	sw	a5,4(s5)
    6004:	00472783          	lw	a5,4(a4)
    6008:	0017e793          	ori	a5,a5,1
    600c:	00f72223          	sw	a5,4(a4)
    6010:	00090513          	mv	a0,s2
    6014:	badfe0ef          	jal	ra,4bc0 <__malloc_unlock>
    6018:	00040493          	mv	s1,s0
    601c:	02c12083          	lw	ra,44(sp)
    6020:	02812403          	lw	s0,40(sp)
    6024:	02012903          	lw	s2,32(sp)
    6028:	01c12983          	lw	s3,28(sp)
    602c:	01812a03          	lw	s4,24(sp)
    6030:	01412a83          	lw	s5,20(sp)
    6034:	01012b03          	lw	s6,16(sp)
    6038:	00c12b83          	lw	s7,12(sp)
    603c:	00812c03          	lw	s8,8(sp)
    6040:	00048513          	mv	a0,s1
    6044:	02412483          	lw	s1,36(sp)
    6048:	03010113          	addi	sp,sp,48
    604c:	00008067          	ret
    6050:	00177713          	andi	a4,a4,1
    6054:	ee0718e3          	bnez	a4,5f44 <_realloc_r+0xcc>
    6058:	ff842b83          	lw	s7,-8(s0)
    605c:	417a8bb3          	sub	s7,s5,s7
    6060:	004ba703          	lw	a4,4(s7)
    6064:	ffc77713          	andi	a4,a4,-4
    6068:	ed5ff06f          	j	5f3c <_realloc_r+0xc4>
    606c:	02812403          	lw	s0,40(sp)
    6070:	02c12083          	lw	ra,44(sp)
    6074:	02412483          	lw	s1,36(sp)
    6078:	02012903          	lw	s2,32(sp)
    607c:	01c12983          	lw	s3,28(sp)
    6080:	01812a03          	lw	s4,24(sp)
    6084:	01412a83          	lw	s5,20(sp)
    6088:	01012b03          	lw	s6,16(sp)
    608c:	00c12b83          	lw	s7,12(sp)
    6090:	00812c03          	lw	s8,8(sp)
    6094:	00060593          	mv	a1,a2
    6098:	03010113          	addi	sp,sp,48
    609c:	910fe06f          	j	41ac <_malloc_r>
    60a0:	0147e7b3          	or	a5,a5,s4
    60a4:	00faa223          	sw	a5,4(s5)
    60a8:	014a85b3          	add	a1,s5,s4
    60ac:	0016e693          	ori	a3,a3,1
    60b0:	00d5a223          	sw	a3,4(a1)
    60b4:	00472783          	lw	a5,4(a4)
    60b8:	00858593          	addi	a1,a1,8
    60bc:	00090513          	mv	a0,s2
    60c0:	0017e793          	ori	a5,a5,1
    60c4:	00f72223          	sw	a5,4(a4)
    60c8:	c59fd0ef          	jal	ra,3d20 <_free_r>
    60cc:	f45ff06f          	j	6010 <_realloc_r+0x198>
    60d0:	ffc7f793          	andi	a5,a5,-4
    60d4:	013786b3          	add	a3,a5,s3
    60d8:	010a0613          	addi	a2,s4,16
    60dc:	22c6de63          	bge	a3,a2,6318 <_realloc_r+0x4a0>
    60e0:	00177713          	andi	a4,a4,1
    60e4:	e60710e3          	bnez	a4,5f44 <_realloc_r+0xcc>
    60e8:	ff842b83          	lw	s7,-8(s0)
    60ec:	417a8bb3          	sub	s7,s5,s7
    60f0:	004ba703          	lw	a4,4(s7)
    60f4:	ffc77713          	andi	a4,a4,-4
    60f8:	00e787b3          	add	a5,a5,a4
    60fc:	01378b33          	add	s6,a5,s3
    6100:	e2cb4ee3          	blt	s6,a2,5f3c <_realloc_r+0xc4>
    6104:	00cba783          	lw	a5,12(s7)
    6108:	008ba703          	lw	a4,8(s7)
    610c:	ffc98613          	addi	a2,s3,-4
    6110:	02400693          	li	a3,36
    6114:	00f72623          	sw	a5,12(a4)
    6118:	00e7a423          	sw	a4,8(a5)
    611c:	008b8493          	addi	s1,s7,8
    6120:	26c6e263          	bltu	a3,a2,6384 <_realloc_r+0x50c>
    6124:	01300713          	li	a4,19
    6128:	00048793          	mv	a5,s1
    612c:	02c77263          	bgeu	a4,a2,6150 <_realloc_r+0x2d8>
    6130:	00042703          	lw	a4,0(s0)
    6134:	01b00793          	li	a5,27
    6138:	00eba423          	sw	a4,8(s7)
    613c:	00442703          	lw	a4,4(s0)
    6140:	00eba623          	sw	a4,12(s7)
    6144:	24c7e863          	bltu	a5,a2,6394 <_realloc_r+0x51c>
    6148:	00840413          	addi	s0,s0,8
    614c:	010b8793          	addi	a5,s7,16
    6150:	00042703          	lw	a4,0(s0)
    6154:	00e7a023          	sw	a4,0(a5)
    6158:	00442703          	lw	a4,4(s0)
    615c:	00e7a223          	sw	a4,4(a5)
    6160:	00842703          	lw	a4,8(s0)
    6164:	00e7a423          	sw	a4,8(a5)
    6168:	014b8733          	add	a4,s7,s4
    616c:	414b07b3          	sub	a5,s6,s4
    6170:	00ec2423          	sw	a4,8(s8)
    6174:	0017e793          	ori	a5,a5,1
    6178:	00f72223          	sw	a5,4(a4)
    617c:	004ba783          	lw	a5,4(s7)
    6180:	00090513          	mv	a0,s2
    6184:	0017f793          	andi	a5,a5,1
    6188:	0147e7b3          	or	a5,a5,s4
    618c:	00fba223          	sw	a5,4(s7)
    6190:	a31fe0ef          	jal	ra,4bc0 <__malloc_unlock>
    6194:	e89ff06f          	j	601c <_realloc_r+0x1a4>
    6198:	00042683          	lw	a3,0(s0)
    619c:	01b00713          	li	a4,27
    61a0:	00d52023          	sw	a3,0(a0)
    61a4:	00442683          	lw	a3,4(s0)
    61a8:	00d52223          	sw	a3,4(a0)
    61ac:	14c76663          	bltu	a4,a2,62f8 <_realloc_r+0x480>
    61b0:	00840713          	addi	a4,s0,8
    61b4:	00850793          	addi	a5,a0,8
    61b8:	dd1ff06f          	j	5f88 <_realloc_r+0x110>
    61bc:	ffc52783          	lw	a5,-4(a0)
    61c0:	ffc7f793          	andi	a5,a5,-4
    61c4:	00f989b3          	add	s3,s3,a5
    61c8:	e1dff06f          	j	5fe4 <_realloc_r+0x16c>
    61cc:	00cba783          	lw	a5,12(s7)
    61d0:	008ba703          	lw	a4,8(s7)
    61d4:	ffc98613          	addi	a2,s3,-4
    61d8:	02400693          	li	a3,36
    61dc:	00f72623          	sw	a5,12(a4)
    61e0:	00e7a423          	sw	a4,8(a5)
    61e4:	008b8493          	addi	s1,s7,8
    61e8:	10c6e063          	bltu	a3,a2,62e8 <_realloc_r+0x470>
    61ec:	01300713          	li	a4,19
    61f0:	00048793          	mv	a5,s1
    61f4:	02c77c63          	bgeu	a4,a2,622c <_realloc_r+0x3b4>
    61f8:	00042703          	lw	a4,0(s0)
    61fc:	01b00793          	li	a5,27
    6200:	00eba423          	sw	a4,8(s7)
    6204:	00442703          	lw	a4,4(s0)
    6208:	00eba623          	sw	a4,12(s7)
    620c:	14c7f063          	bgeu	a5,a2,634c <_realloc_r+0x4d4>
    6210:	00842783          	lw	a5,8(s0)
    6214:	00fba823          	sw	a5,16(s7)
    6218:	00c42783          	lw	a5,12(s0)
    621c:	00fbaa23          	sw	a5,20(s7)
    6220:	0ad60663          	beq	a2,a3,62cc <_realloc_r+0x454>
    6224:	01040413          	addi	s0,s0,16
    6228:	018b8793          	addi	a5,s7,24
    622c:	00042703          	lw	a4,0(s0)
    6230:	00e7a023          	sw	a4,0(a5)
    6234:	00442703          	lw	a4,4(s0)
    6238:	00e7a223          	sw	a4,4(a5)
    623c:	00842703          	lw	a4,8(s0)
    6240:	00e7a423          	sw	a4,8(a5)
    6244:	00048413          	mv	s0,s1
    6248:	000b0993          	mv	s3,s6
    624c:	000b8a93          	mv	s5,s7
    6250:	d95ff06f          	j	5fe4 <_realloc_r+0x16c>
    6254:	00040593          	mv	a1,s0
    6258:	a4dff0ef          	jal	ra,5ca4 <memmove>
    625c:	d45ff06f          	j	5fa0 <_realloc_r+0x128>
    6260:	00c6a783          	lw	a5,12(a3)
    6264:	0086a703          	lw	a4,8(a3)
    6268:	ffc98613          	addi	a2,s3,-4
    626c:	02400693          	li	a3,36
    6270:	00f72623          	sw	a5,12(a4)
    6274:	00e7a423          	sw	a4,8(a5)
    6278:	008ba703          	lw	a4,8(s7)
    627c:	00cba783          	lw	a5,12(s7)
    6280:	008b8493          	addi	s1,s7,8
    6284:	00f72623          	sw	a5,12(a4)
    6288:	00e7a423          	sw	a4,8(a5)
    628c:	04c6ee63          	bltu	a3,a2,62e8 <_realloc_r+0x470>
    6290:	01300713          	li	a4,19
    6294:	00048793          	mv	a5,s1
    6298:	f8c77ae3          	bgeu	a4,a2,622c <_realloc_r+0x3b4>
    629c:	00042703          	lw	a4,0(s0)
    62a0:	01b00793          	li	a5,27
    62a4:	00eba423          	sw	a4,8(s7)
    62a8:	00442703          	lw	a4,4(s0)
    62ac:	00eba623          	sw	a4,12(s7)
    62b0:	08c7fe63          	bgeu	a5,a2,634c <_realloc_r+0x4d4>
    62b4:	00842703          	lw	a4,8(s0)
    62b8:	02400793          	li	a5,36
    62bc:	00eba823          	sw	a4,16(s7)
    62c0:	00c42703          	lw	a4,12(s0)
    62c4:	00ebaa23          	sw	a4,20(s7)
    62c8:	f4f61ee3          	bne	a2,a5,6224 <_realloc_r+0x3ac>
    62cc:	01042703          	lw	a4,16(s0)
    62d0:	020b8793          	addi	a5,s7,32
    62d4:	01840413          	addi	s0,s0,24
    62d8:	00ebac23          	sw	a4,24(s7)
    62dc:	ffc42703          	lw	a4,-4(s0)
    62e0:	00ebae23          	sw	a4,28(s7)
    62e4:	f49ff06f          	j	622c <_realloc_r+0x3b4>
    62e8:	00040593          	mv	a1,s0
    62ec:	00048513          	mv	a0,s1
    62f0:	9b5ff0ef          	jal	ra,5ca4 <memmove>
    62f4:	f51ff06f          	j	6244 <_realloc_r+0x3cc>
    62f8:	00842703          	lw	a4,8(s0)
    62fc:	00e52423          	sw	a4,8(a0)
    6300:	00c42703          	lw	a4,12(s0)
    6304:	00e52623          	sw	a4,12(a0)
    6308:	06f60063          	beq	a2,a5,6368 <_realloc_r+0x4f0>
    630c:	01040713          	addi	a4,s0,16
    6310:	01050793          	addi	a5,a0,16
    6314:	c75ff06f          	j	5f88 <_realloc_r+0x110>
    6318:	014a8ab3          	add	s5,s5,s4
    631c:	414687b3          	sub	a5,a3,s4
    6320:	015c2423          	sw	s5,8(s8)
    6324:	0017e793          	ori	a5,a5,1
    6328:	00faa223          	sw	a5,4(s5)
    632c:	ffc42783          	lw	a5,-4(s0)
    6330:	00090513          	mv	a0,s2
    6334:	00040493          	mv	s1,s0
    6338:	0017f793          	andi	a5,a5,1
    633c:	0147e7b3          	or	a5,a5,s4
    6340:	fef42e23          	sw	a5,-4(s0)
    6344:	87dfe0ef          	jal	ra,4bc0 <__malloc_unlock>
    6348:	cd5ff06f          	j	601c <_realloc_r+0x1a4>
    634c:	00840413          	addi	s0,s0,8
    6350:	010b8793          	addi	a5,s7,16
    6354:	ed9ff06f          	j	622c <_realloc_r+0x3b4>
    6358:	00090513          	mv	a0,s2
    635c:	865fe0ef          	jal	ra,4bc0 <__malloc_unlock>
    6360:	00000493          	li	s1,0
    6364:	cb9ff06f          	j	601c <_realloc_r+0x1a4>
    6368:	01042683          	lw	a3,16(s0)
    636c:	01840713          	addi	a4,s0,24
    6370:	01850793          	addi	a5,a0,24
    6374:	00d52823          	sw	a3,16(a0)
    6378:	01442683          	lw	a3,20(s0)
    637c:	00d52a23          	sw	a3,20(a0)
    6380:	c09ff06f          	j	5f88 <_realloc_r+0x110>
    6384:	00040593          	mv	a1,s0
    6388:	00048513          	mv	a0,s1
    638c:	919ff0ef          	jal	ra,5ca4 <memmove>
    6390:	dd9ff06f          	j	6168 <_realloc_r+0x2f0>
    6394:	00842783          	lw	a5,8(s0)
    6398:	00fba823          	sw	a5,16(s7)
    639c:	00c42783          	lw	a5,12(s0)
    63a0:	00fbaa23          	sw	a5,20(s7)
    63a4:	00d60863          	beq	a2,a3,63b4 <_realloc_r+0x53c>
    63a8:	01040413          	addi	s0,s0,16
    63ac:	018b8793          	addi	a5,s7,24
    63b0:	da1ff06f          	j	6150 <_realloc_r+0x2d8>
    63b4:	01042703          	lw	a4,16(s0)
    63b8:	020b8793          	addi	a5,s7,32
    63bc:	01840413          	addi	s0,s0,24
    63c0:	00ebac23          	sw	a4,24(s7)
    63c4:	ffc42703          	lw	a4,-4(s0)
    63c8:	00ebae23          	sw	a4,28(s7)
    63cc:	d85ff06f          	j	6150 <_realloc_r+0x2d8>

000063d0 <_init_signal_r>:
    63d0:	2dc52783          	lw	a5,732(a0)
    63d4:	00078663          	beqz	a5,63e0 <_init_signal_r+0x10>
    63d8:	00000513          	li	a0,0
    63dc:	00008067          	ret
    63e0:	ff010113          	addi	sp,sp,-16
    63e4:	08000593          	li	a1,128
    63e8:	00812423          	sw	s0,8(sp)
    63ec:	00112623          	sw	ra,12(sp)
    63f0:	00050413          	mv	s0,a0
    63f4:	db9fd0ef          	jal	ra,41ac <_malloc_r>
    63f8:	2ca42e23          	sw	a0,732(s0)
    63fc:	02050463          	beqz	a0,6424 <_init_signal_r+0x54>
    6400:	08050793          	addi	a5,a0,128
    6404:	00052023          	sw	zero,0(a0)
    6408:	00450513          	addi	a0,a0,4
    640c:	fef51ce3          	bne	a0,a5,6404 <_init_signal_r+0x34>
    6410:	00000513          	li	a0,0
    6414:	00c12083          	lw	ra,12(sp)
    6418:	00812403          	lw	s0,8(sp)
    641c:	01010113          	addi	sp,sp,16
    6420:	00008067          	ret
    6424:	fff00513          	li	a0,-1
    6428:	fedff06f          	j	6414 <_init_signal_r+0x44>

0000642c <_signal_r>:
    642c:	fe010113          	addi	sp,sp,-32
    6430:	00912a23          	sw	s1,20(sp)
    6434:	00112e23          	sw	ra,28(sp)
    6438:	00812c23          	sw	s0,24(sp)
    643c:	01f00793          	li	a5,31
    6440:	00050493          	mv	s1,a0
    6444:	02b7ea63          	bltu	a5,a1,6478 <_signal_r+0x4c>
    6448:	2dc52783          	lw	a5,732(a0)
    644c:	00058413          	mv	s0,a1
    6450:	02078c63          	beqz	a5,6488 <_signal_r+0x5c>
    6454:	00241413          	slli	s0,s0,0x2
    6458:	008787b3          	add	a5,a5,s0
    645c:	0007a503          	lw	a0,0(a5)
    6460:	00c7a023          	sw	a2,0(a5)
    6464:	01c12083          	lw	ra,28(sp)
    6468:	01812403          	lw	s0,24(sp)
    646c:	01412483          	lw	s1,20(sp)
    6470:	02010113          	addi	sp,sp,32
    6474:	00008067          	ret
    6478:	01600793          	li	a5,22
    647c:	00f52023          	sw	a5,0(a0)
    6480:	fff00513          	li	a0,-1
    6484:	fe1ff06f          	j	6464 <_signal_r+0x38>
    6488:	08000593          	li	a1,128
    648c:	00c12623          	sw	a2,12(sp)
    6490:	d1dfd0ef          	jal	ra,41ac <_malloc_r>
    6494:	2ca4ae23          	sw	a0,732(s1)
    6498:	00c12603          	lw	a2,12(sp)
    649c:	00050793          	mv	a5,a0
    64a0:	00050713          	mv	a4,a0
    64a4:	08050693          	addi	a3,a0,128
    64a8:	fc050ce3          	beqz	a0,6480 <_signal_r+0x54>
    64ac:	00072023          	sw	zero,0(a4)
    64b0:	00470713          	addi	a4,a4,4
    64b4:	fed71ce3          	bne	a4,a3,64ac <_signal_r+0x80>
    64b8:	f9dff06f          	j	6454 <_signal_r+0x28>

000064bc <_raise_r>:
    64bc:	ff010113          	addi	sp,sp,-16
    64c0:	00912223          	sw	s1,4(sp)
    64c4:	00112623          	sw	ra,12(sp)
    64c8:	00812423          	sw	s0,8(sp)
    64cc:	01f00793          	li	a5,31
    64d0:	00050493          	mv	s1,a0
    64d4:	08b7ee63          	bltu	a5,a1,6570 <_raise_r+0xb4>
    64d8:	2dc52783          	lw	a5,732(a0)
    64dc:	00058413          	mv	s0,a1
    64e0:	04078463          	beqz	a5,6528 <_raise_r+0x6c>
    64e4:	00259713          	slli	a4,a1,0x2
    64e8:	00e787b3          	add	a5,a5,a4
    64ec:	0007a703          	lw	a4,0(a5)
    64f0:	02070c63          	beqz	a4,6528 <_raise_r+0x6c>
    64f4:	00100693          	li	a3,1
    64f8:	00d70c63          	beq	a4,a3,6510 <_raise_r+0x54>
    64fc:	fff00693          	li	a3,-1
    6500:	04d70863          	beq	a4,a3,6550 <_raise_r+0x94>
    6504:	0007a023          	sw	zero,0(a5)
    6508:	00058513          	mv	a0,a1
    650c:	000700e7          	jalr	a4
    6510:	00000513          	li	a0,0
    6514:	00c12083          	lw	ra,12(sp)
    6518:	00812403          	lw	s0,8(sp)
    651c:	00412483          	lw	s1,4(sp)
    6520:	01010113          	addi	sp,sp,16
    6524:	00008067          	ret
    6528:	00048513          	mv	a0,s1
    652c:	418000ef          	jal	ra,6944 <_getpid_r>
    6530:	00040613          	mv	a2,s0
    6534:	00812403          	lw	s0,8(sp)
    6538:	00c12083          	lw	ra,12(sp)
    653c:	00050593          	mv	a1,a0
    6540:	00048513          	mv	a0,s1
    6544:	00412483          	lw	s1,4(sp)
    6548:	01010113          	addi	sp,sp,16
    654c:	3a00006f          	j	68ec <_kill_r>
    6550:	00c12083          	lw	ra,12(sp)
    6554:	00812403          	lw	s0,8(sp)
    6558:	01600793          	li	a5,22
    655c:	00f52023          	sw	a5,0(a0)
    6560:	00412483          	lw	s1,4(sp)
    6564:	00100513          	li	a0,1
    6568:	01010113          	addi	sp,sp,16
    656c:	00008067          	ret
    6570:	01600793          	li	a5,22
    6574:	00f52023          	sw	a5,0(a0)
    6578:	fff00513          	li	a0,-1
    657c:	f99ff06f          	j	6514 <_raise_r+0x58>

00006580 <__sigtramp_r>:
    6580:	01f00793          	li	a5,31
    6584:	0cb7ea63          	bltu	a5,a1,6658 <__sigtramp_r+0xd8>
    6588:	2dc52783          	lw	a5,732(a0)
    658c:	ff010113          	addi	sp,sp,-16
    6590:	00812423          	sw	s0,8(sp)
    6594:	00912223          	sw	s1,4(sp)
    6598:	00112623          	sw	ra,12(sp)
    659c:	00058413          	mv	s0,a1
    65a0:	00050493          	mv	s1,a0
    65a4:	08078063          	beqz	a5,6624 <__sigtramp_r+0xa4>
    65a8:	00241713          	slli	a4,s0,0x2
    65ac:	00e787b3          	add	a5,a5,a4
    65b0:	0007a703          	lw	a4,0(a5)
    65b4:	02070c63          	beqz	a4,65ec <__sigtramp_r+0x6c>
    65b8:	fff00693          	li	a3,-1
    65bc:	06d70063          	beq	a4,a3,661c <__sigtramp_r+0x9c>
    65c0:	00100693          	li	a3,1
    65c4:	04d70063          	beq	a4,a3,6604 <__sigtramp_r+0x84>
    65c8:	00040513          	mv	a0,s0
    65cc:	0007a023          	sw	zero,0(a5)
    65d0:	000700e7          	jalr	a4
    65d4:	00000513          	li	a0,0
    65d8:	00c12083          	lw	ra,12(sp)
    65dc:	00812403          	lw	s0,8(sp)
    65e0:	00412483          	lw	s1,4(sp)
    65e4:	01010113          	addi	sp,sp,16
    65e8:	00008067          	ret
    65ec:	00c12083          	lw	ra,12(sp)
    65f0:	00812403          	lw	s0,8(sp)
    65f4:	00412483          	lw	s1,4(sp)
    65f8:	00100513          	li	a0,1
    65fc:	01010113          	addi	sp,sp,16
    6600:	00008067          	ret
    6604:	00c12083          	lw	ra,12(sp)
    6608:	00812403          	lw	s0,8(sp)
    660c:	00412483          	lw	s1,4(sp)
    6610:	00300513          	li	a0,3
    6614:	01010113          	addi	sp,sp,16
    6618:	00008067          	ret
    661c:	00200513          	li	a0,2
    6620:	fb9ff06f          	j	65d8 <__sigtramp_r+0x58>
    6624:	08000593          	li	a1,128
    6628:	b85fd0ef          	jal	ra,41ac <_malloc_r>
    662c:	2ca4ae23          	sw	a0,732(s1)
    6630:	00050793          	mv	a5,a0
    6634:	00050e63          	beqz	a0,6650 <__sigtramp_r+0xd0>
    6638:	00050713          	mv	a4,a0
    663c:	08050693          	addi	a3,a0,128
    6640:	00072023          	sw	zero,0(a4)
    6644:	00470713          	addi	a4,a4,4
    6648:	fee69ce3          	bne	a3,a4,6640 <__sigtramp_r+0xc0>
    664c:	f5dff06f          	j	65a8 <__sigtramp_r+0x28>
    6650:	fff00513          	li	a0,-1
    6654:	f85ff06f          	j	65d8 <__sigtramp_r+0x58>
    6658:	fff00513          	li	a0,-1
    665c:	00008067          	ret

00006660 <raise>:
    6660:	ff010113          	addi	sp,sp,-16
    6664:	00912223          	sw	s1,4(sp)
    6668:	00112623          	sw	ra,12(sp)
    666c:	00812423          	sw	s0,8(sp)
    6670:	01f00793          	li	a5,31
    6674:	8281a483          	lw	s1,-2008(gp) # 9990 <_impure_ptr>
    6678:	08a7ec63          	bltu	a5,a0,6710 <raise+0xb0>
    667c:	2dc4a783          	lw	a5,732(s1)
    6680:	00050413          	mv	s0,a0
    6684:	04078263          	beqz	a5,66c8 <raise+0x68>
    6688:	00251713          	slli	a4,a0,0x2
    668c:	00e787b3          	add	a5,a5,a4
    6690:	0007a703          	lw	a4,0(a5)
    6694:	02070a63          	beqz	a4,66c8 <raise+0x68>
    6698:	00100693          	li	a3,1
    669c:	00d70a63          	beq	a4,a3,66b0 <raise+0x50>
    66a0:	fff00693          	li	a3,-1
    66a4:	04d70663          	beq	a4,a3,66f0 <raise+0x90>
    66a8:	0007a023          	sw	zero,0(a5)
    66ac:	000700e7          	jalr	a4
    66b0:	00000513          	li	a0,0
    66b4:	00c12083          	lw	ra,12(sp)
    66b8:	00812403          	lw	s0,8(sp)
    66bc:	00412483          	lw	s1,4(sp)
    66c0:	01010113          	addi	sp,sp,16
    66c4:	00008067          	ret
    66c8:	00048513          	mv	a0,s1
    66cc:	278000ef          	jal	ra,6944 <_getpid_r>
    66d0:	00040613          	mv	a2,s0
    66d4:	00812403          	lw	s0,8(sp)
    66d8:	00c12083          	lw	ra,12(sp)
    66dc:	00050593          	mv	a1,a0
    66e0:	00048513          	mv	a0,s1
    66e4:	00412483          	lw	s1,4(sp)
    66e8:	01010113          	addi	sp,sp,16
    66ec:	2000006f          	j	68ec <_kill_r>
    66f0:	00c12083          	lw	ra,12(sp)
    66f4:	00812403          	lw	s0,8(sp)
    66f8:	01600793          	li	a5,22
    66fc:	00f4a023          	sw	a5,0(s1)
    6700:	00100513          	li	a0,1
    6704:	00412483          	lw	s1,4(sp)
    6708:	01010113          	addi	sp,sp,16
    670c:	00008067          	ret
    6710:	01600793          	li	a5,22
    6714:	00f4a023          	sw	a5,0(s1)
    6718:	fff00513          	li	a0,-1
    671c:	f99ff06f          	j	66b4 <raise+0x54>

00006720 <signal>:
    6720:	ff010113          	addi	sp,sp,-16
    6724:	01212023          	sw	s2,0(sp)
    6728:	00112623          	sw	ra,12(sp)
    672c:	00812423          	sw	s0,8(sp)
    6730:	00912223          	sw	s1,4(sp)
    6734:	01f00793          	li	a5,31
    6738:	8281a903          	lw	s2,-2008(gp) # 9990 <_impure_ptr>
    673c:	02a7ee63          	bltu	a5,a0,6778 <signal+0x58>
    6740:	00050413          	mv	s0,a0
    6744:	2dc92503          	lw	a0,732(s2)
    6748:	00058493          	mv	s1,a1
    674c:	02050e63          	beqz	a0,6788 <signal+0x68>
    6750:	00241413          	slli	s0,s0,0x2
    6754:	008507b3          	add	a5,a0,s0
    6758:	0007a503          	lw	a0,0(a5)
    675c:	0097a023          	sw	s1,0(a5)
    6760:	00c12083          	lw	ra,12(sp)
    6764:	00812403          	lw	s0,8(sp)
    6768:	00412483          	lw	s1,4(sp)
    676c:	00012903          	lw	s2,0(sp)
    6770:	01010113          	addi	sp,sp,16
    6774:	00008067          	ret
    6778:	01600793          	li	a5,22
    677c:	00f92023          	sw	a5,0(s2)
    6780:	fff00513          	li	a0,-1
    6784:	fddff06f          	j	6760 <signal+0x40>
    6788:	08000593          	li	a1,128
    678c:	00090513          	mv	a0,s2
    6790:	a1dfd0ef          	jal	ra,41ac <_malloc_r>
    6794:	2ca92e23          	sw	a0,732(s2)
    6798:	00050793          	mv	a5,a0
    679c:	08050713          	addi	a4,a0,128
    67a0:	fe0500e3          	beqz	a0,6780 <signal+0x60>
    67a4:	0007a023          	sw	zero,0(a5)
    67a8:	00478793          	addi	a5,a5,4
    67ac:	fee79ce3          	bne	a5,a4,67a4 <signal+0x84>
    67b0:	fa1ff06f          	j	6750 <signal+0x30>

000067b4 <_init_signal>:
    67b4:	ff010113          	addi	sp,sp,-16
    67b8:	00812423          	sw	s0,8(sp)
    67bc:	8281a403          	lw	s0,-2008(gp) # 9990 <_impure_ptr>
    67c0:	2dc42783          	lw	a5,732(s0)
    67c4:	00112623          	sw	ra,12(sp)
    67c8:	00078c63          	beqz	a5,67e0 <_init_signal+0x2c>
    67cc:	00000513          	li	a0,0
    67d0:	00c12083          	lw	ra,12(sp)
    67d4:	00812403          	lw	s0,8(sp)
    67d8:	01010113          	addi	sp,sp,16
    67dc:	00008067          	ret
    67e0:	08000593          	li	a1,128
    67e4:	00040513          	mv	a0,s0
    67e8:	9c5fd0ef          	jal	ra,41ac <_malloc_r>
    67ec:	2ca42e23          	sw	a0,732(s0)
    67f0:	00050c63          	beqz	a0,6808 <_init_signal+0x54>
    67f4:	08050793          	addi	a5,a0,128
    67f8:	00052023          	sw	zero,0(a0)
    67fc:	00450513          	addi	a0,a0,4
    6800:	fef51ce3          	bne	a0,a5,67f8 <_init_signal+0x44>
    6804:	fc9ff06f          	j	67cc <_init_signal+0x18>
    6808:	fff00513          	li	a0,-1
    680c:	fc5ff06f          	j	67d0 <_init_signal+0x1c>

00006810 <__sigtramp>:
    6810:	ff010113          	addi	sp,sp,-16
    6814:	00912223          	sw	s1,4(sp)
    6818:	00112623          	sw	ra,12(sp)
    681c:	00812423          	sw	s0,8(sp)
    6820:	01f00793          	li	a5,31
    6824:	8281a483          	lw	s1,-2008(gp) # 9990 <_impure_ptr>
    6828:	0aa7ee63          	bltu	a5,a0,68e4 <__sigtramp+0xd4>
    682c:	2dc4a783          	lw	a5,732(s1)
    6830:	00050413          	mv	s0,a0
    6834:	08078063          	beqz	a5,68b4 <__sigtramp+0xa4>
    6838:	00241713          	slli	a4,s0,0x2
    683c:	00e787b3          	add	a5,a5,a4
    6840:	0007a703          	lw	a4,0(a5)
    6844:	02070c63          	beqz	a4,687c <__sigtramp+0x6c>
    6848:	fff00693          	li	a3,-1
    684c:	06d70063          	beq	a4,a3,68ac <__sigtramp+0x9c>
    6850:	00100693          	li	a3,1
    6854:	04d70063          	beq	a4,a3,6894 <__sigtramp+0x84>
    6858:	00040513          	mv	a0,s0
    685c:	0007a023          	sw	zero,0(a5)
    6860:	000700e7          	jalr	a4
    6864:	00000513          	li	a0,0
    6868:	00c12083          	lw	ra,12(sp)
    686c:	00812403          	lw	s0,8(sp)
    6870:	00412483          	lw	s1,4(sp)
    6874:	01010113          	addi	sp,sp,16
    6878:	00008067          	ret
    687c:	00c12083          	lw	ra,12(sp)
    6880:	00812403          	lw	s0,8(sp)
    6884:	00412483          	lw	s1,4(sp)
    6888:	00100513          	li	a0,1
    688c:	01010113          	addi	sp,sp,16
    6890:	00008067          	ret
    6894:	00c12083          	lw	ra,12(sp)
    6898:	00812403          	lw	s0,8(sp)
    689c:	00412483          	lw	s1,4(sp)
    68a0:	00300513          	li	a0,3
    68a4:	01010113          	addi	sp,sp,16
    68a8:	00008067          	ret
    68ac:	00200513          	li	a0,2
    68b0:	fb9ff06f          	j	6868 <__sigtramp+0x58>
    68b4:	08000593          	li	a1,128
    68b8:	00048513          	mv	a0,s1
    68bc:	8f1fd0ef          	jal	ra,41ac <_malloc_r>
    68c0:	2ca4ae23          	sw	a0,732(s1)
    68c4:	00050793          	mv	a5,a0
    68c8:	00050e63          	beqz	a0,68e4 <__sigtramp+0xd4>
    68cc:	00050713          	mv	a4,a0
    68d0:	08050693          	addi	a3,a0,128
    68d4:	00072023          	sw	zero,0(a4)
    68d8:	00470713          	addi	a4,a4,4
    68dc:	fee69ce3          	bne	a3,a4,68d4 <__sigtramp+0xc4>
    68e0:	f59ff06f          	j	6838 <__sigtramp+0x28>
    68e4:	fff00513          	li	a0,-1
    68e8:	f81ff06f          	j	6868 <__sigtramp+0x58>

000068ec <_kill_r>:
    68ec:	ff010113          	addi	sp,sp,-16
    68f0:	00058713          	mv	a4,a1
    68f4:	00812423          	sw	s0,8(sp)
    68f8:	00060593          	mv	a1,a2
    68fc:	00050413          	mv	s0,a0
    6900:	00070513          	mv	a0,a4
    6904:	8a01a023          	sw	zero,-1888(gp) # 9a08 <errno>
    6908:	00112623          	sw	ra,12(sp)
    690c:	159000ef          	jal	ra,7264 <_kill>
    6910:	fff00793          	li	a5,-1
    6914:	00f50a63          	beq	a0,a5,6928 <_kill_r+0x3c>
    6918:	00c12083          	lw	ra,12(sp)
    691c:	00812403          	lw	s0,8(sp)
    6920:	01010113          	addi	sp,sp,16
    6924:	00008067          	ret
    6928:	8a01a783          	lw	a5,-1888(gp) # 9a08 <errno>
    692c:	fe0786e3          	beqz	a5,6918 <_kill_r+0x2c>
    6930:	00c12083          	lw	ra,12(sp)
    6934:	00f42023          	sw	a5,0(s0)
    6938:	00812403          	lw	s0,8(sp)
    693c:	01010113          	addi	sp,sp,16
    6940:	00008067          	ret

00006944 <_getpid_r>:
    6944:	78c0006f          	j	70d0 <_getpid>

00006948 <__swsetup_r>:
    6948:	ff010113          	addi	sp,sp,-16
    694c:	00812423          	sw	s0,8(sp)
    6950:	00912223          	sw	s1,4(sp)
    6954:	00112623          	sw	ra,12(sp)
    6958:	8281a783          	lw	a5,-2008(gp) # 9990 <_impure_ptr>
    695c:	00050493          	mv	s1,a0
    6960:	00058413          	mv	s0,a1
    6964:	00078663          	beqz	a5,6970 <__swsetup_r+0x28>
    6968:	0387a703          	lw	a4,56(a5)
    696c:	08070063          	beqz	a4,69ec <__swsetup_r+0xa4>
    6970:	00c41783          	lh	a5,12(s0)
    6974:	0087f713          	andi	a4,a5,8
    6978:	08070463          	beqz	a4,6a00 <__swsetup_r+0xb8>
    697c:	01042703          	lw	a4,16(s0)
    6980:	0a070063          	beqz	a4,6a20 <__swsetup_r+0xd8>
    6984:	0017f693          	andi	a3,a5,1
    6988:	02068863          	beqz	a3,69b8 <__swsetup_r+0x70>
    698c:	01442683          	lw	a3,20(s0)
    6990:	00042423          	sw	zero,8(s0)
    6994:	00000513          	li	a0,0
    6998:	40d006b3          	neg	a3,a3
    699c:	00d42c23          	sw	a3,24(s0)
    69a0:	02070a63          	beqz	a4,69d4 <__swsetup_r+0x8c>
    69a4:	00c12083          	lw	ra,12(sp)
    69a8:	00812403          	lw	s0,8(sp)
    69ac:	00412483          	lw	s1,4(sp)
    69b0:	01010113          	addi	sp,sp,16
    69b4:	00008067          	ret
    69b8:	0027f693          	andi	a3,a5,2
    69bc:	00000613          	li	a2,0
    69c0:	00069463          	bnez	a3,69c8 <__swsetup_r+0x80>
    69c4:	01442603          	lw	a2,20(s0)
    69c8:	00c42423          	sw	a2,8(s0)
    69cc:	00000513          	li	a0,0
    69d0:	fc071ae3          	bnez	a4,69a4 <__swsetup_r+0x5c>
    69d4:	0807f713          	andi	a4,a5,128
    69d8:	fc0706e3          	beqz	a4,69a4 <__swsetup_r+0x5c>
    69dc:	0407e793          	ori	a5,a5,64
    69e0:	00f41623          	sh	a5,12(s0)
    69e4:	fff00513          	li	a0,-1
    69e8:	fbdff06f          	j	69a4 <__swsetup_r+0x5c>
    69ec:	00078513          	mv	a0,a5
    69f0:	e95fc0ef          	jal	ra,3884 <__sinit>
    69f4:	00c41783          	lh	a5,12(s0)
    69f8:	0087f713          	andi	a4,a5,8
    69fc:	f80710e3          	bnez	a4,697c <__swsetup_r+0x34>
    6a00:	0107f713          	andi	a4,a5,16
    6a04:	06070a63          	beqz	a4,6a78 <__swsetup_r+0x130>
    6a08:	0047f713          	andi	a4,a5,4
    6a0c:	02071c63          	bnez	a4,6a44 <__swsetup_r+0xfc>
    6a10:	01042703          	lw	a4,16(s0)
    6a14:	0087e793          	ori	a5,a5,8
    6a18:	00f41623          	sh	a5,12(s0)
    6a1c:	f60714e3          	bnez	a4,6984 <__swsetup_r+0x3c>
    6a20:	2807f693          	andi	a3,a5,640
    6a24:	20000613          	li	a2,512
    6a28:	f4c68ee3          	beq	a3,a2,6984 <__swsetup_r+0x3c>
    6a2c:	00040593          	mv	a1,s0
    6a30:	00048513          	mv	a0,s1
    6a34:	054000ef          	jal	ra,6a88 <__smakebuf_r>
    6a38:	00c41783          	lh	a5,12(s0)
    6a3c:	01042703          	lw	a4,16(s0)
    6a40:	f45ff06f          	j	6984 <__swsetup_r+0x3c>
    6a44:	03042583          	lw	a1,48(s0)
    6a48:	00058e63          	beqz	a1,6a64 <__swsetup_r+0x11c>
    6a4c:	04040713          	addi	a4,s0,64
    6a50:	00e58863          	beq	a1,a4,6a60 <__swsetup_r+0x118>
    6a54:	00048513          	mv	a0,s1
    6a58:	ac8fd0ef          	jal	ra,3d20 <_free_r>
    6a5c:	00c41783          	lh	a5,12(s0)
    6a60:	02042823          	sw	zero,48(s0)
    6a64:	01042703          	lw	a4,16(s0)
    6a68:	fdb7f793          	andi	a5,a5,-37
    6a6c:	00042223          	sw	zero,4(s0)
    6a70:	00e42023          	sw	a4,0(s0)
    6a74:	fa1ff06f          	j	6a14 <__swsetup_r+0xcc>
    6a78:	00900713          	li	a4,9
    6a7c:	00e4a023          	sw	a4,0(s1)
    6a80:	0407e793          	ori	a5,a5,64
    6a84:	f5dff06f          	j	69e0 <__swsetup_r+0x98>

00006a88 <__smakebuf_r>:
    6a88:	00c59783          	lh	a5,12(a1)
    6a8c:	f8010113          	addi	sp,sp,-128
    6a90:	06812c23          	sw	s0,120(sp)
    6a94:	06112e23          	sw	ra,124(sp)
    6a98:	06912a23          	sw	s1,116(sp)
    6a9c:	07212823          	sw	s2,112(sp)
    6aa0:	07312623          	sw	s3,108(sp)
    6aa4:	07412423          	sw	s4,104(sp)
    6aa8:	0027f713          	andi	a4,a5,2
    6aac:	00058413          	mv	s0,a1
    6ab0:	02070c63          	beqz	a4,6ae8 <__smakebuf_r+0x60>
    6ab4:	04358793          	addi	a5,a1,67
    6ab8:	00f5a023          	sw	a5,0(a1)
    6abc:	00f5a823          	sw	a5,16(a1)
    6ac0:	00100793          	li	a5,1
    6ac4:	00f5aa23          	sw	a5,20(a1)
    6ac8:	07c12083          	lw	ra,124(sp)
    6acc:	07812403          	lw	s0,120(sp)
    6ad0:	07412483          	lw	s1,116(sp)
    6ad4:	07012903          	lw	s2,112(sp)
    6ad8:	06c12983          	lw	s3,108(sp)
    6adc:	06812a03          	lw	s4,104(sp)
    6ae0:	08010113          	addi	sp,sp,128
    6ae4:	00008067          	ret
    6ae8:	00e59583          	lh	a1,14(a1)
    6aec:	00050493          	mv	s1,a0
    6af0:	0805cc63          	bltz	a1,6b88 <__smakebuf_r+0x100>
    6af4:	00810613          	addi	a2,sp,8
    6af8:	1f8000ef          	jal	ra,6cf0 <_fstat_r>
    6afc:	08054463          	bltz	a0,6b84 <__smakebuf_r+0xfc>
    6b00:	00c12783          	lw	a5,12(sp)
    6b04:	0000f937          	lui	s2,0xf
    6b08:	00001a37          	lui	s4,0x1
    6b0c:	00f97933          	and	s2,s2,a5
    6b10:	ffffe7b7          	lui	a5,0xffffe
    6b14:	00f90933          	add	s2,s2,a5
    6b18:	00193913          	seqz	s2,s2
    6b1c:	40000993          	li	s3,1024
    6b20:	800a0a13          	addi	s4,s4,-2048 # 800 <altera_avalon_jtag_uart_irq+0xa4>
    6b24:	00098593          	mv	a1,s3
    6b28:	00048513          	mv	a0,s1
    6b2c:	e80fd0ef          	jal	ra,41ac <_malloc_r>
    6b30:	00c41783          	lh	a5,12(s0)
    6b34:	06050e63          	beqz	a0,6bb0 <__smakebuf_r+0x128>
    6b38:	ffffd717          	auipc	a4,0xffffd
    6b3c:	c3470713          	addi	a4,a4,-972 # 376c <_cleanup_r>
    6b40:	02e4ae23          	sw	a4,60(s1)
    6b44:	0807e793          	ori	a5,a5,128
    6b48:	00f41623          	sh	a5,12(s0)
    6b4c:	00a42023          	sw	a0,0(s0)
    6b50:	00a42823          	sw	a0,16(s0)
    6b54:	01342a23          	sw	s3,20(s0)
    6b58:	08091863          	bnez	s2,6be8 <__smakebuf_r+0x160>
    6b5c:	0147e7b3          	or	a5,a5,s4
    6b60:	07c12083          	lw	ra,124(sp)
    6b64:	00f41623          	sh	a5,12(s0)
    6b68:	07812403          	lw	s0,120(sp)
    6b6c:	07412483          	lw	s1,116(sp)
    6b70:	07012903          	lw	s2,112(sp)
    6b74:	06c12983          	lw	s3,108(sp)
    6b78:	06812a03          	lw	s4,104(sp)
    6b7c:	08010113          	addi	sp,sp,128
    6b80:	00008067          	ret
    6b84:	00c41783          	lh	a5,12(s0)
    6b88:	0807f793          	andi	a5,a5,128
    6b8c:	00000913          	li	s2,0
    6b90:	04078663          	beqz	a5,6bdc <__smakebuf_r+0x154>
    6b94:	04000993          	li	s3,64
    6b98:	00098593          	mv	a1,s3
    6b9c:	00048513          	mv	a0,s1
    6ba0:	e0cfd0ef          	jal	ra,41ac <_malloc_r>
    6ba4:	00c41783          	lh	a5,12(s0)
    6ba8:	00000a13          	li	s4,0
    6bac:	f80516e3          	bnez	a0,6b38 <__smakebuf_r+0xb0>
    6bb0:	2007f713          	andi	a4,a5,512
    6bb4:	f0071ae3          	bnez	a4,6ac8 <__smakebuf_r+0x40>
    6bb8:	ffc7f793          	andi	a5,a5,-4
    6bbc:	0027e793          	ori	a5,a5,2
    6bc0:	04340713          	addi	a4,s0,67
    6bc4:	00f41623          	sh	a5,12(s0)
    6bc8:	00100793          	li	a5,1
    6bcc:	00e42023          	sw	a4,0(s0)
    6bd0:	00e42823          	sw	a4,16(s0)
    6bd4:	00f42a23          	sw	a5,20(s0)
    6bd8:	ef1ff06f          	j	6ac8 <__smakebuf_r+0x40>
    6bdc:	40000993          	li	s3,1024
    6be0:	00000a13          	li	s4,0
    6be4:	f41ff06f          	j	6b24 <__smakebuf_r+0x9c>
    6be8:	00e41583          	lh	a1,14(s0)
    6bec:	00048513          	mv	a0,s1
    6bf0:	158000ef          	jal	ra,6d48 <_isatty_r>
    6bf4:	00051663          	bnez	a0,6c00 <__smakebuf_r+0x178>
    6bf8:	00c41783          	lh	a5,12(s0)
    6bfc:	f61ff06f          	j	6b5c <__smakebuf_r+0xd4>
    6c00:	00c45783          	lhu	a5,12(s0)
    6c04:	ffc7f793          	andi	a5,a5,-4
    6c08:	0017e793          	ori	a5,a5,1
    6c0c:	01079793          	slli	a5,a5,0x10
    6c10:	4107d793          	srai	a5,a5,0x10
    6c14:	f49ff06f          	j	6b5c <__smakebuf_r+0xd4>

00006c18 <__swhatbuf_r>:
    6c18:	f9010113          	addi	sp,sp,-112
    6c1c:	06812423          	sw	s0,104(sp)
    6c20:	00058413          	mv	s0,a1
    6c24:	00e59583          	lh	a1,14(a1)
    6c28:	06912223          	sw	s1,100(sp)
    6c2c:	07212023          	sw	s2,96(sp)
    6c30:	06112623          	sw	ra,108(sp)
    6c34:	00060493          	mv	s1,a2
    6c38:	00068913          	mv	s2,a3
    6c3c:	0405ca63          	bltz	a1,6c90 <__swhatbuf_r+0x78>
    6c40:	00810613          	addi	a2,sp,8
    6c44:	0ac000ef          	jal	ra,6cf0 <_fstat_r>
    6c48:	04054463          	bltz	a0,6c90 <__swhatbuf_r+0x78>
    6c4c:	00c12703          	lw	a4,12(sp)
    6c50:	0000f7b7          	lui	a5,0xf
    6c54:	06c12083          	lw	ra,108(sp)
    6c58:	00e7f7b3          	and	a5,a5,a4
    6c5c:	ffffe737          	lui	a4,0xffffe
    6c60:	00e787b3          	add	a5,a5,a4
    6c64:	06812403          	lw	s0,104(sp)
    6c68:	0017b793          	seqz	a5,a5
    6c6c:	00f92023          	sw	a5,0(s2) # f000 <__global_pointer$+0x4e98>
    6c70:	40000713          	li	a4,1024
    6c74:	00e4a023          	sw	a4,0(s1)
    6c78:	00001537          	lui	a0,0x1
    6c7c:	06412483          	lw	s1,100(sp)
    6c80:	06012903          	lw	s2,96(sp)
    6c84:	80050513          	addi	a0,a0,-2048 # 800 <altera_avalon_jtag_uart_irq+0xa4>
    6c88:	07010113          	addi	sp,sp,112
    6c8c:	00008067          	ret
    6c90:	00c45783          	lhu	a5,12(s0)
    6c94:	0807f793          	andi	a5,a5,128
    6c98:	02078863          	beqz	a5,6cc8 <__swhatbuf_r+0xb0>
    6c9c:	06c12083          	lw	ra,108(sp)
    6ca0:	06812403          	lw	s0,104(sp)
    6ca4:	00000793          	li	a5,0
    6ca8:	00f92023          	sw	a5,0(s2)
    6cac:	04000713          	li	a4,64
    6cb0:	00e4a023          	sw	a4,0(s1)
    6cb4:	06012903          	lw	s2,96(sp)
    6cb8:	06412483          	lw	s1,100(sp)
    6cbc:	00000513          	li	a0,0
    6cc0:	07010113          	addi	sp,sp,112
    6cc4:	00008067          	ret
    6cc8:	06c12083          	lw	ra,108(sp)
    6ccc:	06812403          	lw	s0,104(sp)
    6cd0:	00f92023          	sw	a5,0(s2)
    6cd4:	40000713          	li	a4,1024
    6cd8:	00e4a023          	sw	a4,0(s1)
    6cdc:	06012903          	lw	s2,96(sp)
    6ce0:	06412483          	lw	s1,100(sp)
    6ce4:	00000513          	li	a0,0
    6ce8:	07010113          	addi	sp,sp,112
    6cec:	00008067          	ret

00006cf0 <_fstat_r>:
    6cf0:	ff010113          	addi	sp,sp,-16
    6cf4:	00058713          	mv	a4,a1
    6cf8:	00812423          	sw	s0,8(sp)
    6cfc:	00060593          	mv	a1,a2
    6d00:	00050413          	mv	s0,a0
    6d04:	00070513          	mv	a0,a4
    6d08:	8a01a023          	sw	zero,-1888(gp) # 9a08 <errno>
    6d0c:	00112623          	sw	ra,12(sp)
    6d10:	300000ef          	jal	ra,7010 <_fstat>
    6d14:	fff00793          	li	a5,-1
    6d18:	00f50a63          	beq	a0,a5,6d2c <_fstat_r+0x3c>
    6d1c:	00c12083          	lw	ra,12(sp)
    6d20:	00812403          	lw	s0,8(sp)
    6d24:	01010113          	addi	sp,sp,16
    6d28:	00008067          	ret
    6d2c:	8a01a783          	lw	a5,-1888(gp) # 9a08 <errno>
    6d30:	fe0786e3          	beqz	a5,6d1c <_fstat_r+0x2c>
    6d34:	00c12083          	lw	ra,12(sp)
    6d38:	00f42023          	sw	a5,0(s0)
    6d3c:	00812403          	lw	s0,8(sp)
    6d40:	01010113          	addi	sp,sp,16
    6d44:	00008067          	ret

00006d48 <_isatty_r>:
    6d48:	ff010113          	addi	sp,sp,-16
    6d4c:	00812423          	sw	s0,8(sp)
    6d50:	00050413          	mv	s0,a0
    6d54:	00058513          	mv	a0,a1
    6d58:	8a01a023          	sw	zero,-1888(gp) # 9a08 <errno>
    6d5c:	00112623          	sw	ra,12(sp)
    6d60:	3d0000ef          	jal	ra,7130 <_isatty>
    6d64:	fff00793          	li	a5,-1
    6d68:	00f50a63          	beq	a0,a5,6d7c <_isatty_r+0x34>
    6d6c:	00c12083          	lw	ra,12(sp)
    6d70:	00812403          	lw	s0,8(sp)
    6d74:	01010113          	addi	sp,sp,16
    6d78:	00008067          	ret
    6d7c:	8a01a783          	lw	a5,-1888(gp) # 9a08 <errno>
    6d80:	fe0786e3          	beqz	a5,6d6c <_isatty_r+0x24>
    6d84:	00c12083          	lw	ra,12(sp)
    6d88:	00f42023          	sw	a5,0(s0)
    6d8c:	00812403          	lw	s0,8(sp)
    6d90:	01010113          	addi	sp,sp,16
    6d94:	00008067          	ret

00006d98 <__mulsi3>:
    6d98:	00050613          	mv	a2,a0
    6d9c:	00000513          	li	a0,0
    6da0:	0015f693          	andi	a3,a1,1
    6da4:	00068463          	beqz	a3,6dac <__mulsi3+0x14>
    6da8:	00c50533          	add	a0,a0,a2
    6dac:	0015d593          	srli	a1,a1,0x1
    6db0:	00161613          	slli	a2,a2,0x1
    6db4:	fe0596e3          	bnez	a1,6da0 <__mulsi3+0x8>
    6db8:	00008067          	ret

00006dbc <__divsi3>:
    6dbc:	06054063          	bltz	a0,6e1c <__umodsi3+0x10>
    6dc0:	0605c663          	bltz	a1,6e2c <__umodsi3+0x20>

00006dc4 <__hidden___udivsi3>:
    6dc4:	00058613          	mv	a2,a1
    6dc8:	00050593          	mv	a1,a0
    6dcc:	fff00513          	li	a0,-1
    6dd0:	02060c63          	beqz	a2,6e08 <__hidden___udivsi3+0x44>
    6dd4:	00100693          	li	a3,1
    6dd8:	00b67a63          	bgeu	a2,a1,6dec <__hidden___udivsi3+0x28>
    6ddc:	00c05863          	blez	a2,6dec <__hidden___udivsi3+0x28>
    6de0:	00161613          	slli	a2,a2,0x1
    6de4:	00169693          	slli	a3,a3,0x1
    6de8:	feb66ae3          	bltu	a2,a1,6ddc <__hidden___udivsi3+0x18>
    6dec:	00000513          	li	a0,0
    6df0:	00c5e663          	bltu	a1,a2,6dfc <__hidden___udivsi3+0x38>
    6df4:	40c585b3          	sub	a1,a1,a2
    6df8:	00d56533          	or	a0,a0,a3
    6dfc:	0016d693          	srli	a3,a3,0x1
    6e00:	00165613          	srli	a2,a2,0x1
    6e04:	fe0696e3          	bnez	a3,6df0 <__hidden___udivsi3+0x2c>
    6e08:	00008067          	ret

00006e0c <__umodsi3>:
    6e0c:	00008293          	mv	t0,ra
    6e10:	fb5ff0ef          	jal	ra,6dc4 <__hidden___udivsi3>
    6e14:	00058513          	mv	a0,a1
    6e18:	00028067          	jr	t0 # 4b90 <memset+0xb4>
    6e1c:	40a00533          	neg	a0,a0
    6e20:	00b04863          	bgtz	a1,6e30 <__umodsi3+0x24>
    6e24:	40b005b3          	neg	a1,a1
    6e28:	f9dff06f          	j	6dc4 <__hidden___udivsi3>
    6e2c:	40b005b3          	neg	a1,a1
    6e30:	00008293          	mv	t0,ra
    6e34:	f91ff0ef          	jal	ra,6dc4 <__hidden___udivsi3>
    6e38:	40a00533          	neg	a0,a0
    6e3c:	00028067          	jr	t0

00006e40 <__modsi3>:
    6e40:	00008293          	mv	t0,ra
    6e44:	0005ca63          	bltz	a1,6e58 <__modsi3+0x18>
    6e48:	00054c63          	bltz	a0,6e60 <__modsi3+0x20>
    6e4c:	f79ff0ef          	jal	ra,6dc4 <__hidden___udivsi3>
    6e50:	00058513          	mv	a0,a1
    6e54:	00028067          	jr	t0
    6e58:	40b005b3          	neg	a1,a1
    6e5c:	fe0558e3          	bgez	a0,6e4c <__modsi3+0xc>
    6e60:	40a00533          	neg	a0,a0
    6e64:	f61ff0ef          	jal	ra,6dc4 <__hidden___udivsi3>
    6e68:	40b00533          	neg	a0,a1
    6e6c:	00028067          	jr	t0

00006e70 <alt_get_errno>:
{
    6e70:	ff010113          	addi	sp,sp,-16
    6e74:	00112623          	sw	ra,12(sp)
    6e78:	00812423          	sw	s0,8(sp)
    6e7c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6e80:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    6e84:	00078a63          	beqz	a5,6e98 <alt_get_errno+0x28>
    6e88:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    6e8c:	000780e7          	jalr	a5 # f000 <__global_pointer$+0x4e98>
    6e90:	00050793          	mv	a5,a0
    6e94:	0080006f          	j	6e9c <alt_get_errno+0x2c>
    6e98:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    6e9c:	00078513          	mv	a0,a5
    6ea0:	00c12083          	lw	ra,12(sp)
    6ea4:	00812403          	lw	s0,8(sp)
    6ea8:	01010113          	addi	sp,sp,16
    6eac:	00008067          	ret

00006eb0 <_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    6eb0:	fd010113          	addi	sp,sp,-48
    6eb4:	02112623          	sw	ra,44(sp)
    6eb8:	02812423          	sw	s0,40(sp)
    6ebc:	03010413          	addi	s0,sp,48
    6ec0:	fca42e23          	sw	a0,-36(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    6ec4:	fdc42783          	lw	a5,-36(s0)
    6ec8:	0207c463          	bltz	a5,6ef0 <_close+0x40>
    6ecc:	fdc42703          	lw	a4,-36(s0)
    6ed0:	00070793          	mv	a5,a4
    6ed4:	00179793          	slli	a5,a5,0x1
    6ed8:	00e787b3          	add	a5,a5,a4
    6edc:	00279793          	slli	a5,a5,0x2
    6ee0:	00009737          	lui	a4,0x9
    6ee4:	fb870713          	addi	a4,a4,-72 # 8fb8 <alt_fd_list>
    6ee8:	00e787b3          	add	a5,a5,a4
    6eec:	0080006f          	j	6ef4 <_close+0x44>
    6ef0:	00000793          	li	a5,0
    6ef4:	fef42423          	sw	a5,-24(s0)

  if (fd)
    6ef8:	fe842783          	lw	a5,-24(s0)
    6efc:	06078663          	beqz	a5,6f68 <_close+0xb8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    6f00:	fe842783          	lw	a5,-24(s0)
    6f04:	0007a783          	lw	a5,0(a5)
    6f08:	0107a783          	lw	a5,16(a5)
    6f0c:	02078063          	beqz	a5,6f2c <_close+0x7c>
    6f10:	fe842783          	lw	a5,-24(s0)
    6f14:	0007a783          	lw	a5,0(a5)
    6f18:	0107a783          	lw	a5,16(a5)
    6f1c:	fe842503          	lw	a0,-24(s0)
    6f20:	000780e7          	jalr	a5
    6f24:	00050793          	mv	a5,a0
    6f28:	0080006f          	j	6f30 <_close+0x80>
    6f2c:	00000793          	li	a5,0
    6f30:	fef42623          	sw	a5,-20(s0)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    6f34:	fdc42503          	lw	a0,-36(s0)
    6f38:	d75fb0ef          	jal	ra,2cac <alt_release_fd>
    if (rval < 0)
    6f3c:	fec42783          	lw	a5,-20(s0)
    6f40:	0207d063          	bgez	a5,6f60 <_close+0xb0>
    {
      ALT_ERRNO = -rval;
    6f44:	f2dff0ef          	jal	ra,6e70 <alt_get_errno>
    6f48:	00050713          	mv	a4,a0
    6f4c:	fec42783          	lw	a5,-20(s0)
    6f50:	40f007b3          	neg	a5,a5
    6f54:	00f72023          	sw	a5,0(a4)
      return -1;
    6f58:	fff00793          	li	a5,-1
    6f5c:	0200006f          	j	6f7c <_close+0xcc>
    }
    return 0;
    6f60:	00000793          	li	a5,0
    6f64:	0180006f          	j	6f7c <_close+0xcc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    6f68:	f09ff0ef          	jal	ra,6e70 <alt_get_errno>
    6f6c:	00050713          	mv	a4,a0
    6f70:	05100793          	li	a5,81
    6f74:	00f72023          	sw	a5,0(a4)
    return -1;
    6f78:	fff00793          	li	a5,-1
  }
}
    6f7c:	00078513          	mv	a0,a5
    6f80:	02c12083          	lw	ra,44(sp)
    6f84:	02812403          	lw	s0,40(sp)
    6f88:	03010113          	addi	sp,sp,48
    6f8c:	00008067          	ret

00006f90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6f90:	fd010113          	addi	sp,sp,-48
    6f94:	02812623          	sw	s0,44(sp)
    6f98:	03010413          	addi	s0,sp,48
    6f9c:	fca42e23          	sw	a0,-36(s0)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    6fa0:	00000013          	nop
    6fa4:	fdc42783          	lw	a5,-36(s0)
    6fa8:	fef42623          	sw	a5,-20(s0)
 * Routine called on exit.
 * TODO: Add support for GMON/gprof.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int a0 asm ("a0") = exit_code;
    6fac:	fec42503          	lw	a0,-20(s0)
    "ebreak" 
    : 
    : "r"(a0), "r"(a1));

#else /* !DEBUG_STUB */
  if (a0) {
    6fb0:	00050793          	mv	a5,a0
    6fb4:	00078663          	beqz	a5,6fc0 <_exit+0x30>
    ALT_SIM_FAIL();
    6fb8:	7c103013          	sltiu	zero,zero,1985
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    6fbc:	0080006f          	j	6fc4 <_exit+0x34>
    ALT_SIM_PASS();
    6fc0:	7c203013          	sltiu	zero,zero,1986
}
    6fc4:	00000013          	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6fc8:	00000013          	nop
    6fcc:	ffdff06f          	j	6fc8 <_exit+0x38>

00006fd0 <alt_get_errno>:
{
    6fd0:	ff010113          	addi	sp,sp,-16
    6fd4:	00112623          	sw	ra,12(sp)
    6fd8:	00812423          	sw	s0,8(sp)
    6fdc:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6fe0:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    6fe4:	00078a63          	beqz	a5,6ff8 <alt_get_errno+0x28>
    6fe8:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    6fec:	000780e7          	jalr	a5
    6ff0:	00050793          	mv	a5,a0
    6ff4:	0080006f          	j	6ffc <alt_get_errno+0x2c>
    6ff8:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    6ffc:	00078513          	mv	a0,a5
    7000:	00c12083          	lw	ra,12(sp)
    7004:	00812403          	lw	s0,8(sp)
    7008:	01010113          	addi	sp,sp,16
    700c:	00008067          	ret

00007010 <_fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    7010:	fd010113          	addi	sp,sp,-48
    7014:	02112623          	sw	ra,44(sp)
    7018:	02812423          	sw	s0,40(sp)
    701c:	03010413          	addi	s0,sp,48
    7020:	fca42e23          	sw	a0,-36(s0)
    7024:	fcb42c23          	sw	a1,-40(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    7028:	fdc42783          	lw	a5,-36(s0)
    702c:	0207c463          	bltz	a5,7054 <_fstat+0x44>
    7030:	fdc42703          	lw	a4,-36(s0)
    7034:	00070793          	mv	a5,a4
    7038:	00179793          	slli	a5,a5,0x1
    703c:	00e787b3          	add	a5,a5,a4
    7040:	00279793          	slli	a5,a5,0x2
    7044:	00009737          	lui	a4,0x9
    7048:	fb870713          	addi	a4,a4,-72 # 8fb8 <alt_fd_list>
    704c:	00e787b3          	add	a5,a5,a4
    7050:	0080006f          	j	7058 <_fstat+0x48>
    7054:	00000793          	li	a5,0
    7058:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
    705c:	fec42783          	lw	a5,-20(s0)
    7060:	04078463          	beqz	a5,70a8 <_fstat+0x98>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    7064:	fec42783          	lw	a5,-20(s0)
    7068:	0007a783          	lw	a5,0(a5)
    706c:	0207a783          	lw	a5,32(a5)
    7070:	02078263          	beqz	a5,7094 <_fstat+0x84>
    {
      return fd->dev->fstat(fd, st);
    7074:	fec42783          	lw	a5,-20(s0)
    7078:	0007a783          	lw	a5,0(a5)
    707c:	0207a783          	lw	a5,32(a5)
    7080:	fd842583          	lw	a1,-40(s0)
    7084:	fec42503          	lw	a0,-20(s0)
    7088:	000780e7          	jalr	a5
    708c:	00050793          	mv	a5,a0
    7090:	02c0006f          	j	70bc <_fstat+0xac>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    7094:	fd842783          	lw	a5,-40(s0)
    7098:	00002737          	lui	a4,0x2
    709c:	00e7a223          	sw	a4,4(a5)
      return 0;
    70a0:	00000793          	li	a5,0
    70a4:	0180006f          	j	70bc <_fstat+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    70a8:	f29ff0ef          	jal	ra,6fd0 <alt_get_errno>
    70ac:	00050713          	mv	a4,a0
    70b0:	05100793          	li	a5,81
    70b4:	00f72023          	sw	a5,0(a4) # 2000 <alt_epcq_controller_write+0x168>
    return -1;
    70b8:	fff00793          	li	a5,-1
  }
}
    70bc:	00078513          	mv	a0,a5
    70c0:	02c12083          	lw	ra,44(sp)
    70c4:	02812403          	lw	s0,40(sp)
    70c8:	03010113          	addi	sp,sp,48
    70cc:	00008067          	ret

000070d0 <_getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
    70d0:	ff010113          	addi	sp,sp,-16
    70d4:	00812623          	sw	s0,12(sp)
    70d8:	01010413          	addi	s0,sp,16
  return 0;
    70dc:	00000793          	li	a5,0
}
    70e0:	00078513          	mv	a0,a5
    70e4:	00c12403          	lw	s0,12(sp)
    70e8:	01010113          	addi	sp,sp,16
    70ec:	00008067          	ret

000070f0 <alt_get_errno>:
{
    70f0:	ff010113          	addi	sp,sp,-16
    70f4:	00112623          	sw	ra,12(sp)
    70f8:	00812423          	sw	s0,8(sp)
    70fc:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    7100:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    7104:	00078a63          	beqz	a5,7118 <alt_get_errno+0x28>
    7108:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    710c:	000780e7          	jalr	a5
    7110:	00050793          	mv	a5,a0
    7114:	0080006f          	j	711c <alt_get_errno+0x2c>
    7118:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    711c:	00078513          	mv	a0,a5
    7120:	00c12083          	lw	ra,12(sp)
    7124:	00812403          	lw	s0,8(sp)
    7128:	01010113          	addi	sp,sp,16
    712c:	00008067          	ret

00007130 <_isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    7130:	f7010113          	addi	sp,sp,-144
    7134:	08112623          	sw	ra,140(sp)
    7138:	08812423          	sw	s0,136(sp)
    713c:	09010413          	addi	s0,sp,144
    7140:	f6a42e23          	sw	a0,-132(s0)
    7144:	8a41a703          	lw	a4,-1884(gp) # 9a0c <__stack_chk_guard>
    7148:	fee42623          	sw	a4,-20(s0)
    714c:	00000713          	li	a4,0
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
    7150:	f8042a23          	sw	zero,-108(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    7154:	f7c42783          	lw	a5,-132(s0)
    7158:	0207c463          	bltz	a5,7180 <_isatty+0x50>
    715c:	f7c42703          	lw	a4,-132(s0)
    7160:	00070793          	mv	a5,a4
    7164:	00179793          	slli	a5,a5,0x1
    7168:	00e787b3          	add	a5,a5,a4
    716c:	00279793          	slli	a5,a5,0x2
    7170:	00009737          	lui	a4,0x9
    7174:	fb870713          	addi	a4,a4,-72 # 8fb8 <alt_fd_list>
    7178:	00e787b3          	add	a5,a5,a4
    717c:	0080006f          	j	7184 <_isatty+0x54>
    7180:	00000793          	li	a5,0
    7184:	f8f42623          	sw	a5,-116(s0)
  
  if (fd)
    7188:	f8c42783          	lw	a5,-116(s0)
    718c:	04078a63          	beqz	a5,71e0 <_isatty+0xb0>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    7190:	f8c42783          	lw	a5,-116(s0)
    7194:	0007a783          	lw	a5,0(a5)
    7198:	0207a783          	lw	a5,32(a5)
    719c:	00079663          	bnez	a5,71a8 <_isatty+0x78>
    {
      return 1;
    71a0:	00100793          	li	a5,1
    71a4:	0500006f          	j	71f4 <_isatty+0xc4>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      if (fstat (file, &stat) < 0)
    71a8:	f9040793          	addi	a5,s0,-112
    71ac:	00078593          	mv	a1,a5
    71b0:	f7c42503          	lw	a0,-132(s0)
    71b4:	291000ef          	jal	ra,7c44 <fstat>
    71b8:	00050793          	mv	a5,a0
    71bc:	0007d663          	bgez	a5,71c8 <_isatty+0x98>
        return 0;  // fstat will set ERRNO
    71c0:	00000793          	li	a5,0
    71c4:	0300006f          	j	71f4 <_isatty+0xc4>
      else
        return (stat.st_mode == _IFCHR) ? 1 : 0;
    71c8:	f9442703          	lw	a4,-108(s0)
    71cc:	ffffe7b7          	lui	a5,0xffffe
    71d0:	00f707b3          	add	a5,a4,a5
    71d4:	0017b793          	seqz	a5,a5
    71d8:	0ff7f793          	zext.b	a5,a5
    71dc:	0180006f          	j	71f4 <_isatty+0xc4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    71e0:	f11ff0ef          	jal	ra,70f0 <alt_get_errno>
    71e4:	00050713          	mv	a4,a0
    71e8:	05100793          	li	a5,81
    71ec:	00f72023          	sw	a5,0(a4)
    return 0;
    71f0:	00000793          	li	a5,0
  }
}
    71f4:	00078713          	mv	a4,a5
    71f8:	fec42683          	lw	a3,-20(s0)
    71fc:	8a41a783          	lw	a5,-1884(gp) # 9a0c <__stack_chk_guard>
    7200:	00f6c7b3          	xor	a5,a3,a5
    7204:	00000693          	li	a3,0
    7208:	00078463          	beqz	a5,7210 <_isatty+0xe0>
    720c:	cf5fd0ef          	jal	ra,4f00 <__stack_chk_fail>
    7210:	00070513          	mv	a0,a4
    7214:	08c12083          	lw	ra,140(sp)
    7218:	08812403          	lw	s0,136(sp)
    721c:	09010113          	addi	sp,sp,144
    7220:	00008067          	ret

00007224 <alt_get_errno>:
{
    7224:	ff010113          	addi	sp,sp,-16
    7228:	00112623          	sw	ra,12(sp)
    722c:	00812423          	sw	s0,8(sp)
    7230:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    7234:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    7238:	00078a63          	beqz	a5,724c <alt_get_errno+0x28>
    723c:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    7240:	000780e7          	jalr	a5 # ffffe000 <__alt_data_end+0xfdffe000>
    7244:	00050793          	mv	a5,a0
    7248:	0080006f          	j	7250 <alt_get_errno+0x2c>
    724c:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    7250:	00078513          	mv	a0,a5
    7254:	00c12083          	lw	ra,12(sp)
    7258:	00812403          	lw	s0,8(sp)
    725c:	01010113          	addi	sp,sp,16
    7260:	00008067          	ret

00007264 <_kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    7264:	fd010113          	addi	sp,sp,-48
    7268:	02112623          	sw	ra,44(sp)
    726c:	02812423          	sw	s0,40(sp)
    7270:	03010413          	addi	s0,sp,48
    7274:	fca42e23          	sw	a0,-36(s0)
    7278:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
    727c:	fe042623          	sw	zero,-20(s0)

  if (pid <= 0)
    7280:	fdc42783          	lw	a5,-36(s0)
    7284:	06f04e63          	bgtz	a5,7300 <_kill+0x9c>
  {
    switch (sig)
    7288:	fd842783          	lw	a5,-40(s0)
    728c:	08078463          	beqz	a5,7314 <_kill+0xb0>
    7290:	fd842783          	lw	a5,-40(s0)
    7294:	0607c063          	bltz	a5,72f4 <_kill+0x90>
    7298:	fd842703          	lw	a4,-40(s0)
    729c:	01f00793          	li	a5,31
    72a0:	04e7ca63          	blt	a5,a4,72f4 <_kill+0x90>
    72a4:	fd842703          	lw	a4,-40(s0)
    72a8:	00300793          	li	a5,3
    72ac:	04f74463          	blt	a4,a5,72f4 <_kill+0x90>
    72b0:	fd842783          	lw	a5,-40(s0)
    72b4:	00100713          	li	a4,1
    72b8:	00f717b3          	sll	a5,a4,a5
    72bc:	cf810737          	lui	a4,0xcf810
    72c0:	f7870713          	addi	a4,a4,-136 # cf80ff78 <__alt_data_end+0xcd80ff78>
    72c4:	00e7f733          	and	a4,a5,a4
    72c8:	00e03733          	snez	a4,a4
    72cc:	0ff77713          	zext.b	a4,a4
    72d0:	00071e63          	bnez	a4,72ec <_kill+0x88>
    72d4:	00110737          	lui	a4,0x110
    72d8:	00e7f7b3          	and	a5,a5,a4
    72dc:	00f037b3          	snez	a5,a5
    72e0:	0ff7f793          	zext.b	a5,a5
    72e4:	02079c63          	bnez	a5,731c <_kill+0xb8>
    72e8:	00c0006f          	j	72f4 <_kill+0x90>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    72ec:	00000513          	li	a0,0
    72f0:	ca1ff0ef          	jal	ra,6f90 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
    72f4:	01600793          	li	a5,22
    72f8:	fef42623          	sw	a5,-20(s0)
    72fc:	0240006f          	j	7320 <_kill+0xbc>
    }
  }

  else if (pid > 0)
    7300:	fdc42783          	lw	a5,-36(s0)
    7304:	00f05e63          	blez	a5,7320 <_kill+0xbc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    7308:	00300793          	li	a5,3
    730c:	fef42623          	sw	a5,-20(s0)
    7310:	0100006f          	j	7320 <_kill+0xbc>
      break;
    7314:	00000013          	nop
    7318:	0080006f          	j	7320 <_kill+0xbc>
      break;
    731c:	00000013          	nop
  }

  if (status)
    7320:	fec42783          	lw	a5,-20(s0)
    7324:	00078e63          	beqz	a5,7340 <_kill+0xdc>
  {
    ALT_ERRNO = status;
    7328:	efdff0ef          	jal	ra,7224 <alt_get_errno>
    732c:	00050713          	mv	a4,a0
    7330:	fec42783          	lw	a5,-20(s0)
    7334:	00f72023          	sw	a5,0(a4) # 110000 <__global_pointer$+0x105e98>
    return -1;
    7338:	fff00793          	li	a5,-1
    733c:	0080006f          	j	7344 <_kill+0xe0>
  }

  return 0;
    7340:	00000793          	li	a5,0
}
    7344:	00078513          	mv	a0,a5
    7348:	02c12083          	lw	ra,44(sp)
    734c:	02812403          	lw	s0,40(sp)
    7350:	03010113          	addi	sp,sp,48
    7354:	00008067          	ret

00007358 <alt_get_errno>:
{
    7358:	ff010113          	addi	sp,sp,-16
    735c:	00112623          	sw	ra,12(sp)
    7360:	00812423          	sw	s0,8(sp)
    7364:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    7368:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    736c:	00078a63          	beqz	a5,7380 <alt_get_errno+0x28>
    7370:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    7374:	000780e7          	jalr	a5
    7378:	00050793          	mv	a5,a0
    737c:	0080006f          	j	7384 <alt_get_errno+0x2c>
    7380:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    7384:	00078513          	mv	a0,a5
    7388:	00c12083          	lw	ra,12(sp)
    738c:	00812403          	lw	s0,8(sp)
    7390:	01010113          	addi	sp,sp,16
    7394:	00008067          	ret

00007398 <_lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    7398:	fd010113          	addi	sp,sp,-48
    739c:	02112623          	sw	ra,44(sp)
    73a0:	02812423          	sw	s0,40(sp)
    73a4:	03010413          	addi	s0,sp,48
    73a8:	fca42e23          	sw	a0,-36(s0)
    73ac:	fcb42c23          	sw	a1,-40(s0)
    73b0:	fcc42a23          	sw	a2,-44(s0)
  alt_fd* fd;
  off_t   rc = 0; 
    73b4:	fe042423          	sw	zero,-24(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    73b8:	fdc42783          	lw	a5,-36(s0)
    73bc:	0207c463          	bltz	a5,73e4 <_lseek+0x4c>
    73c0:	fdc42703          	lw	a4,-36(s0)
    73c4:	00070793          	mv	a5,a4
    73c8:	00179793          	slli	a5,a5,0x1
    73cc:	00e787b3          	add	a5,a5,a4
    73d0:	00279793          	slli	a5,a5,0x2
    73d4:	00009737          	lui	a4,0x9
    73d8:	fb870713          	addi	a4,a4,-72 # 8fb8 <alt_fd_list>
    73dc:	00e787b3          	add	a5,a5,a4
    73e0:	0080006f          	j	73e8 <_lseek+0x50>
    73e4:	00000793          	li	a5,0
    73e8:	fef42623          	sw	a5,-20(s0)
  
  if (fd) 
    73ec:	fec42783          	lw	a5,-20(s0)
    73f0:	04078263          	beqz	a5,7434 <_lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    73f4:	fec42783          	lw	a5,-20(s0)
    73f8:	0007a783          	lw	a5,0(a5)
    73fc:	01c7a783          	lw	a5,28(a5)
    7400:	02078463          	beqz	a5,7428 <_lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    7404:	fec42783          	lw	a5,-20(s0)
    7408:	0007a783          	lw	a5,0(a5)
    740c:	01c7a783          	lw	a5,28(a5)
    7410:	fd442603          	lw	a2,-44(s0)
    7414:	fd842583          	lw	a1,-40(s0)
    7418:	fec42503          	lw	a0,-20(s0)
    741c:	000780e7          	jalr	a5
    7420:	fea42423          	sw	a0,-24(s0)
    7424:	0180006f          	j	743c <_lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    7428:	f7a00793          	li	a5,-134
    742c:	fef42423          	sw	a5,-24(s0)
    7430:	00c0006f          	j	743c <_lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    7434:	faf00793          	li	a5,-81
    7438:	fef42423          	sw	a5,-24(s0)
  }

  if (rc < 0)
    743c:	fe842783          	lw	a5,-24(s0)
    7440:	0207d063          	bgez	a5,7460 <_lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    7444:	f15ff0ef          	jal	ra,7358 <alt_get_errno>
    7448:	00050713          	mv	a4,a0
    744c:	fe842783          	lw	a5,-24(s0)
    7450:	40f007b3          	neg	a5,a5
    7454:	00f72023          	sw	a5,0(a4)
    rc = -1;
    7458:	fff00793          	li	a5,-1
    745c:	fef42423          	sw	a5,-24(s0)
  }

  return rc;
    7460:	fe842783          	lw	a5,-24(s0)
}
    7464:	00078513          	mv	a0,a5
    7468:	02c12083          	lw	ra,44(sp)
    746c:	02812403          	lw	s0,40(sp)
    7470:	03010113          	addi	sp,sp,48
    7474:	00008067          	ret

00007478 <alt_get_errno>:
{
    7478:	ff010113          	addi	sp,sp,-16
    747c:	00112623          	sw	ra,12(sp)
    7480:	00812423          	sw	s0,8(sp)
    7484:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    7488:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    748c:	00078a63          	beqz	a5,74a0 <alt_get_errno+0x28>
    7490:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    7494:	000780e7          	jalr	a5
    7498:	00050793          	mv	a5,a0
    749c:	0080006f          	j	74a4 <alt_get_errno+0x2c>
    74a0:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    74a4:	00078513          	mv	a0,a5
    74a8:	00c12083          	lw	ra,12(sp)
    74ac:	00812403          	lw	s0,8(sp)
    74b0:	01010113          	addi	sp,sp,16
    74b4:	00008067          	ret

000074b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    74b8:	fd010113          	addi	sp,sp,-48
    74bc:	02812623          	sw	s0,44(sp)
    74c0:	03010413          	addi	s0,sp,48
    74c4:	fca42e23          	sw	a0,-36(s0)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    74c8:	fdc42783          	lw	a5,-36(s0)
    74cc:	0087a703          	lw	a4,8(a5)
    74d0:	400007b7          	lui	a5,0x40000
    74d4:	00f76733          	or	a4,a4,a5
    74d8:	fdc42783          	lw	a5,-36(s0)
    74dc:	00e7a423          	sw	a4,8(a5) # 40000008 <__alt_data_end+0x3e000008>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    74e0:	fe042623          	sw	zero,-20(s0)
    74e4:	0980006f          	j	757c <alt_file_locked+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    74e8:	000097b7          	lui	a5,0x9
    74ec:	fb878693          	addi	a3,a5,-72 # 8fb8 <alt_fd_list>
    74f0:	fec42703          	lw	a4,-20(s0)
    74f4:	00070793          	mv	a5,a4
    74f8:	00179793          	slli	a5,a5,0x1
    74fc:	00e787b3          	add	a5,a5,a4
    7500:	00279793          	slli	a5,a5,0x2
    7504:	00f687b3          	add	a5,a3,a5
    7508:	0007a703          	lw	a4,0(a5)
    750c:	fdc42783          	lw	a5,-36(s0)
    7510:	0007a783          	lw	a5,0(a5)
    7514:	04f71e63          	bne	a4,a5,7570 <alt_file_locked+0xb8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    7518:	000097b7          	lui	a5,0x9
    751c:	fb878693          	addi	a3,a5,-72 # 8fb8 <alt_fd_list>
    7520:	fec42703          	lw	a4,-20(s0)
    7524:	00070793          	mv	a5,a4
    7528:	00179793          	slli	a5,a5,0x1
    752c:	00e787b3          	add	a5,a5,a4
    7530:	00279793          	slli	a5,a5,0x2
    7534:	00f687b3          	add	a5,a3,a5
    7538:	0087a783          	lw	a5,8(a5)
    if ((alt_fd_list[i].dev == fd->dev) &&
    753c:	0207da63          	bgez	a5,7570 <alt_file_locked+0xb8>
        (&alt_fd_list[i] != fd))
    7540:	fec42703          	lw	a4,-20(s0)
    7544:	00070793          	mv	a5,a4
    7548:	00179793          	slli	a5,a5,0x1
    754c:	00e787b3          	add	a5,a5,a4
    7550:	00279793          	slli	a5,a5,0x2
    7554:	00009737          	lui	a4,0x9
    7558:	fb870713          	addi	a4,a4,-72 # 8fb8 <alt_fd_list>
    755c:	00e787b3          	add	a5,a5,a4
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    7560:	fdc42703          	lw	a4,-36(s0)
    7564:	00f70663          	beq	a4,a5,7570 <alt_file_locked+0xb8>
    {
      return -EACCES;
    7568:	ff300793          	li	a5,-13
    756c:	0240006f          	j	7590 <alt_file_locked+0xd8>
  for (i = 0; i <= alt_max_fd; i++)
    7570:	fec42783          	lw	a5,-20(s0)
    7574:	00178793          	addi	a5,a5,1
    7578:	fef42623          	sw	a5,-20(s0)
    757c:	8101a783          	lw	a5,-2032(gp) # 9978 <alt_max_fd>
    7580:	00078713          	mv	a4,a5
    7584:	fec42783          	lw	a5,-20(s0)
    7588:	f6f770e3          	bgeu	a4,a5,74e8 <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    758c:	00000793          	li	a5,0
}
    7590:	00078513          	mv	a0,a5
    7594:	02c12403          	lw	s0,44(sp)
    7598:	03010113          	addi	sp,sp,48
    759c:	00008067          	ret

000075a0 <_open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    75a0:	fc010113          	addi	sp,sp,-64
    75a4:	02112e23          	sw	ra,60(sp)
    75a8:	02812c23          	sw	s0,56(sp)
    75ac:	04010413          	addi	s0,sp,64
    75b0:	fca42623          	sw	a0,-52(s0)
    75b4:	fcb42423          	sw	a1,-56(s0)
    75b8:	fcc42223          	sw	a2,-60(s0)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    75bc:	fff00793          	li	a5,-1
    75c0:	fef42023          	sw	a5,-32(s0)
  int status = -ENODEV;
    75c4:	fed00793          	li	a5,-19
    75c8:	fef42223          	sw	a5,-28(s0)
  int isafs = 0;
    75cc:	fe042423          	sw	zero,-24(s0)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    75d0:	0000a7b7          	lui	a5,0xa
    75d4:	97078593          	addi	a1,a5,-1680 # 9970 <alt_dev_list>
    75d8:	fcc42503          	lw	a0,-52(s0)
    75dc:	c35fb0ef          	jal	ra,3210 <alt_find_dev>
    75e0:	fca42e23          	sw	a0,-36(s0)
    75e4:	fdc42783          	lw	a5,-36(s0)
    75e8:	00079c63          	bnez	a5,7600 <_open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    75ec:	fcc42503          	lw	a0,-52(s0)
    75f0:	458000ef          	jal	ra,7a48 <alt_find_file>
    75f4:	fca42e23          	sw	a0,-36(s0)
    isafs = 1;
    75f8:	00100793          	li	a5,1
    75fc:	fef42423          	sw	a5,-24(s0)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    7600:	fdc42783          	lw	a5,-36(s0)
    7604:	0a078c63          	beqz	a5,76bc <_open+0x11c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    7608:	fdc42503          	lw	a0,-36(s0)
    760c:	578000ef          	jal	ra,7b84 <alt_get_fd>
    7610:	fea42023          	sw	a0,-32(s0)
    7614:	fe042783          	lw	a5,-32(s0)
    7618:	0007d863          	bgez	a5,7628 <_open+0x88>
    {
      status = index;
    761c:	fe042783          	lw	a5,-32(s0)
    7620:	fef42223          	sw	a5,-28(s0)
    7624:	0a00006f          	j	76c4 <_open+0x124>
    }
    else
    {
      fd = &alt_fd_list[index];
    7628:	fe042703          	lw	a4,-32(s0)
    762c:	00070793          	mv	a5,a4
    7630:	00179793          	slli	a5,a5,0x1
    7634:	00e787b3          	add	a5,a5,a4
    7638:	00279793          	slli	a5,a5,0x2
    763c:	00009737          	lui	a4,0x9
    7640:	fb870713          	addi	a4,a4,-72 # 8fb8 <alt_fd_list>
    7644:	00e787b3          	add	a5,a5,a4
    7648:	fef42623          	sw	a5,-20(s0)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    764c:	fc842703          	lw	a4,-56(s0)
    7650:	400007b7          	lui	a5,0x40000
    7654:	fff78793          	addi	a5,a5,-1 # 3fffffff <__alt_data_end+0x3dffffff>
    7658:	00f77733          	and	a4,a4,a5
    765c:	fec42783          	lw	a5,-20(s0)
    7660:	00e7a423          	sw	a4,8(a5)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    7664:	fe842783          	lw	a5,-24(s0)
    7668:	00079c63          	bnez	a5,7680 <_open+0xe0>
    766c:	fec42503          	lw	a0,-20(s0)
    7670:	e49ff0ef          	jal	ra,74b8 <alt_file_locked>
    7674:	fea42223          	sw	a0,-28(s0)
    7678:	fe442783          	lw	a5,-28(s0)
    767c:	0407c463          	bltz	a5,76c4 <_open+0x124>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    7680:	fdc42783          	lw	a5,-36(s0)
    7684:	00c7a783          	lw	a5,12(a5)
    7688:	02078463          	beqz	a5,76b0 <_open+0x110>
    768c:	fdc42783          	lw	a5,-36(s0)
    7690:	00c7a783          	lw	a5,12(a5)
    7694:	fc442683          	lw	a3,-60(s0)
    7698:	fc842603          	lw	a2,-56(s0)
    769c:	fcc42583          	lw	a1,-52(s0)
    76a0:	fec42503          	lw	a0,-20(s0)
    76a4:	000780e7          	jalr	a5
    76a8:	00050793          	mv	a5,a0
    76ac:	0080006f          	j	76b4 <_open+0x114>
    76b0:	00000793          	li	a5,0
    76b4:	fef42223          	sw	a5,-28(s0)
    76b8:	00c0006f          	j	76c4 <_open+0x124>
      }
    }
  }
  else
  {
    status = -ENODEV;
    76bc:	fed00793          	li	a5,-19
    76c0:	fef42223          	sw	a5,-28(s0)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    76c4:	fe442783          	lw	a5,-28(s0)
    76c8:	0207d463          	bgez	a5,76f0 <_open+0x150>
  {
    alt_release_fd (index);  
    76cc:	fe042503          	lw	a0,-32(s0)
    76d0:	ddcfb0ef          	jal	ra,2cac <alt_release_fd>
    ALT_ERRNO = -status;
    76d4:	da5ff0ef          	jal	ra,7478 <alt_get_errno>
    76d8:	00050713          	mv	a4,a0
    76dc:	fe442783          	lw	a5,-28(s0)
    76e0:	40f007b3          	neg	a5,a5
    76e4:	00f72023          	sw	a5,0(a4)
    return -1;
    76e8:	fff00793          	li	a5,-1
    76ec:	0080006f          	j	76f4 <_open+0x154>
  }
  
  /* return the reference upon success */

  return index;
    76f0:	fe042783          	lw	a5,-32(s0)
}
    76f4:	00078513          	mv	a0,a5
    76f8:	03c12083          	lw	ra,60(sp)
    76fc:	03812403          	lw	s0,56(sp)
    7700:	04010113          	addi	sp,sp,64
    7704:	00008067          	ret

00007708 <alt_get_errno>:
{
    7708:	ff010113          	addi	sp,sp,-16
    770c:	00112623          	sw	ra,12(sp)
    7710:	00812423          	sw	s0,8(sp)
    7714:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    7718:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    771c:	00078a63          	beqz	a5,7730 <alt_get_errno+0x28>
    7720:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    7724:	000780e7          	jalr	a5
    7728:	00050793          	mv	a5,a0
    772c:	0080006f          	j	7734 <alt_get_errno+0x2c>
    7730:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    7734:	00078513          	mv	a0,a5
    7738:	00c12083          	lw	ra,12(sp)
    773c:	00812403          	lw	s0,8(sp)
    7740:	01010113          	addi	sp,sp,16
    7744:	00008067          	ret

00007748 <_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    7748:	fd010113          	addi	sp,sp,-48
    774c:	02112623          	sw	ra,44(sp)
    7750:	02812423          	sw	s0,40(sp)
    7754:	03010413          	addi	s0,sp,48
    7758:	fca42e23          	sw	a0,-36(s0)
    775c:	fcb42c23          	sw	a1,-40(s0)
    7760:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    7764:	fdc42783          	lw	a5,-36(s0)
    7768:	0207c463          	bltz	a5,7790 <_read+0x48>
    776c:	fdc42703          	lw	a4,-36(s0)
    7770:	00070793          	mv	a5,a4
    7774:	00179793          	slli	a5,a5,0x1
    7778:	00e787b3          	add	a5,a5,a4
    777c:	00279793          	slli	a5,a5,0x2
    7780:	00009737          	lui	a4,0x9
    7784:	fb870713          	addi	a4,a4,-72 # 8fb8 <alt_fd_list>
    7788:	00e787b3          	add	a5,a5,a4
    778c:	0080006f          	j	7794 <_read+0x4c>
    7790:	00000793          	li	a5,0
    7794:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    7798:	fe842783          	lw	a5,-24(s0)
    779c:	08078663          	beqz	a5,7828 <_read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    77a0:	fe842783          	lw	a5,-24(s0)
    77a4:	0087a783          	lw	a5,8(a5)
    77a8:	0037f713          	andi	a4,a5,3
    77ac:	00100793          	li	a5,1
    77b0:	06f70263          	beq	a4,a5,7814 <_read+0xcc>
        (fd->dev->read))
    77b4:	fe842783          	lw	a5,-24(s0)
    77b8:	0007a783          	lw	a5,0(a5)
    77bc:	0147a783          	lw	a5,20(a5)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    77c0:	04078a63          	beqz	a5,7814 <_read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    77c4:	fe842783          	lw	a5,-24(s0)
    77c8:	0007a783          	lw	a5,0(a5)
    77cc:	0147a783          	lw	a5,20(a5)
    77d0:	fd442703          	lw	a4,-44(s0)
    77d4:	00070613          	mv	a2,a4
    77d8:	fd842583          	lw	a1,-40(s0)
    77dc:	fe842503          	lw	a0,-24(s0)
    77e0:	000780e7          	jalr	a5
    77e4:	fea42623          	sw	a0,-20(s0)
    77e8:	fec42783          	lw	a5,-20(s0)
    77ec:	0207d063          	bgez	a5,780c <_read+0xc4>
        {
          ALT_ERRNO = -rval;
    77f0:	f19ff0ef          	jal	ra,7708 <alt_get_errno>
    77f4:	00050713          	mv	a4,a0
    77f8:	fec42783          	lw	a5,-20(s0)
    77fc:	40f007b3          	neg	a5,a5
    7800:	00f72023          	sw	a5,0(a4)
          return -1;
    7804:	fff00793          	li	a5,-1
    7808:	0340006f          	j	783c <_read+0xf4>
        }
        return rval;
    780c:	fec42783          	lw	a5,-20(s0)
    7810:	02c0006f          	j	783c <_read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    7814:	ef5ff0ef          	jal	ra,7708 <alt_get_errno>
    7818:	00050713          	mv	a4,a0
    781c:	00d00793          	li	a5,13
    7820:	00f72023          	sw	a5,0(a4)
    7824:	0140006f          	j	7838 <_read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    7828:	ee1ff0ef          	jal	ra,7708 <alt_get_errno>
    782c:	00050713          	mv	a4,a0
    7830:	05100793          	li	a5,81
    7834:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    7838:	fff00793          	li	a5,-1
}
    783c:	00078513          	mv	a0,a5
    7840:	02c12083          	lw	ra,44(sp)
    7844:	02812403          	lw	s0,40(sp)
    7848:	03010113          	addi	sp,sp,48
    784c:	00008067          	ret

00007850 <_sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    7850:	fc010113          	addi	sp,sp,-64
    7854:	02812e23          	sw	s0,60(sp)
    7858:	04010413          	addi	s0,sp,64
    785c:	fca42623          	sw	a0,-52(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    7860:	00800793          	li	a5,8
    7864:	3007b7f3          	csrrc	a5,mstatus,a5
    7868:	fef42223          	sw	a5,-28(s0)
    return context;
    786c:	fe442783          	lw	a5,-28(s0)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    7870:	fcf42e23          	sw	a5,-36(s0)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    7874:	8381a783          	lw	a5,-1992(gp) # 99a0 <heap_end>
    7878:	00378793          	addi	a5,a5,3
    787c:	ffc7f793          	andi	a5,a5,-4
    7880:	00078713          	mv	a4,a5
    7884:	82e1ac23          	sw	a4,-1992(gp) # 99a0 <heap_end>
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    7888:	8381a703          	lw	a4,-1992(gp) # 99a0 <heap_end>
    788c:	fcc42783          	lw	a5,-52(s0)
    7890:	00f70733          	add	a4,a4,a5
    7894:	020007b7          	lui	a5,0x2000
    7898:	00078793          	mv	a5,a5
    789c:	02e7f263          	bgeu	a5,a4,78c0 <_sbrk+0x70>
    78a0:	fdc42783          	lw	a5,-36(s0)
    78a4:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    78a8:	fe842783          	lw	a5,-24(s0)
    78ac:	0087f793          	andi	a5,a5,8
    78b0:	3007a073          	csrs	mstatus,a5
}
    78b4:	00000013          	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    78b8:	fff00793          	li	a5,-1
    78bc:	0380006f          	j	78f4 <_sbrk+0xa4>
  }
#endif

  prev_heap_end = heap_end; 
    78c0:	8381a783          	lw	a5,-1992(gp) # 99a0 <heap_end>
    78c4:	fef42023          	sw	a5,-32(s0)
  heap_end += incr; 
    78c8:	8381a703          	lw	a4,-1992(gp) # 99a0 <heap_end>
    78cc:	fcc42783          	lw	a5,-52(s0)
    78d0:	00f70733          	add	a4,a4,a5
    78d4:	82e1ac23          	sw	a4,-1992(gp) # 99a0 <heap_end>
    78d8:	fdc42783          	lw	a5,-36(s0)
    78dc:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    78e0:	fec42783          	lw	a5,-20(s0)
    78e4:	0087f793          	andi	a5,a5,8
    78e8:	3007a073          	csrs	mstatus,a5
}
    78ec:	00000013          	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    78f0:	fe042783          	lw	a5,-32(s0)
}
    78f4:	00078513          	mv	a0,a5
    78f8:	03c12403          	lw	s0,60(sp)
    78fc:	04010113          	addi	sp,sp,64
    7900:	00008067          	ret

00007904 <alt_get_errno>:
{
    7904:	ff010113          	addi	sp,sp,-16
    7908:	00112623          	sw	ra,12(sp)
    790c:	00812423          	sw	s0,8(sp)
    7910:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    7914:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    7918:	00078a63          	beqz	a5,792c <alt_get_errno+0x28>
    791c:	8141a783          	lw	a5,-2028(gp) # 997c <alt_errno>
    7920:	000780e7          	jalr	a5 # 2000000 <__alt_data_end>
    7924:	00050793          	mv	a5,a0
    7928:	0080006f          	j	7930 <alt_get_errno+0x2c>
    792c:	8a018793          	addi	a5,gp,-1888 # 9a08 <errno>
}
    7930:	00078513          	mv	a0,a5
    7934:	00c12083          	lw	ra,12(sp)
    7938:	00812403          	lw	s0,8(sp)
    793c:	01010113          	addi	sp,sp,16
    7940:	00008067          	ret

00007944 <_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    7944:	fd010113          	addi	sp,sp,-48
    7948:	02112623          	sw	ra,44(sp)
    794c:	02812423          	sw	s0,40(sp)
    7950:	03010413          	addi	s0,sp,48
    7954:	fca42e23          	sw	a0,-36(s0)
    7958:	fcb42c23          	sw	a1,-40(s0)
    795c:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    7960:	fdc42783          	lw	a5,-36(s0)
    7964:	0207c463          	bltz	a5,798c <_write+0x48>
    7968:	fdc42703          	lw	a4,-36(s0)
    796c:	00070793          	mv	a5,a4
    7970:	00179793          	slli	a5,a5,0x1
    7974:	00e787b3          	add	a5,a5,a4
    7978:	00279793          	slli	a5,a5,0x2
    797c:	00009737          	lui	a4,0x9
    7980:	fb870713          	addi	a4,a4,-72 # 8fb8 <alt_fd_list>
    7984:	00e787b3          	add	a5,a5,a4
    7988:	0080006f          	j	7990 <_write+0x4c>
    798c:	00000793          	li	a5,0
    7990:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    7994:	fe842783          	lw	a5,-24(s0)
    7998:	08078463          	beqz	a5,7a20 <_write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    799c:	fe842783          	lw	a5,-24(s0)
    79a0:	0087a783          	lw	a5,8(a5)
    79a4:	0037f793          	andi	a5,a5,3
    79a8:	06078263          	beqz	a5,7a0c <_write+0xc8>
    79ac:	fe842783          	lw	a5,-24(s0)
    79b0:	0007a783          	lw	a5,0(a5)
    79b4:	0187a783          	lw	a5,24(a5)
    79b8:	04078a63          	beqz	a5,7a0c <_write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    79bc:	fe842783          	lw	a5,-24(s0)
    79c0:	0007a783          	lw	a5,0(a5)
    79c4:	0187a783          	lw	a5,24(a5)
    79c8:	fd442703          	lw	a4,-44(s0)
    79cc:	00070613          	mv	a2,a4
    79d0:	fd842583          	lw	a1,-40(s0)
    79d4:	fe842503          	lw	a0,-24(s0)
    79d8:	000780e7          	jalr	a5
    79dc:	fea42623          	sw	a0,-20(s0)
    79e0:	fec42783          	lw	a5,-20(s0)
    79e4:	0207d063          	bgez	a5,7a04 <_write+0xc0>
      {
        ALT_ERRNO = -rval;
    79e8:	f1dff0ef          	jal	ra,7904 <alt_get_errno>
    79ec:	00050713          	mv	a4,a0
    79f0:	fec42783          	lw	a5,-20(s0)
    79f4:	40f007b3          	neg	a5,a5
    79f8:	00f72023          	sw	a5,0(a4)
        return -1;
    79fc:	fff00793          	li	a5,-1
    7a00:	0340006f          	j	7a34 <_write+0xf0>
      }
      return rval;
    7a04:	fec42783          	lw	a5,-20(s0)
    7a08:	02c0006f          	j	7a34 <_write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    7a0c:	ef9ff0ef          	jal	ra,7904 <alt_get_errno>
    7a10:	00050713          	mv	a4,a0
    7a14:	00d00793          	li	a5,13
    7a18:	00f72023          	sw	a5,0(a4)
    7a1c:	0140006f          	j	7a30 <_write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    7a20:	ee5ff0ef          	jal	ra,7904 <alt_get_errno>
    7a24:	00050713          	mv	a4,a0
    7a28:	05100793          	li	a5,81
    7a2c:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    7a30:	fff00793          	li	a5,-1
}
    7a34:	00078513          	mv	a0,a5
    7a38:	02c12083          	lw	ra,44(sp)
    7a3c:	02812403          	lw	s0,40(sp)
    7a40:	03010113          	addi	sp,sp,48
    7a44:	00008067          	ret

00007a48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    7a48:	fd010113          	addi	sp,sp,-48
    7a4c:	02812623          	sw	s0,44(sp)
    7a50:	03010413          	addi	s0,sp,48
    7a54:	fca42e23          	sw	a0,-36(s0)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
    7a58:	0000a7b7          	lui	a5,0xa
    7a5c:	96878793          	addi	a5,a5,-1688 # 9968 <alt_fs_list>
    7a60:	0007a783          	lw	a5,0(a5)
    7a64:	fef42223          	sw	a5,-28(s0)
    alt_32   len=0;
    7a68:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    7a6c:	3e800793          	li	a5,1000
    7a70:	fef42623          	sw	a5,-20(s0)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
    7a74:	0ec0006f          	j	7b60 <alt_find_file+0x118>
    {
        len=0;
    7a78:	fe042423          	sw	zero,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    7a7c:	0bc0006f          	j	7b38 <alt_find_file+0xf0>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
    7a80:	fe442783          	lw	a5,-28(s0)
    7a84:	0087a703          	lw	a4,8(a5)
    7a88:	fe842783          	lw	a5,-24(s0)
    7a8c:	00f707b3          	add	a5,a4,a5
    7a90:	0007c703          	lbu	a4,0(a5)
    7a94:	02f00793          	li	a5,47
    7a98:	02f71063          	bne	a4,a5,7ab8 <alt_find_file+0x70>
    7a9c:	fe442783          	lw	a5,-28(s0)
    7aa0:	0087a703          	lw	a4,8(a5)
    7aa4:	fe842783          	lw	a5,-24(s0)
    7aa8:	00178793          	addi	a5,a5,1
    7aac:	00f707b3          	add	a5,a4,a5
    7ab0:	0007c783          	lbu	a5,0(a5)
    7ab4:	00078e63          	beqz	a5,7ad0 <alt_find_file+0x88>
    7ab8:	fe442783          	lw	a5,-28(s0)
    7abc:	0087a703          	lw	a4,8(a5)
    7ac0:	fe842783          	lw	a5,-24(s0)
    7ac4:	00f707b3          	add	a5,a4,a5
    7ac8:	0007c783          	lbu	a5,0(a5)
    7acc:	02079c63          	bnez	a5,7b04 <alt_find_file+0xbc>
            { 
                if ((name[len]== '/') || (name[len] == 0))
    7ad0:	fe842783          	lw	a5,-24(s0)
    7ad4:	fdc42703          	lw	a4,-36(s0)
    7ad8:	00f707b3          	add	a5,a4,a5
    7adc:	0007c703          	lbu	a4,0(a5)
    7ae0:	02f00793          	li	a5,47
    7ae4:	00f70c63          	beq	a4,a5,7afc <alt_find_file+0xb4>
    7ae8:	fe842783          	lw	a5,-24(s0)
    7aec:	fdc42703          	lw	a4,-36(s0)
    7af0:	00f707b3          	add	a5,a4,a5
    7af4:	0007c783          	lbu	a5,0(a5)
    7af8:	04079863          	bnez	a5,7b48 <alt_find_file+0x100>
                {
                    return next;
    7afc:	fe442783          	lw	a5,-28(s0)
    7b00:	0740006f          	j	7b74 <alt_find_file+0x12c>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
    7b04:	fe442783          	lw	a5,-28(s0)
    7b08:	0087a703          	lw	a4,8(a5)
    7b0c:	fe842783          	lw	a5,-24(s0)
    7b10:	00f707b3          	add	a5,a4,a5
    7b14:	0007c703          	lbu	a4,0(a5)
    7b18:	fe842783          	lw	a5,-24(s0)
    7b1c:	fdc42683          	lw	a3,-36(s0)
    7b20:	00f687b3          	add	a5,a3,a5
    7b24:	0007c783          	lbu	a5,0(a5)
    7b28:	02f71463          	bne	a4,a5,7b50 <alt_find_file+0x108>
            len++;
    7b2c:	fe842783          	lw	a5,-24(s0)
    7b30:	00178793          	addi	a5,a5,1
    7b34:	fef42423          	sw	a5,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    7b38:	fe842703          	lw	a4,-24(s0)
    7b3c:	fec42783          	lw	a5,-20(s0)
    7b40:	f4f740e3          	blt	a4,a5,7a80 <alt_find_file+0x38>
    7b44:	0100006f          	j	7b54 <alt_find_file+0x10c>
                break;
    7b48:	00000013          	nop
    7b4c:	0080006f          	j	7b54 <alt_find_file+0x10c>
            if (next->name[len]!=name[len]) { break; }
    7b50:	00000013          	nop
        }  
        
        next = (alt_dev*) next->llist.next;
    7b54:	fe442783          	lw	a5,-28(s0)
    7b58:	0007a783          	lw	a5,0(a5)
    7b5c:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) &alt_fs_list)
    7b60:	fe442703          	lw	a4,-28(s0)
    7b64:	0000a7b7          	lui	a5,0xa
    7b68:	96878793          	addi	a5,a5,-1688 # 9968 <alt_fs_list>
    7b6c:	f0f716e3          	bne	a4,a5,7a78 <alt_find_file+0x30>
    }
  
    /* No match found */
  
    return NULL;     
    7b70:	00000793          	li	a5,0
}
    7b74:	00078513          	mv	a0,a5
    7b78:	02c12403          	lw	s0,44(sp)
    7b7c:	03010113          	addi	sp,sp,48
    7b80:	00008067          	ret

00007b84 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    7b84:	fd010113          	addi	sp,sp,-48
    7b88:	02812623          	sw	s0,44(sp)
    7b8c:	03010413          	addi	s0,sp,48
    7b90:	fca42e23          	sw	a0,-36(s0)
  alt_32 i;
  int rc = -EMFILE;
    7b94:	fe800793          	li	a5,-24
    7b98:	fef42623          	sw	a5,-20(s0)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    7b9c:	fe042423          	sw	zero,-24(s0)
    7ba0:	0800006f          	j	7c20 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    7ba4:	000097b7          	lui	a5,0x9
    7ba8:	fb878693          	addi	a3,a5,-72 # 8fb8 <alt_fd_list>
    7bac:	fe842703          	lw	a4,-24(s0)
    7bb0:	00070793          	mv	a5,a4
    7bb4:	00179793          	slli	a5,a5,0x1
    7bb8:	00e787b3          	add	a5,a5,a4
    7bbc:	00279793          	slli	a5,a5,0x2
    7bc0:	00f687b3          	add	a5,a3,a5
    7bc4:	0007a783          	lw	a5,0(a5)
    7bc8:	04079663          	bnez	a5,7c14 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    7bcc:	000097b7          	lui	a5,0x9
    7bd0:	fb878693          	addi	a3,a5,-72 # 8fb8 <alt_fd_list>
    7bd4:	fe842703          	lw	a4,-24(s0)
    7bd8:	00070793          	mv	a5,a4
    7bdc:	00179793          	slli	a5,a5,0x1
    7be0:	00e787b3          	add	a5,a5,a4
    7be4:	00279793          	slli	a5,a5,0x2
    7be8:	00f687b3          	add	a5,a3,a5
    7bec:	fdc42703          	lw	a4,-36(s0)
    7bf0:	00e7a023          	sw	a4,0(a5)
      if (i > alt_max_fd)
    7bf4:	8101a783          	lw	a5,-2032(gp) # 9978 <alt_max_fd>
    7bf8:	fe842703          	lw	a4,-24(s0)
    7bfc:	00e7d663          	bge	a5,a4,7c08 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    7c00:	fe842703          	lw	a4,-24(s0)
    7c04:	80e1a823          	sw	a4,-2032(gp) # 9978 <alt_max_fd>
      }
      rc = i;
    7c08:	fe842783          	lw	a5,-24(s0)
    7c0c:	fef42623          	sw	a5,-20(s0)
      goto alt_get_fd_exit;
    7c10:	0200006f          	j	7c30 <alt_get_fd+0xac>
  for (i = 0; i < ALT_MAX_FD; i++)
    7c14:	fe842783          	lw	a5,-24(s0)
    7c18:	00178793          	addi	a5,a5,1
    7c1c:	fef42423          	sw	a5,-24(s0)
    7c20:	fe842703          	lw	a4,-24(s0)
    7c24:	01f00793          	li	a5,31
    7c28:	f6e7dee3          	bge	a5,a4,7ba4 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    7c2c:	00000013          	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    7c30:	fec42783          	lw	a5,-20(s0)
}
    7c34:	00078513          	mv	a0,a5
    7c38:	02c12403          	lw	s0,44(sp)
    7c3c:	03010113          	addi	sp,sp,48
    7c40:	00008067          	ret

00007c44 <fstat>:
    7c44:	00058613          	mv	a2,a1
    7c48:	00050593          	mv	a1,a0
    7c4c:	8281a503          	lw	a0,-2008(gp) # 9990 <_impure_ptr>
    7c50:	8a0ff06f          	j	6cf0 <_fstat_r>
    7c54:	549c                	.2byte	0x549c
    7c56:	0000                	.2byte	0x0
    7c58:	4fa4                	.2byte	0x4fa4
	...
